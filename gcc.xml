<?xml version="1.0"?>
<!DOCTYPE texinfo PUBLIC "-//GNU//DTD TexinfoML V5.0//EN" "http://www.gnu.org/software/texinfo/dtd/5.0/texinfo.dtd">
<texinfo xml:lang="en">
<filename file="gcc.xml"></filename>
<preamble>\input texinfo  @c -*-texinfo-*-
</preamble><!-- c %**start of header -->
<setfilename file="gcc.info" spaces=" ">gcc.info</setfilename>
<!-- c INTERNALS is used by md.texi to determine whether to include the -->
<!-- c whole of that file, in the internals manual, or only the part -->
<!-- c dealing with constraints, in the user manual. -->
<clear name="INTERNALS" line=" INTERNALS"></clear>

<!-- c NOTE: checks/things to do: -->
<!-- c -->
<!-- c -have bob do a search in all seven files for "mew" (ideally -mew, -->
<!-- c  but i may have forgotten the occasional "-"..). -->
<!-- c     Just checked... all have `-'!  Bob 22Jul96 -->
<!-- c     Use this to search:   grep -n '\-\-mew' *.texi -->
<!-- c -item/itemx, text after all (sub/sub)section titles, etc.. -->
<!-- c -consider putting the lists of options on pp 17-> etc in columns or -->
<!-- c  some such. -->
<!-- c -overfulls.  do a search for "mew" in the files, and you will see -->
<!-- c   overfulls that i noted but could not deal with. -->
<!-- c -have to add text:  beginning of chapter 8 -->

<!-- c -->
<!-- c anything else?                       -mew 10feb93 -->

<!-- c Copyright (C) 2001-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->

<!-- c Version number and development mode. -->
<!-- c version-GCC is @set to the base GCC version number. -->
<!-- c DEVELOPMENT is @set for an in-development version, @clear for a -->
<!-- c release version (corresponding to ``experimental''/anything else -->
<!-- c in gcc/DEV-PHASE). -->

<set name="version-GCC" line=" version-GCC 6.0.0">6.0.0</set>
<set name="DEVELOPMENT" line=" DEVELOPMENT"></set>
<set name="srcdir" line=" srcdir /home/david/coding-3/gcc-git-pr67192/build/gcc/../../src/gcc">/home/david/coding-3/gcc-git-pr67192/build/gcc/../../src/gcc</set>
<set name="VERSION_PACKAGE" line=" VERSION_PACKAGE (GCC) ">(GCC)</set>
<set name="BUGURL" line=" BUGURL @uref{http://gcc.gnu.org/bugs.html}">@uref{http://gcc.gnu.org/bugs.html}</set>

<!-- c Common macros to support generating man pages: -->

<macro name="gcctabopt" line=" gcctabopt{body}"><formalarg>body</formalarg>@code{\body\}
</macro>
<macro name="gccoptlist" line=" gccoptlist{body}"><formalarg>body</formalarg>@smallexample
\body\
@end smallexample
</macro>
<!-- c Makeinfo handles the above macro OK, TeX needs manual line breaks; -->
<!-- c they get lost at some point in handling the macro.  But if @macro is -->
<!-- c used here rather than @alias, it produces double line breaks. -->
<macro name="gol" line=" gol"></macro>

<!-- c For FSF printing, define FSFPRINT.  Also update the ISBN and last -->
<!-- c printing date for the manual being printed. -->
<!-- c @set FSFPRINT -->

<!-- c Macro to generate a "For the N.N.N version" subtitle on the title -->
<!-- c page of TeX documentation.  This macro should be used in the -->
<!-- c titlepage environment after the title and any other subtitles have -->
<!-- c been placed, and before any authors are placed. -->
<macro name="versionsubtitle" line=" versionsubtitle">@ifclear DEVELOPMENT
@subtitle For @sc{gcc} version @value{version-GCC}
@end ifclear
@ifset DEVELOPMENT
@subtitle For @sc{gcc} version @value{version-GCC} (pre-release)
@end ifset
@ifset VERSION_PACKAGE
@sp 1
@subtitle @value{VERSION_PACKAGE}
@end ifset
@c Even if there are no authors, the second titlepage line should be
@c forced to the bottom of the page.
@vskip 0pt plus 1filll
</macro>

<settitle spaces=" ">Using the GNU Compiler Collection (GCC)</settitle>

<!-- c Create a separate index for command line options. -->
<defcodeindex value="op" line=" op"></defcodeindex>
<!-- c Merge the standard indexes into a single one. -->
<syncodeindex from="fn" to="cp" line=" fn cp"></syncodeindex>
<syncodeindex from="vr" to="cp" line=" vr cp"></syncodeindex>
<syncodeindex from="ky" to="cp" line=" ky cp"></syncodeindex>
<syncodeindex from="pg" to="cp" line=" pg cp"></syncodeindex>
<syncodeindex from="tp" to="cp" line=" tp cp"></syncodeindex>

<paragraphindent value="1" line=" 1"></paragraphindent>

<!-- c %**end of header -->

<copying endspaces=" ">
<para>Copyright &copyright; 1988-2015 Free Software Foundation, Inc.
</para>
<para>Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being &textldquo;Funding Free Software&textrdquo;, the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
&textldquo;GNU Free Documentation License&textrdquo;.
</para>
<para>(a) The FSF&textrsquo;s Front-Cover Text is:
</para>
     <para>A GNU Manual
</para>
<para>(b) The FSF&textrsquo;s Back-Cover Text is:
</para>
     <para>You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
</para></copying>
<dircategory spaces=" ">Software development</dircategory>
<direntry endspaces=" ">
<menuentry leadingtext="* "><menutitle separator=": ">gcc</menutitle><menunode separator=".                  ">(gcc)</menunode><menudescription><pre xml:space="preserve">The GNU Compiler Collection.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">g++</menutitle><menunode separator=".                  ">(gcc)</menunode><menudescription><pre xml:space="preserve">The GNU C++ compiler.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">gcov</menutitle><menunode separator=".            ">(gcc) Gcov</menunode><menudescription><pre xml:space="preserve"><command>gcov</command>&textmdash;a test coverage program.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">gcov-tool</menutitle><menunode separator=".  ">(gcc) Gcov-tool</menunode><menudescription><pre xml:space="preserve"><command>gcov-tool</command>&textmdash;an offline gcda profile processing program.
</pre></menudescription></menuentry></direntry>
<para>This file documents the use of the GNU compilers.
</para><sp value="1" line=" 1"></sp>
<insertcopying></insertcopying>
<sp value="1" line=" 1"></sp>

<setchapternewpage line=" odd"></setchapternewpage>
<titlepage endspaces=" ">
<title spaces=" ">Using the GNU Compiler Collection</title>
<subtitle spaces=" ">For <sc>gcc</sc> version 6.0.0 (pre-release)</subtitle>
<sp value="1" line=" 1"></sp>
<subtitle spaces=" ">(GCC)</subtitle>
<!-- c Even if there are no authors, the second titlepage line should be -->
<!-- c forced to the bottom of the page. -->
<vskip> 0pt plus 1filll</vskip>
<author spaces=" ">Richard M. Stallman and the <sc>GCC</sc> Developer Community</author>
<page></page>
<vskip> 0pt plus 1filll</vskip>
<para>Published by:
</para><multitable spaces=" " endspaces=" "><columnfractions line=" 0.5 0.5"><columnfraction value="0.5"></columnfraction><columnfraction value="0.5"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para>GNU Press
</para></entry><entry command="tab" spaces=" "><para>Website: <uref><urefurl>http://www.gnupress.org</urefurl></uref>
</para></entry></row><row><entry command="item" spaces=" "><para>a division of the
</para></entry><entry command="tab" spaces=" "><para>General: <email><emailaddress>press&arobase;gnu.org</emailaddress></email>
</para></entry></row><row><entry command="item" spaces=" "><para>Free Software Foundation
</para></entry><entry command="tab" spaces=" "><para>Orders:  <email><emailaddress>sales&arobase;gnu.org</emailaddress></email>
</para></entry></row><row><entry command="item" spaces=" "><para>51 Franklin Street, Fifth Floor
</para></entry><entry command="tab" spaces=" "><para>Tel 617-542-5942
</para></entry></row><row><entry command="item" spaces=" "><para>Boston, MA 02110-1301 USA
</para></entry><entry command="tab" spaces=" "><para>Fax 617-542-2652
</para></entry></row></tbody></multitable>
<sp value="2" line=" 2"></sp>
<para>Last printed October 2003 for GCC 3.3.1.&linebreak;
Printed copies are available for $45 each.
</para><sp value="1" line=" 1"></sp>
<insertcopying></insertcopying>
</titlepage>
<summarycontents></summarycontents>
<contents></contents>
<page></page>

<node name="Top" spaces=" "><nodename>Top</nodename><nodenext spaces=" ">G++ and GCC</nodenext><nodeprev></nodeprev><nodeup spaces=" ">(DIR)</nodeup></node>
<top spaces=" "><sectiontitle>Introduction</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="1">introduction</indexterm></cindex>

<para>This manual documents how to use the GNU compilers,
as well as their features and incompatibilities, and how to report
bugs.  It corresponds to the compilers
(GCC)
version 6.0.0.
The internals of the GNU compilers, including how to port them to new
targets and some information about how to write front ends for new
languages, are documented in a separate manual.  <xref label="Top" manual="gccint"><xrefnodename>Top</xrefnodename><xrefprinteddesc spaces="\n">Introduction</xrefprinteddesc><xrefinfofile spaces=" ">gccint</xrefinfofile><xrefprintedname spaces=" ">GNU Compiler Collection (GCC) Internals</xrefprintedname></xref>.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::     ">G++ and GCC</menunode><menudescription><pre xml:space="preserve">You can compile C or C++ programs.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">Standards</menunode><menudescription><pre xml:space="preserve">Language standards supported by GCC.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Invoking GCC</menunode><menudescription><pre xml:space="preserve">Command options supported by <samp>gcc</samp>.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">C Implementation</menunode><menudescription><pre xml:space="preserve">How GCC implements the ISO C specification.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">C++ Implementation</menunode><menudescription><pre xml:space="preserve">How GCC implements the ISO C++ specification.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">C Extensions</menunode><menudescription><pre xml:space="preserve">GNU extensions to the C language family.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">C++ Extensions</menunode><menudescription><pre xml:space="preserve">GNU extensions to the C++ language.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Objective-C</menunode><menudescription><pre xml:space="preserve">GNU Objective-C runtime features.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Compatibility</menunode><menudescription><pre xml:space="preserve">Binary Compatibility
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">Gcov</menunode><menudescription><pre xml:space="preserve"><command>gcov</command>&textmdash;a test coverage program.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">Gcov-tool</menunode><menudescription><pre xml:space="preserve"><command>gcov-tool</command>&textmdash;an offline gcda profile processing program.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Trouble</menunode><menudescription><pre xml:space="preserve">If you have trouble using GCC.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">Bugs</menunode><menudescription><pre xml:space="preserve">How, why and where to report bugs.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Service</menunode><menudescription><pre xml:space="preserve">How To Get Help with GCC
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Contributing</menunode><menudescription><pre xml:space="preserve">How to contribute to testing and developing GCC.
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
</pre></menucomment><menuentry leadingtext="* "><menunode separator="::         ">Funding</menunode><menudescription><pre xml:space="preserve">How to help assure funding for free software.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">GNU Project</menunode><menudescription><pre xml:space="preserve">The GNU Project and GNU/Linux.
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
</pre></menucomment><menuentry leadingtext="* "><menunode separator="::         ">Copying</menunode><menudescription><pre xml:space="preserve">GNU General Public License says
                    how you can copy and share GCC.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">GNU Free Documentation License</menunode><menudescription><pre xml:space="preserve">How you can copy and share this manual.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Contributors</menunode><menudescription><pre xml:space="preserve">People who have contributed to GCC.
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
</pre></menucomment><menuentry leadingtext="* "><menunode separator="::    ">Option Index</menunode><menudescription><pre xml:space="preserve">Index to command line options.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Keyword Index</menunode><menudescription><pre xml:space="preserve">Index of concepts and symbol names.
</pre></menudescription></menuentry></menu>

<!-- c Copyright (C) 1988-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->

</top>
<node name="G_002b_002b-and-GCC" spaces=" "><nodename>G++ and GCC</nodename><nodenext automatic="on">Standards</nodenext><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Programming Languages Supported by GCC</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="2">GCC</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="3">GNU Compiler Collection</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="4">GNU C Compiler</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="5">Ada</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="6">Fortran</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="7">Go</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="8">Java</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="9">Objective-C</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="10">Objective-C++</indexterm></cindex>
<para>GCC stands for &textldquo;GNU Compiler Collection&textrdquo;.  GCC is an integrated
distribution of compilers for several major programming languages.  These
languages currently include C, C++, Objective-C, Objective-C++, Java,
Fortran, Ada, and Go.
</para>
<para>The abbreviation <dfn>GCC</dfn> has multiple meanings in common use.  The
current official meaning is &textldquo;GNU Compiler Collection&textrdquo;, which refers
generically to the complete suite of tools.  The name historically stood
for &textldquo;GNU C Compiler&textrdquo;, and this usage is still common when the emphasis
is on compiling C programs.  Finally, the name is also used when speaking
of the <dfn>language-independent</dfn> component of GCC: code shared among the
compilers for all supported languages.
</para>
<para>The language-independent component of GCC includes the majority of the
optimizers, as well as the &textldquo;back ends&textrdquo; that generate machine code for
various processors.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="11">COBOL</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="12">Mercury</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="13">Pascal</indexterm></cindex>
<para>The part of a compiler that is specific to a particular language is
called the &textldquo;front end&textrdquo;.  In addition to the front ends that are
integrated components of GCC, there are several other front ends that
are maintained separately.  These support languages such as Pascal,
Mercury, and COBOL&eosperiod;  To use these, they must be built together with
GCC proper.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="14">C++</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="15">G++</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="16">Ada</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="17">GNAT</indexterm></cindex>
<para>Most of the compilers for languages other than C have their own names.
The C++ compiler is G++, the Ada compiler is GNAT, and so on.  When we
talk about compiling one of those languages, we might refer to that
compiler by its own name, or as GCC&eosperiod;  Either is correct.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="18">compiler compared to C++ preprocessor</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="19">intermediate C version, nonexistent</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="20">C intermediate output, nonexistent</indexterm></cindex>
<para>Historically, compilers for many languages, including C++ and Fortran,
have been implemented as &textldquo;preprocessors&textrdquo; which emit another high
level language such as C&eosperiod;  None of the compilers included in GCC are
implemented this way; they all generate machine code directly.  This
sort of preprocessor should not be confused with the <dfn>C
preprocessor</dfn>, which is an integral feature of the C, C++, Objective-C
and Objective-C++ languages.
<!-- c Copyright (C) 2000-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->
</para>
</chapter>
<node name="Standards" spaces=" "><nodename>Standards</nodename><nodenext automatic="on">Invoking GCC</nodenext><nodeprev automatic="on">G++ and GCC</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Language Standards Supported by GCC</sectiontitle>

<para>For each language compiled by GCC for which there is a standard, GCC
attempts to follow one or more versions of that standard, possibly
with some exceptions, and possibly with some extensions.
</para>
<section spaces=" "><sectiontitle>C Language</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="21">C standard</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="22">C standards</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="23">ANSI C standard</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="24">ANSI C</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="25">ANSI C89</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="26">C89</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="27">ANSI X3.159-1989</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="28">X3.159-1989</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="29">ISO C standard</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="30">ISO C</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="31">ISO C90</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="32">ISO/IEC 9899</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="33">ISO 9899</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="34">C90</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="35">ISO C94</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="36">C94</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="37">ISO C95</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="38">C95</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="39">ISO C99</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="40">C99</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="41">ISO C9X</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="42">C9X</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="43">ISO C11</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="44">C11</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="45">ISO C1X</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="46">C1X</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="47">Technical Corrigenda</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="48">TC1</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="49">Technical Corrigendum 1</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="50">TC2</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="51">Technical Corrigendum 2</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="52">TC3</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="53">Technical Corrigendum 3</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="54">AMD1</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="55">freestanding implementation</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="56">freestanding environment</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="57">hosted implementation</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="58">hosted environment</indexterm></cindex>
<findex index="fn" spaces=" "><indexterm index="fn" number="1" mergedindex="cp">__STDC_HOSTED__</indexterm></findex>

<para>GCC supports three versions of the C standard, although support for
the most recent version is not yet complete.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1" incode="1">std</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2" incode="1">ansi</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="3" incode="1">pedantic</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="4" incode="1">pedantic-errors</indexterm></indexcommand>
<para>The original ANSI C standard (X3.159-1989) was ratified in 1989 and
published in 1990.  This standard was ratified as an ISO standard
(ISO/IEC 9899:1990) later in 1990.  There were no technical
differences between these publications, although the sections of the
ANSI standard were renumbered and became clauses in the ISO standard.
This standard, in both its forms, is commonly known as <dfn>C89</dfn>, or
occasionally as <dfn>C90</dfn>, from the dates of ratification.  The ANSI
standard, but not the ISO standard, also came with a Rationale
document.  To select this standard in GCC, use one of the options
<option>-ansi</option>, <option>-std=c90</option> or <option>-std=iso9899:1990</option>; to obtain
all the diagnostics required by the standard, you should also specify
<option>-pedantic</option> (or <option>-pedantic-errors</option> if you want them to be
errors rather than warnings).  <xref label="C-Dialect-Options"><xrefnodename>C Dialect Options</xrefnodename><xrefprinteddesc>Options
Controlling C Dialect</xrefprinteddesc></xref>.
</para>
<para>Errors in the 1990 ISO C standard were corrected in two Technical
Corrigenda published in 1994 and 1996.  GCC does not support the
uncorrected version.
</para>
<para>An amendment to the 1990 standard was published in 1995.  This
amendment added digraphs and <code>__STDC_VERSION__</code> to the language,
but otherwise concerned the library.  This amendment is commonly known
as <dfn>AMD1</dfn>; the amended standard is sometimes known as <dfn>C94</dfn> or
<dfn>C95</dfn>.  To select this standard in GCC, use the option
<option>-std=iso9899:199409</option> (with, as for other standard versions,
<option>-pedantic</option> to receive all required diagnostics).
</para>
<para>A new edition of the ISO C standard was published in 1999 as ISO/IEC
9899:1999, and is commonly known as <dfn>C99</dfn>.  GCC has substantially
complete support for this standard version; see
<uref><urefurl>http://gcc.gnu.org/c99status.html</urefurl></uref> for details.  To select this
standard, use <option>-std=c99</option> or <option>-std=iso9899:1999</option>.  (While in
development, drafts of this standard version were referred to as
<dfn>C9X</dfn>.)
</para>
<para>Errors in the 1999 ISO C standard were corrected in three Technical
Corrigenda published in 2001, 2004 and 2007.  GCC does not support the
uncorrected version.
</para>
<para>A fourth version of the C standard, known as <dfn>C11</dfn>, was published
in 2011 as ISO/IEC 9899:2011.  GCC has substantially complete support
for this standard, enabled with <option>-std=c11</option> or
<option>-std=iso9899:2011</option>.  (While in development, drafts of this
standard version were referred to as <dfn>C1X</dfn>.)
</para>
<para>By default, GCC provides some extensions to the C language that on
rare occasions conflict with the C standard.  <xref label="C-Extensions"><xrefnodename>C
Extensions</xrefnodename><xrefprinteddesc>Extensions to the C Language Family</xrefprinteddesc></xref>.  Use of the
<option>-std</option> options listed above will disable these extensions where
they conflict with the C standard version selected.  You may also
select an extended version of the C language explicitly with
<option>-std=gnu90</option> (for C90 with GNU extensions), <option>-std=gnu99</option>
(for C99 with GNU extensions) or <option>-std=gnu11</option> (for C11 with GNU
extensions).  The default, if no C language dialect options are given,
is <option>-std=gnu11</option>.  Some features that are part of the C99 standard
are accepted as extensions in C90 mode, and some features that are part
of the C11 standard are accepted as extensions in C90 and C99 modes.
</para>
<para>The ISO C standard defines (in clause 4) two classes of conforming
implementation.  A <dfn>conforming hosted implementation</dfn> supports the
whole standard including all the library facilities; a <dfn>conforming
freestanding implementation</dfn> is only required to provide certain
library facilities: those in <code>&lt;float.h&gt;</code>, <code>&lt;limits.h&gt;</code>,
<code>&lt;stdarg.h&gt;</code>, and <code>&lt;stddef.h&gt;</code>; since AMD1, also those in
<code>&lt;iso646.h&gt;</code>; since C99, also those in <code>&lt;stdbool.h&gt;</code> and
<code>&lt;stdint.h&gt;</code>; and since C11, also those in <code>&lt;stdalign.h&gt;</code>
and <code>&lt;stdnoreturn.h&gt;</code>.  In addition, complex types, added in C99, are not
required for freestanding implementations.  The standard also defines
two environments for programs, a <dfn>freestanding environment</dfn>,
required of all implementations and which may not have library
facilities beyond those required of freestanding implementations,
where the handling of program startup and termination are
implementation-defined, and a <dfn>hosted environment</dfn>, which is not
required, in which all the library facilities are provided and startup
is through a function <code>int main (void)</code> or <code>int main (int,
char *[])</code>.  An OS kernel would be a freestanding environment; a
program using the facilities of an operating system would normally be
in a hosted implementation.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="5" incode="1">ffreestanding</indexterm></indexcommand>
<para>GCC aims towards being usable as a conforming freestanding
implementation, or as the compiler for a conforming hosted
implementation.  By default, it will act as the compiler for a hosted
implementation, defining <code>__STDC_HOSTED__</code> as <code>1</code> and
presuming that when the names of ISO C functions are used, they have
the semantics defined in the standard.  To make it act as a conforming
freestanding implementation for a freestanding environment, use the
option <option>-ffreestanding</option>; it will then define
<code>__STDC_HOSTED__</code> to <code>0</code> and not make assumptions about the
meanings of function names from the standard library, with exceptions
noted below.  To build an OS kernel, you may well still need to make
your own arrangements for linking and startup.
<xref label="C-Dialect-Options"><xrefnodename>C Dialect Options</xrefnodename><xrefprinteddesc>Options Controlling C Dialect</xrefprinteddesc></xref>.
</para>
<para>GCC does not provide the library facilities required only of hosted
implementations, nor yet all the facilities required by C99 of
freestanding implementations on all platforms; to use the facilities of a hosted
environment, you will need to find them elsewhere (for example, in the
GNU C library).  <xref label="Standard-Libraries"><xrefnodename>Standard Libraries</xrefnodename><xrefprinteddesc>Standard Libraries</xrefprinteddesc></xref>.
</para>
<para>Most of the compiler support routines used by GCC are present in
<file>libgcc</file>, but there are a few exceptions.  GCC requires the
freestanding environment provide <code>memcpy</code>, <code>memmove</code>,
<code>memset</code> and <code>memcmp</code>.
Finally, if <code>__builtin_trap</code> is used, and the target does
not implement the <code>trap</code> pattern, then GCC will emit a call
to <code>abort</code>.
</para>
<para>For references to Technical Corrigenda, Rationale documents and
information concerning the history of C that is available online, see
<uref><urefurl>http://gcc.gnu.org/readings.html</urefurl></uref>
</para>
</section>
<section spaces=" "><sectiontitle>C++ Language</sectiontitle>

<para>GCC supports the original ISO C++ standard (1998) and contains
experimental support for the second ISO C++ standard (2011).
</para>
<para>The original ISO C++ standard was published as the ISO standard (ISO/IEC
14882:1998) and amended by a Technical Corrigenda published in 2003
(ISO/IEC 14882:2003). These standards are referred to as C++98 and
C++03, respectively. GCC implements the majority of C++98 (<code>export</code>
is a notable exception) and most of the changes in C++03.  To select
this standard in GCC, use one of the options <option>-ansi</option>,
<option>-std=c++98</option>, or <option>-std=c++03</option>; to obtain all the diagnostics
required by the standard, you should also specify <option>-pedantic</option> (or
<option>-pedantic-errors</option> if you want them to be errors rather than
warnings).
</para>
<para>A revised ISO C++ standard was published in 2011 as ISO/IEC
14882:2011, and is referred to as C++11; before its publication it was
commonly referred to as C++0x.  C++11 contains several
changes to the C++ language, most of which have been implemented in an
experimental C++11 mode in GCC&eosperiod;  For information
regarding the C++11 features available in the experimental C++11 mode,
see <uref><urefurl>http://gcc.gnu.org/projects/&slashbreak;cxx0x.html</urefurl></uref>. To select this
standard in GCC, use the option <option>-std=c++11</option>; to obtain all the
diagnostics required by the standard, you should also specify
<option>-pedantic</option> (or <option>-pedantic-errors</option> if you want them to
be errors rather than warnings).
</para>
<para>More information about the C++ standards is available on the ISO C++
committee&textrsquo;s web site at <uref><urefurl>http://www.open-std.org/&slashbreak;jtc1/&slashbreak;sc22/&slashbreak;wg21/</urefurl></uref>.
</para>
<para>By default, GCC provides some extensions to the C++ language; <xref label="C_002b_002b-Dialect-Options"><xrefnodename>C++
Dialect Options</xrefnodename><xrefinfoname>Options Controlling C++ Dialect</xrefinfoname></xref>.  Use of the
<option>-std</option> option listed above will disable these extensions.  You
may also select an extended version of the C++ language explicitly with
<option>-std=gnu++98</option> (for C++98 with GNU extensions) or
<option>-std=gnu++11</option> (for C++11 with GNU extensions).  The default, if
no C++ language dialect options are given, is <option>-std=gnu++98</option>.
</para>
</section>
<section spaces=" "><sectiontitle>Objective-C and Objective-C++ Languages</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="59">Objective-C</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="60">Objective-C++</indexterm></cindex>

<para>GCC supports &textldquo;traditional&textrdquo; Objective-C (also known as &textldquo;Objective-C
1.0&textrdquo;) and contains support for the Objective-C exception and
synchronization syntax.  It has also support for a number of
&textldquo;Objective-C 2.0&textrdquo; language extensions, including properties, fast
enumeration (only for Objective-C), method attributes and the
&arobase;optional and &arobase;required keywords in protocols.  GCC supports
Objective-C++ and features available in Objective-C are also available
in Objective-C++&eosperiod;
</para>
<para>GCC by default uses the GNU Objective-C runtime library, which is part
of GCC and is not the same as the Apple/NeXT Objective-C runtime
library used on Apple systems.  There are a number of differences
documented in this manual.  The options <option>-fgnu-runtime</option> and
<option>-fnext-runtime</option> allow you to switch between producing output
that works with the GNU Objective-C runtime library and output that
works with the Apple/NeXT Objective-C runtime library.
</para>
<para>There is no formal written standard for Objective-C or Objective-C++&eosperiod;
The authoritative manual on traditional Objective-C (1.0) is
&textldquo;Object-Oriented Programming and the Objective-C Language&textrdquo;,
available at a number of web sites:
</para><itemize commandarg="bullet" endspaces=" ">
<listitem><prepend>&bullet;</prepend>
<para><uref><urefurl>http://www.gnustep.org/&slashbreak;resources/&slashbreak;documentation/&slashbreak;ObjectivCBook.pdf</urefurl></uref>
is the original NeXTstep document;
</para></listitem><listitem><prepend>&bullet;</prepend>
<para><uref><urefurl>http://objc.toodarkpark.net</urefurl></uref>
is the same document in another format;
</para></listitem><listitem><prepend>&bullet;</prepend>
<para><uref><urefurl>http://developer.apple.com/&slashbreak;mac/&slashbreak;library/&slashbreak;documentation/&slashbreak;Cocoa/&slashbreak;Conceptual/&slashbreak;ObjectiveC/</urefurl></uref>
has an updated version but make sure you search for &textldquo;Object Oriented Programming and the Objective-C Programming Language 1.0&textrdquo;,
not documentation on the newer &textldquo;Objective-C 2.0&textrdquo; language
</para></listitem></itemize>

<para>The Objective-C exception and synchronization syntax (that is, the
keywords &arobase;try, &arobase;throw, &arobase;catch, &arobase;finally and &arobase;synchronized) is
supported by GCC and is enabled with the option
<option>-fobjc-exceptions</option>.  The syntax is briefly documented in this
manual and in the Objective-C 2.0 manuals from Apple.
</para>
<para>The Objective-C 2.0 language extensions and features are automatically
enabled; they include properties (via the &arobase;property, &arobase;synthesize and
&arobase;dynamic keywords), fast enumeration (not available in
Objective-C++), attributes for methods (such as deprecated, noreturn,
sentinel, format), the unused attribute for method arguments, the
&arobase;package keyword for instance variables and the &arobase;optional and
&arobase;required keywords in protocols.  You can disable all these
Objective-C 2.0 language extensions with the option
<option>-fobjc-std=objc1</option>, which causes the compiler to recognize the
same Objective-C language syntax recognized by GCC 4.0, and to produce
an error if one of the new features is used.
</para>
<para>GCC has currently no support for non-fragile instance variables.
</para>
<para>The authoritative manual on Objective-C 2.0 is available from Apple:
</para><itemize commandarg="bullet" endspaces=" ">
<listitem><prepend>&bullet;</prepend>
<para><uref><urefurl>http://developer.apple.com/&slashbreak;mac/&slashbreak;library/&slashbreak;documentation/&slashbreak;Cocoa/&slashbreak;Conceptual/&slashbreak;ObjectiveC/</urefurl></uref>
</para></listitem></itemize>

<para>For more information concerning the history of Objective-C that is
available online, see <uref><urefurl>http://gcc.gnu.org/readings.html</urefurl></uref>
</para>
</section>
<section spaces=" "><sectiontitle>Go Language</sectiontitle>

<para>As of the GCC 4.7.1 release, GCC supports the Go 1 language standard,
described at <uref><urefurl>http://golang.org/doc/go1.html</urefurl></uref>.
</para>
</section>
<section spaces=" "><sectiontitle>References for Other Languages</sectiontitle>

<para><xref label="Top" manual="gnat_rm"><xrefnodename>Top</xrefnodename><xrefinfoname spaces=" ">GNAT Reference Manual</xrefinfoname><xrefprinteddesc spaces=" ">About This Guide</xrefprinteddesc><xrefinfofile spaces=" ">gnat_rm</xrefinfofile><xrefprintedname spaces="\n">GNAT Reference Manual</xrefprintedname></xref>, for information on standard
conformance and compatibility of the Ada compiler.
</para>
<para><xref label="Standards" manual="gfortran"><xrefnodename>Standards</xrefnodename><xrefprinteddesc>Standards</xrefprinteddesc><xrefinfofile spaces=" ">gfortran</xrefinfofile><xrefprintedname spaces=" ">The GNU Fortran Compiler</xrefprintedname></xref>, for details
of standards supported by GNU Fortran.
</para>
<para><xref label="Compatibility" manual="gcj"><xrefnodename>Compatibility</xrefnodename><xrefprinteddesc>Compatibility with the Java Platform</xrefprinteddesc><xrefinfofile spaces=" ">gcj</xrefinfofile><xrefprintedname spaces=" ">GNU gcj</xrefprintedname></xref>,
for details of compatibility between <command>gcj</command> and the Java Platform.
<!-- c Copyright (C) 1988-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->
</para>
<ignore>
@c man begin INCLUDE
@include gcc-vers.texi
@c man end

@c man begin COPYRIGHT
Copyright @copyright{} 1988-2015 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the gfdl(7) man page.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
@c man end
@c Set file name and title for the man page.
@setfilename gcc
@settitle GNU project C and C++ compiler
@c man begin SYNOPSIS
gcc [@option{-c}|@option{-S}|@option{-E}] [@option{-std=}@var{standard}]
    [@option{-g}] [@option{-pg}] [@option{-O}@var{level}]
    [@option{-W}@var{warn}@dots{}] [@option{-Wpedantic}]
    [@option{-I}@var{dir}@dots{}] [@option{-L}@var{dir}@dots{}]
    [@option{-D}@var{macro}[=@var{defn}]@dots{}] [@option{-U}@var{macro}]
    [@option{-f}@var{option}@dots{}] [@option{-m}@var{machine-option}@dots{}]
    [@option{-o} @var{outfile}] [@@@var{file}] @var{infile}@dots{}

Only the most useful options are listed here; see below for the
remainder.  @command{g++} accepts mostly the same options as @command{gcc}.
@c man end
@c man begin SEEALSO
gpl(7), gfdl(7), fsf-funding(7),
cpp(1), gcov(1), as(1), ld(1), gdb(1), adb(1), dbx(1), sdb(1)
and the Info entries for @file{gcc}, @file{cpp}, @file{as},
@file{ld}, @file{binutils} and @file{gdb}.
@c man end
@c man begin BUGS
For instructions on reporting bugs, see
@w{@value{BUGURL}}.
@c man end
@c man begin AUTHOR
See the Info entry for @command{gcc}, or
@w{@uref{http://gcc.gnu.org/onlinedocs/gcc/Contributors.html}},
for contributors to GCC@.
@c man end
</ignore>

</section>
</chapter>
<node name="Invoking-GCC" spaces=" "><nodename>Invoking GCC</nodename><nodenext automatic="on">C Implementation</nodenext><nodeprev automatic="on">Standards</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>GCC Command Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="61">GCC command options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="62">command options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="63">options, GCC command</indexterm></cindex>

<!-- c man begin DESCRIPTION -->
<para>When you invoke GCC, it normally does preprocessing, compilation,
assembly and linking.  The &textldquo;overall options&textrdquo; allow you to stop this
process at an intermediate stage.  For example, the <option>-c</option> option
says not to run the linker.  Then the output consists of object files
output by the assembler.
</para>
<para>Other options are passed on to one stage of processing.  Some options
control the preprocessor and others the compiler itself.  Yet other
options control the assembler and linker; most of these are not
documented here, since you rarely need to use any of them.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="64">C compilation options</indexterm></cindex>
<para>Most of the command-line options that you can use with GCC are useful
for C programs; when an option is only useful with another language
(usually C++), the explanation says so explicitly.  If the description
for a particular option does not mention a source language, you can use
that option with all supported languages.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="65">C++ compilation options</indexterm></cindex>
<para><xref label="Invoking-G_002b_002b"><xrefnodename>Invoking G++</xrefnodename><xrefprinteddesc>Compiling C++ Programs</xrefprinteddesc></xref>, for a summary of special
options for compiling C++ programs.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="66">grouping options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="67">options, grouping</indexterm></cindex>
<para>The <command>gcc</command> program accepts options and file names as operands.  Many
options have multi-letter names; therefore multiple single-letter options
may <emph>not</emph> be grouped: <option>-dv</option> is very different from <w><samp>-d
-v</samp></w>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="68">order of options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="69">options, order</indexterm></cindex>
<para>You can mix options and other arguments.  For the most part, the order
you use doesn&textrsquo;t matter.  Order does matter when you use several
options of the same kind; for example, if you specify <option>-L</option> more
than once, the directories are searched in the order specified.  Also,
the placement of the <option>-l</option> option is significant.
</para>
<para>Many options have long names starting with <samp>-f</samp> or with
<samp>-W</samp>&textmdash;for example,
<option>-fmove-loop-invariants</option>, <option>-Wformat</option> and so on.  Most of
these have both positive and negative forms; the negative form of
<option>-ffoo</option> is <option>-fno-foo</option>.  This manual documents
only one of these two forms, whichever one is not the default.
</para>
<!-- c man end -->

<para><xref label="Option-Index"><xrefnodename>Option Index</xrefnodename></xref>, for an index to GCC&textrsquo;s options.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::      ">Option Summary</menunode><menudescription><pre xml:space="preserve">Brief list of all options, without explanations.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Overall Options</menunode><menudescription><pre xml:space="preserve">Controlling the kind of output:
                        an executable, object files, assembler files,
                        or preprocessed source.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Invoking G++</menunode><menudescription><pre xml:space="preserve">Compiling C++ programs.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">C Dialect Options</menunode><menudescription><pre xml:space="preserve">Controlling the variant of C language compiled.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">C++ Dialect Options</menunode><menudescription><pre xml:space="preserve">Variations on C++.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Objective-C and Objective-C++ Dialect Options</menunode><menudescription><pre xml:space="preserve">Variations on Objective-C
                        and Objective-C++.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Language Independent Options</menunode><menudescription><pre xml:space="preserve">Controlling how diagnostics should be
                        formatted.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Warning Options</menunode><menudescription><pre xml:space="preserve">How picky should the compiler be?
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Debugging Options</menunode><menudescription><pre xml:space="preserve">Symbol tables, measurements, and debugging dumps.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Optimize Options</menunode><menudescription><pre xml:space="preserve">How much optimization?
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Preprocessor Options</menunode><menudescription><pre xml:space="preserve">Controlling header files and macro definitions.
                         Also, getting dependency information for Make.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Assembler Options</menunode><menudescription><pre xml:space="preserve">Passing options to the assembler.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Link Options</menunode><menudescription><pre xml:space="preserve">Specifying libraries and so on.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Directory Options</menunode><menudescription><pre xml:space="preserve">Where to find header files and libraries.
                        Where to find the compiler executable files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">Spec Files</menunode><menudescription><pre xml:space="preserve">How to pass switches to sub-processes.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Target Options</menunode><menudescription><pre xml:space="preserve">Running a cross-compiler, or an old version of GCC.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Submodel Options</menunode><menudescription><pre xml:space="preserve">Specifying minor hardware or convention variations,
                        such as 68010 vs 68020.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Code Gen Options</menunode><menudescription><pre xml:space="preserve">Specifying conventions for function calls, data layout
                        and register usage.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Environment Variables</menunode><menudescription><pre xml:space="preserve">Env vars that affect GCC.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Precompiled Headers</menunode><menudescription><pre xml:space="preserve">Compiling a header once, and using it many times.
</pre></menudescription></menuentry></menu>

<!-- c man begin OPTIONS -->

<node name="Option-Summary" spaces=" "><nodename>Option Summary</nodename><nodenext automatic="on">Overall Options</nodenext><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Option Summary</sectiontitle>

<para>Here is a summary of all the options, grouped by type.  Explanations are
in the following sections.
</para>
<table commandarg="emph" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="emph">Overall Options</itemformat></item>
</tableterm><tableitem><para><xref label="Overall-Options"><xrefnodename>Overall Options</xrefnodename><xrefprinteddesc>Options Controlling the Kind of Output</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-c  -S  -E  -o <var>file</var>  -no-canonical-prefixes  
-pipe  -pass-exit-codes  
-x <var>language</var>  -v  -###  --help<r>[</r>=<var>class</var><r>[</r>,&dots;<r>]]</r>  --target-help  
--version -wrapper &arobase;<var>file</var> -fplugin=<var>file</var> -fplugin-arg-<var>name</var>=<var>arg</var>  
-fdump-ada-spec<r>[</r>-slim<r>]</r> -fada-spec-parent=<var>unit</var> -fdump-go-spec=<var>file</var>
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">C Language Options</itemformat></item>
</tableterm><tableitem><para><xref label="C-Dialect-Options"><xrefnodename>C Dialect Options</xrefnodename><xrefprinteddesc>Options Controlling C Dialect</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-ansi  -std=<var>standard</var>  -fgnu89-inline 
-aux-info <var>filename</var> -fallow-parameterless-variadic-functions 
-fno-asm  -fno-builtin  -fno-builtin-<var>function</var> 
-fhosted  -ffreestanding -fopenacc -fopenmp -fopenmp-simd 
-fms-extensions -fplan9-extensions -trigraphs -traditional -traditional-cpp 
-fallow-single-precision  -fcond-mismatch -flax-vector-conversions 
-fsigned-bitfields  -fsigned-char 
-funsigned-bitfields  -funsigned-char
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">C++ Language Options</itemformat></item>
</tableterm><tableitem><para><xref label="C_002b_002b-Dialect-Options"><xrefnodename>C++ Dialect Options</xrefnodename><xrefprinteddesc>Options Controlling C++ Dialect</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-fabi-version=<var>n</var>  -fno-access-control  -fcheck-new 
-fconstexpr-depth=<var>n</var>  -ffriend-injection 
-fno-elide-constructors 
-fno-enforce-eh-specs 
-ffor-scope  -fno-for-scope  -fno-gnu-keywords 
-fno-implicit-templates 
-fno-implicit-inline-templates 
-fno-implement-inlines  -fms-extensions 
-fno-nonansi-builtins  -fnothrow-opt  -fno-operator-names 
-fno-optional-diags  -fpermissive 
-fno-pretty-templates 
-frepo  -fno-rtti -fsized-deallocation 
-fstats  -ftemplate-backtrace-limit=<var>n</var> 
-ftemplate-depth=<var>n</var> 
-fno-threadsafe-statics  -fuse-cxa-atexit 
-fno-weak  -nostdinc++ 
-fvisibility-inlines-hidden 
-fvtable-verify=<r>[</r>std<r>|</r>preinit<r>|</r>none<r>]</r> 
-fvtv-counts -fvtv-debug 
-fvisibility-ms-compat 
-fext-numeric-literals 
-Wabi=<var>n</var>  -Wabi-tag  -Wconversion-null  -Wctor-dtor-privacy 
-Wdelete-non-virtual-dtor -Wliteral-suffix -Wnarrowing 
-Wnoexcept -Wnon-virtual-dtor  -Wreorder 
-Weffc++  -Wstrict-null-sentinel 
-Wno-non-template-friend  -Wold-style-cast 
-Woverloaded-virtual  -Wno-pmf-conversions 
-Wsign-promo
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Objective-C and Objective-C++ Language Options</itemformat></item>
</tableterm><tableitem><para><xref label="Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options"><xrefnodename>Objective-C and Objective-C++ Dialect Options</xrefnodename><xrefprinteddesc>Options Controlling
Objective-C and Objective-C++ Dialects</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-fconstant-string-class=<var>class-name</var> 
-fgnu-runtime  -fnext-runtime 
-fno-nil-receivers 
-fobjc-abi-version=<var>n</var> 
-fobjc-call-cxx-cdtors 
-fobjc-direct-dispatch 
-fobjc-exceptions 
-fobjc-gc 
-fobjc-nilcheck 
-fobjc-std=objc1 
-fno-local-ivars 
-fivar-visibility=<r>[</r>public<r>|</r>protected<r>|</r>private<r>|</r>package<r>]</r> 
-freplace-objc-classes 
-fzero-link 
-gen-decls 
-Wassign-intercept 
-Wno-protocol  -Wselector 
-Wstrict-selector-match 
-Wundeclared-selector
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Language Independent Options</itemformat></item>
</tableterm><tableitem><para><xref label="Language-Independent-Options"><xrefnodename>Language Independent Options</xrefnodename><xrefprinteddesc>Options to Control Diagnostic Messages Formatting</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-fmessage-length=<var>n</var>  
-fdiagnostics-show-location=<r>[</r>once<r>|</r>every-line<r>]</r>  
-fdiagnostics-color=<r>[</r>auto<r>|</r>never<r>|</r>always<r>]</r>  
-fno-diagnostics-show-option -fno-diagnostics-show-caret
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Warning Options</itemformat></item>
</tableterm><tableitem><para><xref label="Warning-Options"><xrefnodename>Warning Options</xrefnodename><xrefprinteddesc>Options to Request or Suppress Warnings</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-fsyntax-only  -fmax-errors=<var>n</var>  -Wpedantic 
-pedantic-errors 
-w  -Wextra  -Wall  -Waddress  -Waggregate-return  
-Waggressive-loop-optimizations -Warray-bounds -Warray-bounds=<var>n</var> 
-Wbool-compare 
-Wno-attributes -Wno-builtin-macro-redefined 
-Wc90-c99-compat -Wc99-c11-compat 
-Wc++-compat -Wc++11-compat -Wc++14-compat -Wcast-align  -Wcast-qual  
-Wchar-subscripts -Wclobbered  -Wcomment -Wconditionally-supported  
-Wconversion -Wcoverage-mismatch -Wdate-time -Wdelete-incomplete -Wno-cpp  
-Wno-deprecated -Wno-deprecated-declarations -Wno-designated-init 
-Wdisabled-optimization 
-Wno-discarded-qualifiers -Wno-discarded-array-qualifiers 
-Wno-div-by-zero -Wdouble-promotion -Wempty-body  -Wenum-compare 
-Wno-endif-labels -Werror  -Werror=* 
-Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2 
-Wno-format-contains-nul -Wno-format-extra-args -Wformat-nonliteral 
-Wformat-security  -Wformat-signedness  -Wformat-y2k 
-Wframe-larger-than=<var>len</var> -Wno-free-nonheap-object -Wjump-misses-init 
-Wignored-qualifiers  -Wincompatible-pointer-types 
-Wimplicit  -Wimplicit-function-declaration  -Wimplicit-int 
-Winit-self  -Winline  -Wno-int-conversion 
-Wno-int-to-pointer-cast -Wno-invalid-offsetof 
-Winvalid-pch -Wlarger-than=<var>len</var>  -Wunsafe-loop-optimizations 
-Wlogical-op -Wlogical-not-parentheses -Wlong-long 
-Wmain -Wmaybe-uninitialized -Wmemset-transposed-args -Wmissing-braces 
-Wmissing-field-initializers -Wmissing-include-dirs 
-Wno-multichar  -Wnonnull  -Wnormalized=<r>[</r>none<r>|</r>id<r>|</r>nfc<r>|</r>nfkc<r>]</r> 
-Wodr  -Wno-overflow  -Wopenmp-simd 
-Woverride-init-side-effects 
-Woverlength-strings  -Wpacked  -Wpacked-bitfield-compat  -Wpadded 
-Wparentheses  -Wpedantic-ms-format -Wno-pedantic-ms-format 
-Wpointer-arith  -Wno-pointer-to-int-cast 
-Wredundant-decls  -Wno-return-local-addr 
-Wreturn-type  -Wsequence-point  -Wshadow  -Wno-shadow-ivar 
-Wshift-count-negative -Wshift-count-overflow -Wshift-negative-value 
-Wsign-compare  -Wsign-conversion -Wfloat-conversion 
-Wsizeof-pointer-memaccess  -Wsizeof-array-argument 
-Wstack-protector -Wstack-usage=<var>len</var> -Wstrict-aliasing 
-Wstrict-aliasing=n  -Wstrict-overflow -Wstrict-overflow=<var>n</var> 
-Wsuggest-attribute=<r>[</r>pure<r>|</r>const<r>|</r>noreturn<r>|</r>format<r>]</r> 
-Wsuggest-final-types  -Wsuggest-final-methods -Wsuggest-override 
-Wmissing-format-attribute 
-Wswitch  -Wswitch-default  -Wswitch-enum -Wswitch-bool -Wsync-nand 
-Wsystem-headers  -Wtrampolines  -Wtrigraphs  -Wtype-limits  -Wundef 
-Wuninitialized  -Wunknown-pragmas  -Wno-pragmas 
-Wunsuffixed-float-constants  -Wunused  -Wunused-function 
-Wunused-label  -Wunused-local-typedefs -Wunused-parameter 
-Wno-unused-result -Wunused-value  -Wunused-variable 
-Wunused-but-set-parameter -Wunused-but-set-variable 
-Wuseless-cast -Wvariadic-macros -Wvector-operation-performance 
-Wvla -Wvolatile-register-var  -Wwrite-strings 
-Wzero-as-null-pointer-constant
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">C and Objective-C-only Warning Options</itemformat></item>
</tableterm><tableitem><smallexample endspaces=" ">
<pre xml:space="preserve">-Wbad-function-cast  -Wmissing-declarations 
-Wmissing-parameter-type  -Wmissing-prototypes  -Wnested-externs 
-Wold-style-declaration  -Wold-style-definition 
-Wstrict-prototypes  -Wtraditional  -Wtraditional-conversion 
-Wdeclaration-after-statement -Wpointer-sign
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Debugging Options</itemformat></item>
</tableterm><tableitem><para><xref label="Debugging-Options"><xrefnodename>Debugging Options</xrefnodename><xrefprinteddesc>Options for Debugging Your Program or GCC</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-d<var>letters</var>  -dumpspecs  -dumpmachine  -dumpversion 
-fsanitize=<var>style</var> -fsanitize-recover -fsanitize-recover=<var>style</var> 
-fasan-shadow-offset=<var>number</var> -fsanitize-sections=<var>s1,s2,...</var> 
-fsanitize-undefined-trap-on-error 
-fcheck-pointer-bounds -fchkp-check-incomplete-type 
-fchkp-first-field-has-own-bounds -fchkp-narrow-bounds 
-fchkp-narrow-to-innermost-array -fchkp-optimize 
-fchkp-use-fast-string-functions -fchkp-use-nochk-string-functions 
-fchkp-use-static-bounds -fchkp-use-static-const-bounds 
-fchkp-treat-zero-dynamic-size-as-infinite -fchkp-check-read 
-fchkp-check-read -fchkp-check-write -fchkp-store-bounds 
-fchkp-instrument-calls -fchkp-instrument-marked-only 
-fchkp-use-wrappers 
-fdbg-cnt-list -fdbg-cnt=<var>counter-value-list</var> 
-fdisable-ipa-<var>pass_name</var> 
-fdisable-rtl-<var>pass_name</var> 
-fdisable-rtl-<var>pass-name</var>=<var>range-list</var> 
-fdisable-tree-<var>pass_name</var> 
-fdisable-tree-<var>pass-name</var>=<var>range-list</var> 
-fdump-noaddr -fdump-unnumbered -fdump-unnumbered-links 
-fdump-translation-unit<r>[</r>-<var>n</var><r>]</r> 
-fdump-class-hierarchy<r>[</r>-<var>n</var><r>]</r> 
-fdump-ipa-all -fdump-ipa-cgraph -fdump-ipa-inline 
-fdump-passes 
-fdump-statistics 
-fdump-tree-all 
-fdump-tree-original<r>[</r>-<var>n</var><r>]</r>  
-fdump-tree-optimized<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-cfg -fdump-tree-alias 
-fdump-tree-ch 
-fdump-tree-ssa<r>[</r>-<var>n</var><r>]</r> -fdump-tree-pre<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-ccp<r>[</r>-<var>n</var><r>]</r> -fdump-tree-dce<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-gimple<r>[</r>-raw<r>]</r> 
-fdump-tree-dom<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-dse<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-phiprop<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-phiopt<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-forwprop<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-copyrename<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-nrv -fdump-tree-vect 
-fdump-tree-sink 
-fdump-tree-sra<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-forwprop<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-fre<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-vtable-verify 
-fdump-tree-vrp<r>[</r>-<var>n</var><r>]</r> 
-fdump-tree-storeccp<r>[</r>-<var>n</var><r>]</r> 
-fdump-final-insns=<var>file</var> 
-fcompare-debug<r>[</r>=<var>opts</var><r>]</r>  -fcompare-debug-second 
-feliminate-dwarf2-dups -fno-eliminate-unused-debug-types 
-feliminate-unused-debug-symbols -femit-class-debug-always 
-fenable-<var>kind</var>-<var>pass</var> 
-fenable-<var>kind</var>-<var>pass</var>=<var>range-list</var> 
-fdebug-types-section -fmem-report-wpa 
-fmem-report -fpre-ipa-mem-report -fpost-ipa-mem-report -fprofile-arcs 
-fopt-info 
-fopt-info-<var>options</var><r>[</r>=<var>file</var><r>]</r> 
-frandom-seed=<var>number</var> -fsched-verbose=<var>n</var> 
-fsel-sched-verbose -fsel-sched-dump-cfg -fsel-sched-pipelining-verbose 
-fstack-usage  -ftest-coverage  -ftime-report -fvar-tracking 
-fvar-tracking-assignments  -fvar-tracking-assignments-toggle 
-g  -g<var>level</var>  -gtoggle  -gcoff  -gdwarf-<var>version</var> 
-ggdb  -grecord-gcc-switches  -gno-record-gcc-switches 
-gstabs  -gstabs+  -gstrict-dwarf  -gno-strict-dwarf 
-gvms  -gxcoff  -gxcoff+ -gz<r>[</r>=<var>type</var><r>]</r> 
-fno-merge-debug-strings -fno-dwarf2-cfi-asm 
-fdebug-prefix-map=<var>old</var>=<var>new</var> 
-femit-struct-debug-baseonly -femit-struct-debug-reduced 
-femit-struct-debug-detailed<r>[</r>=<var>spec-list</var><r>]</r> 
-p  -pg  -print-file-name=<var>library</var>  -print-libgcc-file-name 
-print-multi-directory  -print-multi-lib  -print-multi-os-directory 
-print-prog-name=<var>program</var>  -print-search-dirs  -Q 
-print-sysroot -print-sysroot-headers-suffix 
-save-temps -save-temps=cwd -save-temps=obj -time<r>[</r>=<var>file</var><r>]</r>
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Optimization Options</itemformat></item>
</tableterm><tableitem><para><xref label="Optimize-Options"><xrefnodename>Optimize Options</xrefnodename><xrefprinteddesc>Options that Control Optimization</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-faggressive-loop-optimizations -falign-functions[=<var>n</var>] 
-falign-jumps[=<var>n</var>] 
-falign-labels[=<var>n</var>] -falign-loops[=<var>n</var>] 
-fassociative-math -fauto-profile -fauto-profile[=<var>path</var>] 
-fauto-inc-dec -fbranch-probabilities 
-fbranch-target-load-optimize -fbranch-target-load-optimize2 
-fbtr-bb-exclusive -fcaller-saves 
-fcheck-data-deps -fcombine-stack-adjustments -fconserve-stack 
-fcompare-elim -fcprop-registers -fcrossjumping 
-fcse-follow-jumps -fcse-skip-blocks -fcx-fortran-rules 
-fcx-limited-range 
-fdata-sections -fdce -fdelayed-branch 
-fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively 
-fdevirtualize-at-ltrans -fdse 
-fearly-inlining -fipa-sra -fexpensive-optimizations -ffat-lto-objects 
-ffast-math -ffinite-math-only -ffloat-store -fexcess-precision=<var>style</var> 
-fforward-propagate -ffp-contract=<var>style</var> -ffunction-sections 
-fgcse -fgcse-after-reload -fgcse-las -fgcse-lm -fgraphite-identity 
-fgcse-sm -fhoist-adjacent-loads -fif-conversion 
-fif-conversion2 -findirect-inlining 
-finline-functions -finline-functions-called-once -finline-limit=<var>n</var> 
-finline-small-functions -fipa-cp -fipa-cp-clone -fipa-cp-alignment 
-fipa-pta -fipa-profile -fipa-pure-const -fipa-reference -fipa-icf 
-fira-algorithm=<var>algorithm</var> 
-fira-region=<var>region</var> -fira-hoist-pressure 
-fira-loop-pressure -fno-ira-share-save-slots 
-fno-ira-share-spill-slots -fira-verbose=<var>n</var> 
-fisolate-erroneous-paths-dereference -fisolate-erroneous-paths-attribute 
-fivopts -fkeep-inline-functions -fkeep-static-consts 
-flive-range-shrinkage 
-floop-block -floop-interchange -floop-strip-mine 
-floop-unroll-and-jam -floop-nest-optimize 
-floop-parallelize-all -flra-remat -flto -flto-compression-level 
-flto-partition=<var>alg</var> -flto-report -flto-report-wpa -fmerge-all-constants 
-fmerge-constants -fmodulo-sched -fmodulo-sched-allow-regmoves 
-fmove-loop-invariants -fno-branch-count-reg 
-fno-defer-pop -fno-function-cse -fno-guess-branch-probability 
-fno-inline -fno-math-errno -fno-peephole -fno-peephole2 
-fno-sched-interblock -fno-sched-spec -fno-signed-zeros 
-fno-toplevel-reorder -fno-trapping-math -fno-zero-initialized-in-bss 
-fomit-frame-pointer -foptimize-sibling-calls 
-fpartial-inlining -fpeel-loops -fpredictive-commoning 
-fprefetch-loop-arrays -fprofile-report 
-fprofile-correction -fprofile-dir=<var>path</var> -fprofile-generate 
-fprofile-generate=<var>path</var> 
-fprofile-use -fprofile-use=<var>path</var> -fprofile-values 
-fprofile-reorder-functions 
-freciprocal-math -free -frename-registers -freorder-blocks 
-freorder-blocks-and-partition -freorder-functions 
-frerun-cse-after-loop -freschedule-modulo-scheduled-loops 
-frounding-math -fsched2-use-superblocks -fsched-pressure 
-fsched-spec-load -fsched-spec-load-dangerous 
-fsched-stalled-insns-dep[=<var>n</var>] -fsched-stalled-insns[=<var>n</var>] 
-fsched-group-heuristic -fsched-critical-path-heuristic 
-fsched-spec-insn-heuristic -fsched-rank-heuristic 
-fsched-last-insn-heuristic -fsched-dep-count-heuristic 
-fschedule-fusion 
-fschedule-insns -fschedule-insns2 -fsection-anchors 
-fselective-scheduling -fselective-scheduling2 
-fsel-sched-pipelining -fsel-sched-pipelining-outer-loops 
-fsemantic-interposition 
-fshrink-wrap -fsignaling-nans -fsingle-precision-constant 
-fsplit-ivs-in-unroller -fsplit-wide-types -fssa-phiopt 
-fstack-protector -fstack-protector-all -fstack-protector-strong 
-fstack-protector-explicit -fstdarg-opt -fstrict-aliasing 
-fstrict-overflow -fthread-jumps -ftracer -ftree-bit-ccp 
-ftree-builtin-call-dce -ftree-ccp -ftree-ch 
-ftree-coalesce-inline-vars -ftree-coalesce-vars -ftree-copy-prop 
-ftree-copyrename -ftree-dce -ftree-dominator-opts -ftree-dse 
-ftree-forwprop -ftree-fre -ftree-loop-if-convert 
-ftree-loop-if-convert-stores -ftree-loop-im 
-ftree-phiprop -ftree-loop-distribution -ftree-loop-distribute-patterns 
-ftree-loop-ivcanon -ftree-loop-linear -ftree-loop-optimize 
-ftree-loop-vectorize 
-ftree-parallelize-loops=<var>n</var> -ftree-pre -ftree-partial-pre -ftree-pta 
-ftree-reassoc -ftree-sink -ftree-slsr -ftree-sra 
-ftree-switch-conversion -ftree-tail-merge -ftree-ter 
-ftree-vectorize -ftree-vrp 
-funit-at-a-time -funroll-all-loops -funroll-loops 
-funsafe-loop-optimizations -funsafe-math-optimizations -funswitch-loops 
-fipa-ra -fvariable-expansion-in-unroller -fvect-cost-model -fvpt 
-fweb -fwhole-program -fwpa -fuse-linker-plugin 
--param <var>name</var>=<var>value</var>
-O  -O0  -O1  -O2  -O3  -Os -Ofast -Og
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Preprocessor Options</itemformat></item>
</tableterm><tableitem><para><xref label="Preprocessor-Options"><xrefnodename>Preprocessor Options</xrefnodename><xrefprinteddesc>Options Controlling the Preprocessor</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-A<var>question</var>=<var>answer</var> 
-A-<var>question</var><r>[</r>=<var>answer</var><r>]</r> 
-C  -dD  -dI  -dM  -dN 
-D<var>macro</var><r>[</r>=<var>defn</var><r>]</r>  -E  -H 
-idirafter <var>dir</var> 
-include <var>file</var>  -imacros <var>file</var> 
-iprefix <var>file</var>  -iwithprefix <var>dir</var> 
-iwithprefixbefore <var>dir</var>  -isystem <var>dir</var> 
-imultilib <var>dir</var> -isysroot <var>dir</var> 
-M  -MM  -MF  -MG  -MP  -MQ  -MT  -nostdinc  
-P  -fdebug-cpp -ftrack-macro-expansion -fworking-directory 
-remap -trigraphs  -undef  -U<var>macro</var>  
-Wp,<var>option</var> -Xpreprocessor <var>option</var> -no-integrated-cpp
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Assembler Option</itemformat></item>
</tableterm><tableitem><para><xref label="Assembler-Options"><xrefnodename>Assembler Options</xrefnodename><xrefprinteddesc>Passing Options to the Assembler</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-Wa,<var>option</var>  -Xassembler <var>option</var>
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Linker Options</itemformat></item>
</tableterm><tableitem><para><xref label="Link-Options"><xrefnodename>Link Options</xrefnodename><xrefprinteddesc>Options for Linking</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve"><var>object-file-name</var>  -fuse-ld=<var>linker</var> -l<var>library</var> 
-nostartfiles  -nodefaultlibs  -nostdlib -pie -rdynamic 
-s  -static -static-libgcc -static-libstdc++ 
-static-libasan -static-libtsan -static-liblsan -static-libubsan 
-static-libmpx -static-libmpxwrappers 
-shared -shared-libgcc  -symbolic 
-T <var>script</var>  -Wl,<var>option</var>  -Xlinker <var>option</var> 
-u <var>symbol</var> -z <var>keyword</var>
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Directory Options</itemformat></item>
</tableterm><tableitem><para><xref label="Directory-Options"><xrefnodename>Directory Options</xrefnodename><xrefprinteddesc>Options for Directory Search</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-B<var>prefix</var> -I<var>dir</var> -iplugindir=<var>dir</var> 
-iquote<var>dir</var> -L<var>dir</var> -specs=<var>file</var> -I- 
--sysroot=<var>dir</var> --no-sysroot-suffix
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Machine Dependent Options</itemformat></item>
</tableterm><tableitem><para><xref label="Submodel-Options"><xrefnodename>Submodel Options</xrefnodename><xrefprinteddesc>Hardware Models and Configurations</xrefprinteddesc></xref>.
<!-- c This list is ordered alphanumerically by subsection name. -->
<!-- c Try and put the significant identifier (CPU or system) first, -->
<!-- c so users have a clue at guessing where the ones they want will be. -->
</para>
<para><emph>AArch64 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mabi=<var>name</var>  -mbig-endian  -mlittle-endian 
-mgeneral-regs-only 
-mcmodel=tiny  -mcmodel=small  -mcmodel=large 
-mstrict-align 
-momit-leaf-frame-pointer  -mno-omit-leaf-frame-pointer 
-mtls-dialect=desc  -mtls-dialect=traditional 
-mfix-cortex-a53-835769  -mno-fix-cortex-a53-835769 
-mfix-cortex-a53-843419  -mno-fix-cortex-a53-843419 
-march=<var>name</var>  -mcpu=<var>name</var>  -mtune=<var>name</var>
</pre></smallexample>

<para><emph>Adapteva Epiphany Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mhalf-reg-file -mprefer-short-insn-regs 
-mbranch-cost=<var>num</var> -mcmove -mnops=<var>num</var> -msoft-cmpsf 
-msplit-lohi -mpost-inc -mpost-modify -mstack-offset=<var>num</var> 
-mround-nearest -mlong-calls -mshort-calls -msmall16 
-mfp-mode=<var>mode</var> -mvect-double -max-vect-align=<var>num</var> 
-msplit-vecmove-early -m1reg-<var>reg</var>
</pre></smallexample>

<para><emph>ARC Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mbarrel-shifter 
-mcpu=<var>cpu</var> -mA6 -mARC600 -mA7 -mARC700 
-mdpfp -mdpfp-compact -mdpfp-fast -mno-dpfp-lrsr 
-mea -mno-mpy -mmul32x16 -mmul64 
-mnorm -mspfp -mspfp-compact -mspfp-fast -msimd -msoft-float -mswap 
-mcrc -mdsp-packa -mdvbf -mlock -mmac-d16 -mmac-24 -mrtsc -mswape 
-mtelephony -mxy -misize -mannotate-align -marclinux -marclinux_prof 
-mepilogue-cfi -mlong-calls -mmedium-calls -msdata 
-mucb-mcount -mvolatile-cache 
-malign-call -mauto-modify-reg -mbbit-peephole -mno-brcc 
-mcase-vector-pcrel -mcompact-casesi -mno-cond-exec -mearly-cbranchsi 
-mexpand-adddi -mindexed-loads -mlra -mlra-priority-none 
-mlra-priority-compact mlra-priority-noncompact -mno-millicode 
-mmixed-code -mq-class -mRcq -mRcw -msize-level=<var>level</var> 
-mtune=<var>cpu</var> -mmultcost=<var>num</var> -munalign-prob-threshold=<var>probability</var>
</pre></smallexample>

<para><emph>ARM Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mapcs-frame  -mno-apcs-frame 
-mabi=<var>name</var> 
-mapcs-stack-check  -mno-apcs-stack-check 
-mapcs-float  -mno-apcs-float 
-mapcs-reentrant  -mno-apcs-reentrant 
-msched-prolog  -mno-sched-prolog 
-mlittle-endian  -mbig-endian 
-mfloat-abi=<var>name</var> 
-mfp16-format=<var>name</var>
-mthumb-interwork  -mno-thumb-interwork 
-mcpu=<var>name</var>  -march=<var>name</var>  -mfpu=<var>name</var>  
-mtune=<var>name</var> -mprint-tune-info 
-mstructure-size-boundary=<var>n</var> 
-mabort-on-noreturn 
-mlong-calls  -mno-long-calls 
-msingle-pic-base  -mno-single-pic-base 
-mpic-register=<var>reg</var> 
-mnop-fun-dllimport 
-mpoke-function-name 
-mthumb  -marm 
-mtpcs-frame  -mtpcs-leaf-frame 
-mcaller-super-interworking  -mcallee-super-interworking 
-mtp=<var>name</var> -mtls-dialect=<var>dialect</var> 
-mword-relocations 
-mfix-cortex-m3-ldrd 
-munaligned-access 
-mneon-for-64bits 
-mslow-flash-data 
-masm-syntax-unified 
-mrestrict-it
</pre></smallexample>

<para><emph>AVR Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mmcu=<var>mcu</var> -maccumulate-args -mbranch-cost=<var>cost</var> 
-mcall-prologues -mint8 -mn_flash=<var>size</var> -mno-interrupts 
-mrelax -mrmw -mstrict-X -mtiny-stack -nodevicelib -Waddr-space-convert
</pre></smallexample>

<para><emph>Blackfin Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mcpu=<var>cpu</var><r>[</r>-<var>sirevision</var><r>]</r> 
-msim -momit-leaf-frame-pointer  -mno-omit-leaf-frame-pointer 
-mspecld-anomaly  -mno-specld-anomaly  -mcsync-anomaly  -mno-csync-anomaly 
-mlow-64k -mno-low64k  -mstack-check-l1  -mid-shared-library 
-mno-id-shared-library  -mshared-library-id=<var>n</var> 
-mleaf-id-shared-library  -mno-leaf-id-shared-library 
-msep-data  -mno-sep-data  -mlong-calls  -mno-long-calls 
-mfast-fp -minline-plt -mmulticore  -mcorea  -mcoreb  -msdram 
-micplb
</pre></smallexample>

<para><emph>C6X Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mbig-endian  -mlittle-endian -march=<var>cpu</var> 
-msim -msdata=<var>sdata-type</var>
</pre></smallexample>

<para><emph>CRIS Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mcpu=<var>cpu</var>  -march=<var>cpu</var>  -mtune=<var>cpu</var> 
-mmax-stack-frame=<var>n</var>  -melinux-stacksize=<var>n</var> 
-metrax4  -metrax100  -mpdebug  -mcc-init  -mno-side-effects 
-mstack-align  -mdata-align  -mconst-align 
-m32-bit  -m16-bit  -m8-bit  -mno-prologue-epilogue  -mno-gotplt 
-melf  -maout  -melinux  -mlinux  -sim  -sim2 
-mmul-bug-workaround  -mno-mul-bug-workaround
</pre></smallexample>

<para><emph>CR16 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mmac 
-mcr16cplus -mcr16c 
-msim -mint32 -mbit-ops
-mdata-model=<var>model</var>
</pre></smallexample>

<para><emph>Darwin Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-all_load  -allowable_client  -arch  -arch_errors_fatal 
-arch_only  -bind_at_load  -bundle  -bundle_loader 
-client_name  -compatibility_version  -current_version 
-dead_strip 
-dependency-file  -dylib_file  -dylinker_install_name 
-dynamic  -dynamiclib  -exported_symbols_list 
-filelist  -flat_namespace  -force_cpusubtype_ALL 
-force_flat_namespace  -headerpad_max_install_names 
-iframework 
-image_base  -init  -install_name  -keep_private_externs 
-multi_module  -multiply_defined  -multiply_defined_unused 
-noall_load   -no_dead_strip_inits_and_terms 
-nofixprebinding -nomultidefs  -noprebind  -noseglinkedit 
-pagezero_size  -prebind  -prebind_all_twolevel_modules 
-private_bundle  -read_only_relocs  -sectalign 
-sectobjectsymbols  -whyload  -seg1addr 
-sectcreate  -sectobjectsymbols  -sectorder 
-segaddr -segs_read_only_addr -segs_read_write_addr 
-seg_addr_table  -seg_addr_table_filename  -seglinkedit 
-segprot  -segs_read_only_addr  -segs_read_write_addr 
-single_module  -static  -sub_library  -sub_umbrella 
-twolevel_namespace  -umbrella  -undefined 
-unexported_symbols_list  -weak_reference_mismatches 
-whatsloaded -F -gused -gfull -mmacosx-version-min=<var>version</var> 
-mkernel -mone-byte-bool
</pre></smallexample>

<para><emph>DEC Alpha Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mno-fp-regs  -msoft-float 
-mieee  -mieee-with-inexact  -mieee-conformant 
-mfp-trap-mode=<var>mode</var>  -mfp-rounding-mode=<var>mode</var> 
-mtrap-precision=<var>mode</var>  -mbuild-constants 
-mcpu=<var>cpu-type</var>  -mtune=<var>cpu-type</var> 
-mbwx  -mmax  -mfix  -mcix 
-mfloat-vax  -mfloat-ieee 
-mexplicit-relocs  -msmall-data  -mlarge-data 
-msmall-text  -mlarge-text 
-mmemory-latency=<var>time</var>
</pre></smallexample>

<para><emph>FR30 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-msmall-model -mno-lsim
</pre></smallexample>

<para><emph>FRV Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mgpr-32  -mgpr-64  -mfpr-32  -mfpr-64 
-mhard-float  -msoft-float 
-malloc-cc  -mfixed-cc  -mdword  -mno-dword 
-mdouble  -mno-double 
-mmedia  -mno-media  -mmuladd  -mno-muladd 
-mfdpic  -minline-plt -mgprel-ro  -multilib-library-pic 
-mlinked-fp  -mlong-calls  -malign-labels 
-mlibrary-pic  -macc-4  -macc-8 
-mpack  -mno-pack  -mno-eflags  -mcond-move  -mno-cond-move 
-moptimize-membar -mno-optimize-membar 
-mscc  -mno-scc  -mcond-exec  -mno-cond-exec 
-mvliw-branch  -mno-vliw-branch 
-mmulti-cond-exec  -mno-multi-cond-exec  -mnested-cond-exec 
-mno-nested-cond-exec  -mtomcat-stats 
-mTLS -mtls 
-mcpu=<var>cpu</var>
</pre></smallexample>

<para><emph>GNU/Linux Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mglibc -muclibc -mmusl -mbionic -mandroid 
-tno-android-cc -tno-android-ld
</pre></smallexample>

<para><emph>H8/300 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mrelax  -mh  -ms  -mn  -mexr -mno-exr  -mint32  -malign-300
</pre></smallexample>

<para><emph>HPPA Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-march=<var>architecture-type</var> 
-mdisable-fpregs  -mdisable-indexing 
-mfast-indirect-calls  -mgas  -mgnu-ld   -mhp-ld 
-mfixed-range=<var>register-range</var> 
-mjump-in-delay -mlinker-opt -mlong-calls 
-mlong-load-store  -mno-disable-fpregs 
-mno-disable-indexing  -mno-fast-indirect-calls  -mno-gas 
-mno-jump-in-delay  -mno-long-load-store 
-mno-portable-runtime  -mno-soft-float 
-mno-space-regs  -msoft-float  -mpa-risc-1-0 
-mpa-risc-1-1  -mpa-risc-2-0  -mportable-runtime 
-mschedule=<var>cpu-type</var>  -mspace-regs  -msio  -mwsio 
-munix=<var>unix-std</var>  -nolibdld  -static  -threads
</pre></smallexample>

<para><emph>IA-64 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mbig-endian  -mlittle-endian  -mgnu-as  -mgnu-ld  -mno-pic 
-mvolatile-asm-stop  -mregister-names  -msdata -mno-sdata 
-mconstant-gp  -mauto-pic  -mfused-madd 
-minline-float-divide-min-latency 
-minline-float-divide-max-throughput 
-mno-inline-float-divide 
-minline-int-divide-min-latency 
-minline-int-divide-max-throughput  
-mno-inline-int-divide 
-minline-sqrt-min-latency -minline-sqrt-max-throughput 
-mno-inline-sqrt 
-mdwarf2-asm -mearly-stop-bits 
-mfixed-range=<var>register-range</var> -mtls-size=<var>tls-size</var> 
-mtune=<var>cpu-type</var> -milp32 -mlp64 
-msched-br-data-spec -msched-ar-data-spec -msched-control-spec 
-msched-br-in-data-spec -msched-ar-in-data-spec -msched-in-control-spec 
-msched-spec-ldc -msched-spec-control-ldc 
-msched-prefer-non-data-spec-insns -msched-prefer-non-control-spec-insns 
-msched-stop-bits-after-every-cycle -msched-count-spec-in-critical-path 
-msel-sched-dont-check-control-spec -msched-fp-mem-deps-zero-cost 
-msched-max-memory-insns-hard-limit -msched-max-memory-insns=<var>max-insns</var>
</pre></smallexample>

<para><emph>LM32 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mbarrel-shift-enabled -mdivide-enabled -mmultiply-enabled 
-msign-extend-enabled -muser-enabled
</pre></smallexample>

<para><emph>M32R/D Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-m32r2 -m32rx -m32r 
-mdebug 
-malign-loops -mno-align-loops 
-missue-rate=<var>number</var> 
-mbranch-cost=<var>number</var> 
-mmodel=<var>code-size-model-type</var> 
-msdata=<var>sdata-type</var> 
-mno-flush-func -mflush-func=<var>name</var> 
-mno-flush-trap -mflush-trap=<var>number</var> 
-G <var>num</var>
</pre></smallexample>

<para><emph>M32C Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mcpu=<var>cpu</var> -msim -memregs=<var>number</var>
</pre></smallexample>

<para><emph>M680x0 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-march=<var>arch</var>  -mcpu=<var>cpu</var>  -mtune=<var>tune</var> 
-m68000  -m68020  -m68020-40  -m68020-60  -m68030  -m68040 
-m68060  -mcpu32  -m5200  -m5206e  -m528x  -m5307  -m5407 
-mcfv4e  -mbitfield  -mno-bitfield  -mc68000  -mc68020 
-mnobitfield  -mrtd  -mno-rtd  -mdiv  -mno-div  -mshort 
-mno-short  -mhard-float  -m68881  -msoft-float  -mpcrel 
-malign-int  -mstrict-align  -msep-data  -mno-sep-data 
-mshared-library-id=n  -mid-shared-library  -mno-id-shared-library 
-mxgot -mno-xgot
</pre></smallexample>

<para><emph>MCore Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mhardlit  -mno-hardlit  -mdiv  -mno-div  -mrelax-immediates 
-mno-relax-immediates  -mwide-bitfields  -mno-wide-bitfields 
-m4byte-functions  -mno-4byte-functions  -mcallgraph-data 
-mno-callgraph-data  -mslow-bytes  -mno-slow-bytes  -mno-lsim 
-mlittle-endian  -mbig-endian  -m210  -m340  -mstack-increment
</pre></smallexample>

<para><emph>MeP Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mabsdiff -mall-opts -maverage -mbased=<var>n</var> -mbitops 
-mc=<var>n</var> -mclip -mconfig=<var>name</var> -mcop -mcop32 -mcop64 -mivc2 
-mdc -mdiv -meb -mel -mio-volatile -ml -mleadz -mm -mminmax 
-mmult -mno-opts -mrepeat -ms -msatur -msdram -msim -msimnovec -mtf 
-mtiny=<var>n</var>
</pre></smallexample>

<para><emph>MicroBlaze Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-msoft-float -mhard-float -msmall-divides -mcpu=<var>cpu</var> 
-mmemcpy -mxl-soft-mul -mxl-soft-div -mxl-barrel-shift 
-mxl-pattern-compare -mxl-stack-check -mxl-gp-opt -mno-clearbss 
-mxl-multiply-high -mxl-float-convert -mxl-float-sqrt 
-mbig-endian -mlittle-endian -mxl-reorder -mxl-mode-<var>app-model</var>
</pre></smallexample>

<para><emph>MIPS Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-EL  -EB  -march=<var>arch</var>  -mtune=<var>arch</var> 
-mips1  -mips2  -mips3  -mips4  -mips32  -mips32r2  -mips32r3  -mips32r5 
-mips32r6  -mips64  -mips64r2  -mips64r3  -mips64r5  -mips64r6 
-mips16  -mno-mips16  -mflip-mips16 
-minterlink-compressed -mno-interlink-compressed 
-minterlink-mips16  -mno-interlink-mips16 
-mabi=<var>abi</var>  -mabicalls  -mno-abicalls 
-mshared  -mno-shared  -mplt  -mno-plt  -mxgot  -mno-xgot 
-mgp32  -mgp64  -mfp32  -mfpxx  -mfp64  -mhard-float  -msoft-float 
-mno-float  -msingle-float  -mdouble-float 
-modd-spreg -mno-odd-spreg 
-mabs=<var>mode</var>  -mnan=<var>encoding</var> 
-mdsp  -mno-dsp  -mdspr2  -mno-dspr2 
-mmcu -mmno-mcu 
-meva -mno-eva 
-mvirt -mno-virt 
-mxpa -mno-xpa 
-mmicromips -mno-micromips 
-mfpu=<var>fpu-type</var> 
-msmartmips  -mno-smartmips 
-mpaired-single  -mno-paired-single  -mdmx  -mno-mdmx 
-mips3d  -mno-mips3d  -mmt  -mno-mt  -mllsc  -mno-llsc 
-mlong64  -mlong32  -msym32  -mno-sym32 
-G<var>num</var>  -mlocal-sdata  -mno-local-sdata 
-mextern-sdata  -mno-extern-sdata  -mgpopt  -mno-gopt 
-membedded-data  -mno-embedded-data 
-muninit-const-in-rodata  -mno-uninit-const-in-rodata 
-mcode-readable=<var>setting</var> 
-msplit-addresses  -mno-split-addresses 
-mexplicit-relocs  -mno-explicit-relocs 
-mcheck-zero-division  -mno-check-zero-division 
-mdivide-traps  -mdivide-breaks 
-mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls 
-mmad -mno-mad -mimadd -mno-imadd -mfused-madd  -mno-fused-madd  -nocpp 
-mfix-24k -mno-fix-24k 
-mfix-r4000  -mno-fix-r4000  -mfix-r4400  -mno-fix-r4400 
-mfix-r10000 -mno-fix-r10000  -mfix-rm7000 -mno-fix-rm7000 
-mfix-vr4120  -mno-fix-vr4120 
-mfix-vr4130  -mno-fix-vr4130  -mfix-sb1  -mno-fix-sb1 
-mflush-func=<var>func</var>  -mno-flush-func 
-mbranch-cost=<var>num</var>  -mbranch-likely  -mno-branch-likely 
-mfp-exceptions -mno-fp-exceptions 
-mvr4130-align -mno-vr4130-align -msynci -mno-synci 
-mrelax-pic-calls -mno-relax-pic-calls -mmcount-ra-address
</pre></smallexample>

<para><emph>MMIX Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mlibfuncs  -mno-libfuncs  -mepsilon  -mno-epsilon  -mabi=gnu 
-mabi=mmixware  -mzero-extend  -mknuthdiv  -mtoplevel-symbols 
-melf  -mbranch-predict  -mno-branch-predict  -mbase-addresses 
-mno-base-addresses  -msingle-exit  -mno-single-exit
</pre></smallexample>

<para><emph>MN10300 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mmult-bug  -mno-mult-bug 
-mno-am33 -mam33 -mam33-2 -mam34 
-mtune=<var>cpu-type</var> 
-mreturn-pointer-on-d0 
-mno-crt0  -mrelax -mliw -msetlb
</pre></smallexample>

<para><emph>Moxie Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-meb -mel -mmul.x -mno-crt0
</pre></smallexample>

<para><emph>MSP430 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-msim -masm-hex -mmcu= -mcpu= -mlarge -msmall -mrelax 
-mcode-region= -mdata-region= 
-mhwmult= -minrt
</pre></smallexample>

<para><emph>NDS32 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mbig-endian -mlittle-endian 
-mreduced-regs -mfull-regs 
-mcmov -mno-cmov 
-mperf-ext -mno-perf-ext 
-mv3push -mno-v3push 
-m16bit -mno-16bit 
-misr-vector-size=<var>num</var> 
-mcache-block-size=<var>num</var> 
-march=<var>arch</var> 
-mcmodel=<var>code-model</var> 
-mctor-dtor -mrelax
</pre></smallexample>

<para><emph>Nios II Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-G <var>num</var> -mgpopt=<var>option</var> -mgpopt -mno-gpopt 
-mel -meb 
-mno-bypass-cache -mbypass-cache 
-mno-cache-volatile -mcache-volatile 
-mno-fast-sw-div -mfast-sw-div 
-mhw-mul -mno-hw-mul -mhw-mulx -mno-hw-mulx -mno-hw-div -mhw-div 
-mcustom-<var>insn</var>=<var>N</var> -mno-custom-<var>insn</var> 
-mcustom-fpu-cfg=<var>name</var> 
-mhal -msmallc -msys-crt0=<var>name</var> -msys-lib=<var>name</var>
</pre></smallexample>

<para><emph>Nvidia PTX Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-m32 -m64 -mmainkernel
</pre></smallexample>

<para><emph>PDP-11 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45  -m10 
-mbcopy  -mbcopy-builtin  -mint32  -mno-int16 
-mint16  -mno-int32  -mfloat32  -mno-float64 
-mfloat64  -mno-float32  -mabshi  -mno-abshi 
-mbranch-expensive  -mbranch-cheap 
-munix-asm  -mdec-asm
</pre></smallexample>

<para><emph>picoChip Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mae=<var>ae_type</var> -mvliw-lookahead=<var>N</var> 
-msymbol-as-address -mno-inefficient-warnings
</pre></smallexample>

<para><emph>PowerPC Options</emph>
See RS/6000 and PowerPC Options.
</para>
<para><emph>RL78 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-msim -mmul=none -mmul=g13 -mmul=g14 -mallregs 
-mcpu=g10 -mcpu=g13 -mcpu=g14 -mg10 -mg13 -mg14 
-m64bit-doubles -m32bit-doubles
</pre></smallexample>

<para><emph>RS/6000 and PowerPC Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mcpu=<var>cpu-type</var> 
-mtune=<var>cpu-type</var> 
-mcmodel=<var>code-model</var> 
-mpowerpc64 
-maltivec  -mno-altivec 
-mpowerpc-gpopt  -mno-powerpc-gpopt 
-mpowerpc-gfxopt  -mno-powerpc-gfxopt 
-mmfcrf  -mno-mfcrf  -mpopcntb  -mno-popcntb -mpopcntd -mno-popcntd 
-mfprnd  -mno-fprnd 
-mcmpb -mno-cmpb -mmfpgpr -mno-mfpgpr -mhard-dfp -mno-hard-dfp 
-mfull-toc   -mminimal-toc  -mno-fp-in-toc  -mno-sum-in-toc 
-m64  -m32  -mxl-compat  -mno-xl-compat  -mpe 
-malign-power  -malign-natural 
-msoft-float  -mhard-float  -mmultiple  -mno-multiple 
-msingle-float -mdouble-float -msimple-fpu 
-mstring  -mno-string  -mupdate  -mno-update 
-mavoid-indexed-addresses  -mno-avoid-indexed-addresses 
-mfused-madd  -mno-fused-madd  -mbit-align  -mno-bit-align 
-mstrict-align  -mno-strict-align  -mrelocatable 
-mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib 
-mtoc  -mno-toc  -mlittle  -mlittle-endian  -mbig  -mbig-endian 
-mdynamic-no-pic  -maltivec -mswdiv  -msingle-pic-base 
-mprioritize-restricted-insns=<var>priority</var> 
-msched-costly-dep=<var>dependence_type</var> 
-minsert-sched-nops=<var>scheme</var> 
-mcall-sysv  -mcall-netbsd 
-maix-struct-return  -msvr4-struct-return 
-mabi=<var>abi-type</var> -msecure-plt -mbss-plt 
-mblock-move-inline-limit=<var>num</var> 
-misel -mno-isel 
-misel=yes  -misel=no 
-mspe -mno-spe 
-mspe=yes  -mspe=no 
-mpaired 
-mgen-cell-microcode -mwarn-cell-microcode 
-mvrsave -mno-vrsave 
-mmulhw -mno-mulhw 
-mdlmzb -mno-dlmzb 
-mfloat-gprs=yes  -mfloat-gprs=no -mfloat-gprs=single -mfloat-gprs=double 
-mprototype  -mno-prototype 
-msim  -mmvme  -mads  -myellowknife  -memb  -msdata 
-msdata=<var>opt</var>  -mvxworks  -G <var>num</var>  -pthread 
-mrecip -mrecip=<var>opt</var> -mno-recip -mrecip-precision 
-mno-recip-precision 
-mveclibabi=<var>type</var> -mfriz -mno-friz 
-mpointers-to-nested-functions -mno-pointers-to-nested-functions 
-msave-toc-indirect -mno-save-toc-indirect 
-mpower8-fusion -mno-mpower8-fusion -mpower8-vector -mno-power8-vector 
-mcrypto -mno-crypto -mdirect-move -mno-direct-move 
-mquad-memory -mno-quad-memory 
-mquad-memory-atomic -mno-quad-memory-atomic 
-mcompat-align-parm -mno-compat-align-parm 
-mupper-regs-df -mno-upper-regs-df -mupper-regs-sf -mno-upper-regs-sf 
-mupper-regs -mno-upper-regs
</pre></smallexample>

<para><emph>RX Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-m64bit-doubles  -m32bit-doubles  -fpu  -nofpu
-mcpu=
-mbig-endian-data -mlittle-endian-data 
-msmall-data 
-msim  -mno-sim
-mas100-syntax -mno-as100-syntax
-mrelax
-mmax-constant-size=
-mint-register=
-mpid
-mallow-string-insns -mno-allow-string-insns
-mno-warn-multiple-fast-interrupts
-msave-acc-in-interrupts
</pre></smallexample>

<para><emph>S/390 and zSeries Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mtune=<var>cpu-type</var>  -march=<var>cpu-type</var> 
-mhard-float  -msoft-float  -mhard-dfp -mno-hard-dfp 
-mlong-double-64 -mlong-double-128 
-mbackchain  -mno-backchain -mpacked-stack  -mno-packed-stack 
-msmall-exec  -mno-small-exec  -mmvcle -mno-mvcle 
-m64  -m31  -mdebug  -mno-debug  -mesa  -mzarch 
-mtpf-trace -mno-tpf-trace  -mfused-madd  -mno-fused-madd 
-mwarn-framesize  -mwarn-dynamicstack  -mstack-size -mstack-guard 
-mhotpatch=<var>halfwords</var>,<var>halfwords</var>
</pre></smallexample>

<para><emph>Score Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-meb -mel 
-mnhwloop 
-muls 
-mmac 
-mscore5 -mscore5u -mscore7 -mscore7d
</pre></smallexample>

<para><emph>SH Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-m1  -m2  -m2e 
-m2a-nofpu -m2a-single-only -m2a-single -m2a 
-m3  -m3e 
-m4-nofpu  -m4-single-only  -m4-single  -m4 
-m4a-nofpu -m4a-single-only -m4a-single -m4a -m4al 
-m5-64media  -m5-64media-nofpu 
-m5-32media  -m5-32media-nofpu 
-m5-compact  -m5-compact-nofpu 
-mb  -ml  -mdalign  -mrelax 
-mbigtable -mfmovd -mhitachi -mrenesas -mno-renesas -mnomacsave 
-mieee -mno-ieee -mbitops  -misize  -minline-ic_invalidate -mpadstruct 
-mspace -mprefergot  -musermode -multcost=<var>number</var> -mdiv=<var>strategy</var> 
-mdivsi3_libfunc=<var>name</var> -mfixed-range=<var>register-range</var> 
-mindexed-addressing -mgettrcost=<var>number</var> -mpt-fixed 
-maccumulate-outgoing-args -minvalid-symbols 
-matomic-model=<var>atomic-model</var> 
-mbranch-cost=<var>num</var> -mzdcbranch -mno-zdcbranch 
-mcbranch-force-delay-slot 
-mfused-madd -mno-fused-madd -mfsca -mno-fsca -mfsrra -mno-fsrra 
-mpretend-cmove -mtas
</pre></smallexample>

<para><emph>Solaris 2 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mclear-hwcap -mno-clear-hwcap -mimpure-text  -mno-impure-text 
-pthreads -pthread
</pre></smallexample>

<para><emph>SPARC Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mcpu=<var>cpu-type</var> 
-mtune=<var>cpu-type</var> 
-mcmodel=<var>code-model</var> 
-mmemory-model=<var>mem-model</var> 
-m32  -m64  -mapp-regs  -mno-app-regs 
-mfaster-structs  -mno-faster-structs  -mflat  -mno-flat 
-mfpu  -mno-fpu  -mhard-float  -msoft-float 
-mhard-quad-float  -msoft-quad-float 
-mstack-bias  -mno-stack-bias 
-munaligned-doubles  -mno-unaligned-doubles 
-muser-mode  -mno-user-mode 
-mv8plus  -mno-v8plus  -mvis  -mno-vis 
-mvis2  -mno-vis2  -mvis3  -mno-vis3 
-mcbcond -mno-cbcond 
-mfmaf  -mno-fmaf  -mpopc  -mno-popc 
-mfix-at697f -mfix-ut699
</pre></smallexample>

<para><emph>SPU Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mwarn-reloc -merror-reloc 
-msafe-dma -munsafe-dma 
-mbranch-hints 
-msmall-mem -mlarge-mem -mstdmain 
-mfixed-range=<var>register-range</var> 
-mea32 -mea64 
-maddress-space-conversion -mno-address-space-conversion 
-mcache-size=<var>cache-size</var> 
-matomic-updates -mno-atomic-updates
</pre></smallexample>

<para><emph>System V Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-Qy  -Qn  -YP,<var>paths</var>  -Ym,<var>dir</var>
</pre></smallexample>

<para><emph>TILE-Gx Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mcpu=CPU -m32 -m64 -mbig-endian -mlittle-endian 
-mcmodel=<var>code-model</var>
</pre></smallexample>

<para><emph>TILEPro Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mcpu=<var>cpu</var> -m32
</pre></smallexample>

<para><emph>V850 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mlong-calls  -mno-long-calls  -mep  -mno-ep 
-mprolog-function  -mno-prolog-function  -mspace 
-mtda=<var>n</var>  -msda=<var>n</var>  -mzda=<var>n</var> 
-mapp-regs  -mno-app-regs 
-mdisable-callt  -mno-disable-callt 
-mv850e2v3 -mv850e2 -mv850e1 -mv850es 
-mv850e -mv850 -mv850e3v5 
-mloop 
-mrelax 
-mlong-jumps 
-msoft-float 
-mhard-float 
-mgcc-abi 
-mrh850-abi 
-mbig-switch
</pre></smallexample>

<para><emph>VAX Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mg  -mgnu  -munix
</pre></smallexample>

<para><emph>Visium Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mdebug -msim -mfpu -mno-fpu -mhard-float -msoft-float 
-mcpu=<var>cpu-type</var> -mtune=<var>cpu-type</var> -msv-mode -muser-mode
</pre></smallexample>

<para><emph>VMS Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mvms-return-codes -mdebug-main=<var>prefix</var> -mmalloc64 
-mpointer-size=<var>size</var>
</pre></smallexample>

<para><emph>VxWorks Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mrtp  -non-static  -Bstatic  -Bdynamic 
-Xbind-lazy  -Xbind-now
</pre></smallexample>

<para><emph>x86 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mtune=<var>cpu-type</var>  -march=<var>cpu-type</var> 
-mtune-ctrl=<var>feature-list</var> -mdump-tune-features -mno-default 
-mfpmath=<var>unit</var> 
-masm=<var>dialect</var>  -mno-fancy-math-387 
-mno-fp-ret-in-387  -msoft-float 
-mno-wide-multiply  -mrtd  -malign-double 
-mpreferred-stack-boundary=<var>num</var> 
-mincoming-stack-boundary=<var>num</var> 
-mcld -mcx16 -msahf -mmovbe -mcrc32 
-mrecip -mrecip=<var>opt</var> 
-mvzeroupper -mprefer-avx128 
-mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx 
-mavx2 -mavx512f -mavx512pf -mavx512er -mavx512cd -msha 
-maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma -mprefetchwt1 
-mclflushopt -mxsavec -mxsaves 
-msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt 
-mbmi2 -mfxsr -mxsave -mxsaveopt -mrtm -mlwp -mmpx -mthreads 
-mno-align-stringops  -minline-all-stringops 
-minline-stringops-dynamically -mstringop-strategy=<var>alg</var> 
-mmemcpy-strategy=<var>strategy</var> -mmemset-strategy=<var>strategy</var> 
-mpush-args  -maccumulate-outgoing-args  -m128bit-long-double 
-m96bit-long-double -mlong-double-64 -mlong-double-80 -mlong-double-128 
-mregparm=<var>num</var>  -msseregparm 
-mveclibabi=<var>type</var> -mvect8-ret-in-mem 
-mpc32 -mpc64 -mpc80 -mstackrealign 
-momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs 
-mcmodel=<var>code-model</var> -mabi=<var>name</var> -maddress-mode=<var>mode</var> 
-m32 -m64 -mx32 -m16 -mlarge-data-threshold=<var>num</var> 
-msse2avx -mfentry -mrecord-mcount -mnop-mcount -m8bit-idiv 
-mavx256-split-unaligned-load -mavx256-split-unaligned-store 
-malign-data=<var>type</var> -mstack-protector-guard=<var>guard</var>
</pre></smallexample>

<para><emph>x86 Windows Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mconsole -mcygwin -mno-cygwin -mdll 
-mnop-fun-dllimport -mthread 
-municode -mwin32 -mwindows -fno-set-stack-executable
</pre></smallexample>

<para><emph>Xstormy16 Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-msim
</pre></smallexample>

<para><emph>Xtensa Options</emph>
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mconst16 -mno-const16 
-mfused-madd  -mno-fused-madd 
-mforce-no-pic 
-mserialize-volatile  -mno-serialize-volatile 
-mtext-section-literals  -mno-text-section-literals 
-mtarget-align  -mno-target-align 
-mlongcalls  -mno-longcalls
</pre></smallexample>

<para><emph>zSeries Options</emph>
See S/390 and zSeries Options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Code Generation Options</itemformat></item>
</tableterm><tableitem><para><xref label="Code-Gen-Options"><xrefnodename>Code Gen Options</xrefnodename><xrefprinteddesc>Options for Code Generation Conventions</xrefprinteddesc></xref>.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-fcall-saved-<var>reg</var>  -fcall-used-<var>reg</var> 
-ffixed-<var>reg</var>  -fexceptions 
-fnon-call-exceptions  -fdelete-dead-exceptions  -funwind-tables 
-fasynchronous-unwind-tables 
-fno-gnu-unique 
-finhibit-size-directive  -finstrument-functions 
-finstrument-functions-exclude-function-list=<var>sym</var>,<var>sym</var>,&dots; 
-finstrument-functions-exclude-file-list=<var>file</var>,<var>file</var>,&dots; 
-fno-common  -fno-ident 
-fpcc-struct-return  -fpic  -fPIC -fpie -fPIE -fno-plt 
-fno-jump-tables 
-frecord-gcc-switches 
-freg-struct-return  -fshort-enums 
-fshort-double  -fshort-wchar 
-fverbose-asm  -fpack-struct[=<var>n</var>]  -fstack-check 
-fstack-limit-register=<var>reg</var>  -fstack-limit-symbol=<var>sym</var> 
-fno-stack-limit -fsplit-stack 
-fleading-underscore  -ftls-model=<var>model</var> 
-fstack-reuse=<var>reuse_level</var> 
-ftrapv  -fwrapv  -fbounds-check 
-fvisibility=<r>[</r>default<r>|</r>internal<r>|</r>hidden<r>|</r>protected<r>]</r> 
-fstrict-volatile-bitfields -fsync-libcalls
</pre></smallexample>
</tableitem></tableentry></table>


</section>
<node name="Overall-Options" spaces=" "><nodename>Overall Options</nodename><nodenext automatic="on">Invoking G++</nodenext><nodeprev automatic="on">Option Summary</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Options Controlling the Kind of Output</sectiontitle>

<para>Compilation can involve up to four stages: preprocessing, compilation
proper, assembly and linking, always in that order.  GCC is capable of
preprocessing and compiling several files either into several
assembler input files, or into one assembler input file; then each
assembler input file produces an object file, and linking combines all
the object files (those newly compiled, and those specified as input)
into an executable file.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="70">file name suffix</indexterm></cindex>
<para>For any given input file, the file name suffix determines what kind of
compilation is done:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.c</itemformat></item>
</tableterm><tableitem><para>C source code that must be preprocessed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.i</itemformat></item>
</tableterm><tableitem><para>C source code that should not be preprocessed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.ii</itemformat></item>
</tableterm><tableitem><para>C++ source code that should not be preprocessed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.m</itemformat></item>
</tableterm><tableitem><para>Objective-C source code.  Note that you must link with the <file>libobjc</file>
library to make an Objective-C program work.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.mi</itemformat></item>
</tableterm><tableitem><para>Objective-C source code that should not be preprocessed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.mm</itemformat></item>
<itemx spaces=" "><itemformat command="code"><var>file</var>.M</itemformat></itemx>
</tableterm><tableitem><para>Objective-C++ source code.  Note that you must link with the <file>libobjc</file>
library to make an Objective-C++ program work.  Note that <samp>.M</samp> refers
to a literal capital M&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.mii</itemformat></item>
</tableterm><tableitem><para>Objective-C++ source code that should not be preprocessed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.h</itemformat></item>
</tableterm><tableitem><para>C, C++, Objective-C or Objective-C++ header file to be turned into a
precompiled header (default), or C, C++ header file to be turned into an
Ada spec (via the <option>-fdump-ada-spec</option> switch).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.cc</itemformat></item>
<itemx spaces=" "><itemformat command="code"><var>file</var>.cp</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.cxx</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.cpp</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.CPP</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.c++</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.C</itemformat></itemx>
</tableterm><tableitem><para>C++ source code that must be preprocessed.  Note that in <samp>.cxx</samp>,
the last two letters must both be literally <samp>x</samp>.  Likewise,
<samp>.C</samp> refers to a literal capital C&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.mm</itemformat></item>
<itemx spaces=" "><itemformat command="code"><var>file</var>.M</itemformat></itemx>
</tableterm><tableitem><para>Objective-C++ source code that must be preprocessed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.mii</itemformat></item>
</tableterm><tableitem><para>Objective-C++ source code that should not be preprocessed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.hh</itemformat></item>
<itemx spaces=" "><itemformat command="code"><var>file</var>.H</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.hp</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.hxx</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.hpp</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.HPP</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.h++</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.tcc</itemformat></itemx>
</tableterm><tableitem><para>C++ header file to be turned into a precompiled header or Ada spec.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.f</itemformat></item>
<itemx spaces=" "><itemformat command="code"><var>file</var>.for</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.ftn</itemformat></itemx>
</tableterm><tableitem><para>Fixed form Fortran source code that should not be preprocessed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.F</itemformat></item>
<itemx spaces=" "><itemformat command="code"><var>file</var>.FOR</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.fpp</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.FPP</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.FTN</itemformat></itemx>
</tableterm><tableitem><para>Fixed form Fortran source code that must be preprocessed (with the traditional
preprocessor).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.f90</itemformat></item>
<itemx spaces=" "><itemformat command="code"><var>file</var>.f95</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.f03</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.f08</itemformat></itemx>
</tableterm><tableitem><para>Free form Fortran source code that should not be preprocessed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.F90</itemformat></item>
<itemx spaces=" "><itemformat command="code"><var>file</var>.F95</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.F03</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>file</var>.F08</itemformat></itemx>
</tableterm><tableitem><para>Free form Fortran source code that must be preprocessed (with the
traditional preprocessor).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.go</itemformat></item>
</tableterm><tableitem><para>Go source code.
</para>
<!-- c FIXME: Descriptions of Java file types. -->
<!-- c @var{file}.java -->
<!-- c @var{file}.class -->
<!-- c @var{file}.zip -->
<!-- c @var{file}.jar -->

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.ads</itemformat></item>
</tableterm><tableitem><para>Ada source code file that contains a library unit declaration (a
declaration of a package, subprogram, or generic, or a generic
instantiation), or a library unit renaming declaration (a package,
generic, or subprogram renaming declaration).  Such files are also
called <dfn>specs</dfn>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.adb</itemformat></item>
</tableterm><tableitem><para>Ada source code file containing a library unit body (a subprogram or
package body).  Such files are also called <dfn>bodies</dfn>.
</para>
<!-- c GCC also knows about some suffixes for languages not yet included: -->
<!-- c Pascal: -->
<!-- c @var{file}.p -->
<!-- c @var{file}.pas -->
<!-- c Ratfor: -->
<!-- c @var{file}.r -->

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.s</itemformat></item>
</tableterm><tableitem><para>Assembler code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>file</var>.S</itemformat></item>
<itemx spaces=" "><itemformat command="code"><var>file</var>.sx</itemformat></itemx>
</tableterm><tableitem><para>Assembler code that must be preprocessed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>other</var></itemformat></item>
</tableterm><tableitem><para>An object file to be fed straight into linking.
Any file name with no recognized suffix is treated this way.
</para></tableitem></tableentry></table>

<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="6" incode="1">x</indexterm></indexcommand>
<para>You can specify the input language explicitly with the <option>-x</option> option:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-x <var>language</var></itemformat></item>
</tableterm><tableitem><para>Specify explicitly the <var>language</var> for the following input files
(rather than letting the compiler choose a default based on the file
name suffix).  This option applies to all following input files until
the next <option>-x</option> option.  Possible values for <var>language</var> are:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">c  c-header  cpp-output
c++  c++-header  c++-cpp-output
objective-c  objective-c-header  objective-c-cpp-output
objective-c++ objective-c++-header objective-c++-cpp-output
assembler  assembler-with-cpp
ada
f77  f77-cpp-input f95  f95-cpp-input
go
java
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-x none</itemformat></item>
</tableterm><tableitem><para>Turn off any specification of a language, so that subsequent files are
handled according to their file name suffixes (as they are if <option>-x</option>
has not been used at all).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-pass-exit-codes</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="7" incode="1">pass-exit-codes</indexterm></indexcommand>
<para>Normally the <command>gcc</command> program exits with the code of 1 if any
phase of the compiler returns a non-success return code.  If you specify
<option>-pass-exit-codes</option>, the <command>gcc</command> program instead returns with
the numerically highest error produced by any phase returning an error
indication.  The C, C++, and Fortran front ends return 4 if an internal
compiler error is encountered.
</para></tableitem></tableentry></table>

<para>If you only want some of the stages of compilation, you can use
<option>-x</option> (or filename suffixes) to tell <command>gcc</command> where to start, and
one of the options <option>-c</option>, <option>-S</option>, or <option>-E</option> to say where
<command>gcc</command> is to stop.  Note that some combinations (for example,
<samp>-x cpp-output -E</samp>) instruct <command>gcc</command> to do nothing at all.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-c</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="8" incode="1">c</indexterm></indexcommand>
<para>Compile or assemble the source files, but do not link.  The linking
stage simply is not done.  The ultimate output is in the form of an
object file for each source file.
</para>
<para>By default, the object file name for a source file is made by replacing
the suffix <samp>.c</samp>, <samp>.i</samp>, <samp>.s</samp>, etc., with <samp>.o</samp>.
</para>
<para>Unrecognized input files, not requiring compilation or assembly, are
ignored.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-S</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="9" incode="1">S</indexterm></indexcommand>
<para>Stop after the stage of compilation proper; do not assemble.  The output
is in the form of an assembler code file for each non-assembler input
file specified.
</para>
<para>By default, the assembler file name for a source file is made by
replacing the suffix <samp>.c</samp>, <samp>.i</samp>, etc., with <samp>.s</samp>.
</para>
<para>Input files that don&textrsquo;t require compilation are ignored.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-E</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="10" incode="1">E</indexterm></indexcommand>
<para>Stop after the preprocessing stage; do not run the compiler proper.  The
output is in the form of preprocessed source code, which is sent to the
standard output.
</para>
<para>Input files that don&textrsquo;t require preprocessing are ignored.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="71">output file option</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-o <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="11" incode="1">o</indexterm></indexcommand>
<para>Place output in file <var>file</var>.  This applies to whatever
sort of output is being produced, whether it be an executable file,
an object file, an assembler file or preprocessed C code.
</para>
<para>If <option>-o</option> is not specified, the default is to put an executable
file in <file>a.out</file>, the object file for
<file><var>source</var>.<var>suffix</var></file> in <file><var>source</var>.o</file>, its
assembler file in <file><var>source</var>.s</file>, a precompiled header file in
<file><var>source</var>.<var>suffix</var>.gch</file>, and all preprocessed C source on
standard output.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-v</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="12" incode="1">v</indexterm></indexcommand>
<para>Print (on standard error output) the commands executed to run the stages
of compilation.  Also print the version number of the compiler driver
program and of the preprocessor and the compiler proper.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-###</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="13" incode="1">###</indexterm></indexcommand>
<para>Like <option>-v</option> except the commands are not executed and arguments
are quoted unless they contain only alphanumeric characters or <code>./-_</code>.
This is useful for shell scripts to capture the driver-generated command lines.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-pipe</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="14" incode="1">pipe</indexterm></indexcommand>
<para>Use pipes rather than temporary files for communication between the
various stages of compilation.  This fails to work on some systems where
the assembler is unable to read from a pipe; but the GNU assembler has
no trouble.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">--help</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="15" incode="1">help</indexterm></indexcommand>
<para>Print (on the standard output) a description of the command-line options
understood by <command>gcc</command>.  If the <option>-v</option> option is also specified
then <option>--help</option> is also passed on to the various processes
invoked by <command>gcc</command>, so that they can display the command-line options
they accept.  If the <option>-Wextra</option> option has also been specified
(prior to the <option>--help</option> option), then command-line options that
have no documentation associated with them are also displayed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">--target-help</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="16" incode="1">target-help</indexterm></indexcommand>
<para>Print (on the standard output) a description of target-specific command-line
options for each tool.  For some targets extra target-specific
information may also be printed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">--help=&lbrace;<var>class</var><r>|[</r>^<r>]</r><var>qualifier</var>&rbrace;<r>[</r>,&dots;<r>]</r></itemformat></item>
</tableterm><tableitem><para>Print (on the standard output) a description of the command-line
options understood by the compiler that fit into all specified classes
and qualifiers.  These are the supported classes:
</para>
<table commandarg="asis" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>optimizers</samp></itemformat></item>
</tableterm><tableitem><para>Display all of the optimization options supported by the
compiler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>warnings</samp></itemformat></item>
</tableterm><tableitem><para>Display all of the options controlling warning messages
produced by the compiler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>target</samp></itemformat></item>
</tableterm><tableitem><para>Display target-specific options.  Unlike the
<option>--target-help</option> option however, target-specific options of the
linker and assembler are not displayed.  This is because those
tools do not currently support the extended <option>--help=</option> syntax.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>params</samp></itemformat></item>
</tableterm><tableitem><para>Display the values recognized by the <option>--param</option>
option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><var>language</var></itemformat></item>
</tableterm><tableitem><para>Display the options supported for <var>language</var>, where
<var>language</var> is the name of one of the languages supported in this
version of GCC&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>common</samp></itemformat></item>
</tableterm><tableitem><para>Display the options that are common to all languages.
</para></tableitem></tableentry></table>

<para>These are the supported qualifiers:
</para>
<table commandarg="asis" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>undocumented</samp></itemformat></item>
</tableterm><tableitem><para>Display only those options that are undocumented.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>joined</samp></itemformat></item>
</tableterm><tableitem><para>Display options taking an argument that appears after an equal
sign in the same continuous piece of text, such as:
<samp>--help=target</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>separate</samp></itemformat></item>
</tableterm><tableitem><para>Display options taking an argument that appears as a separate word
following the original option, such as: <samp>-o output-file</samp>.
</para></tableitem></tableentry></table>

<para>Thus for example to display all the undocumented target-specific
switches supported by the compiler, use:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">--help=target,undocumented
</pre></smallexample>

<para>The sense of a qualifier can be inverted by prefixing it with the
<samp>^</samp> character, so for example to display all binary warning
options (i.e., ones that are either on or off and that do not take an
argument) that have a description, use:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">--help=warnings,^joined,^undocumented
</pre></smallexample>

<para>The argument to <option>--help=</option> should not consist solely of inverted
qualifiers.
</para>
<para>Combining several classes is possible, although this usually
restricts the output so much that there is nothing to display.  One
case where it does work, however, is when one of the classes is
<var>target</var>.  For example, to display all the target-specific
optimization options, use:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">--help=target,optimizers
</pre></smallexample>

<para>The <option>--help=</option> option can be repeated on the command line.  Each
successive use displays its requested class of options, skipping
those that have already been displayed.
</para>
<para>If the <option>-Q</option> option appears on the command line before the
<option>--help=</option> option, then the descriptive text displayed by
<option>--help=</option> is changed.  Instead of describing the displayed
options, an indication is given as to whether the option is enabled,
disabled or set to a specific value (assuming that the compiler
knows this at the point where the <option>--help=</option> option is used).
</para>
<para>Here is a truncated example from the ARM port of <command>gcc</command>:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  % gcc -Q -mabi=2 --help=target -c
  The following options are target specific:
  -mabi=                                2
  -mabort-on-noreturn                   [disabled]
  -mapcs                                [disabled]
</pre></smallexample>

<para>The output is sensitive to the effects of previous command-line
options, so for example it is possible to find out which optimizations
are enabled at <option>-O2</option> by using:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">-Q -O2 --help=optimizers
</pre></smallexample>

<para>Alternatively you can discover which binary optimizations are enabled
by <option>-O3</option> by using:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -c -Q -O3 --help=optimizers &gt; /tmp/O3-opts
gcc -c -Q -O2 --help=optimizers &gt; /tmp/O2-opts
diff /tmp/O2-opts /tmp/O3-opts | grep enabled
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-no-canonical-prefixes</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="17" incode="1">no-canonical-prefixes</indexterm></indexcommand>
<para>Do not expand any symbolic links, resolve references to <samp>/../</samp>
or <samp>/./</samp>, or make the path absolute when generating a relative
prefix.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">--version</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="18" incode="1">version</indexterm></indexcommand>
<para>Display the version number and copyrights of the invoked GCC&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-wrapper</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="19" incode="1">wrapper</indexterm></indexcommand>
<para>Invoke all subcommands under a wrapper program.  The name of the
wrapper program and its parameters are passed as a comma separated
list.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -c t.c -wrapper gdb,--args
</pre></smallexample>

<noindent></noindent>
<para>This invokes all subprograms of <command>gcc</command> under
<samp>gdb --args</samp>, thus the invocation of <command>cc1</command> is
<samp>gdb --args cc1 &dots;</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fplugin=<var>name</var>.so</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="20" incode="1">fplugin</indexterm></indexcommand>
<para>Load the plugin code in file <var>name</var>.so, assumed to be a
shared object to be dlopen&textrsquo;d by the compiler.  The base name of
the shared object file is used to identify the plugin for the
purposes of argument parsing (See
<option>-fplugin-arg-<var>name</var>-<var>key</var>=<var>value</var></option> below).
Each plugin should define the callback functions specified in the
Plugins API.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fplugin-arg-<var>name</var>-<var>key</var>=<var>value</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="21" incode="1">fplugin-arg</indexterm></indexcommand>
<para>Define an argument called <var>key</var> with a value of <var>value</var>
for the plugin called <var>name</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-ada-spec<r>[</r>-slim<r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="22" incode="1">fdump-ada-spec</indexterm></indexcommand>
<para>For C and C++ source and include files, generate corresponding Ada specs.
<xref label="Generating-Ada-Bindings-for-C-and-C_002b_002b-headers" manual="gnat_ugn"><xrefnodename>Generating Ada Bindings for C and C++ headers</xrefnodename><xrefinfofile spaces=" ">gnat_ugn</xrefinfofile><xrefprintedname spaces="\n">GNAT User&textrsquo;s Guide</xrefprintedname></xref>, which provides detailed documentation on this feature.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fada-spec-parent=<var>unit</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="23" incode="1">fada-spec-parent</indexterm></indexcommand>
<para>In conjunction with <option>-fdump-ada-spec<r>[</r>-slim<r>]</r></option> above, generate
Ada specs as child units of parent <var>unit</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-go-spec=<var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="24" incode="1">fdump-go-spec</indexterm></indexcommand>
<para>For input files in any language, generate corresponding Go
declarations in <var>file</var>.  This generates Go <code>const</code>,
<code>type</code>, <code>var</code>, and <code>func</code> declarations which may be a
useful way to start writing a Go interface to code written in some
other language.
</para>
<!-- c This file is designed to be included in manuals that use  -->
<!-- c expandargv. -->

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">&arobase;<var>file</var></itemformat></item>
</tableterm><tableitem><para>Read command-line options from <var>file</var>.  The options read are
inserted in place of the original &arobase;<var>file</var> option.  If <var>file</var>
does not exist, or cannot be read, then the option will be treated
literally, and not removed.  
</para>
<para>Options in <var>file</var> are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The <var>file</var> may itself contain additional
&arobase;<var>file</var> options; any such options will be processed recursively.
</para></tableitem></tableentry></table>

</section>
<node name="Invoking-G_002b_002b" spaces=" "><nodename>Invoking G++</nodename><nodenext automatic="on">C Dialect Options</nodenext><nodeprev automatic="on">Overall Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Compiling C++ Programs</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="72">suffixes for C++ source</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="73">C++ source file suffixes</indexterm></cindex>
<para>C++ source files conventionally use one of the suffixes <samp>.C</samp>,
<samp>.cc</samp>, <samp>.cpp</samp>, <samp>.CPP</samp>, <samp>.c++</samp>, <samp>.cp</samp>, or
<samp>.cxx</samp>; C++ header files often use <samp>.hh</samp>, <samp>.hpp</samp>,
<samp>.H</samp>, or (for shared template code) <samp>.tcc</samp>; and
preprocessed C++ files use the suffix <samp>.ii</samp>.  GCC recognizes
files with these names and compiles them as C++ programs even if you
call the compiler the same way as for compiling C programs (usually
with the name <command>gcc</command>).
</para>
<findex index="fn" spaces=" "><indexterm index="fn" number="2" mergedindex="cp">g++</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="3" mergedindex="cp">c++</indexterm></findex>
<para>However, the use of <command>gcc</command> does not add the C++ library.
<command>g++</command> is a program that calls GCC and automatically specifies linking
against the C++ library.  It treats <samp>.c</samp>,
<samp>.h</samp> and <samp>.i</samp> files as C++ source files instead of C source
files unless <option>-x</option> is used.  This program is also useful when
precompiling a C header file with a <samp>.h</samp> extension for use in C++
compilations.  On many systems, <command>g++</command> is also installed with
the name <command>c++</command>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="74">invoking <command>g++</command></indexterm></cindex>
<para>When you compile C++ programs, you may specify many of the same
command-line options that you use for compiling programs in any
language; or command-line options meaningful for C and related
languages; or options that are meaningful only for C++ programs.
<xref label="C-Dialect-Options"><xrefnodename>C Dialect Options</xrefnodename><xrefprinteddesc>Options Controlling C Dialect</xrefprinteddesc></xref>, for
explanations of options for languages related to C&eosperiod;
<xref label="C_002b_002b-Dialect-Options"><xrefnodename>C++ Dialect Options</xrefnodename><xrefprinteddesc>Options Controlling C++ Dialect</xrefprinteddesc></xref>, for
explanations of options that are meaningful only for C++ programs.
</para>
</section>
<node name="C-Dialect-Options" spaces=" "><nodename>C Dialect Options</nodename><nodenext automatic="on">C++ Dialect Options</nodenext><nodeprev automatic="on">Invoking G++</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Options Controlling C Dialect</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="75">dialect options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="76">language dialect options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="77">options, dialect</indexterm></cindex>

<para>The following options control the dialect of C (or languages derived
from C, such as C++, Objective-C and Objective-C++) that the compiler
accepts:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem><cindex index="cp" spaces=" "><indexterm index="cp" number="78">ANSI support</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="79">ISO support</indexterm></cindex>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-ansi</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="25" incode="1">ansi</indexterm></indexcommand>
<para>In C mode, this is equivalent to <option>-std=c90</option>. In C++ mode, it is
equivalent to <option>-std=c++98</option>.
</para>
<para>This turns off certain features of GCC that are incompatible with ISO
C90 (when compiling C code), or of standard C++ (when compiling C++ code),
such as the <code>asm</code> and <code>typeof</code> keywords, and
predefined macros such as <code>unix</code> and <code>vax</code> that identify the
type of system you are using.  It also enables the undesirable and
rarely used ISO trigraph feature.  For the C compiler,
it disables recognition of C++ style <samp>//</samp> comments as well as
the <code>inline</code> keyword.
</para>
<para>The alternate keywords <code>__asm__</code>, <code>__extension__</code>,
<code>__inline__</code> and <code>__typeof__</code> continue to work despite
<option>-ansi</option>.  You would not want to use them in an ISO C program, of
course, but it is useful to put them in header files that might be included
in compilations done with <option>-ansi</option>.  Alternate predefined macros
such as <code>__unix__</code> and <code>__vax__</code> are also available, with or
without <option>-ansi</option>.
</para>
<para>The <option>-ansi</option> option does not cause non-ISO programs to be
rejected gratuitously.  For that, <option>-Wpedantic</option> is required in
addition to <option>-ansi</option>.  <xref label="Warning-Options"><xrefnodename>Warning Options</xrefnodename></xref>.
</para>
<para>The macro <code>__STRICT_ANSI__</code> is predefined when the <option>-ansi</option>
option is used.  Some header files may notice this macro and refrain
from declaring certain functions or defining certain macros that the
ISO standard doesn&textrsquo;t call for; this is to avoid interfering with any
programs that might use these names for other things.
</para>
<para>Functions that are normally built in but do not have semantics
defined by ISO C (such as <code>alloca</code> and <code>ffs</code>) are not built-in
functions when <option>-ansi</option> is used.  <xref label="Other-Builtins"><xrefnodename>Other Builtins</xrefnodename><xrefprinteddesc>Other
built-in functions provided by GCC</xrefprinteddesc></xref>, for details of the functions
affected.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-std=</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="26" incode="1">std</indexterm></indexcommand>
<para>Determine the language standard. <xref label="Standards"><xrefnodename>Standards</xrefnodename><xrefprinteddesc>Language Standards
Supported by GCC</xrefprinteddesc></xref>, for details of these standard versions.  This option
is currently only supported when compiling C or C++.
</para>
<para>The compiler can accept several base standards, such as <samp>c90</samp> or
<samp>c++98</samp>, and GNU dialects of those standards, such as
<samp>gnu90</samp> or <samp>gnu++98</samp>.  When a base standard is specified, the
compiler accepts all programs following that standard plus those
using GNU extensions that do not contradict it.  For example,
<option>-std=c90</option> turns off certain features of GCC that are
incompatible with ISO C90, such as the <code>asm</code> and <code>typeof</code>
keywords, but not other GNU extensions that do not have a meaning in
ISO C90, such as omitting the middle term of a <code>?:</code>
expression. On the other hand, when a GNU dialect of a standard is
specified, all features supported by the compiler are enabled, even when
those features change the meaning of the base standard.  As a result, some
strict-conforming programs may be rejected.  The particular standard
is used by <option>-Wpedantic</option> to identify which features are GNU
extensions given that version of the standard. For example
<option>-std=gnu90 -Wpedantic</option> warns about C++ style <samp>//</samp>
comments, while <option>-std=gnu99 -Wpedantic</option> does not.
</para>
<para>A value for this option must be provided; possible values are
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">c90</itemformat></item>
<itemx spaces=" "><itemformat command="samp">c89</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">iso9899:1990</itemformat></itemx>
</tableterm><tableitem><para>Support all ISO C90 programs (certain GNU extensions that conflict
with ISO C90 are disabled). Same as <option>-ansi</option> for C code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">iso9899:199409</itemformat></item>
</tableterm><tableitem><para>ISO C90 as modified in amendment 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c99</itemformat></item>
<itemx spaces=" "><itemformat command="samp">c9x</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">iso9899:1999</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">iso9899:199x</itemformat></itemx>
</tableterm><tableitem><para>ISO C99.  This standard is substantially completely supported, modulo
bugs and floating-point issues
(mainly but not entirely relating to optional C99 features from
Annexes F and G).  See
<w><uref><urefurl>http://gcc.gnu.org/c99status.html</urefurl></uref></w> for more information.  The
names <samp>c9x</samp> and <samp>iso9899:199x</samp> are deprecated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c11</itemformat></item>
<itemx spaces=" "><itemformat command="samp">c1x</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">iso9899:2011</itemformat></itemx>
</tableterm><tableitem><para>ISO C11, the 2011 revision of the ISO C standard.  This standard is
substantially completely supported, modulo bugs, floating-point issues
(mainly but not entirely relating to optional C11 features from
Annexes F and G) and the optional Annexes K (Bounds-checking
interfaces) and L (Analyzability).  The name <samp>c1x</samp> is deprecated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">gnu90</itemformat></item>
<itemx spaces=" "><itemformat command="samp">gnu89</itemformat></itemx>
</tableterm><tableitem><para>GNU dialect of ISO C90 (including some C99 features).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">gnu99</itemformat></item>
<itemx spaces=" "><itemformat command="samp">gnu9x</itemformat></itemx>
</tableterm><tableitem><para>GNU dialect of ISO C99.  The name <samp>gnu9x</samp> is deprecated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">gnu11</itemformat></item>
<itemx spaces=" "><itemformat command="samp">gnu1x</itemformat></itemx>
</tableterm><tableitem><para>GNU dialect of ISO C11.  This is the default for C code.
The name <samp>gnu1x</samp> is deprecated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c++98</itemformat></item>
<itemx spaces=" "><itemformat command="samp">c++03</itemformat></itemx>
</tableterm><tableitem><para>The 1998 ISO C++ standard plus the 2003 technical corrigendum and some
additional defect reports. Same as <option>-ansi</option> for C++ code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">gnu++98</itemformat></item>
<itemx spaces=" "><itemformat command="samp">gnu++03</itemformat></itemx>
</tableterm><tableitem><para>GNU dialect of <option>-std=c++98</option>.  This is the default for
C++ code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c++11</itemformat></item>
<itemx spaces=" "><itemformat command="samp">c++0x</itemformat></itemx>
</tableterm><tableitem><para>The 2011 ISO C++ standard plus amendments.
The name <samp>c++0x</samp> is deprecated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">gnu++11</itemformat></item>
<itemx spaces=" "><itemformat command="samp">gnu++0x</itemformat></itemx>
</tableterm><tableitem><para>GNU dialect of <option>-std=c++11</option>.
The name <samp>gnu++0x</samp> is deprecated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c++14</itemformat></item>
<itemx spaces=" "><itemformat command="samp">c++1y</itemformat></itemx>
</tableterm><tableitem><para>The 2014 ISO C++ standard plus amendments.
The name <samp>c++1y</samp> is deprecated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">gnu++14</itemformat></item>
<itemx spaces=" "><itemformat command="samp">gnu++1y</itemformat></itemx>
</tableterm><tableitem><para>GNU dialect of <option>-std=c++14</option>.
The name <samp>gnu++1y</samp> is deprecated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c++1z</itemformat></item>
</tableterm><tableitem><para>The next revision of the ISO C++ standard, tentatively planned for
2017.  Support is highly experimental, and will almost certainly
change in incompatible ways in future releases.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">gnu++1z</itemformat></item>
</tableterm><tableitem><para>GNU dialect of <option>-std=c++1z</option>.  Support is highly experimental,
and will almost certainly change in incompatible ways in future
releases.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fgnu89-inline</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="27" incode="1">fgnu89-inline</indexterm></indexcommand>
<para>The option <option>-fgnu89-inline</option> tells GCC to use the traditional
GNU semantics for <code>inline</code> functions when in C99 mode.
<xref label="Inline"><xrefnodename>Inline</xrefnodename><xrefprinteddesc>An Inline Function is As Fast As a Macro</xrefprinteddesc></xref>.
Using this option is roughly equivalent to adding the
<code>gnu_inline</code> function attribute to all inline functions
(<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>).
</para>
<para>The option <option>-fno-gnu89-inline</option> explicitly tells GCC to use the
C99 semantics for <code>inline</code> when in C99 or gnu99 mode (i.e., it
specifies the default behavior).
This option is not supported in <option>-std=c90</option> or
<option>-std=gnu90</option> mode.
</para>
<para>The preprocessor macros <code>__GNUC_GNU_INLINE__</code> and
<code>__GNUC_STDC_INLINE__</code> may be used to check which semantics are
in effect for <code>inline</code> functions.  <xref label="Common-Predefined-Macros" manual="cpp"><xrefnodename>Common Predefined
Macros</xrefnodename><xrefinfofile>cpp</xrefinfofile><xrefprintedname>The C Preprocessor</xrefprintedname></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-aux-info <var>filename</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="28" incode="1">aux-info</indexterm></indexcommand>
<para>Output to the given filename prototyped declarations for all functions
declared and/or defined in a translation unit, including those in header
files.  This option is silently ignored in any language other than C&eosperiod;
</para>
<para>Besides declarations, the file indicates, in comments, the origin of
each declaration (source file and line), whether the declaration was
implicit, prototyped or unprototyped (<samp>I</samp>, <samp>N</samp> for new or
<samp>O</samp> for old, respectively, in the first character after the line
number and the colon), and whether it came from a declaration or a
definition (<samp>C</samp> or <samp>F</samp>, respectively, in the following
character).  In the case of function definitions, a K&amp;R-style list of
arguments followed by their declarations is also provided, inside
comments, after the declaration.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fallow-parameterless-variadic-functions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="29" incode="1">fallow-parameterless-variadic-functions</indexterm></indexcommand>
<para>Accept variadic functions without named parameters.
</para>
<para>Although it is possible to define such a function, this is not very
useful as it is not possible to read the arguments.  This is only
supported for C as this construct is allowed by C++.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-asm</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="30" incode="1">fno-asm</indexterm></indexcommand>
<para>Do not recognize <code>asm</code>, <code>inline</code> or <code>typeof</code> as a
keyword, so that code can use these words as identifiers.  You can use
the keywords <code>__asm__</code>, <code>__inline__</code> and <code>__typeof__</code>
instead.  <option>-ansi</option> implies <option>-fno-asm</option>.
</para>
<para>In C++, this switch only affects the <code>typeof</code> keyword, since
<code>asm</code> and <code>inline</code> are standard keywords.  You may want to
use the <option>-fno-gnu-keywords</option> flag instead, which has the same
effect.  In C99 mode (<option>-std=c99</option> or <option>-std=gnu99</option>), this
switch only affects the <code>asm</code> and <code>typeof</code> keywords, since
<code>inline</code> is a standard keyword in ISO C99.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-builtin</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fno-builtin-<var>function</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="31" incode="1">fno-builtin</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="80">built-in functions</indexterm></cindex>
<para>Don&textrsquo;t recognize built-in functions that do not begin with
<samp>__builtin_</samp> as prefix.  <xref label="Other-Builtins"><xrefnodename>Other Builtins</xrefnodename><xrefprinteddesc>Other built-in
functions provided by GCC</xrefprinteddesc></xref>, for details of the functions affected,
including those which are not built-in functions when <option>-ansi</option> or
<option>-std</option> options for strict ISO C conformance are used because they
do not have an ISO standard meaning.
</para>
<para>GCC normally generates special code to handle certain built-in functions
more efficiently; for instance, calls to <code>alloca</code> may become single
instructions which adjust the stack directly, and calls to <code>memcpy</code>
may become inline copy loops.  The resulting code is often both smaller
and faster, but since the function calls no longer appear as such, you
cannot set a breakpoint on those calls, nor can you change the behavior
of the functions by linking with a different library.  In addition,
when a function is recognized as a built-in function, GCC may use
information about that function to warn about problems with calls to
that function, or to generate more efficient code, even if the
resulting code still contains calls to that function.  For example,
warnings are given with <option>-Wformat</option> for bad calls to
<code>printf</code> when <code>printf</code> is built in and <code>strlen</code> is
known not to modify global memory.
</para>
<para>With the <option>-fno-builtin-<var>function</var></option> option
only the built-in function <var>function</var> is
disabled.  <var>function</var> must not begin with <samp>__builtin_</samp>.  If a
function is named that is not built-in in this version of GCC, this
option is ignored.  There is no corresponding
<option>-fbuiltin-<var>function</var></option> option; if you wish to enable
built-in functions selectively when using <option>-fno-builtin</option> or
<option>-ffreestanding</option>, you may define macros such as:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define abs(n)          __builtin_abs ((n))
#define strcpy(d, s)    __builtin_strcpy ((d), (s))
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fhosted</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="32" incode="1">fhosted</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="81">hosted environment</indexterm></cindex>

<para>Assert that compilation targets a hosted environment.  This implies
<option>-fbuiltin</option>.  A hosted environment is one in which the
entire standard library is available, and in which <code>main</code> has a return
type of <code>int</code>.  Examples are nearly everything except a kernel.
This is equivalent to <option>-fno-freestanding</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ffreestanding</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="33" incode="1">ffreestanding</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="82">hosted environment</indexterm></cindex>

<para>Assert that compilation targets a freestanding environment.  This
implies <option>-fno-builtin</option>.  A freestanding environment
is one in which the standard library may not exist, and program startup may
not necessarily be at <code>main</code>.  The most obvious example is an OS kernel.
This is equivalent to <option>-fno-hosted</option>.
</para>
<para><xref label="Standards"><xrefnodename>Standards</xrefnodename><xrefprinteddesc>Language Standards Supported by GCC</xrefprinteddesc></xref>, for details of
freestanding and hosted environments.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fopenacc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="34" incode="1">fopenacc</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="83">OpenACC accelerator programming</indexterm></cindex>
<para>Enable handling of OpenACC directives <code>#pragma acc</code> in C/C++ and
<code>!$acc</code> in Fortran.  When <option>-fopenacc</option> is specified, the
compiler generates accelerated code according to the OpenACC Application
Programming Interface v2.0 <w><uref><urefurl>http://www.openacc.org/</urefurl></uref></w>.  This option
implies <option>-pthread</option>, and thus is only supported on targets that
have support for <option>-pthread</option>.
</para>
<para>Note that this is an experimental feature, incomplete, and subject to
change in future versions of GCC.  See
<w><uref><urefurl>https://gcc.gnu.org/wiki/OpenACC</urefurl></uref></w> for more information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fopenmp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="35" incode="1">fopenmp</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="84">OpenMP parallel</indexterm></cindex>
<para>Enable handling of OpenMP directives <code>#pragma omp</code> in C/C++ and
<code>!$omp</code> in Fortran.  When <option>-fopenmp</option> is specified, the
compiler generates parallel code according to the OpenMP Application
Program Interface v4.0 <w><uref><urefurl>http://www.openmp.org/</urefurl></uref></w>.  This option
implies <option>-pthread</option>, and thus is only supported on targets that
have support for <option>-pthread</option>. <option>-fopenmp</option> implies
<option>-fopenmp-simd</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fopenmp-simd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="36" incode="1">fopenmp-simd</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="85">OpenMP SIMD</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="86">SIMD</indexterm></cindex>
<para>Enable handling of OpenMP&textrsquo;s SIMD directives with <code>#pragma omp</code>
in C/C++ and <code>!$omp</code> in Fortran. Other OpenMP directives
are ignored.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcilkplus</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="37" incode="1">fcilkplus</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="87">Enable Cilk Plus</indexterm></cindex>
<para>Enable the usage of Cilk Plus language extension features for C/C++.
When the option <option>-fcilkplus</option> is specified, enable the usage of
the Cilk Plus Language extension features for C/C++.  The present
implementation follows ABI version 1.2.  This is an experimental
feature that is only partially complete, and whose interface may
change in future versions of GCC as the official specification
changes.  Currently, all features but <code>_Cilk_for</code> have been
implemented.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fgnu-tm</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="38" incode="1">fgnu-tm</indexterm></indexcommand>
<para>When the option <option>-fgnu-tm</option> is specified, the compiler
generates code for the Linux variant of Intel&textrsquo;s current Transactional
Memory ABI specification document (Revision 1.1, May 6 2009).  This is
an experimental feature whose interface may change in future versions
of GCC, as the official specification changes.  Please note that not
all architectures are supported for this feature.
</para>
<para>For more information on GCC&textrsquo;s support for transactional memory,
<xref label="Enabling-libitm" manual="libitm"><xrefnodename>Enabling libitm</xrefnodename><xrefprinteddesc>The GNU Transactional Memory Library</xrefprinteddesc><xrefinfofile>libitm</xrefinfofile><xrefprintedname>GNU
Transactional Memory Library</xrefprintedname></xref>.
</para>
<para>Note that the transactional memory feature is not supported with
non-call exceptions (<option>-fnon-call-exceptions</option>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fms-extensions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="39" incode="1">fms-extensions</indexterm></indexcommand>
<para>Accept some non-standard constructs used in Microsoft header files.
</para>
<para>In C++ code, this allows member names in structures to be similar
to previous types declarations.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef int UOW;
struct ABC &lbrace;
  UOW UOW;
&rbrace;;
</pre></smallexample>

<para>Some cases of unnamed fields in structures and unions are only
accepted with this option.  <xref label="Unnamed-Fields"><xrefnodename>Unnamed Fields</xrefnodename><xrefprinteddesc>Unnamed struct/union
fields within structs/unions</xrefprinteddesc></xref>, for details.
</para>
<para>Note that this option is off for all targets but x86 
targets using ms-abi.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fplan9-extensions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="40" incode="1">fplan9-extensions</indexterm></indexcommand>
<para>Accept some non-standard constructs used in Plan 9 code.
</para>
<para>This enables <option>-fms-extensions</option>, permits passing pointers to
structures with anonymous fields to functions that expect pointers to
elements of the type of the field, and permits referring to anonymous
fields declared using a typedef.  <xref label="Unnamed-Fields"><xrefnodename>Unnamed Fields</xrefnodename><xrefprinteddesc>Unnamed
struct/union fields within structs/unions</xrefprinteddesc></xref>, for details.  This is only
supported for C, not C++.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-trigraphs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="41" incode="1">trigraphs</indexterm></indexcommand>
<para>Support ISO C trigraphs.  The <option>-ansi</option> option (and <option>-std</option>
options for strict ISO C conformance) implies <option>-trigraphs</option>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="88">traditional C language</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="89">C language, traditional</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-traditional</itemformat></item>
<itemx spaces=" "><itemformat command="code">-traditional-cpp</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="42" incode="1">traditional-cpp</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="43" incode="1">traditional</indexterm></indexcommand>
<para>Formerly, these options caused GCC to attempt to emulate a pre-standard
C compiler.  They are now only supported with the <option>-E</option> switch.
The preprocessor continues to support a pre-standard mode.  See the GNU
CPP manual for details.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcond-mismatch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="44" incode="1">fcond-mismatch</indexterm></indexcommand>
<para>Allow conditional expressions with mismatched types in the second and
third arguments.  The value of such an expression is void.  This option
is not supported for C++.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-flax-vector-conversions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="45" incode="1">flax-vector-conversions</indexterm></indexcommand>
<para>Allow implicit conversions between vectors with differing numbers of
elements and/or incompatible element types.  This option should not be
used for new code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-funsigned-char</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="46" incode="1">funsigned-char</indexterm></indexcommand>
<para>Let the type <code>char</code> be unsigned, like <code>unsigned char</code>.
</para>
<para>Each kind of machine has a default for what <code>char</code> should
be.  It is either like <code>unsigned char</code> by default or like
<code>signed char</code> by default.
</para>
<para>Ideally, a portable program should always use <code>signed char</code> or
<code>unsigned char</code> when it depends on the signedness of an object.
But many programs have been written to use plain <code>char</code> and
expect it to be signed, or expect it to be unsigned, depending on the
machines they were written for.  This option, and its inverse, let you
make such a program work with the opposite default.
</para>
<para>The type <code>char</code> is always a distinct type from each of
<code>signed char</code> or <code>unsigned char</code>, even though its behavior
is always just like one of those two.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsigned-char</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="47" incode="1">fsigned-char</indexterm></indexcommand>
<para>Let the type <code>char</code> be signed, like <code>signed char</code>.
</para>
<para>Note that this is equivalent to <option>-fno-unsigned-char</option>, which is
the negative form of <option>-funsigned-char</option>.  Likewise, the option
<option>-fno-signed-char</option> is equivalent to <option>-funsigned-char</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsigned-bitfields</itemformat></item>
<itemx spaces=" "><itemformat command="code">-funsigned-bitfields</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fno-signed-bitfields</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fno-unsigned-bitfields</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="48" incode="1">fsigned-bitfields</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="49" incode="1">funsigned-bitfields</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="50" incode="1">fno-signed-bitfields</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="51" incode="1">fno-unsigned-bitfields</indexterm></indexcommand>
<para>These options control whether a bit-field is signed or unsigned, when the
declaration does not use either <code>signed</code> or <code>unsigned</code>.  By
default, such a bit-field is signed, because this is consistent: the
basic integer types such as <code>int</code> are signed types.
</para></tableitem></tableentry></table>

</section>
<node name="C_002b_002b-Dialect-Options" spaces=" "><nodename>C++ Dialect Options</nodename><nodenext automatic="on">Objective-C and Objective-C++ Dialect Options</nodenext><nodeprev automatic="on">C Dialect Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Options Controlling C++ Dialect</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="90">compiler options, C++</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="91">C++ options, command-line</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="92">options, C++</indexterm></cindex>
<para>This section describes the command-line options that are only meaningful
for C++ programs.  You can also use most of the GNU compiler options
regardless of what language your program is in.  For example, you
might compile a file <file>firstClass.C</file> like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">g++ -g -frepo -O -c firstClass.C
</pre></smallexample>

<noindent></noindent>
<para>In this example, only <option>-frepo</option> is an option meant
only for C++ programs; you can use the other options with any
language supported by GCC&eosperiod;
</para>
<para>Here is a list of options that are <emph>only</emph> for compiling C++ programs:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-fabi-version=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="52" incode="1">fabi-version</indexterm></indexcommand>
<para>Use version <var>n</var> of the C++ ABI&eosperiod;  The default is version 0.
</para>
<para>Version 0 refers to the version conforming most closely to
the C++ ABI specification.  Therefore, the ABI obtained using version 0
will change in different versions of G++ as ABI bugs are fixed.
</para>
<para>Version 1 is the version of the C++ ABI that first appeared in G++ 3.2.
</para>
<para>Version 2 is the version of the C++ ABI that first appeared in G++
3.4, and was the default through G++ 4.9.
</para>
<para>Version 3 corrects an error in mangling a constant address as a
template argument.
</para>
<para>Version 4, which first appeared in G++ 4.5, implements a standard
mangling for vector types.
</para>
<para>Version 5, which first appeared in G++ 4.6, corrects the mangling of
attribute const/volatile on function pointer types, decltype of a
plain decl, and use of a function parameter in the declaration of
another parameter.
</para>
<para>Version 6, which first appeared in G++ 4.7, corrects the promotion
behavior of C++11 scoped enums and the mangling of template argument
packs, const/static_cast, prefix ++ and &textndash;, and a class scope function
used as a template argument.
</para>
<para>Version 7, which first appeared in G++ 4.8, that treats nullptr_t as a
builtin type and corrects the mangling of lambdas in default argument
scope.
</para>
<para>Version 8, which first appeared in G++ 4.9, corrects the substitution
behavior of function types with function-cv-qualifiers.
</para>
<para>See also <option>-Wabi</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fabi-compat-version=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="53" incode="1">fabi-compat-version</indexterm></indexcommand>
<para>On targets that support strong aliases, G++
works around mangling changes by creating an alias with the correct
mangled name when defining a symbol with an incorrect mangled name.
This switch specifies which ABI version to use for the alias.
</para>
<para>With <option>-fabi-version=0</option> (the default), this defaults to 2.  If
another ABI version is explicitly selected, this defaults to 0.
</para>
<para>The compatibility version is also set by <option>-Wabi=<var>n</var></option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-access-control</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="54" incode="1">fno-access-control</indexterm></indexcommand>
<para>Turn off all access checking.  This switch is mainly useful for working
around bugs in the access control code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcheck-new</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="55" incode="1">fcheck-new</indexterm></indexcommand>
<para>Check that the pointer returned by <code>operator new</code> is non-null
before attempting to modify the storage allocated.  This check is
normally unnecessary because the C++ standard specifies that
<code>operator new</code> only returns <code>0</code> if it is declared
<code>throw()</code>, in which case the compiler always checks the
return value even without this option.  In all other cases, when
<code>operator new</code> has a non-empty exception specification, memory
exhaustion is signalled by throwing <code>std::bad_alloc</code>.  See also
<samp>new (nothrow)</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fconstexpr-depth=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="56" incode="1">fconstexpr-depth</indexterm></indexcommand>
<para>Set the maximum nested evaluation depth for C++11 constexpr functions
to <var>n</var>.  A limit is needed to detect endless recursion during
constant expression evaluation.  The minimum specified by the standard
is 512.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdeduce-init-list</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="57" incode="1">fdeduce-init-list</indexterm></indexcommand>
<para>Enable deduction of a template type parameter as
<code>std::initializer_list</code> from a brace-enclosed initializer list, i.e.&noeos;
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">template &lt;class T&gt; auto forward(T t) -&gt; decltype (realfn (t))
&lbrace;
  return realfn (t);
&rbrace;

void f()
&lbrace;
  forward(&lbrace;1,2&rbrace;); // call forward&lt;std::initializer_list&lt;int&gt;&gt;
&rbrace;
</pre></smallexample>

<para>This deduction was implemented as a possible extension to the
originally proposed semantics for the C++11 standard, but was not part
of the final standard, so it is disabled by default.  This option is
deprecated, and may be removed in a future version of G++.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ffriend-injection</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="58" incode="1">ffriend-injection</indexterm></indexcommand>
<para>Inject friend functions into the enclosing namespace, so that they are
visible outside the scope of the class in which they are declared.
Friend functions were documented to work this way in the old Annotated
C++ Reference Manual.  
However, in ISO C++ a friend function that is not declared
in an enclosing scope can only be found using argument dependent
lookup.  GCC defaults to the standard behavior.
</para>
<para>This option is for compatibility, and may be removed in a future
release of G++.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-elide-constructors</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="59" incode="1">fno-elide-constructors</indexterm></indexcommand>
<para>The C++ standard allows an implementation to omit creating a temporary
that is only used to initialize another object of the same type.
Specifying this option disables that optimization, and forces G++ to
call the copy constructor in all cases.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-enforce-eh-specs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="60" incode="1">fno-enforce-eh-specs</indexterm></indexcommand>
<para>Don&textrsquo;t generate code to check for violation of exception specifications
at run time.  This option violates the C++ standard, but may be useful
for reducing code size in production builds, much like defining
<code>NDEBUG</code>.  This does not give user code permission to throw
exceptions in violation of the exception specifications; the compiler
still optimizes based on the specifications, so throwing an
unexpected exception results in undefined behavior at run time.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fextern-tls-init</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fno-extern-tls-init</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="61" incode="1">fextern-tls-init</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="62" incode="1">fno-extern-tls-init</indexterm></indexcommand>
<para>The C++11 and OpenMP standards allow <code>thread_local</code> and
<code>threadprivate</code> variables to have dynamic (runtime)
initialization.  To support this, any use of such a variable goes
through a wrapper function that performs any necessary initialization.
When the use and definition of the variable are in the same
translation unit, this overhead can be optimized away, but when the
use is in a different translation unit there is significant overhead
even if the variable doesn&textrsquo;t actually need dynamic initialization.  If
the programmer can be sure that no use of the variable in a
non-defining TU needs to trigger dynamic initialization (either
because the variable is statically initialized, or a use of the
variable in the defining TU will be executed before any uses in
another TU), they can avoid this overhead with the
<option>-fno-extern-tls-init</option> option.
</para>
<para>On targets that support symbol aliases, the default is
<option>-fextern-tls-init</option>.  On targets that do not support symbol
aliases, the default is <option>-fno-extern-tls-init</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ffor-scope</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fno-for-scope</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="63" incode="1">ffor-scope</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="64" incode="1">fno-for-scope</indexterm></indexcommand>
<para>If <option>-ffor-scope</option> is specified, the scope of variables declared in
a <i>for-init-statement</i> is limited to the <code>for</code> loop itself,
as specified by the C++ standard.
If <option>-fno-for-scope</option> is specified, the scope of variables declared in
a <i>for-init-statement</i> extends to the end of the enclosing scope,
as was the case in old versions of G++, and other (traditional)
implementations of C++.
</para>
<para>If neither flag is given, the default is to follow the standard,
but to allow and give a warning for old-style code that would
otherwise be invalid, or have different behavior.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-gnu-keywords</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="65" incode="1">fno-gnu-keywords</indexterm></indexcommand>
<para>Do not recognize <code>typeof</code> as a keyword, so that code can use this
word as an identifier.  You can use the keyword <code>__typeof__</code> instead.
<option>-ansi</option> implies <option>-fno-gnu-keywords</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-implicit-templates</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="66" incode="1">fno-implicit-templates</indexterm></indexcommand>
<para>Never emit code for non-inline templates that are instantiated
implicitly (i.e.&noeos; by use); only emit code for explicit instantiations.
<xref label="Template-Instantiation"><xrefnodename>Template Instantiation</xrefnodename></xref>, for more information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-implicit-inline-templates</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="67" incode="1">fno-implicit-inline-templates</indexterm></indexcommand>
<para>Don&textrsquo;t emit code for implicit instantiations of inline templates, either.
The default is to handle inlines differently so that compiles with and
without optimization need the same set of explicit instantiations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-implement-inlines</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="68" incode="1">fno-implement-inlines</indexterm></indexcommand>
<para>To save space, do not emit out-of-line copies of inline functions
controlled by <code>#pragma implementation</code>.  This causes linker
errors if these functions are not inlined everywhere they are called.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fms-extensions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="69" incode="1">fms-extensions</indexterm></indexcommand>
<para>Disable Wpedantic warnings about constructs used in MFC, such as implicit
int and getting a pointer to member function via non-standard syntax.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-nonansi-builtins</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="70" incode="1">fno-nonansi-builtins</indexterm></indexcommand>
<para>Disable built-in declarations of functions that are not mandated by
ANSI/ISO C&eosperiod;  These include <code>ffs</code>, <code>alloca</code>, <code>_exit</code>,
<code>index</code>, <code>bzero</code>, <code>conjf</code>, and other related functions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fnothrow-opt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="71" incode="1">fnothrow-opt</indexterm></indexcommand>
<para>Treat a <code>throw()</code> exception specification as if it were a
<code>noexcept</code> specification to reduce or eliminate the text size
overhead relative to a function with no exception specification.  If
the function has local variables of types with non-trivial
destructors, the exception specification actually makes the
function smaller because the EH cleanups for those variables can be
optimized away.  The semantic effect is that an exception thrown out of
a function with such an exception specification results in a call
to <code>terminate</code> rather than <code>unexpected</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-operator-names</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="72" incode="1">fno-operator-names</indexterm></indexcommand>
<para>Do not treat the operator name keywords <code>and</code>, <code>bitand</code>,
<code>bitor</code>, <code>compl</code>, <code>not</code>, <code>or</code> and <code>xor</code> as
synonyms as keywords.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-optional-diags</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="73" incode="1">fno-optional-diags</indexterm></indexcommand>
<para>Disable diagnostics that the standard says a compiler does not need to
issue.  Currently, the only such diagnostic issued by G++ is the one for
a name having multiple meanings within a class.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpermissive</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="74" incode="1">fpermissive</indexterm></indexcommand>
<para>Downgrade some diagnostics about nonconformant code from errors to
warnings.  Thus, using <option>-fpermissive</option> allows some
nonconforming code to compile.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-pretty-templates</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="75" incode="1">fno-pretty-templates</indexterm></indexcommand>
<para>When an error message refers to a specialization of a function
template, the compiler normally prints the signature of the
template followed by the template arguments and any typedefs or
typenames in the signature (e.g. <code>void f(T) [with T = int]</code>
rather than <code>void f(int)</code>) so that it&textrsquo;s clear which template is
involved.  When an error message refers to a specialization of a class
template, the compiler omits any template arguments that match
the default template arguments for that template.  If either of these
behaviors make it harder to understand the error message rather than
easier, you can use <option>-fno-pretty-templates</option> to disable them.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-frepo</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="76" incode="1">frepo</indexterm></indexcommand>
<para>Enable automatic template instantiation at link time.  This option also
implies <option>-fno-implicit-templates</option>.  <xref label="Template-Instantiation"><xrefnodename>Template
Instantiation</xrefnodename></xref>, for more information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-rtti</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="77" incode="1">fno-rtti</indexterm></indexcommand>
<para>Disable generation of information about every class with virtual
functions for use by the C++ run-time type identification features
(<code>dynamic_cast</code> and <code>typeid</code>).  If you don&textrsquo;t use those parts
of the language, you can save some space by using this flag.  Note that
exception handling uses the same information, but G++ generates it as
needed. The <code>dynamic_cast</code> operator can still be used for casts that
do not require run-time type information, i.e.&noeos; casts to <code>void *</code> or to
unambiguous base classes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsized-deallocation</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="78" incode="1">fsized-deallocation</indexterm></indexcommand>
<para>Enable the built-in global declarations
</para><smallexample endspaces=" ">
<pre xml:space="preserve">void operator delete (void *, std::size_t) noexcept;
void operator delete[] (void *, std::size_t) noexcept;
</pre></smallexample>
<para>as introduced in C++14.  This is useful for user-defined replacement
deallocation functions that, for example, use the size of the object
to make deallocation faster.  Enabled by default under
<option>-std=c++14</option> and above.  The flag <option>-Wsized-deallocation</option>
warns about places that might want to add a definition.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstats</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="79" incode="1">fstats</indexterm></indexcommand>
<para>Emit statistics about front-end processing at the end of the compilation.
This information is generally only useful to the G++ development team.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstrict-enums</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="80" incode="1">fstrict-enums</indexterm></indexcommand>
<para>Allow the compiler to optimize using the assumption that a value of
enumerated type can only be one of the values of the enumeration (as
defined in the C++ standard; basically, a value that can be
represented in the minimum number of bits needed to represent all the
enumerators).  This assumption may not be valid if the program uses a
cast to convert an arbitrary integer value to the enumerated type.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftemplate-backtrace-limit=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="81" incode="1">ftemplate-backtrace-limit</indexterm></indexcommand>
<para>Set the maximum number of template instantiation notes for a single
warning or error to <var>n</var>.  The default value is 10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftemplate-depth=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="82" incode="1">ftemplate-depth</indexterm></indexcommand>
<para>Set the maximum instantiation depth for template classes to <var>n</var>.
A limit on the template instantiation depth is needed to detect
endless recursions during template class instantiation.  ANSI/ISO C++
conforming programs must not rely on a maximum depth greater than 17
(changed to 1024 in C++11).  The default value is 900, as the compiler
can run out of stack space before hitting 1024 in some situations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-threadsafe-statics</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="83" incode="1">fno-threadsafe-statics</indexterm></indexcommand>
<para>Do not emit the extra code to use the routines specified in the C++
ABI for thread-safe initialization of local statics.  You can use this
option to reduce code size slightly in code that doesn&textrsquo;t need to be
thread-safe.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fuse-cxa-atexit</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="84" incode="1">fuse-cxa-atexit</indexterm></indexcommand>
<para>Register destructors for objects with static storage duration with the
<code>__cxa_atexit</code> function rather than the <code>atexit</code> function.
This option is required for fully standards-compliant handling of static
destructors, but only works if your C library supports
<code>__cxa_atexit</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-use-cxa-get-exception-ptr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="85" incode="1">fno-use-cxa-get-exception-ptr</indexterm></indexcommand>
<para>Don&textrsquo;t use the <code>__cxa_get_exception_ptr</code> runtime routine.  This
causes <code>std::uncaught_exception</code> to be incorrect, but is necessary
if the runtime routine is not available.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fvisibility-inlines-hidden</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="86" incode="1">fvisibility-inlines-hidden</indexterm></indexcommand>
<para>This switch declares that the user does not attempt to compare
pointers to inline functions or methods where the addresses of the two functions
are taken in different shared objects.
</para>
<para>The effect of this is that GCC may, effectively, mark inline methods with
<code>__attribute__ ((visibility (&quot;hidden&quot;)))</code> so that they do not
appear in the export table of a DSO and do not require a PLT indirection
when used within the DSO&eosperiod;  Enabling this option can have a dramatic effect
on load and link times of a DSO as it massively reduces the size of the
dynamic export table when the library makes heavy use of templates.
</para>
<para>The behavior of this switch is not quite the same as marking the
methods as hidden directly, because it does not affect static variables
local to the function or cause the compiler to deduce that
the function is defined in only one shared object.
</para>
<para>You may mark a method as having a visibility explicitly to negate the
effect of the switch for that method.  For example, if you do want to
compare pointers to a particular inline method, you might mark it as
having default visibility.  Marking the enclosing class with explicit
visibility has no effect.
</para>
<para>Explicitly instantiated inline methods are unaffected by this option
as their linkage might otherwise cross a shared library boundary.
<xref label="Template-Instantiation"><xrefnodename>Template Instantiation</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fvisibility-ms-compat</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="87" incode="1">fvisibility-ms-compat</indexterm></indexcommand>
<para>This flag attempts to use visibility settings to make GCC&textrsquo;s C++
linkage model compatible with that of Microsoft Visual Studio.
</para>
<para>The flag makes these changes to GCC&textrsquo;s linkage model:
</para>
<enumerate first="1" endspaces=" ">
<listitem>
<para>It sets the default visibility to <code>hidden</code>, like
<option>-fvisibility=hidden</option>.
</para>
</listitem><listitem>
<para>Types, but not their members, are not hidden by default.
</para>
</listitem><listitem>
<para>The One Definition Rule is relaxed for types without explicit
visibility specifications that are defined in more than one
shared object: those declarations are permitted if they are
permitted when this option is not used.
</para></listitem></enumerate>

<para>In new code it is better to use <option>-fvisibility=hidden</option> and
export those classes that are intended to be externally visible.
Unfortunately it is possible for code to rely, perhaps accidentally,
on the Visual Studio behavior.
</para>
<para>Among the consequences of these changes are that static data members
of the same type with the same name but defined in different shared
objects are different, so changing one does not change the other;
and that pointers to function members defined in different shared
objects may not compare equal.  When this flag is given, it is a
violation of the ODR to define types with the same name differently.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fvtable-verify=<r>[</r>std<r>|</r>preinit<r>|</r>none<r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="88" incode="1">fvtable-verify</indexterm></indexcommand>
<para>Turn on (or off, if using <option>-fvtable-verify=none</option>) the security
feature that verifies at run time, for every virtual call, that
the vtable pointer through which the call is made is valid for the type of
the object, and has not been corrupted or overwritten.  If an invalid vtable
pointer is detected at run time, an error is reported and execution of the
program is immediately halted.
</para>
<para>This option causes run-time data structures to be built at program startup,
which are used for verifying the vtable pointers.  
The options <samp>std</samp> and <samp>preinit</samp>
control the timing of when these data structures are built.  In both cases the
data structures are built before execution reaches <code>main</code>.  Using
<option>-fvtable-verify=std</option> causes the data structures to be built after
shared libraries have been loaded and initialized.
<option>-fvtable-verify=preinit</option> causes them to be built before shared
libraries have been loaded and initialized.
</para>
<para>If this option appears multiple times in the command line with different
values specified, <samp>none</samp> takes highest priority over both <samp>std</samp> and
<samp>preinit</samp>; <samp>preinit</samp> takes priority over <samp>std</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fvtv-debug</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="89" incode="1">fvtv-debug</indexterm></indexcommand>
<para>When used in conjunction with <option>-fvtable-verify=std</option> or 
<option>-fvtable-verify=preinit</option>, causes debug versions of the 
runtime functions for the vtable verification feature to be called.  
This flag also causes the compiler to log information about which 
vtable pointers it finds for each class.
This information is written to a file named <file>vtv_set_ptr_data.log</file> 
in the directory named by the environment variable <env>VTV_LOGS_DIR</env> 
if that is defined or the current working directory otherwise.
</para>
<para>Note:  This feature <emph>appends</emph> data to the log file. If you want a fresh log
file, be sure to delete any existing one.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fvtv-counts</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="90" incode="1">fvtv-counts</indexterm></indexcommand>
<para>This is a debugging flag.  When used in conjunction with
<option>-fvtable-verify=std</option> or <option>-fvtable-verify=preinit</option>, this
causes the compiler to keep track of the total number of virtual calls
it encounters and the number of verifications it inserts.  It also
counts the number of calls to certain run-time library functions
that it inserts and logs this information for each compilation unit.
The compiler writes this information to a file named
<file>vtv_count_data.log</file> in the directory named by the environment
variable <env>VTV_LOGS_DIR</env> if that is defined or the current working
directory otherwise.  It also counts the size of the vtable pointer sets
for each class, and writes this information to <file>vtv_class_set_sizes.log</file>
in the same directory.
</para>
<para>Note:  This feature <emph>appends</emph> data to the log files.  To get fresh log
files, be sure to delete any existing ones.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-weak</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="91" incode="1">fno-weak</indexterm></indexcommand>
<para>Do not use weak symbol support, even if it is provided by the linker.
By default, G++ uses weak symbols if they are available.  This
option exists only for testing, and should not be used by end-users;
it results in inferior code and has no benefits.  This option may
be removed in a future release of G++.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-nostdinc++</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="92" incode="1">nostdinc++</indexterm></indexcommand>
<para>Do not search for header files in the standard directories specific to
C++, but do still search the other standard directories.  (This option
is used when building the C++ library.)
</para></tableitem></tableentry></table>

<para>In addition, these optimization, warning, and code generation options
have meanings only for C++ programs:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-Wabi <r>(C, Objective-C, C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="93" incode="1">Wabi</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="94" incode="1">Wno-abi</indexterm></indexcommand>
<para>When an explicit <option>-fabi-version=<var>n</var></option> option is used, causes
G++ to warn when it generates code that is probably not compatible with the
vendor-neutral C++ ABI&eosperiod;  Since G++ now defaults to
<option>-fabi-version=0</option>, <option>-Wabi</option> has no effect unless either
an older ABI version is selected (with <option>-fabi-version=<var>n</var></option>)
or an older compatibility version is selected (with
<option>-Wabi=<var>n</var></option> or <option>-fabi-compat-version=<var>n</var></option>).
</para>
<para>Although an effort has been made to warn about
all such cases, there are probably some cases that are not warned about,
even though G++ is generating incompatible code.  There may also be
cases where warnings are emitted even though the code that is generated
is compatible.
</para>
<para>You should rewrite your code to avoid these warnings if you are
concerned about the fact that code generated by G++ may not be binary
compatible with code generated by other compilers.
</para>
<para><option>-Wabi</option> can also be used with an explicit version number to
warn about compatibility with a particular <option>-fabi-version</option>
level, e.g. <option>-Wabi=2</option> to warn about changes relative to
<option>-fabi-version=2</option>.  Specifying a version number also sets
<option>-fabi-compat-version=<var>n</var></option>.
</para>
<para>The known incompatibilities in <option>-fabi-version=2</option> (which was the
default from GCC 3.4 to 4.9) include:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>A template with a non-type template parameter of reference type was
mangled incorrectly:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">extern int N;
template &lt;int &amp;&gt; struct S &lbrace;&rbrace;;
void n (S&lt;N&gt;) &lbrace;2&rbrace;
</pre></smallexample>

<para>This was fixed in <option>-fabi-version=3</option>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>SIMD vector types declared using <code>__attribute ((vector_size))</code> were
mangled in a non-standard way that does not allow for overloading of
functions taking vectors of different sizes.
</para>
<para>The mangling was changed in <option>-fabi-version=4</option>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><code>__attribute ((const))</code> and <code>noreturn</code> were mangled as type
qualifiers, and <code>decltype</code> of a plain declaration was folded away.
</para>
<para>These mangling issues were fixed in <option>-fabi-version=5</option>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Scoped enumerators passed as arguments to a variadic function are
promoted like unscoped enumerators, causing <code>va_arg</code> to complain.
On most targets this does not actually affect the parameter passing
ABI, as there is no way to pass an argument smaller than <code>int</code>.
</para>
<para>Also, the ABI changed the mangling of template argument packs,
<code>const_cast</code>, <code>static_cast</code>, prefix increment/decrement, and
a class scope function used as a template argument.
</para>
<para>These issues were corrected in <option>-fabi-version=6</option>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Lambdas in default argument scope were mangled incorrectly, and the
ABI changed the mangling of <code>nullptr_t</code>.
</para>
<para>These issues were corrected in <option>-fabi-version=7</option>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>When mangling a function type with function-cv-qualifiers, the
un-qualified function type was incorrectly treated as a substitution
candidate.
</para>
<para>This was fixed in <option>-fabi-version=8</option>.
</para></listitem></itemize>

<para>It also warns about psABI-related changes.  The known psABI changes at this
point include:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>For SysV/x86-64, unions with <code>long double</code> members are 
passed in memory as specified in psABI.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">union U &lbrace;
  long double ld;
  int i;
&rbrace;;
</pre></smallexample>

<noindent></noindent>
<para><code>union U</code> is always passed in memory.
</para>
</listitem></itemize>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wabi-tag <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="95" incode="1">Wabi-tag</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="96" incode="1">-Wabi-tag</indexterm></indexcommand>
<para>Warn when a type with an ABI tag is used in a context that does not
have that ABI tag.  See <ref label="C_002b_002b-Attributes"><xrefnodename>C++ Attributes</xrefnodename></ref> for more information
about ABI tags.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wctor-dtor-privacy <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="97" incode="1">Wctor-dtor-privacy</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="98" incode="1">Wno-ctor-dtor-privacy</indexterm></indexcommand>
<para>Warn when a class seems unusable because all the constructors or
destructors in that class are private, and it has neither friends nor
public static member functions.  Also warn if there are no non-private
methods, and there&textrsquo;s at least one private member function that isn&textrsquo;t
a constructor or destructor.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wdelete-non-virtual-dtor <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="99" incode="1">Wdelete-non-virtual-dtor</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="100" incode="1">Wno-delete-non-virtual-dtor</indexterm></indexcommand>
<para>Warn when <code>delete</code> is used to destroy an instance of a class that
has virtual functions and non-virtual destructor. It is unsafe to delete
an instance of a derived class through a pointer to a base class if the
base class does not have a virtual destructor.  This warning is enabled
by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wliteral-suffix <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="101" incode="1">Wliteral-suffix</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="102" incode="1">Wno-literal-suffix</indexterm></indexcommand>
<para>Warn when a string or character literal is followed by a ud-suffix which does
not begin with an underscore.  As a conforming extension, GCC treats such
suffixes as separate preprocessing tokens in order to maintain backwards
compatibility with code that uses formatting macros from <code>&lt;inttypes.h&gt;</code>.
For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define __STDC_FORMAT_MACROS
#include &lt;inttypes.h&gt;
#include &lt;stdio.h&gt;

int main() &lbrace;
  int64_t i64 = 123;
  printf(&quot;My int64: %&quot; PRId64&quot;\n&quot;, i64);
&rbrace;
</pre></smallexample>

<para>In this case, <code>PRId64</code> is treated as a separate preprocessing token.
</para>
<para>This warning is enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wnarrowing <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="103" incode="1">Wnarrowing</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="104" incode="1">Wno-narrowing</indexterm></indexcommand>
<para>Warn when a narrowing conversion prohibited by C++11 occurs within
<samp>&lbrace; &rbrace;</samp>, e.g.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int i = &lbrace; 2.2 &rbrace;; // error: narrowing from double to int
</pre></smallexample>

<para>This flag is included in <option>-Wall</option> and <option>-Wc++11-compat</option>.
</para>
<para>With <option>-std=c++11</option>, <option>-Wno-narrowing</option> suppresses the diagnostic
required by the standard.  Note that this does not affect the meaning
of well-formed code; narrowing conversions are still considered
ill-formed in SFINAE context.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wnoexcept <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="105" incode="1">Wnoexcept</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="106" incode="1">Wno-noexcept</indexterm></indexcommand>
<para>Warn when a noexcept-expression evaluates to false because of a call
to a function that does not have a non-throwing exception
specification (i.e. <code>throw()</code> or <code>noexcept</code>) but is known by
the compiler to never throw an exception.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wnon-virtual-dtor <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="107" incode="1">Wnon-virtual-dtor</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="108" incode="1">Wno-non-virtual-dtor</indexterm></indexcommand>
<para>Warn when a class has virtual functions and an accessible non-virtual
destructor itself or in an accessible polymorphic base class, in which
case it is possible but unsafe to delete an instance of a derived
class through a pointer to the class itself or base class.  This
warning is automatically enabled if <option>-Weffc++</option> is specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wreorder <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="109" incode="1">Wreorder</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="110" incode="1">Wno-reorder</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="93">reordering, warning</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="94">warning for reordering of member initializers</indexterm></cindex>
<para>Warn when the order of member initializers given in the code does not
match the order in which they must be executed.  For instance:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct A &lbrace;
  int i;
  int j;
  A(): j (0), i (1) &lbrace; &rbrace;
&rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>The compiler rearranges the member initializers for <code>i</code>
and <code>j</code> to match the declaration order of the members, emitting
a warning to that effect.  This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fext-numeric-literals <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="111" incode="1">fext-numeric-literals</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="112" incode="1">fno-ext-numeric-literals</indexterm></indexcommand>
<para>Accept imaginary, fixed-point, or machine-defined
literal number suffixes as GNU extensions.
When this option is turned off these suffixes are treated
as C++11 user-defined literal numeric suffixes.
This is on by default for all pre-C++11 dialects and all GNU dialects:
<option>-std=c++98</option>, <option>-std=gnu++98</option>, <option>-std=gnu++11</option>,
<option>-std=gnu++14</option>.
This option is off by default
for ISO C++11 onwards (<option>-std=c++11</option>, ...).
</para></tableitem></tableentry></table>

<para>The following <option>-W&dots;</option> options are not affected by <option>-Wall</option>.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-Weffc++ <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="113" incode="1">Weffc++</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="114" incode="1">Wno-effc++</indexterm></indexcommand>
<para>Warn about violations of the following style guidelines from Scott Meyers&textrsquo;
<cite>Effective C++</cite> series of books:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Define a copy constructor and an assignment operator for classes
with dynamically-allocated memory.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Prefer initialization to assignment in constructors.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Have <code>operator=</code> return a reference to <code>*this</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Don&textrsquo;t try to return a reference when you must return an object.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Distinguish between prefix and postfix forms of increment and
decrement operators.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Never overload <code>&amp;&amp;</code>, <code>||</code>, or <code>,</code>.
</para>
</listitem></itemize>

<para>This option also enables <option>-Wnon-virtual-dtor</option>, which is also
one of the effective C++ recommendations.  However, the check is
extended to warn about the lack of virtual destructor in accessible
non-polymorphic bases classes too.
</para>
<para>When selecting this option, be aware that the standard library
headers do not obey all of these guidelines; use <samp>grep -v</samp>
to filter out those warnings.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstrict-null-sentinel <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="115" incode="1">Wstrict-null-sentinel</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="116" incode="1">Wno-strict-null-sentinel</indexterm></indexcommand>
<para>Warn about the use of an uncasted <code>NULL</code> as sentinel.  When
compiling only with GCC this is a valid sentinel, as <code>NULL</code> is defined
to <code>__null</code>.  Although it is a null pointer constant rather than a
null pointer, it is guaranteed to be of the same size as a pointer.
But this use is not portable across different compilers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-non-template-friend <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="117" incode="1">Wno-non-template-friend</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="118" incode="1">Wnon-template-friend</indexterm></indexcommand>
<para>Disable warnings when non-templatized friend functions are declared
within a template.  Since the advent of explicit template specification
support in G++, if the name of the friend is an unqualified-id (i.e.,
<samp>friend foo(int)</samp>), the C++ language specification demands that the
friend declare or define an ordinary, nontemplate function.  (Section
14.5.3).  Before G++ implemented explicit specification, unqualified-ids
could be interpreted as a particular specialization of a templatized
function.  Because this non-conforming behavior is no longer the default
behavior for G++, <option>-Wnon-template-friend</option> allows the compiler to
check existing code for potential trouble spots and is on by default.
This new compiler behavior can be turned off with
<option>-Wno-non-template-friend</option>, which keeps the conformant compiler code
but disables the helpful warning.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wold-style-cast <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="119" incode="1">Wold-style-cast</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="120" incode="1">Wno-old-style-cast</indexterm></indexcommand>
<para>Warn if an old-style (C-style) cast to a non-void type is used within
a C++ program.  The new-style casts (<code>dynamic_cast</code>,
<code>static_cast</code>, <code>reinterpret_cast</code>, and <code>const_cast</code>) are
less vulnerable to unintended effects and much easier to search for.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Woverloaded-virtual <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="121" incode="1">Woverloaded-virtual</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="122" incode="1">Wno-overloaded-virtual</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="95">overloaded virtual function, warning</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="96">warning for overloaded virtual function</indexterm></cindex>
<para>Warn when a function declaration hides virtual functions from a
base class.  For example, in:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct A &lbrace;
  virtual void f();
&rbrace;;

struct B: public A &lbrace;
  void f(int);
&rbrace;;
</pre></smallexample>

<para>the <code>A</code> class version of <code>f</code> is hidden in <code>B</code>, and code
like:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">B* b;
b-&gt;f();
</pre></smallexample>

<noindent></noindent>
<para>fails to compile.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-pmf-conversions <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="123" incode="1">Wno-pmf-conversions</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="124" incode="1">Wpmf-conversions</indexterm></indexcommand>
<para>Disable the diagnostic for converting a bound pointer to member function
to a plain pointer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsign-promo <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="125" incode="1">Wsign-promo</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="126" incode="1">Wno-sign-promo</indexterm></indexcommand>
<para>Warn when overload resolution chooses a promotion from unsigned or
enumerated type to a signed type, over a conversion to an unsigned type of
the same size.  Previous versions of G++ tried to preserve
unsignedness, but the standard mandates the current behavior.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-terminate <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="127" incode="1">Wterminate</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="128" incode="1">Wno-terminate</indexterm></indexcommand>
<para>Disable the warning about a throw-expression that will immediately
result in a call to <code>terminate</code>.
</para></tableitem></tableentry></table>

</section>
<node name="Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options" spaces=" "><nodename>Objective-C and Objective-C++ Dialect Options</nodename><nodenext automatic="on">Language Independent Options</nodenext><nodeprev automatic="on">C++ Dialect Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Options Controlling Objective-C and Objective-C++ Dialects</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="97">compiler options, Objective-C and Objective-C++</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="98">Objective-C and Objective-C++ options, command-line</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="99">options, Objective-C and Objective-C++</indexterm></cindex>
<para>(NOTE: This manual does not describe the Objective-C and Objective-C++
languages themselves.  <xref label="Standards"><xrefnodename>Standards</xrefnodename><xrefprinteddesc>Language Standards
Supported by GCC</xrefprinteddesc></xref>, for references.)
</para>
<para>This section describes the command-line options that are only meaningful
for Objective-C and Objective-C++ programs.  You can also use most of
the language-independent GNU compiler options.
For example, you might compile a file <file>some_class.m</file> like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -g -fgnu-runtime -O -c some_class.m
</pre></smallexample>

<noindent></noindent>
<para>In this example, <option>-fgnu-runtime</option> is an option meant only for
Objective-C and Objective-C++ programs; you can use the other options with
any language supported by GCC&eosperiod;
</para>
<para>Note that since Objective-C is an extension of the C language, Objective-C
compilations may also use options specific to the C front-end (e.g.,
<option>-Wtraditional</option>).  Similarly, Objective-C++ compilations may use
C++-specific options (e.g., <option>-Wabi</option>).
</para>
<para>Here is a list of options that are <emph>only</emph> for compiling Objective-C
and Objective-C++ programs:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-fconstant-string-class=<var>class-name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="129" incode="1">fconstant-string-class</indexterm></indexcommand>
<para>Use <var>class-name</var> as the name of the class to instantiate for each
literal string specified with the syntax <code>&arobase;&quot;&dots;&quot;</code>.  The default
class name is <code>NXConstantString</code> if the GNU runtime is being used, and
<code>NSConstantString</code> if the NeXT runtime is being used (see below).  The
<option>-fconstant-cfstrings</option> option, if also present, overrides the
<option>-fconstant-string-class</option> setting and cause <code>&arobase;&quot;&dots;&quot;</code> literals
to be laid out as constant CoreFoundation strings.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fgnu-runtime</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="130" incode="1">fgnu-runtime</indexterm></indexcommand>
<para>Generate object code compatible with the standard GNU Objective-C
runtime.  This is the default for most types of systems.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fnext-runtime</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="131" incode="1">fnext-runtime</indexterm></indexcommand>
<para>Generate output compatible with the NeXT runtime.  This is the default
for NeXT-based systems, including Darwin and Mac OS X&eosperiod;  The macro
<code>__NEXT_RUNTIME__</code> is predefined if (and only if) this option is
used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-nil-receivers</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="132" incode="1">fno-nil-receivers</indexterm></indexcommand>
<para>Assume that all Objective-C message dispatches (<code>[receiver
message:arg]</code>) in this translation unit ensure that the receiver is
not <code>nil</code>.  This allows for more efficient entry points in the
runtime to be used.  This option is only available in conjunction with
the NeXT runtime and ABI version 0 or 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fobjc-abi-version=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="133" incode="1">fobjc-abi-version</indexterm></indexcommand>
<para>Use version <var>n</var> of the Objective-C ABI for the selected runtime.
This option is currently supported only for the NeXT runtime.  In that
case, Version 0 is the traditional (32-bit) ABI without support for
properties and other Objective-C 2.0 additions.  Version 1 is the
traditional (32-bit) ABI with support for properties and other
Objective-C 2.0 additions.  Version 2 is the modern (64-bit) ABI.  If
nothing is specified, the default is Version 0 on 32-bit target
machines, and Version 2 on 64-bit target machines.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fobjc-call-cxx-cdtors</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="134" incode="1">fobjc-call-cxx-cdtors</indexterm></indexcommand>
<para>For each Objective-C class, check if any of its instance variables is a
C++ object with a non-trivial default constructor.  If so, synthesize a
special <code>- (id) .cxx_construct</code> instance method which runs
non-trivial default constructors on any such instance variables, in order,
and then return <code>self</code>.  Similarly, check if any instance variable
is a C++ object with a non-trivial destructor, and if so, synthesize a
special <code>- (void) .cxx_destruct</code> method which runs
all such default destructors, in reverse order.
</para>
<para>The <code>- (id) .cxx_construct</code> and <code>- (void) .cxx_destruct</code>
methods thusly generated only operate on instance variables
declared in the current Objective-C class, and not those inherited
from superclasses.  It is the responsibility of the Objective-C
runtime to invoke all such methods in an object&textrsquo;s inheritance
hierarchy.  The <code>- (id) .cxx_construct</code> methods are invoked
by the runtime immediately after a new object instance is allocated;
the <code>- (void) .cxx_destruct</code> methods are invoked immediately
before the runtime deallocates an object instance.
</para>
<para>As of this writing, only the NeXT runtime on Mac OS X 10.4 and later has
support for invoking the <code>- (id) .cxx_construct</code> and
<code>- (void) .cxx_destruct</code> methods.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fobjc-direct-dispatch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="135" incode="1">fobjc-direct-dispatch</indexterm></indexcommand>
<para>Allow fast jumps to the message dispatcher.  On Darwin this is
accomplished via the comm page.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fobjc-exceptions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="136" incode="1">fobjc-exceptions</indexterm></indexcommand>
<para>Enable syntactic support for structured exception handling in
Objective-C, similar to what is offered by C++ and Java.  This option
is required to use the Objective-C keywords <code>&arobase;try</code>,
<code>&arobase;throw</code>, <code>&arobase;catch</code>, <code>&arobase;finally</code> and
<code>&arobase;synchronized</code>.  This option is available with both the GNU
runtime and the NeXT runtime (but not available in conjunction with
the NeXT runtime on Mac OS X 10.2 and earlier).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fobjc-gc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="137" incode="1">fobjc-gc</indexterm></indexcommand>
<para>Enable garbage collection (GC) in Objective-C and Objective-C++
programs.  This option is only available with the NeXT runtime; the
GNU runtime has a different garbage collection implementation that
does not require special compiler flags.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fobjc-nilcheck</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="138" incode="1">fobjc-nilcheck</indexterm></indexcommand>
<para>For the NeXT runtime with version 2 of the ABI, check for a nil
receiver in method invocations before doing the actual method call.
This is the default and can be disabled using
<option>-fno-objc-nilcheck</option>.  Class methods and super calls are never
checked for nil in this way no matter what this flag is set to.
Currently this flag does nothing when the GNU runtime, or an older
version of the NeXT runtime ABI, is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fobjc-std=objc1</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="139" incode="1">fobjc-std</indexterm></indexcommand>
<para>Conform to the language syntax of Objective-C 1.0, the language
recognized by GCC 4.0.  This only affects the Objective-C additions to
the C/C++ language; it does not affect conformance to C/C++ standards,
which is controlled by the separate C/C++ dialect option flags.  When
this option is used with the Objective-C or Objective-C++ compiler,
any Objective-C syntax that is not recognized by GCC 4.0 is rejected.
This is useful if you need to make sure that your Objective-C code can
be compiled with older versions of GCC&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-freplace-objc-classes</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="140" incode="1">freplace-objc-classes</indexterm></indexcommand>
<para>Emit a special marker instructing <command>ld(1)</command> not to statically link in
the resulting object file, and allow <command>dyld(1)</command> to load it in at
run time instead.  This is used in conjunction with the Fix-and-Continue
debugging mode, where the object file in question may be recompiled and
dynamically reloaded in the course of program execution, without the need
to restart the program itself.  Currently, Fix-and-Continue functionality
is only available in conjunction with the NeXT runtime on Mac OS X 10.3
and later.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fzero-link</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="141" incode="1">fzero-link</indexterm></indexcommand>
<para>When compiling for the NeXT runtime, the compiler ordinarily replaces calls
to <code>objc_getClass(&quot;&dots;&quot;)</code> (when the name of the class is known at
compile time) with static class references that get initialized at load time,
which improves run-time performance.  Specifying the <option>-fzero-link</option> flag
suppresses this behavior and causes calls to <code>objc_getClass(&quot;&dots;&quot;)</code>
to be retained.  This is useful in Zero-Link debugging mode, since it allows
for individual class implementations to be modified during program execution.
The GNU runtime currently always retains calls to <code>objc_get_class(&quot;&dots;&quot;)</code>
regardless of command-line options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-local-ivars</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="142" incode="1">fno-local-ivars</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="143" incode="1">flocal-ivars</indexterm></indexcommand>
<para>By default instance variables in Objective-C can be accessed as if
they were local variables from within the methods of the class they&textrsquo;re
declared in.  This can lead to shadowing between instance variables
and other variables declared either locally inside a class method or
globally with the same name.  Specifying the <option>-fno-local-ivars</option>
flag disables this behavior thus avoiding variable shadowing issues.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fivar-visibility=<r>[</r>public<r>|</r>protected<r>|</r>private<r>|</r>package<r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="144" incode="1">fivar-visibility</indexterm></indexcommand>
<para>Set the default instance variable visibility to the specified option
so that instance variables declared outside the scope of any access
modifier directives default to the specified visibility.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gen-decls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="145" incode="1">gen-decls</indexterm></indexcommand>
<para>Dump interface declarations for all classes seen in the source file to a
file named <file><var>sourcename</var>.decl</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wassign-intercept <r>(Objective-C and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="146" incode="1">Wassign-intercept</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="147" incode="1">Wno-assign-intercept</indexterm></indexcommand>
<para>Warn whenever an Objective-C assignment is being intercepted by the
garbage collector.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-protocol <r>(Objective-C and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="148" incode="1">Wno-protocol</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="149" incode="1">Wprotocol</indexterm></indexcommand>
<para>If a class is declared to implement a protocol, a warning is issued for
every method in the protocol that is not implemented by the class.  The
default behavior is to issue a warning for every method not explicitly
implemented in the class, even if a method implementation is inherited
from the superclass.  If you use the <option>-Wno-protocol</option> option, then
methods inherited from the superclass are considered to be implemented,
and no warning is issued for them.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wselector <r>(Objective-C and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="150" incode="1">Wselector</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="151" incode="1">Wno-selector</indexterm></indexcommand>
<para>Warn if multiple methods of different types for the same selector are
found during compilation.  The check is performed on the list of methods
in the final stage of compilation.  Additionally, a check is performed
for each selector appearing in a <code>&arobase;selector(&dots;)</code>
expression, and a corresponding method for that selector has been found
during compilation.  Because these checks scan the method table only at
the end of compilation, these warnings are not produced if the final
stage of compilation is not reached, for example because an error is
found during compilation, or because the <option>-fsyntax-only</option> option is
being used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstrict-selector-match <r>(Objective-C and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="152" incode="1">Wstrict-selector-match</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="153" incode="1">Wno-strict-selector-match</indexterm></indexcommand>
<para>Warn if multiple methods with differing argument and/or return types are
found for a given selector when attempting to send a message using this
selector to a receiver of type <code>id</code> or <code>Class</code>.  When this flag
is off (which is the default behavior), the compiler omits such warnings
if any differences found are confined to types that share the same size
and alignment.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wundeclared-selector <r>(Objective-C and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="154" incode="1">Wundeclared-selector</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="155" incode="1">Wno-undeclared-selector</indexterm></indexcommand>
<para>Warn if a <code>&arobase;selector(&dots;)</code> expression referring to an
undeclared selector is found.  A selector is considered undeclared if no
method with that name has been declared before the
<code>&arobase;selector(&dots;)</code> expression, either explicitly in an
<code>&arobase;interface</code> or <code>&arobase;protocol</code> declaration, or implicitly in
an <code>&arobase;implementation</code> section.  This option always performs its
checks as soon as a <code>&arobase;selector(&dots;)</code> expression is found,
while <option>-Wselector</option> only performs its checks in the final stage of
compilation.  This also enforces the coding style convention
that methods and selectors must be declared before being used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-print-objc-runtime-info</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="156" incode="1">print-objc-runtime-info</indexterm></indexcommand>
<para>Generate C header describing the largest structure that is passed by
value, if any.
</para>
</tableitem></tableentry></table>

</section>
<node name="Language-Independent-Options" spaces=" "><nodename>Language Independent Options</nodename><nodenext automatic="on">Warning Options</nodenext><nodeprev automatic="on">Objective-C and Objective-C++ Dialect Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Options to Control Diagnostic Messages Formatting</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="100">options to control diagnostics formatting</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="101">diagnostic messages</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="102">message formatting</indexterm></cindex>

<para>Traditionally, diagnostic messages have been formatted irrespective of
the output device&textrsquo;s aspect (e.g.&noeos; its width, &dots;).  You can use the
options described below
to control the formatting algorithm for diagnostic messages, 
e.g.&noeos; how many characters per line, how often source location
information should be reported.  Note that some language front ends may not
honor these options.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-fmessage-length=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="157" incode="1">fmessage-length</indexterm></indexcommand>
<para>Try to format error messages so that they fit on lines of about
<var>n</var> characters.  If <var>n</var> is zero, then no line-wrapping is
done; each error message appears on a single line.  This is the
default for all front ends.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdiagnostics-show-location=once</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="158" incode="1">fdiagnostics-show-location</indexterm></indexcommand>
<para>Only meaningful in line-wrapping mode.  Instructs the diagnostic messages
reporter to emit source location information <emph>once</emph>; that is, in
case the message is too long to fit on a single physical line and has to
be wrapped, the source location won&textrsquo;t be emitted (as prefix) again,
over and over, in subsequent continuation lines.  This is the default
behavior.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdiagnostics-show-location=every-line</itemformat></item>
</tableterm><tableitem><para>Only meaningful in line-wrapping mode.  Instructs the diagnostic
messages reporter to emit the same source location information (as
prefix) for physical lines that result from the process of breaking
a message which is too long to fit on a single line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdiagnostics-color[=<var>WHEN</var>]</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fno-diagnostics-color</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="159" incode="1">fdiagnostics-color</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="103">highlight, color, colour</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" number="1" mergedindex="cp">GCC_COLORS <r>environment variable</r></indexterm></vindex>
<para>Use color in diagnostics.  <var>WHEN</var> is <samp>never</samp>, <samp>always</samp>,
or <samp>auto</samp>.  The default depends on how the compiler has been configured,
it can be any of the above <var>WHEN</var> options or also <samp>never</samp>
if <env>GCC_COLORS</env> environment variable isn&textrsquo;t present in the environment,
and <samp>auto</samp> otherwise.
<samp>auto</samp> means to use color only when the standard error is a terminal.
The forms <option>-fdiagnostics-color</option> and <option>-fno-diagnostics-color</option> are
aliases for <option>-fdiagnostics-color=always</option> and
<option>-fdiagnostics-color=never</option>, respectively.
</para>
<para>The colors are defined by the environment variable <env>GCC_COLORS</env>.
Its value is a colon-separated list of capabilities and Select Graphic
Rendition (SGR) substrings. SGR commands are interpreted by the
terminal or terminal emulator.  (See the section in the documentation
of your text terminal for permitted values and their meanings as
character attributes.)  These substring values are integers in decimal
representation and can be concatenated with semicolons.
Common values to concatenate include
<samp>1</samp> for bold,
<samp>4</samp> for underline,
<samp>5</samp> for blink,
<samp>7</samp> for inverse,
<samp>39</samp> for default foreground color,
<samp>30</samp> to <samp>37</samp> for foreground colors,
<samp>90</samp> to <samp>97</samp> for 16-color mode foreground colors,
<samp>38;5;0</samp> to <samp>38;5;255</samp>
for 88-color and 256-color modes foreground colors,
<samp>49</samp> for default background color,
<samp>40</samp> to <samp>47</samp> for background colors,
<samp>100</samp> to <samp>107</samp> for 16-color mode background colors,
and <samp>48;5;0</samp> to <samp>48;5;255</samp>
for 88-color and 256-color modes background colors.
</para>
<para>The default <env>GCC_COLORS</env> is
</para><smallexample endspaces=" ">
<pre xml:space="preserve">error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01
</pre></smallexample>
<noindent></noindent>
<para>where <samp>01;31</samp> is bold red, <samp>01;35</samp> is bold magenta,
<samp>01;36</samp> is bold cyan, <samp>01;32</samp> is bold green and
<samp>01</samp> is bold. Setting <env>GCC_COLORS</env> to the empty
string disables colors.
Supported capabilities are as follows.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">error=</itemformat></item>
</tableterm><tableitem><vindex index="vr" spaces=" "><indexterm index="vr" number="2" mergedindex="cp">error GCC_COLORS <r>capability</r></indexterm></vindex>
<para>SGR substring for error: markers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">warning=</itemformat></item>
</tableterm><tableitem><vindex index="vr" spaces=" "><indexterm index="vr" number="3" mergedindex="cp">warning GCC_COLORS <r>capability</r></indexterm></vindex>
<para>SGR substring for warning: markers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">note=</itemformat></item>
</tableterm><tableitem><vindex index="vr" spaces=" "><indexterm index="vr" number="4" mergedindex="cp">note GCC_COLORS <r>capability</r></indexterm></vindex>
<para>SGR substring for note: markers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">caret=</itemformat></item>
</tableterm><tableitem><vindex index="vr" spaces=" "><indexterm index="vr" number="5" mergedindex="cp">caret GCC_COLORS <r>capability</r></indexterm></vindex>
<para>SGR substring for caret line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">locus=</itemformat></item>
</tableterm><tableitem><vindex index="vr" spaces=" "><indexterm index="vr" number="6" mergedindex="cp">locus GCC_COLORS <r>capability</r></indexterm></vindex>
<para>SGR substring for location information, <samp>file:line</samp> or
<samp>file:line:column</samp> etc.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">quote=</itemformat></item>
</tableterm><tableitem><vindex index="vr" spaces=" "><indexterm index="vr" number="7" mergedindex="cp">quote GCC_COLORS <r>capability</r></indexterm></vindex>
<para>SGR substring for information printed within quotes.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-diagnostics-show-option</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="160" incode="1">fno-diagnostics-show-option</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="161" incode="1">fdiagnostics-show-option</indexterm></indexcommand>
<para>By default, each diagnostic emitted includes text indicating the
command-line option that directly controls the diagnostic (if such an
option is known to the diagnostic machinery).  Specifying the
<option>-fno-diagnostics-show-option</option> flag suppresses that behavior.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-diagnostics-show-caret</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="162" incode="1">fno-diagnostics-show-caret</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="163" incode="1">fdiagnostics-show-caret</indexterm></indexcommand>
<para>By default, each diagnostic emitted includes the original source line
and a caret &textrsquo;^&textrsquo; indicating the column.  This option suppresses this
information.  The source line is truncated to <var>n</var> characters, if
the <option>-fmessage-length=n</option> option is given.  When the output is done
to the terminal, the width is limited to the width given by the
<env>COLUMNS</env> environment variable or, if not set, to the terminal width.
</para>
</tableitem></tableentry></table>

</section>
<node name="Warning-Options" spaces=" "><nodename>Warning Options</nodename><nodenext automatic="on">Debugging Options</nodenext><nodeprev automatic="on">Language Independent Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Options to Request or Suppress Warnings</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="104">options to control warnings</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="105">warning messages</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="106">messages, warning</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="107">suppressing warnings</indexterm></cindex>

<para>Warnings are diagnostic messages that report constructions that
are not inherently erroneous but that are risky or suggest there
may have been an error.
</para>
<para>The following language-independent options do not enable specific
warnings but control the kinds of diagnostics produced by GCC&eosperiod;
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem><cindex index="cp" spaces=" "><indexterm index="cp" number="108">syntax checking</indexterm></cindex>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsyntax-only</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="164" incode="1">fsyntax-only</indexterm></indexcommand>
<para>Check the code for syntax errors, but don&textrsquo;t do anything beyond that.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fmax-errors=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="165" incode="1">fmax-errors</indexterm></indexcommand>
<para>Limits the maximum number of error messages to <var>n</var>, at which point
GCC bails out rather than attempting to continue processing the source
code.  If <var>n</var> is 0 (the default), there is no limit on the number
of error messages produced.  If <option>-Wfatal-errors</option> is also
specified, then <option>-Wfatal-errors</option> takes precedence over this
option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-w</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="166" incode="1">w</indexterm></indexcommand>
<para>Inhibit all warning messages.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Werror</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="167" incode="1">Werror</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="168" incode="1">Wno-error</indexterm></indexcommand>
<para>Make all warnings into errors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Werror=</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="169" incode="1">Werror=</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="170" incode="1">Wno-error=</indexterm></indexcommand>
<para>Make the specified warning into an error.  The specifier for a warning
is appended; for example <option>-Werror=switch</option> turns the warnings
controlled by <option>-Wswitch</option> into errors.  This switch takes a
negative form, to be used to negate <option>-Werror</option> for specific
warnings; for example <option>-Wno-error=switch</option> makes
<option>-Wswitch</option> warnings not be errors, even when <option>-Werror</option>
is in effect.
</para>
<para>The warning message for each controllable warning includes the
option that controls the warning.  That option can then be used with
<option>-Werror=</option> and <option>-Wno-error=</option> as described above.
(Printing of the option in the warning message can be disabled using the
<option>-fno-diagnostics-show-option</option> flag.)
</para>
<para>Note that specifying <option>-Werror=</option><var>foo</var> automatically implies
<option>-W</option><var>foo</var>.  However, <option>-Wno-error=</option><var>foo</var> does not
imply anything.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wfatal-errors</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="171" incode="1">Wfatal-errors</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="172" incode="1">Wno-fatal-errors</indexterm></indexcommand>
<para>This option causes the compiler to abort compilation on the first error
occurred rather than trying to keep going and printing further error
messages.
</para>
</tableitem></tableentry></table>

<para>You can request many specific warnings with options beginning with
<samp>-W</samp>, for example <option>-Wimplicit</option> to request warnings on
implicit declarations.  Each of these specific warning options also
has a negative form beginning <samp>-Wno-</samp> to turn off warnings; for
example, <option>-Wno-implicit</option>.  This manual lists only one of the
two forms, whichever is not the default.  For further
language-specific options also refer to <ref label="C_002b_002b-Dialect-Options"><xrefnodename>C++ Dialect Options</xrefnodename></ref> and
<ref label="Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options"><xrefnodename>Objective-C and Objective-C++ Dialect Options</xrefnodename></ref>.
</para>
<para>Some options, such as <option>-Wall</option> and <option>-Wextra</option>, turn on other
options, such as <option>-Wunused</option>, which may turn on further options,
such as <option>-Wunused-value</option>. The combined effect of positive and
negative forms is that more specific options have priority over less
specific ones, independently of their position in the command-line. For
options of the same specificity, the last one takes effect. Options
enabled or disabled via pragmas (<pxref label="Diagnostic-Pragmas"><xrefnodename>Diagnostic Pragmas</xrefnodename></pxref>) take effect
as if they appeared at the end of the command-line.
</para>
<para>When an unrecognized warning option is requested (e.g.,
<option>-Wunknown-warning</option>), GCC emits a diagnostic stating
that the option is not recognized.  However, if the <option>-Wno-</option> form
is used, the behavior is slightly different: no diagnostic is
produced for <option>-Wno-unknown-warning</option> unless other diagnostics
are being produced.  This allows the use of new <option>-Wno-</option> options
with old compilers, but if something goes wrong, the compiler
warns that an unrecognized option is present.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-Wpedantic</itemformat></item>
<itemx spaces=" "><itemformat command="code">-pedantic</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="173" incode="1">pedantic</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="174" incode="1">Wpedantic</indexterm></indexcommand>
<para>Issue all the warnings demanded by strict ISO C and ISO C++;
reject all programs that use forbidden extensions, and some other
programs that do not follow ISO C and ISO C++.  For ISO C, follows the
version of the ISO C standard specified by any <option>-std</option> option used.
</para>
<para>Valid ISO C and ISO C++ programs should compile properly with or without
this option (though a rare few require <option>-ansi</option> or a
<option>-std</option> option specifying the required version of ISO C)&eosperiod;  However,
without this option, certain GNU extensions and traditional C and C++
features are supported as well.  With this option, they are rejected.
</para>
<para><option>-Wpedantic</option> does not cause warning messages for use of the
alternate keywords whose names begin and end with <samp>__</samp>.  Pedantic
warnings are also disabled in the expression that follows
<code>__extension__</code>.  However, only system header files should use
these escape routes; application programs should avoid them.
<xref label="Alternate-Keywords"><xrefnodename>Alternate Keywords</xrefnodename></xref>.
</para>
<para>Some users try to use <option>-Wpedantic</option> to check programs for strict ISO
C conformance.  They soon find that it does not do quite what they want:
it finds some non-ISO practices, but not all&textmdash;only those for which
ISO C <emph>requires</emph> a diagnostic, and some others for which
diagnostics have been added.
</para>
<para>A feature to report any failure to conform to ISO C might be useful in
some instances, but would require considerable additional work and would
be quite different from <option>-Wpedantic</option>.  We don&textrsquo;t have plans to
support such a feature in the near future.
</para>
<para>Where the standard specified with <option>-std</option> represents a GNU
extended dialect of C, such as <samp>gnu90</samp> or <samp>gnu99</samp>, there is a
corresponding <dfn>base standard</dfn>, the version of ISO C on which the GNU
extended dialect is based.  Warnings from <option>-Wpedantic</option> are given
where they are required by the base standard.  (It does not make sense
for such warnings to be given only for features not in the specified GNU
C dialect, since by definition the GNU dialects of C include all
features the compiler supports with the given option, and there would be
nothing to warn about.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-pedantic-errors</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="175" incode="1">pedantic-errors</indexterm></indexcommand>
<para>Give an error whenever the <dfn>base standard</dfn> (see <option>-Wpedantic</option>)
requires a diagnostic, in some cases where there is undefined behavior
at compile-time and in some other cases that do not prevent compilation
of programs that are valid according to the standard. This is not
equivalent to <option>-Werror=pedantic</option>, since there are errors enabled
by this option and not enabled by the latter and vice versa.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wall</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="176" incode="1">Wall</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="177" incode="1">Wno-all</indexterm></indexcommand>
<para>This enables all the warnings about constructions that some users
consider questionable, and that are easy to avoid (or modify to
prevent the warning), even in conjunction with macros.  This also
enables some language-specific warnings described in <ref label="C_002b_002b-Dialect-Options"><xrefnodename>C++ Dialect
Options</xrefnodename></ref> and <ref label="Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options"><xrefnodename>Objective-C and Objective-C++ Dialect Options</xrefnodename></ref>.
</para>
<para><option>-Wall</option> turns on the following warning flags:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">-Waddress   
-Warray-bounds=1 <r>(only with</r> <option>-O2</option><r>)</r>  
-Wc++11-compat  -Wc++14-compat
-Wchar-subscripts  
-Wenum-compare <r>(in C/ObjC; this is on by default in C++)</r> 
-Wimplicit-int <r>(C and Objective-C only)</r> 
-Wimplicit-function-declaration <r>(C and Objective-C only)</r> 
-Wcomment  
-Wformat   
-Wmain <r>(only for C/ObjC and unless</r> <option>-ffreestanding</option><r>)</r>  
-Wmaybe-uninitialized 
-Wmissing-braces <r>(only for C/ObjC)</r> 
-Wnonnull  
-Wopenmp-simd 
-Wparentheses  
-Wpointer-sign  
-Wreorder   
-Wreturn-type  
-Wsequence-point  
-Wsign-compare <r>(only in C++)</r>  
-Wstrict-aliasing  
-Wstrict-overflow=1  
-Wswitch  
-Wtrigraphs  
-Wuninitialized  
-Wunknown-pragmas  
-Wunused-function  
-Wunused-label     
-Wunused-value     
-Wunused-variable  
-Wvolatile-register-var 

</pre></smallexample>

<para>Note that some warning flags are not implied by <option>-Wall</option>.  Some of
them warn about constructions that users generally do not consider
questionable, but which occasionally you might wish to check for;
others warn about constructions that are necessary or hard to avoid in
some cases, and there is no simple way to modify the code to suppress
the warning. Some of them are enabled by <option>-Wextra</option> but many of
them must be enabled individually.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wextra</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="178" incode="1">W</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="179" incode="1">Wextra</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="180" incode="1">Wno-extra</indexterm></indexcommand>
<para>This enables some extra warning flags that are not enabled by
<option>-Wall</option>. (This option used to be called <option>-W</option>.  The older
name is still supported, but the newer name is more descriptive.)
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">-Wclobbered  
-Wempty-body  
-Wignored-qualifiers 
-Wmissing-field-initializers  
-Wmissing-parameter-type <r>(C only)</r>  
-Wold-style-declaration <r>(C only)</r>  
-Woverride-init  
-Wsign-compare  
-Wtype-limits  
-Wuninitialized  
-Wshift-negative-value  
-Wunused-parameter <r>(only with</r> <option>-Wunused</option> <r>or</r> <option>-Wall</option><r>)</r> 
-Wunused-but-set-parameter <r>(only with</r> <option>-Wunused</option> <r>or</r> <option>-Wall</option><r>)</r>  

</pre></smallexample>

<para>The option <option>-Wextra</option> also prints warning messages for the
following cases:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>A pointer is compared against integer zero with <code>&lt;</code>, <code>&lt;=</code>,
<code>&gt;</code>, or <code>&gt;=</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>(C++ only) An enumerator and a non-enumerator both appear in a
conditional expression.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>(C++ only) Ambiguous virtual bases.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>(C++ only) Subscripting an array that has been declared <code>register</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>(C++ only) Taking the address of a variable that has been declared
<code>register</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>(C++ only) A base class is not initialized in a derived class&textrsquo;s copy
constructor.
</para>
</listitem></itemize>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wchar-subscripts</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="181" incode="1">Wchar-subscripts</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="182" incode="1">Wno-char-subscripts</indexterm></indexcommand>
<para>Warn if an array subscript has type <code>char</code>.  This is a common cause
of error, as programmers often forget that this type is signed on some
machines.
This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wcomment</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="183" incode="1">Wcomment</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="184" incode="1">Wno-comment</indexterm></indexcommand>
<para>Warn whenever a comment-start sequence <samp>/*</samp> appears in a <samp>/*</samp>
comment, or whenever a Backslash-Newline appears in a <samp>//</samp> comment.
This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-coverage-mismatch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="185" incode="1">Wno-coverage-mismatch</indexterm></indexcommand>
<para>Warn if feedback profiles do not match when using the
<option>-fprofile-use</option> option.
If a source file is changed between compiling with <option>-fprofile-gen</option> and
with <option>-fprofile-use</option>, the files with the profile feedback can fail
to match the source file and GCC cannot use the profile feedback
information.  By default, this warning is enabled and is treated as an
error.  <option>-Wno-coverage-mismatch</option> can be used to disable the
warning or <option>-Wno-error=coverage-mismatch</option> can be used to
disable the error.  Disabling the error for this warning can result in
poorly optimized code and is useful only in the
case of very minor changes such as bug fixes to an existing code-base.
Completely disabling the warning is not recommended.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-cpp</itemformat></item>
</tableterm><tableitem><para><r>(C, Objective-C, C++, Objective-C++ and Fortran only)</r>
</para>
<para>Suppress warning messages emitted by <code>#warning</code> directives.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wdouble-promotion <r>(C, C++, Objective-C and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="186" incode="1">Wdouble-promotion</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="187" incode="1">Wno-double-promotion</indexterm></indexcommand>
<para>Give a warning when a value of type <code>float</code> is implicitly
promoted to <code>double</code>.  CPUs with a 32-bit &textldquo;single-precision&textrdquo;
floating-point unit implement <code>float</code> in hardware, but emulate
<code>double</code> in software.  On such a machine, doing computations
using <code>double</code> values is much more expensive because of the
overhead required for software emulation.
</para>
<para>It is easy to accidentally do computations with <code>double</code> because
floating-point literals are implicitly of type <code>double</code>.  For
example, in:
</para><smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">float area(float radius)
&lbrace;
   return 3.14159 * radius * radius;
&rbrace;
</pre></group>
</smallexample>
<para>the compiler performs the entire computation with <code>double</code>
because the floating-point literal is a <code>double</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wformat</itemformat></item>
<itemx spaces=" "><itemformat command="code">-Wformat=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="188" incode="1">Wformat</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="189" incode="1">Wno-format</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="190" incode="1">ffreestanding</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="191" incode="1">fno-builtin</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="192" incode="1">Wformat=</indexterm></indexcommand>
<para>Check calls to <code>printf</code> and <code>scanf</code>, etc., to make sure that
the arguments supplied have types appropriate to the format string
specified, and that the conversions specified in the format string make
sense.  This includes standard functions, and others specified by format
attributes (<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>), in the <code>printf</code>,
<code>scanf</code>, <code>strftime</code> and <code>strfmon</code> (an X/Open extension,
not in the C standard) families (or other target-specific families).
Which functions are checked without format attributes having been
specified depends on the standard version selected, and such checks of
functions without the attribute specified are disabled by
<option>-ffreestanding</option> or <option>-fno-builtin</option>.
</para>
<para>The formats are checked against the format features supported by GNU
libc version 2.2.  These include all ISO C90 and C99 features, as well
as features from the Single Unix Specification and some BSD and GNU
extensions.  Other library implementations may not support all these
features; GCC does not support warning about features that go beyond a
particular library&textrsquo;s limitations.  However, if <option>-Wpedantic</option> is used
with <option>-Wformat</option>, warnings are given about format features not
in the selected standard version (but not for <code>strfmon</code> formats,
since those are not in any version of the C standard).  <xref label="C-Dialect-Options"><xrefnodename>C Dialect
Options</xrefnodename><xrefprinteddesc>Options Controlling C Dialect</xrefprinteddesc></xref>.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-Wformat=1</itemformat></item>
<itemx spaces=" "><itemformat command="code">-Wformat</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="193" incode="1">Wformat</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="194" incode="1">Wformat=1</indexterm></indexcommand>
<para>Option <option>-Wformat</option> is equivalent to <option>-Wformat=1</option>, and
<option>-Wno-format</option> is equivalent to <option>-Wformat=0</option>.  Since
<option>-Wformat</option> also checks for null format arguments for several
functions, <option>-Wformat</option> also implies <option>-Wnonnull</option>.  Some
aspects of this level of format checking can be disabled by the
options: <option>-Wno-format-contains-nul</option>,
<option>-Wno-format-extra-args</option>, and <option>-Wno-format-zero-length</option>.
<option>-Wformat</option> is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-format-contains-nul</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="195" incode="1">Wno-format-contains-nul</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="196" incode="1">Wformat-contains-nul</indexterm></indexcommand>
<para>If <option>-Wformat</option> is specified, do not warn about format strings that
contain NUL bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-format-extra-args</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="197" incode="1">Wno-format-extra-args</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="198" incode="1">Wformat-extra-args</indexterm></indexcommand>
<para>If <option>-Wformat</option> is specified, do not warn about excess arguments to a
<code>printf</code> or <code>scanf</code> format function.  The C standard specifies
that such arguments are ignored.
</para>
<para>Where the unused arguments lie between used arguments that are
specified with <samp>$</samp> operand number specifications, normally
warnings are still given, since the implementation could not know what
type to pass to <code>va_arg</code> to skip the unused arguments.  However,
in the case of <code>scanf</code> formats, this option suppresses the
warning if the unused arguments are all pointers, since the Single
Unix Specification says that such unused arguments are allowed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-format-zero-length</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="199" incode="1">Wno-format-zero-length</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="200" incode="1">Wformat-zero-length</indexterm></indexcommand>
<para>If <option>-Wformat</option> is specified, do not warn about zero-length formats.
The C standard specifies that zero-length formats are allowed.
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wformat=2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="201" incode="1">Wformat=2</indexterm></indexcommand>
<para>Enable <option>-Wformat</option> plus additional format checks.  Currently
equivalent to <option>-Wformat -Wformat-nonliteral -Wformat-security
-Wformat-y2k</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wformat-nonliteral</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="202" incode="1">Wformat-nonliteral</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="203" incode="1">Wno-format-nonliteral</indexterm></indexcommand>
<para>If <option>-Wformat</option> is specified, also warn if the format string is not a
string literal and so cannot be checked, unless the format function
takes its format arguments as a <code>va_list</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wformat-security</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="204" incode="1">Wformat-security</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="205" incode="1">Wno-format-security</indexterm></indexcommand>
<para>If <option>-Wformat</option> is specified, also warn about uses of format
functions that represent possible security problems.  At present, this
warns about calls to <code>printf</code> and <code>scanf</code> functions where the
format string is not a string literal and there are no format arguments,
as in <code>printf (foo);</code>.  This may be a security hole if the format
string came from untrusted input and contains <samp>%n</samp>.  (This is
currently a subset of what <option>-Wformat-nonliteral</option> warns about, but
in future warnings may be added to <option>-Wformat-security</option> that are not
included in <option>-Wformat-nonliteral</option>.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wformat-signedness</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="206" incode="1">Wformat-signedness</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="207" incode="1">Wno-format-signedness</indexterm></indexcommand>
<para>If <option>-Wformat</option> is specified, also warn if the format string
requires an unsigned argument and the argument is signed and vice versa.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wformat-y2k</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="208" incode="1">Wformat-y2k</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="209" incode="1">Wno-format-y2k</indexterm></indexcommand>
<para>If <option>-Wformat</option> is specified, also warn about <code>strftime</code>
formats that may yield only a two-digit year.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wnonnull</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="210" incode="1">Wnonnull</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="211" incode="1">Wno-nonnull</indexterm></indexcommand>
<para>Warn about passing a null pointer for arguments marked as
requiring a non-null value by the <code>nonnull</code> function attribute.
</para>
<para><option>-Wnonnull</option> is included in <option>-Wall</option> and <option>-Wformat</option>.  It
can be disabled with the <option>-Wno-nonnull</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Winit-self <r>(C, C++, Objective-C and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="212" incode="1">Winit-self</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="213" incode="1">Wno-init-self</indexterm></indexcommand>
<para>Warn about uninitialized variables that are initialized with themselves.
Note this option can only be used with the <option>-Wuninitialized</option> option.
</para>
<para>For example, GCC warns about <code>i</code> being uninitialized in the
following snippet only when <option>-Winit-self</option> has been specified:
</para><smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">int f()
&lbrace;
  int i = i;
  return i;
&rbrace;
</pre></group>
</smallexample>

<para>This warning is enabled by <option>-Wall</option> in C++.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wimplicit-int <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="214" incode="1">Wimplicit-int</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="215" incode="1">Wno-implicit-int</indexterm></indexcommand>
<para>Warn when a declaration does not specify a type.
This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wimplicit-function-declaration <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="216" incode="1">Wimplicit-function-declaration</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="217" incode="1">Wno-implicit-function-declaration</indexterm></indexcommand>
<para>Give a warning whenever a function is used before being declared. In
C99 mode (<option>-std=c99</option> or <option>-std=gnu99</option>), this warning is
enabled by default and it is made into an error by
<option>-pedantic-errors</option>. This warning is also enabled by
<option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wimplicit <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="218" incode="1">Wimplicit</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="219" incode="1">Wno-implicit</indexterm></indexcommand>
<para>Same as <option>-Wimplicit-int</option> and <option>-Wimplicit-function-declaration</option>.
This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wignored-qualifiers <r>(C and C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="220" incode="1">Wignored-qualifiers</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="221" incode="1">Wno-ignored-qualifiers</indexterm></indexcommand>
<para>Warn if the return type of a function has a type qualifier
such as <code>const</code>.  For ISO C such a type qualifier has no effect,
since the value returned by a function is not an lvalue.
For C++, the warning is only emitted for scalar types or <code>void</code>.
ISO C prohibits qualified <code>void</code> return types on function
definitions, so such return types always receive a warning
even without this option.
</para>
<para>This warning is also enabled by <option>-Wextra</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wmain</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="222" incode="1">Wmain</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="223" incode="1">Wno-main</indexterm></indexcommand>
<para>Warn if the type of <code>main</code> is suspicious.  <code>main</code> should be
a function with external linkage, returning int, taking either zero
arguments, two, or three arguments of appropriate types.  This warning
is enabled by default in C++ and is enabled by either <option>-Wall</option>
or <option>-Wpedantic</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wmissing-braces</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="224" incode="1">Wmissing-braces</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="225" incode="1">Wno-missing-braces</indexterm></indexcommand>
<para>Warn if an aggregate or union initializer is not fully bracketed.  In
the following example, the initializer for <code>a</code> is not fully
bracketed, but that for <code>b</code> is fully bracketed.  This warning is
enabled by <option>-Wall</option> in C.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int a[2][2] = &lbrace; 0, 1, 2, 3 &rbrace;;
int b[2][2] = &lbrace; &lbrace; 0, 1 &rbrace;, &lbrace; 2, 3 &rbrace; &rbrace;;
</pre></smallexample>

<para>This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wmissing-include-dirs <r>(C, C++, Objective-C and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="226" incode="1">Wmissing-include-dirs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="227" incode="1">Wno-missing-include-dirs</indexterm></indexcommand>
<para>Warn if a user-supplied include directory does not exist.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wparentheses</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="228" incode="1">Wparentheses</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="229" incode="1">Wno-parentheses</indexterm></indexcommand>
<para>Warn if parentheses are omitted in certain contexts, such
as when there is an assignment in a context where a truth value
is expected, or when operators are nested whose precedence people
often get confused about.
</para>
<para>Also warn if a comparison like <code>x&lt;=y&lt;=z</code> appears; this is
equivalent to <code>(x&lt;=y ? 1 : 0) &lt;= z</code>, which is a different
interpretation from that of ordinary mathematical notation.
</para>
<para>Also warn about constructions where there may be confusion to which
<code>if</code> statement an <code>else</code> branch belongs.  Here is an example of
such a case:
</para>
<smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">&lbrace;
  if (a)
    if (b)
      foo ();
  else
    bar ();
&rbrace;
</pre></group>
</smallexample>

<para>In C/C++, every <code>else</code> branch belongs to the innermost possible
<code>if</code> statement, which in this example is <code>if (b)</code>.  This is
often not what the programmer expected, as illustrated in the above
example by indentation the programmer chose.  When there is the
potential for this confusion, GCC issues a warning when this flag
is specified.  To eliminate the warning, add explicit braces around
the innermost <code>if</code> statement so there is no way the <code>else</code>
can belong to the enclosing <code>if</code>.  The resulting code
looks like this:
</para>
<smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">&lbrace;
  if (a)
    &lbrace;
      if (b)
        foo ();
      else
        bar ();
    &rbrace;
&rbrace;
</pre></group>
</smallexample>

<para>Also warn for dangerous uses of the GNU extension to
<code>?:</code> with omitted middle operand. When the condition
in the <code>?</code>: operator is a boolean expression, the omitted value is
always 1.  Often programmers expect it to be a value computed
inside the conditional expression instead.
</para>
<para>This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsequence-point</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="230" incode="1">Wsequence-point</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="231" incode="1">Wno-sequence-point</indexterm></indexcommand>
<para>Warn about code that may have undefined semantics because of violations
of sequence point rules in the C and C++ standards.
</para>
<para>The C and C++ standards define the order in which expressions in a C/C++
program are evaluated in terms of <dfn>sequence points</dfn>, which represent
a partial ordering between the execution of parts of the program: those
executed before the sequence point, and those executed after it.  These
occur after the evaluation of a full expression (one which is not part
of a larger expression), after the evaluation of the first operand of a
<code>&amp;&amp;</code>, <code>||</code>, <code>? :</code> or <code>,</code> (comma) operator, before a
function is called (but after the evaluation of its arguments and the
expression denoting the called function), and in certain other places.
Other than as expressed by the sequence point rules, the order of
evaluation of subexpressions of an expression is not specified.  All
these rules describe only a partial order rather than a total order,
since, for example, if two functions are called within one expression
with no sequence point between them, the order in which the functions
are called is not specified.  However, the standards committee have
ruled that function calls do not overlap.
</para>
<para>It is not specified when between sequence points modifications to the
values of objects take effect.  Programs whose behavior depends on this
have undefined behavior; the C and C++ standards specify that &textldquo;Between
the previous and next sequence point an object shall have its stored
value modified at most once by the evaluation of an expression.
Furthermore, the prior value shall be read only to determine the value
to be stored.&textrdquo;.  If a program breaks these rules, the results on any
particular implementation are entirely unpredictable.
</para>
<para>Examples of code with undefined behavior are <code>a = a++;</code>, <code>a[n]
= b[n++]</code> and <code>a[i++] = i;</code>.  Some more complicated cases are not
diagnosed by this option, and it may give an occasional false positive
result, but in general it has been found fairly effective at detecting
this sort of problem in programs.
</para>
<para>The standard is worded confusingly, therefore there is some debate
over the precise meaning of the sequence point rules in subtle cases.
Links to discussions of the problem, including proposed formal
definitions, may be found on the GCC readings page, at
<uref><urefurl>http://gcc.gnu.org/&slashbreak;readings.html</urefurl></uref>.
</para>
<para>This warning is enabled by <option>-Wall</option> for C and C++.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-return-local-addr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="232" incode="1">Wno-return-local-addr</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="233" incode="1">Wreturn-local-addr</indexterm></indexcommand>
<para>Do not warn about returning a pointer (or in C++, a reference) to a
variable that goes out of scope after the function returns.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wreturn-type</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="234" incode="1">Wreturn-type</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="235" incode="1">Wno-return-type</indexterm></indexcommand>
<para>Warn whenever a function is defined with a return type that defaults
to <code>int</code>.  Also warn about any <code>return</code> statement with no
return value in a function whose return type is not <code>void</code>
(falling off the end of the function body is considered returning
without a value), and about a <code>return</code> statement with an
expression in a function whose return type is <code>void</code>.
</para>
<para>For C++, a function without return type always produces a diagnostic
message, even when <option>-Wno-return-type</option> is specified.  The only
exceptions are <code>main</code> and functions defined in system headers.
</para>
<para>This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wshift-count-negative</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="236" incode="1">Wshift-count-negative</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="237" incode="1">Wno-shift-count-negative</indexterm></indexcommand>
<para>Warn if shift count is negative. This warning is enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wshift-count-overflow</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="238" incode="1">Wshift-count-overflow</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="239" incode="1">Wno-shift-count-overflow</indexterm></indexcommand>
<para>Warn if shift count &gt;= width of type. This warning is enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wshift-negative-value</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="240" incode="1">Wshift-negative-value</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="241" incode="1">Wno-shift-negative-value</indexterm></indexcommand>
<para>Warn if left shifting a negative value.  This warning is enabled by
<option>-Wextra</option> in C99 and C++11 modes (and newer).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wswitch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="242" incode="1">Wswitch</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="243" incode="1">Wno-switch</indexterm></indexcommand>
<para>Warn whenever a <code>switch</code> statement has an index of enumerated type
and lacks a <code>case</code> for one or more of the named codes of that
enumeration.  (The presence of a <code>default</code> label prevents this
warning.)  <code>case</code> labels outside the enumeration range also
provoke warnings when this option is used (even if there is a
<code>default</code> label).
This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wswitch-default</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="244" incode="1">Wswitch-default</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="245" incode="1">Wno-switch-default</indexterm></indexcommand>
<para>Warn whenever a <code>switch</code> statement does not have a <code>default</code>
case.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wswitch-enum</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="246" incode="1">Wswitch-enum</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="247" incode="1">Wno-switch-enum</indexterm></indexcommand>
<para>Warn whenever a <code>switch</code> statement has an index of enumerated type
and lacks a <code>case</code> for one or more of the named codes of that
enumeration.  <code>case</code> labels outside the enumeration range also
provoke warnings when this option is used.  The only difference
between <option>-Wswitch</option> and this option is that this option gives a
warning about an omitted enumeration code even if there is a
<code>default</code> label.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wswitch-bool</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="248" incode="1">Wswitch-bool</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="249" incode="1">Wno-switch-bool</indexterm></indexcommand>
<para>Warn whenever a <code>switch</code> statement has an index of boolean type.
It is possible to suppress this warning by casting the controlling
expression to a type other than <code>bool</code>.  For example:
</para><smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">switch ((int) (a == 4))
  &lbrace;
  &dots;
  &rbrace;
</pre></group>
</smallexample>
<para>This warning is enabled by default for C and C++ programs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsync-nand <r>(C and C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="250" incode="1">Wsync-nand</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="251" incode="1">Wno-sync-nand</indexterm></indexcommand>
<para>Warn when <code>__sync_fetch_and_nand</code> and <code>__sync_nand_and_fetch</code>
built-in functions are used.  These functions changed semantics in GCC 4.4.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wtrigraphs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="252" incode="1">Wtrigraphs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="253" incode="1">Wno-trigraphs</indexterm></indexcommand>
<para>Warn if any trigraphs are encountered that might change the meaning of
the program (trigraphs within comments are not warned about).
This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunused-but-set-parameter</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="254" incode="1">Wunused-but-set-parameter</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="255" incode="1">Wno-unused-but-set-parameter</indexterm></indexcommand>
<para>Warn whenever a function parameter is assigned to, but otherwise unused
(aside from its declaration).
</para>
<para>To suppress this warning use the <code>unused</code> attribute
(<pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>).
</para>
<para>This warning is also enabled by <option>-Wunused</option> together with
<option>-Wextra</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunused-but-set-variable</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="256" incode="1">Wunused-but-set-variable</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="257" incode="1">Wno-unused-but-set-variable</indexterm></indexcommand>
<para>Warn whenever a local variable is assigned to, but otherwise unused
(aside from its declaration).
This warning is enabled by <option>-Wall</option>.
</para>
<para>To suppress this warning use the <code>unused</code> attribute
(<pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>).
</para>
<para>This warning is also enabled by <option>-Wunused</option>, which is enabled
by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunused-function</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="258" incode="1">Wunused-function</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="259" incode="1">Wno-unused-function</indexterm></indexcommand>
<para>Warn whenever a static function is declared but not defined or a
non-inline static function is unused.
This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunused-label</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="260" incode="1">Wunused-label</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="261" incode="1">Wno-unused-label</indexterm></indexcommand>
<para>Warn whenever a label is declared but not used.
This warning is enabled by <option>-Wall</option>.
</para>
<para>To suppress this warning use the <code>unused</code> attribute
(<pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunused-local-typedefs <r>(C, Objective-C, C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="262" incode="1">Wunused-local-typedefs</indexterm></indexcommand>
<para>Warn when a typedef locally defined in a function is not used.
This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunused-parameter</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="263" incode="1">Wunused-parameter</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="264" incode="1">Wno-unused-parameter</indexterm></indexcommand>
<para>Warn whenever a function parameter is unused aside from its declaration.
</para>
<para>To suppress this warning use the <code>unused</code> attribute
(<pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-unused-result</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="265" incode="1">Wunused-result</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="266" incode="1">Wno-unused-result</indexterm></indexcommand>
<para>Do not warn if a caller of a function marked with attribute
<code>warn_unused_result</code> (<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>) does not use
its return value. The default is <option>-Wunused-result</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunused-variable</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="267" incode="1">Wunused-variable</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="268" incode="1">Wno-unused-variable</indexterm></indexcommand>
<para>Warn whenever a local variable or non-constant static variable is unused
aside from its declaration.
This warning is enabled by <option>-Wall</option>.
</para>
<para>To suppress this warning use the <code>unused</code> attribute
(<pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunused-value</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="269" incode="1">Wunused-value</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="270" incode="1">Wno-unused-value</indexterm></indexcommand>
<para>Warn whenever a statement computes a result that is explicitly not
used. To suppress this warning cast the unused expression to
<code>void</code>. This includes an expression-statement or the left-hand
side of a comma expression that contains no side effects. For example,
an expression such as <code>x[i,j]</code> causes a warning, while
<code>x[(void)i,j]</code> does not.
</para>
<para>This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunused</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="271" incode="1">Wunused</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="272" incode="1">Wno-unused</indexterm></indexcommand>
<para>All the above <option>-Wunused</option> options combined.
</para>
<para>In order to get a warning about an unused function parameter, you must
either specify <option>-Wextra -Wunused</option> (note that <option>-Wall</option> implies
<option>-Wunused</option>), or separately specify <option>-Wunused-parameter</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wuninitialized</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="273" incode="1">Wuninitialized</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="274" incode="1">Wno-uninitialized</indexterm></indexcommand>
<para>Warn if an automatic variable is used without first being initialized
or if a variable may be clobbered by a <code>setjmp</code> call. In C++,
warn if a non-static reference or non-static <code>const</code> member
appears in a class without constructors.
</para>
<para>If you want to warn about code that uses the uninitialized value of the
variable in its own initializer, use the <option>-Winit-self</option> option.
</para>
<para>These warnings occur for individual uninitialized or clobbered
elements of structure, union or array variables as well as for
variables that are uninitialized or clobbered as a whole.  They do
not occur for variables or elements declared <code>volatile</code>.  Because
these warnings depend on optimization, the exact variables or elements
for which there are warnings depends on the precise optimization
options and version of GCC used.
</para>
<para>Note that there may be no warning about a variable that is used only
to compute a value that itself is never used, because such
computations may be deleted by data flow analysis before the warnings
are printed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wmaybe-uninitialized</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="275" incode="1">Wmaybe-uninitialized</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="276" incode="1">Wno-maybe-uninitialized</indexterm></indexcommand>
<para>For an automatic variable, if there exists a path from the function
entry to a use of the variable that is initialized, but there exist
some other paths for which the variable is not initialized, the compiler
emits a warning if it cannot prove the uninitialized paths are not
executed at run time. These warnings are made optional because GCC is
not smart enough to see all the reasons why the code might be correct
in spite of appearing to have an error.  Here is one example of how
this can happen:
</para>
<smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">&lbrace;
  int x;
  switch (y)
    &lbrace;
    case 1: x = 1;
      break;
    case 2: x = 4;
      break;
    case 3: x = 5;
    &rbrace;
  foo (x);
&rbrace;
</pre></group>
</smallexample>

<noindent></noindent>
<para>If the value of <code>y</code> is always 1, 2 or 3, then <code>x</code> is
always initialized, but GCC doesn&textrsquo;t know this. To suppress the
warning, you need to provide a default case with assert(0) or
similar code.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="109"><code>longjmp</code> warnings</indexterm></cindex>
<para>This option also warns when a non-volatile automatic variable might be
changed by a call to <code>longjmp</code>.  These warnings as well are possible
only in optimizing compilation.
</para>
<para>The compiler sees only the calls to <code>setjmp</code>.  It cannot know
where <code>longjmp</code> will be called; in fact, a signal handler could
call it at any point in the code.  As a result, you may get a warning
even when there is in fact no problem because <code>longjmp</code> cannot
in fact be called at the place that would cause a problem.
</para>
<para>Some spurious warnings can be avoided if you declare all the functions
you use that never return as <code>noreturn</code>.  <xref label="Function-Attributes"><xrefnodename>Function
Attributes</xrefnodename></xref>.
</para>
<para>This warning is enabled by <option>-Wall</option> or <option>-Wextra</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunknown-pragmas</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="277" incode="1">Wunknown-pragmas</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="278" incode="1">Wno-unknown-pragmas</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="110">warning for unknown pragmas</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="111">unknown pragmas, warning</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="112">pragmas, warning of unknown</indexterm></cindex>
<para>Warn when a <code>#pragma</code> directive is encountered that is not understood by 
GCC&eosperiod;  If this command-line option is used, warnings are even issued
for unknown pragmas in system header files.  This is not the case if
the warnings are only enabled by the <option>-Wall</option> command-line option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-pragmas</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="279" incode="1">Wno-pragmas</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="280" incode="1">Wpragmas</indexterm></indexcommand>
<para>Do not warn about misuses of pragmas, such as incorrect parameters,
invalid syntax, or conflicts between pragmas.  See also
<option>-Wunknown-pragmas</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstrict-aliasing</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="281" incode="1">Wstrict-aliasing</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="282" incode="1">Wno-strict-aliasing</indexterm></indexcommand>
<para>This option is only active when <option>-fstrict-aliasing</option> is active.
It warns about code that might break the strict aliasing rules that the
compiler is using for optimization.  The warning does not catch all
cases, but does attempt to catch the more common pitfalls.  It is
included in <option>-Wall</option>.
It is equivalent to <option>-Wstrict-aliasing=3</option>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstrict-aliasing=n</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="283" incode="1">Wstrict-aliasing=n</indexterm></indexcommand>
<para>This option is only active when <option>-fstrict-aliasing</option> is active.
It warns about code that might break the strict aliasing rules that the
compiler is using for optimization.
Higher levels correspond to higher accuracy (fewer false positives).
Higher levels also correspond to more effort, similar to the way <option>-O</option> 
works.
<option>-Wstrict-aliasing</option> is equivalent to <option>-Wstrict-aliasing=3</option>.
</para>
<para>Level 1: Most aggressive, quick, least accurate.
Possibly useful when higher levels
do not warn but <option>-fstrict-aliasing</option> still breaks the code, as it has very few
false negatives.  However, it has many false positives.
Warns for all pointer conversions between possibly incompatible types,
even if never dereferenced.  Runs in the front end only.
</para>
<para>Level 2: Aggressive, quick, not too precise.
May still have many false positives (not as many as level 1 though),
and few false negatives (but possibly more than level 1).
Unlike level 1, it only warns when an address is taken.  Warns about
incomplete types.  Runs in the front end only.
</para>
<para>Level 3 (default for <option>-Wstrict-aliasing</option>):
Should have very few false positives and few false
negatives.  Slightly slower than levels 1 or 2 when optimization is enabled.
Takes care of the common pun+dereference pattern in the front end:
<code>*(int*)&amp;some_float</code>.
If optimization is enabled, it also runs in the back end, where it deals
with multiple statement cases using flow-sensitive points-to information.
Only warns when the converted pointer is dereferenced.
Does not warn about incomplete types.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstrict-overflow</itemformat></item>
<itemx spaces=" "><itemformat command="code">-Wstrict-overflow=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="284" incode="1">Wstrict-overflow</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="285" incode="1">Wno-strict-overflow</indexterm></indexcommand>
<para>This option is only active when <option>-fstrict-overflow</option> is active.
It warns about cases where the compiler optimizes based on the
assumption that signed overflow does not occur.  Note that it does not
warn about all cases where the code might overflow: it only warns
about cases where the compiler implements some optimization.  Thus
this warning depends on the optimization level.
</para>
<para>An optimization that assumes that signed overflow does not occur is
perfectly safe if the values of the variables involved are such that
overflow never does, in fact, occur.  Therefore this warning can
easily give a false positive: a warning about code that is not
actually a problem.  To help focus on important issues, several
warning levels are defined.  No warnings are issued for the use of
undefined signed overflow when estimating how many iterations a loop
requires, in particular when determining whether a loop will be
executed at all.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstrict-overflow=1</itemformat></item>
</tableterm><tableitem><para>Warn about cases that are both questionable and easy to avoid.  For
example,  with <option>-fstrict-overflow</option>, the compiler simplifies
<code>x + 1 &gt; x</code> to <code>1</code>.  This level of
<option>-Wstrict-overflow</option> is enabled by <option>-Wall</option>; higher levels
are not, and must be explicitly requested.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstrict-overflow=2</itemformat></item>
</tableterm><tableitem><para>Also warn about other cases where a comparison is simplified to a
constant.  For example: <code>abs (x) &gt;= 0</code>.  This can only be
simplified when <option>-fstrict-overflow</option> is in effect, because
<code>abs (INT_MIN)</code> overflows to <code>INT_MIN</code>, which is less than
zero.  <option>-Wstrict-overflow</option> (with no level) is the same as
<option>-Wstrict-overflow=2</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstrict-overflow=3</itemformat></item>
</tableterm><tableitem><para>Also warn about other cases where a comparison is simplified.  For
example: <code>x + 1 &gt; 1</code> is simplified to <code>x &gt; 0</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstrict-overflow=4</itemformat></item>
</tableterm><tableitem><para>Also warn about other simplifications not covered by the above cases.
For example: <code>(x * 10) / 5</code> is simplified to <code>x * 2</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstrict-overflow=5</itemformat></item>
</tableterm><tableitem><para>Also warn about cases where the compiler reduces the magnitude of a
constant involved in a comparison.  For example: <code>x + 2 &gt; y</code> is
simplified to <code>x + 1 &gt;= y</code>.  This is reported only at the
highest warning level because this simplification applies to many
comparisons, so this warning level gives a very large number of
false positives.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsuggest-attribute=<r>[</r>pure<r>|</r>const<r>|</r>noreturn<r>|</r>format<r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="286" incode="1">Wsuggest-attribute=</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="287" incode="1">Wno-suggest-attribute=</indexterm></indexcommand>
<para>Warn for cases where adding an attribute may be beneficial. The
attributes currently supported are listed below.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsuggest-attribute=pure</itemformat></item>
<itemx spaces=" "><itemformat command="code">-Wsuggest-attribute=const</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-Wsuggest-attribute=noreturn</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="288" incode="1">Wsuggest-attribute=pure</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="289" incode="1">Wno-suggest-attribute=pure</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="290" incode="1">Wsuggest-attribute=const</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="291" incode="1">Wno-suggest-attribute=const</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="292" incode="1">Wsuggest-attribute=noreturn</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="293" incode="1">Wno-suggest-attribute=noreturn</indexterm></indexcommand>

<para>Warn about functions that might be candidates for attributes
<code>pure</code>, <code>const</code> or <code>noreturn</code>.  The compiler only warns for
functions visible in other compilation units or (in the case of <code>pure</code> and
<code>const</code>) if it cannot prove that the function returns normally. A function
returns normally if it doesn&textrsquo;t contain an infinite loop or return abnormally
by throwing, calling <code>abort</code> or trapping.  This analysis requires option
<option>-fipa-pure-const</option>, which is enabled by default at <option>-O</option> and
higher.  Higher optimization levels improve the accuracy of the analysis.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsuggest-attribute=format</itemformat></item>
<itemx spaces=" "><itemformat command="code">-Wmissing-format-attribute</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="294" incode="1">Wsuggest-attribute=format</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="295" incode="1">Wmissing-format-attribute</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="296" incode="1">Wno-suggest-attribute=format</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="297" incode="1">Wno-missing-format-attribute</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="298" incode="1">Wformat</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="299" incode="1">Wno-format</indexterm></indexcommand>

<para>Warn about function pointers that might be candidates for <code>format</code>
attributes.  Note these are only possible candidates, not absolute ones.
GCC guesses that function pointers with <code>format</code> attributes that
are used in assignment, initialization, parameter passing or return
statements should have a corresponding <code>format</code> attribute in the
resulting type.  I.e.&noeos; the left-hand side of the assignment or
initialization, the type of the parameter variable, or the return type
of the containing function respectively should also have a <code>format</code>
attribute to avoid the warning.
</para>
<para>GCC also warns about function definitions that might be
candidates for <code>format</code> attributes.  Again, these are only
possible candidates.  GCC guesses that <code>format</code> attributes
might be appropriate for any function that calls a function like
<code>vprintf</code> or <code>vscanf</code>, but this might not always be the
case, and some functions for which <code>format</code> attributes are
appropriate may not be detected.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsuggest-final-types</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="300" incode="1">Wno-suggest-final-types</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="301" incode="1">Wsuggest-final-types</indexterm></indexcommand>
<para>Warn about types with virtual methods where code quality would be improved
if the type were declared with the C++11 <code>final</code> specifier, 
or, if possible,
declared in an anonymous namespace. This allows GCC to more aggressively
devirtualize the polymorphic calls. This warning is more effective with link
time optimization, where the information about the class hierarchy graph is
more complete.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsuggest-final-methods</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="302" incode="1">Wno-suggest-final-methods</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="303" incode="1">Wsuggest-final-methods</indexterm></indexcommand>
<para>Warn about virtual methods where code quality would be improved if the method
were declared with the C++11 <code>final</code> specifier, 
or, if possible, its type were
declared in an anonymous namespace or with the <code>final</code> specifier.
This warning is
more effective with link time optimization, where the information about the
class hierarchy graph is more complete. It is recommended to first consider
suggestions of <option>-Wsuggest-final-types</option> and then rebuild with new
annotations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsuggest-override</itemformat></item>
</tableterm><tableitem><para>Warn about overriding virtual functions that are not marked with the override
keyword.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Warray-bounds</itemformat></item>
<itemx spaces=" "><itemformat command="code">-Warray-bounds=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="304" incode="1">Wno-array-bounds</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="305" incode="1">Warray-bounds</indexterm></indexcommand>
<para>This option is only active when <option>-ftree-vrp</option> is active
(default for <option>-O2</option> and above). It warns about subscripts to arrays
that are always out of bounds. This warning is enabled by <option>-Wall</option>.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-Warray-bounds=1</itemformat></item>
</tableterm><tableitem><para>This is the warning level of <option>-Warray-bounds</option> and is enabled
by <option>-Wall</option>; higher levels are not, and must be explicitly requested.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Warray-bounds=2</itemformat></item>
</tableterm><tableitem><para>This warning level also warns about out of bounds access for
arrays at the end of a struct and for arrays accessed through
pointers. This warning level may give a larger number of
false positives and is deactivated by default.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wbool-compare</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="306" incode="1">Wno-bool-compare</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="307" incode="1">Wbool-compare</indexterm></indexcommand>
<para>Warn about boolean expression compared with an integer value different from
<code>true</code>/<code>false</code>.  For instance, the following comparison is
always false:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">int n = 5;
&dots;
if ((n &gt; 1) == 2) &lbrace; &dots; &rbrace;
</pre></smallexample>
<para>This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-discarded-qualifiers <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="308" incode="1">Wno-discarded-qualifiers</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="309" incode="1">Wdiscarded-qualifiers</indexterm></indexcommand>
<para>Do not warn if type qualifiers on pointers are being discarded.
Typically, the compiler warns if a <code>const char *</code> variable is
passed to a function that takes a <code>char *</code> parameter.  This option
can be used to suppress such a warning.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-discarded-array-qualifiers <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="310" incode="1">Wno-discarded-array-qualifiers</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="311" incode="1">Wdiscarded-array-qualifiers</indexterm></indexcommand>
<para>Do not warn if type qualifiers on arrays which are pointer targets
are being discarded. Typically, the compiler warns if a
<code>const int (*)[]</code> variable is passed to a function that
takes a <code>int (*)[]</code> parameter.  This option can be used to
suppress such a warning.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-incompatible-pointer-types <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="312" incode="1">Wno-incompatible-pointer-types</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="313" incode="1">Wincompatible-pointer-types</indexterm></indexcommand>
<para>Do not warn when there is a conversion between pointers that have incompatible
types.  This warning is for cases not covered by <option>-Wno-pointer-sign</option>,
which warns for pointer argument passing or assignment with different
signedness.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-int-conversion <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="314" incode="1">Wno-int-conversion</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="315" incode="1">Wint-conversion</indexterm></indexcommand>
<para>Do not warn about incompatible integer to pointer and pointer to integer
conversions.  This warning is about implicit conversions; for explicit
conversions the warnings <option>-Wno-int-to-pointer-cast</option> and
<option>-Wno-pointer-to-int-cast</option> may be used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-div-by-zero</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="316" incode="1">Wno-div-by-zero</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="317" incode="1">Wdiv-by-zero</indexterm></indexcommand>
<para>Do not warn about compile-time integer division by zero.  Floating-point
division by zero is not warned about, as it can be a legitimate way of
obtaining infinities and NaNs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsystem-headers</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="318" incode="1">Wsystem-headers</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="319" incode="1">Wno-system-headers</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="113">warnings from system headers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="114">system headers, warnings from</indexterm></cindex>
<para>Print warning messages for constructs found in system header files.
Warnings from system headers are normally suppressed, on the assumption
that they usually do not indicate real problems and would only make the
compiler output harder to read.  Using this command-line option tells
GCC to emit warnings from system headers as if they occurred in user
code.  However, note that using <option>-Wall</option> in conjunction with this
option does <emph>not</emph> warn about unknown pragmas in system
headers&textmdash;for that, <option>-Wunknown-pragmas</option> must also be used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wtrampolines</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="320" incode="1">Wtrampolines</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="321" incode="1">Wno-trampolines</indexterm></indexcommand>
<para>Warn about trampolines generated for pointers to nested functions.
A trampoline is a small piece of data or code that is created at run
time on the stack when the address of a nested function is taken, and is
used to call the nested function indirectly.  For some targets, it is
made up of data only and thus requires no special treatment.  But, for
most targets, it is made up of code and thus requires the stack to be
made executable in order for the program to work properly.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wfloat-equal</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="322" incode="1">Wfloat-equal</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="323" incode="1">Wno-float-equal</indexterm></indexcommand>
<para>Warn if floating-point values are used in equality comparisons.
</para>
<para>The idea behind this is that sometimes it is convenient (for the
programmer) to consider floating-point values as approximations to
infinitely precise real numbers.  If you are doing this, then you need
to compute (by analyzing the code, or in some other way) the maximum or
likely maximum error that the computation introduces, and allow for it
when performing comparisons (and when producing output, but that&textrsquo;s a
different problem).  In particular, instead of testing for equality, you
should check to see whether the two values have ranges that overlap; and
this is done with the relational operators, so equality comparisons are
probably mistaken.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wtraditional <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="324" incode="1">Wtraditional</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="325" incode="1">Wno-traditional</indexterm></indexcommand>
<para>Warn about certain constructs that behave differently in traditional and
ISO C&eosperiod;  Also warn about ISO C constructs that have no traditional C
equivalent, and/or problematic constructs that should be avoided.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Macro parameters that appear within string literals in the macro body.
In traditional C macro replacement takes place within string literals,
but in ISO C it does not.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>In traditional C, some preprocessor directives did not exist.
Traditional preprocessors only considered a line to be a directive
if the <samp>#</samp> appeared in column 1 on the line.  Therefore
<option>-Wtraditional</option> warns about directives that traditional C
understands but ignores because the <samp>#</samp> does not appear as the
first character on the line.  It also suggests you hide directives like
<code>#pragma</code> not understood by traditional C by indenting them.  Some
traditional implementations do not recognize <code>#elif</code>, so this option
suggests avoiding it altogether.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>A function-like macro that appears without arguments.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The unary plus operator.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The <samp>U</samp> integer constant suffix, or the <samp>F</samp> or <samp>L</samp> floating-point
constant suffixes.  (Traditional C does support the <samp>L</samp> suffix on integer
constants.)  Note, these suffixes appear in macros defined in the system
headers of most modern systems, e.g.&noeos; the <samp>_MIN</samp>/<samp>_MAX</samp> macros in <code>&lt;limits.h&gt;</code>.
Use of these macros in user code might normally lead to spurious
warnings, however GCC&textrsquo;s integrated preprocessor has enough context to
avoid warning in these cases.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>A function declared external in one block and then used after the end of
the block.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>A <code>switch</code> statement has an operand of type <code>long</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>A non-<code>static</code> function declaration follows a <code>static</code> one.
This construct is not accepted by some traditional C compilers.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The ISO type of an integer constant has a different width or
signedness from its traditional type.  This warning is only issued if
the base of the constant is ten.  I.e.&noeos; hexadecimal or octal values, which
typically represent bit patterns, are not warned about.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Usage of ISO string concatenation is detected.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Initialization of automatic aggregates.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Identifier conflicts with labels.  Traditional C lacks a separate
namespace for labels.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Initialization of unions.  If the initializer is zero, the warning is
omitted.  This is done under the assumption that the zero initializer in
user code appears conditioned on e.g.&noeos; <code>__STDC__</code> to avoid missing
initializer warnings and relies on default initialization to zero in the
traditional C case.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Conversions by prototypes between fixed/floating-point values and vice
versa.  The absence of these prototypes when compiling with traditional
C causes serious problems.  This is a subset of the possible
conversion warnings; for the full set use <option>-Wtraditional-conversion</option>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Use of ISO C style function definitions.  This warning intentionally is
<emph>not</emph> issued for prototype declarations or variadic functions
because these ISO C features appear in your code when using
libiberty&textrsquo;s traditional C compatibility macros, <code>PARAMS</code> and
<code>VPARAMS</code>.  This warning is also bypassed for nested functions
because that feature is already a GCC extension and thus not relevant to
traditional C compatibility.
</para></listitem></itemize>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wtraditional-conversion <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="326" incode="1">Wtraditional-conversion</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="327" incode="1">Wno-traditional-conversion</indexterm></indexcommand>
<para>Warn if a prototype causes a type conversion that is different from what
would happen to the same argument in the absence of a prototype.  This
includes conversions of fixed point to floating and vice versa, and
conversions changing the width or signedness of a fixed-point argument
except when the same as the default promotion.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wdeclaration-after-statement <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="328" incode="1">Wdeclaration-after-statement</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="329" incode="1">Wno-declaration-after-statement</indexterm></indexcommand>
<para>Warn when a declaration is found after a statement in a block.  This
construct, known from C++, was introduced with ISO C99 and is by default
allowed in GCC&eosperiod;  It is not supported by ISO C90.  <xref label="Mixed-Declarations"><xrefnodename>Mixed Declarations</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wundef</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="330" incode="1">Wundef</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="331" incode="1">Wno-undef</indexterm></indexcommand>
<para>Warn if an undefined identifier is evaluated in an <code>#if</code> directive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-endif-labels</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="332" incode="1">Wno-endif-labels</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="333" incode="1">Wendif-labels</indexterm></indexcommand>
<para>Do not warn whenever an <code>#else</code> or an <code>#endif</code> are followed by text.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wshadow</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="334" incode="1">Wshadow</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="335" incode="1">Wno-shadow</indexterm></indexcommand>
<para>Warn whenever a local variable or type declaration shadows another
variable, parameter, type, class member (in C++), or instance variable
(in Objective-C) or whenever a built-in function is shadowed. Note
that in C++, the compiler warns if a local variable shadows an
explicit typedef, but not if it shadows a struct/class/enum.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-shadow-ivar <r>(Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="336" incode="1">Wno-shadow-ivar</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="337" incode="1">Wshadow-ivar</indexterm></indexcommand>
<para>Do not warn whenever a local variable shadows an instance variable in an
Objective-C method.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wlarger-than=<var>len</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="338" incode="1">Wlarger-than=<var>len</var></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="339" incode="1">Wlarger-than-<var>len</var></indexterm></indexcommand>
<para>Warn whenever an object of larger than <var>len</var> bytes is defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wframe-larger-than=<var>len</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="340" incode="1">Wframe-larger-than</indexterm></indexcommand>
<para>Warn if the size of a function frame is larger than <var>len</var> bytes.
The computation done to determine the stack frame size is approximate
and not conservative.
The actual requirements may be somewhat greater than <var>len</var>
even if you do not get a warning.  In addition, any space allocated
via <code>alloca</code>, variable-length arrays, or related constructs
is not included by the compiler when determining
whether or not to issue a warning.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-free-nonheap-object</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="341" incode="1">Wno-free-nonheap-object</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="342" incode="1">Wfree-nonheap-object</indexterm></indexcommand>
<para>Do not warn when attempting to free an object that was not allocated
on the heap.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstack-usage=<var>len</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="343" incode="1">Wstack-usage</indexterm></indexcommand>
<para>Warn if the stack usage of a function might be larger than <var>len</var> bytes.
The computation done to determine the stack usage is conservative.
Any space allocated via <code>alloca</code>, variable-length arrays, or related
constructs is included by the compiler when determining whether or not to
issue a warning.
</para>
<para>The message is in keeping with the output of <option>-fstack-usage</option>.
</para>
<itemize commandarg="bullet" endspaces=" ">
<listitem><prepend>&bullet;</prepend>
<para>If the stack usage is fully static but exceeds the specified amount, it&textrsquo;s:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  warning: stack usage is 1120 bytes
</pre></smallexample>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the stack usage is (partly) dynamic but bounded, it&textrsquo;s:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  warning: stack usage might be 1648 bytes
</pre></smallexample>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the stack usage is (partly) dynamic and not bounded, it&textrsquo;s:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  warning: stack usage might be unbounded
</pre></smallexample>
</listitem></itemize>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunsafe-loop-optimizations</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="344" incode="1">Wunsafe-loop-optimizations</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="345" incode="1">Wno-unsafe-loop-optimizations</indexterm></indexcommand>
<para>Warn if the loop cannot be optimized because the compiler cannot
assume anything on the bounds of the loop indices.  With
<option>-funsafe-loop-optimizations</option> warn if the compiler makes
such assumptions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-pedantic-ms-format <r>(MinGW targets only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="346" incode="1">Wno-pedantic-ms-format</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="347" incode="1">Wpedantic-ms-format</indexterm></indexcommand>
<para>When used in combination with <option>-Wformat</option>
and <option>-pedantic</option> without GNU extensions, this option
disables the warnings about non-ISO <code>printf</code> / <code>scanf</code> format
width specifiers <code>I32</code>, <code>I64</code>, and <code>I</code> used on Windows targets,
which depend on the MS runtime.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wpointer-arith</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="348" incode="1">Wpointer-arith</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="349" incode="1">Wno-pointer-arith</indexterm></indexcommand>
<para>Warn about anything that depends on the &textldquo;size of&textrdquo; a function type or
of <code>void</code>.  GNU C assigns these types a size of 1, for
convenience in calculations with <code>void *</code> pointers and pointers
to functions.  In C++, warn also when an arithmetic operation involves
<code>NULL</code>.  This warning is also enabled by <option>-Wpedantic</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wtype-limits</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="350" incode="1">Wtype-limits</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="351" incode="1">Wno-type-limits</indexterm></indexcommand>
<para>Warn if a comparison is always true or always false due to the limited
range of the data type, but do not warn for constant expressions.  For
example, warn if an unsigned variable is compared against zero with
<code>&lt;</code> or <code>&gt;=</code>.  This warning is also enabled by
<option>-Wextra</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wbad-function-cast <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="352" incode="1">Wbad-function-cast</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="353" incode="1">Wno-bad-function-cast</indexterm></indexcommand>
<para>Warn when a function call is cast to a non-matching type.
For example, warn if a call to a function returning an integer type 
is cast to a pointer type.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wc90-c99-compat <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="354" incode="1">Wc90-c99-compat</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="355" incode="1">Wno-c90-c99-compat</indexterm></indexcommand>
<para>Warn about features not present in ISO C90, but present in ISO C99.
For instance, warn about use of variable length arrays, <code>long long</code>
type, <code>bool</code> type, compound literals, designated initializers, and so
on.  This option is independent of the standards mode.  Warnings are disabled
in the expression that follows <code>__extension__</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wc99-c11-compat <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="356" incode="1">Wc99-c11-compat</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="357" incode="1">Wno-c99-c11-compat</indexterm></indexcommand>
<para>Warn about features not present in ISO C99, but present in ISO C11.
For instance, warn about use of anonymous structures and unions,
<code>_Atomic</code> type qualifier, <code>_Thread_local</code> storage-class specifier,
<code>_Alignas</code> specifier, <code>Alignof</code> operator, <code>_Generic</code> keyword,
and so on.  This option is independent of the standards mode.  Warnings are
disabled in the expression that follows <code>__extension__</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wc++-compat <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="358" incode="1">Wc++-compat</indexterm></indexcommand>
<para>Warn about ISO C constructs that are outside of the common subset of
ISO C and ISO C++, e.g.&noeos; request for implicit conversion from
<code>void *</code> to a pointer to non-<code>void</code> type.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wc++11-compat <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="359" incode="1">Wc++11-compat</indexterm></indexcommand>
<para>Warn about C++ constructs whose meaning differs between ISO C++ 1998
and ISO C++ 2011, e.g., identifiers in ISO C++ 1998 that are keywords
in ISO C++ 2011.  This warning turns on <option>-Wnarrowing</option> and is
enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wc++14-compat <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="360" incode="1">Wc++14-compat</indexterm></indexcommand>
<para>Warn about C++ constructs whose meaning differs between ISO C++ 2011
and ISO C++ 2014.  This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wcast-qual</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="361" incode="1">Wcast-qual</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="362" incode="1">Wno-cast-qual</indexterm></indexcommand>
<para>Warn whenever a pointer is cast so as to remove a type qualifier from
the target type.  For example, warn if a <code>const char *</code> is cast
to an ordinary <code>char *</code>.
</para>
<para>Also warn when making a cast that introduces a type qualifier in an
unsafe way.  For example, casting <code>char **</code> to <code>const char **</code>
is unsafe, as in this example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  /* p is char ** value.  */
  const char **q = (const char **) p;
  /* Assignment of readonly string to const char * is OK.  */
  *q = &quot;string&quot;;
  /* Now char** pointer points to read-only memory.  */
  **p = 'b';
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wcast-align</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="363" incode="1">Wcast-align</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="364" incode="1">Wno-cast-align</indexterm></indexcommand>
<para>Warn whenever a pointer is cast such that the required alignment of the
target is increased.  For example, warn if a <code>char *</code> is cast to
an <code>int *</code> on machines where integers can only be accessed at
two- or four-byte boundaries.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wwrite-strings</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="365" incode="1">Wwrite-strings</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="366" incode="1">Wno-write-strings</indexterm></indexcommand>
<para>When compiling C, give string constants the type <code>const
char[<var>length</var>]</code> so that copying the address of one into a
non-<code>const</code> <code>char *</code> pointer produces a warning.  These
warnings help you find at compile time code that can try to write
into a string constant, but only if you have been very careful about
using <code>const</code> in declarations and prototypes.  Otherwise, it is
just a nuisance. This is why we did not make <option>-Wall</option> request
these warnings.
</para>
<para>When compiling C++, warn about the deprecated conversion from string
literals to <code>char *</code>.  This warning is enabled by default for C++
programs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wclobbered</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="367" incode="1">Wclobbered</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="368" incode="1">Wno-clobbered</indexterm></indexcommand>
<para>Warn for variables that might be changed by <code>longjmp</code> or
<code>vfork</code>.  This warning is also enabled by <option>-Wextra</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wconditionally-supported <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="369" incode="1">Wconditionally-supported</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="370" incode="1">Wno-conditionally-supported</indexterm></indexcommand>
<para>Warn for conditionally-supported (C++11 [intro.defs]) constructs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wconversion</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="371" incode="1">Wconversion</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="372" incode="1">Wno-conversion</indexterm></indexcommand>
<para>Warn for implicit conversions that may alter a value. This includes
conversions between real and integer, like <code>abs (x)</code> when
<code>x</code> is <code>double</code>; conversions between signed and unsigned,
like <code>unsigned ui = -1</code>; and conversions to smaller types, like
<code>sqrtf (M_PI)</code>. Do not warn for explicit casts like <code>abs
((int) x)</code> and <code>ui = (unsigned) -1</code>, or if the value is not
changed by the conversion like in <code>abs (2.0)</code>.  Warnings about
conversions between signed and unsigned integers can be disabled by
using <option>-Wno-sign-conversion</option>.
</para>
<para>For C++, also warn for confusing overload resolution for user-defined
conversions; and conversions that never use a type conversion
operator: conversions to <code>void</code>, the same type, a base class or a
reference to them. Warnings about conversions between signed and
unsigned integers are disabled by default in C++ unless
<option>-Wsign-conversion</option> is explicitly enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-conversion-null <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="373" incode="1">Wconversion-null</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="374" incode="1">Wno-conversion-null</indexterm></indexcommand>
<para>Do not warn for conversions between <code>NULL</code> and non-pointer
types. <option>-Wconversion-null</option> is enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wzero-as-null-pointer-constant <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="375" incode="1">Wzero-as-null-pointer-constant</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="376" incode="1">Wno-zero-as-null-pointer-constant</indexterm></indexcommand>
<para>Warn when a literal &textrsquo;0&textrsquo; is used as null pointer constant.  This can
be useful to facilitate the conversion to <code>nullptr</code> in C++11.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wdate-time</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="377" incode="1">Wdate-time</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="378" incode="1">Wno-date-time</indexterm></indexcommand>
<para>Warn when macros <code>__TIME__</code>, <code>__DATE__</code> or <code>__TIMESTAMP__</code>
are encountered as they might prevent bit-wise-identical reproducible
compilations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wdelete-incomplete <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="379" incode="1">Wdelete-incomplete</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="380" incode="1">Wno-delete-incomplete</indexterm></indexcommand>
<para>Warn when deleting a pointer to incomplete type, which may cause
undefined behavior at runtime.  This warning is enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wuseless-cast <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="381" incode="1">Wuseless-cast</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="382" incode="1">Wno-useless-cast</indexterm></indexcommand>
<para>Warn when an expression is casted to its own type.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wempty-body</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="383" incode="1">Wempty-body</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="384" incode="1">Wno-empty-body</indexterm></indexcommand>
<para>Warn if an empty body occurs in an <code>if</code>, <code>else</code> or <code>do
while</code> statement.  This warning is also enabled by <option>-Wextra</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wenum-compare</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="385" incode="1">Wenum-compare</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="386" incode="1">Wno-enum-compare</indexterm></indexcommand>
<para>Warn about a comparison between values of different enumerated types.
In C++ enumeral mismatches in conditional expressions are also
diagnosed and the warning is enabled by default.  In C this warning is 
enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wjump-misses-init <r>(C, Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="387" incode="1">Wjump-misses-init</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="388" incode="1">Wno-jump-misses-init</indexterm></indexcommand>
<para>Warn if a <code>goto</code> statement or a <code>switch</code> statement jumps
forward across the initialization of a variable, or jumps backward to a
label after the variable has been initialized.  This only warns about
variables that are initialized when they are declared.  This warning is
only supported for C and Objective-C; in C++ this sort of branch is an
error in any case.
</para>
<para><option>-Wjump-misses-init</option> is included in <option>-Wc++-compat</option>.  It
can be disabled with the <option>-Wno-jump-misses-init</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsign-compare</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="389" incode="1">Wsign-compare</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="390" incode="1">Wno-sign-compare</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="115">warning for comparison of signed and unsigned values</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="116">comparison of signed and unsigned values, warning</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="117">signed and unsigned values, comparison warning</indexterm></cindex>
<para>Warn when a comparison between signed and unsigned values could produce
an incorrect result when the signed value is converted to unsigned.
This warning is also enabled by <option>-Wextra</option>; to get the other warnings
of <option>-Wextra</option> without this warning, use <option>-Wextra -Wno-sign-compare</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsign-conversion</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="391" incode="1">Wsign-conversion</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="392" incode="1">Wno-sign-conversion</indexterm></indexcommand>
<para>Warn for implicit conversions that may change the sign of an integer
value, like assigning a signed integer expression to an unsigned
integer variable. An explicit cast silences the warning. In C, this
option is enabled also by <option>-Wconversion</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wfloat-conversion</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="393" incode="1">Wfloat-conversion</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="394" incode="1">Wno-float-conversion</indexterm></indexcommand>
<para>Warn for implicit conversions that reduce the precision of a real value.
This includes conversions from real to integer, and from higher precision
real to lower precision real values.  This option is also enabled by
<option>-Wconversion</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsized-deallocation <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="395" incode="1">Wsized-deallocation</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="396" incode="1">Wno-sized-deallocation</indexterm></indexcommand>
<para>Warn about a definition of an unsized deallocation function
</para><smallexample endspaces=" ">
<pre xml:space="preserve">void operator delete (void *) noexcept;
void operator delete[] (void *) noexcept;
</pre></smallexample>
<para>without a definition of the corresponding sized deallocation function
</para><smallexample endspaces=" ">
<pre xml:space="preserve">void operator delete (void *, std::size_t) noexcept;
void operator delete[] (void *, std::size_t) noexcept;
</pre></smallexample>
<para>or vice versa.  Enabled by <option>-Wextra</option> along with
<option>-fsized-deallocation</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsizeof-pointer-memaccess</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="397" incode="1">Wsizeof-pointer-memaccess</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="398" incode="1">Wno-sizeof-pointer-memaccess</indexterm></indexcommand>
<para>Warn for suspicious length parameters to certain string and memory built-in
functions if the argument uses <code>sizeof</code>.  This warning warns e.g.&noeos;
about <code>memset (ptr, 0, sizeof (ptr));</code> if <code>ptr</code> is not an array,
but a pointer, and suggests a possible fix, or about
<code>memcpy (&amp;foo, ptr, sizeof (&amp;foo));</code>.  This warning is enabled by
<option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsizeof-array-argument</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="399" incode="1">Wsizeof-array-argument</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="400" incode="1">Wno-sizeof-array-argument</indexterm></indexcommand>
<para>Warn when the <code>sizeof</code> operator is applied to a parameter that is
declared as an array in a function definition.  This warning is enabled by
default for C and C++ programs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wmemset-transposed-args</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="401" incode="1">Wmemset-transposed-args</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="402" incode="1">Wno-memset-transposed-args</indexterm></indexcommand>
<para>Warn for suspicious calls to the <code>memset</code> built-in function, if the
second argument is not zero and the third argument is zero.  This warns e.g.<spacecmd type="nl"/>about <code>memset (buf, sizeof buf, 0)</code> where most probably
<code>memset (buf, 0, sizeof buf)</code> was meant instead.  The diagnostics
is only emitted if the third argument is literal zero.  If it is some
expression that is folded to zero, a cast of zero to some type, etc., 
it is far less likely that the user has mistakenly exchanged the arguments 
and no warning is emitted.  This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Waddress</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="403" incode="1">Waddress</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="404" incode="1">Wno-address</indexterm></indexcommand>
<para>Warn about suspicious uses of memory addresses. These include using
the address of a function in a conditional expression, such as
<code>void func(void); if (func)</code>, and comparisons against the memory
address of a string literal, such as <code>if (x == &quot;abc&quot;)</code>.  Such
uses typically indicate a programmer error: the address of a function
always evaluates to true, so their use in a conditional usually
indicate that the programmer forgot the parentheses in a function
call; and comparisons against string literals result in unspecified
behavior and are not portable in C, so they usually indicate that the
programmer intended to use <code>strcmp</code>.  This warning is enabled by
<option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wlogical-op</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="405" incode="1">Wlogical-op</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="406" incode="1">Wno-logical-op</indexterm></indexcommand>
<para>Warn about suspicious uses of logical operators in expressions.
This includes using logical operators in contexts where a
bit-wise operator is likely to be expected.  Also warns when
the operands of a logical operator are the same:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">extern int a;
if (a &lt; 0 &amp;&amp; a &lt; 0) &lbrace; &dots; &rbrace;
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wlogical-not-parentheses</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="407" incode="1">Wlogical-not-parentheses</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="408" incode="1">Wno-logical-not-parentheses</indexterm></indexcommand>
<para>Warn about logical not used on the left hand side operand of a comparison.
This option does not warn if the RHS operand is of a boolean type.  Its
purpose is to detect suspicious code like the following:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">int a;
&dots;
if (!a &gt; 1) &lbrace; &dots; &rbrace;
</pre></smallexample>

<para>It is possible to suppress the warning by wrapping the LHS into
parentheses:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">if ((!a) &gt; 1) &lbrace; &dots; &rbrace;
</pre></smallexample>

<para>This warning is enabled by <option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Waggregate-return</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="409" incode="1">Waggregate-return</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="410" incode="1">Wno-aggregate-return</indexterm></indexcommand>
<para>Warn if any functions that return structures or unions are defined or
called.  (In languages where you can return an array, this also elicits
a warning.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-aggressive-loop-optimizations</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="411" incode="1">Wno-aggressive-loop-optimizations</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="412" incode="1">Waggressive-loop-optimizations</indexterm></indexcommand>
<para>Warn if in a loop with constant number of iterations the compiler detects
undefined behavior in some statement during one or more of the iterations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-attributes</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="413" incode="1">Wno-attributes</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="414" incode="1">Wattributes</indexterm></indexcommand>
<para>Do not warn if an unexpected <code>__attribute__</code> is used, such as
unrecognized attributes, function attributes applied to variables,
etc.  This does not stop errors for incorrect use of supported
attributes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-builtin-macro-redefined</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="415" incode="1">Wno-builtin-macro-redefined</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="416" incode="1">Wbuiltin-macro-redefined</indexterm></indexcommand>
<para>Do not warn if certain built-in macros are redefined.  This suppresses
warnings for redefinition of <code>__TIMESTAMP__</code>, <code>__TIME__</code>,
<code>__DATE__</code>, <code>__FILE__</code>, and <code>__BASE_FILE__</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstrict-prototypes <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="417" incode="1">Wstrict-prototypes</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="418" incode="1">Wno-strict-prototypes</indexterm></indexcommand>
<para>Warn if a function is declared or defined without specifying the
argument types.  (An old-style function definition is permitted without
a warning if preceded by a declaration that specifies the argument
types.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wold-style-declaration <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="419" incode="1">Wold-style-declaration</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="420" incode="1">Wno-old-style-declaration</indexterm></indexcommand>
<para>Warn for obsolescent usages, according to the C Standard, in a
declaration. For example, warn if storage-class specifiers like
<code>static</code> are not the first things in a declaration.  This warning
is also enabled by <option>-Wextra</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wold-style-definition <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="421" incode="1">Wold-style-definition</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="422" incode="1">Wno-old-style-definition</indexterm></indexcommand>
<para>Warn if an old-style function definition is used.  A warning is given
even if there is a previous prototype.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wmissing-parameter-type <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="423" incode="1">Wmissing-parameter-type</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="424" incode="1">Wno-missing-parameter-type</indexterm></indexcommand>
<para>A function parameter is declared without a type specifier in K&amp;R-style
functions:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void foo(bar) &lbrace; &rbrace;
</pre></smallexample>

<para>This warning is also enabled by <option>-Wextra</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wmissing-prototypes <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="425" incode="1">Wmissing-prototypes</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="426" incode="1">Wno-missing-prototypes</indexterm></indexcommand>
<para>Warn if a global function is defined without a previous prototype
declaration.  This warning is issued even if the definition itself
provides a prototype.  Use this option to detect global functions
that do not have a matching prototype declaration in a header file.
This option is not valid for C++ because all function declarations
provide prototypes and a non-matching declaration declares an
overload rather than conflict with an earlier declaration.
Use <option>-Wmissing-declarations</option> to detect missing declarations in C++.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wmissing-declarations</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="427" incode="1">Wmissing-declarations</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="428" incode="1">Wno-missing-declarations</indexterm></indexcommand>
<para>Warn if a global function is defined without a previous declaration.
Do so even if the definition itself provides a prototype.
Use this option to detect global functions that are not declared in
header files.  In C, no warnings are issued for functions with previous
non-prototype declarations; use <option>-Wmissing-prototypes</option> to detect
missing prototypes.  In C++, no warnings are issued for function templates,
or for inline functions, or for functions in anonymous namespaces.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wmissing-field-initializers</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="429" incode="1">Wmissing-field-initializers</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="430" incode="1">Wno-missing-field-initializers</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="431" incode="1">W</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="432" incode="1">Wextra</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="433" incode="1">Wno-extra</indexterm></indexcommand>
<para>Warn if a structure&textrsquo;s initializer has some fields missing.  For
example, the following code causes such a warning, because
<code>x.h</code> is implicitly zero:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct s &lbrace; int f, g, h; &rbrace;;
struct s x = &lbrace; 3, 4 &rbrace;;
</pre></smallexample>

<para>This option does not warn about designated initializers, so the following
modification does not trigger a warning:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct s &lbrace; int f, g, h; &rbrace;;
struct s x = &lbrace; .f = 3, .g = 4 &rbrace;;
</pre></smallexample>

<para>In C++ this option does not warn either about the empty &lbrace; &rbrace;
initializer, for example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct s &lbrace; int f, g, h; &rbrace;;
s x = &lbrace; &rbrace;;
</pre></smallexample>

<para>This warning is included in <option>-Wextra</option>.  To get other <option>-Wextra</option>
warnings without this one, use <option>-Wextra -Wno-missing-field-initializers</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-multichar</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="434" incode="1">Wno-multichar</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="435" incode="1">Wmultichar</indexterm></indexcommand>
<para>Do not warn if a multicharacter constant (<samp>'FOOF'</samp>) is used.
Usually they indicate a typo in the user&textrsquo;s code, as they have
implementation-defined values, and should not be used in portable code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wnormalized<r>[</r>=<r>&lt;</r>none<r>|</r>id<r>|</r>nfc<r>|</r>nfkc<r>&gt;]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="436" incode="1">Wnormalized=</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="437" incode="1">Wnormalized</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="438" incode="1">Wno-normalized</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="118">NFC</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="119">NFKC</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="120">character set, input normalization</indexterm></cindex>
<para>In ISO C and ISO C++, two identifiers are different if they are
different sequences of characters.  However, sometimes when characters
outside the basic ASCII character set are used, you can have two
different character sequences that look the same.  To avoid confusion,
the ISO 10646 standard sets out some <dfn>normalization rules</dfn> which
when applied ensure that two sequences that look the same are turned into
the same sequence.  GCC can warn you if you are using identifiers that
have not been normalized; this option controls that warning.
</para>
<para>There are four levels of warning supported by GCC&eosperiod;  The default is
<option>-Wnormalized=nfc</option>, which warns about any identifier that is
not in the ISO 10646 &textldquo;C&textrdquo; normalized form, <dfn>NFC</dfn>.  NFC is the
recommended form for most uses.  It is equivalent to
<option>-Wnormalized</option>.
</para>
<para>Unfortunately, there are some characters allowed in identifiers by
ISO C and ISO C++ that, when turned into NFC, are not allowed in 
identifiers.  That is, there&textrsquo;s no way to use these symbols in portable
ISO C or C++ and have all your identifiers in NFC&eosperiod;
<option>-Wnormalized=id</option> suppresses the warning for these characters.
It is hoped that future versions of the standards involved will correct
this, which is why this option is not the default.
</para>
<para>You can switch the warning off for all characters by writing
<option>-Wnormalized=none</option> or <option>-Wno-normalized</option>.  You should
only do this if you are using some other normalization scheme (like
&textldquo;D&textrdquo;), because otherwise you can easily create bugs that are
literally impossible to see.
</para>
<para>Some characters in ISO 10646 have distinct meanings but look identical
in some fonts or display methodologies, especially once formatting has
been applied.  For instance <code>\u207F</code>, &textldquo;SUPERSCRIPT LATIN SMALL
LETTER N&textrdquo;, displays just like a regular <code>n</code> that has been
placed in a superscript.  ISO 10646 defines the <dfn>NFKC</dfn>
normalization scheme to convert all these into a standard form as
well, and GCC warns if your code is not in NFKC if you use
<option>-Wnormalized=nfkc</option>.  This warning is comparable to warning
about every identifier that contains the letter O because it might be
confused with the digit 0, and so is not the default, but may be
useful as a local coding convention if the programming environment 
cannot be fixed to display these characters distinctly.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-deprecated</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="439" incode="1">Wno-deprecated</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="440" incode="1">Wdeprecated</indexterm></indexcommand>
<para>Do not warn about usage of deprecated features.  <xref label="Deprecated-Features"><xrefnodename>Deprecated Features</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-deprecated-declarations</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="441" incode="1">Wno-deprecated-declarations</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="442" incode="1">Wdeprecated-declarations</indexterm></indexcommand>
<para>Do not warn about uses of functions (<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>),
variables (<pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>), and types (<pxref label="Type-Attributes"><xrefnodename>Type
Attributes</xrefnodename></pxref>) marked as deprecated by using the <code>deprecated</code>
attribute.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-overflow</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="443" incode="1">Wno-overflow</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="444" incode="1">Woverflow</indexterm></indexcommand>
<para>Do not warn about compile-time overflow in constant expressions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-odr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="445" incode="1">Wno-odr</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="446" incode="1">Wodr</indexterm></indexcommand>
<para>Warn about One Definition Rule violations during link-time optimization.
Requires <option>-flto-odr-type-merging</option> to be enabled.  Enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wopenmp-simd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="447" incode="1">Wopenm-simd</indexterm></indexcommand>
<para>Warn if the vectorizer cost model overrides the OpenMP or the Cilk Plus
simd directive set by user.  The <option>-fsimd-cost-model=unlimited</option>
option can be used to relax the cost model.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Woverride-init <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="448" incode="1">Woverride-init</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="449" incode="1">Wno-override-init</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="450" incode="1">W</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="451" incode="1">Wextra</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="452" incode="1">Wno-extra</indexterm></indexcommand>
<para>Warn if an initialized field without side effects is overridden when
using designated initializers (<pxref label="Designated-Inits"><xrefnodename>Designated Inits</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Designated
Initializers</xrefprinteddesc></pxref>).
</para>
<para>This warning is included in <option>-Wextra</option>.  To get other
<option>-Wextra</option> warnings without this one, use <option>-Wextra
-Wno-override-init</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Woverride-init-side-effects <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="453" incode="1">Woverride-init-side-effects</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="454" incode="1">Wno-override-init-side-effects</indexterm></indexcommand>
<para>Warn if an initialized field with side effects is overridden when
using designated initializers (<pxref label="Designated-Inits"><xrefnodename>Designated Inits</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Designated
Initializers</xrefprinteddesc></pxref>).  This warning is enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wpacked</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="455" incode="1">Wpacked</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="456" incode="1">Wno-packed</indexterm></indexcommand>
<para>Warn if a structure is given the packed attribute, but the packed
attribute has no effect on the layout or size of the structure.
Such structures may be mis-aligned for little benefit.  For
instance, in this code, the variable <code>f.x</code> in <code>struct bar</code>
is misaligned even though <code>struct bar</code> does not itself
have the packed attribute:
</para>
<smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">struct foo &lbrace;
  int x;
  char a, b, c, d;
&rbrace; __attribute__((packed));
struct bar &lbrace;
  char z;
  struct foo f;
&rbrace;;
</pre></group>
</smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wpacked-bitfield-compat</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="457" incode="1">Wpacked-bitfield-compat</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="458" incode="1">Wno-packed-bitfield-compat</indexterm></indexcommand>
<para>The 4.1, 4.2 and 4.3 series of GCC ignore the <code>packed</code> attribute
on bit-fields of type <code>char</code>.  This has been fixed in GCC 4.4 but
the change can lead to differences in the structure layout.  GCC
informs you when the offset of such a field has changed in GCC 4.4.
For example there is no longer a 4-bit padding between field <code>a</code>
and <code>b</code> in this structure:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct foo
&lbrace;
  char a:4;
  char b:8;
&rbrace; __attribute__ ((packed));
</pre></smallexample>

<para>This warning is enabled by default.  Use
<option>-Wno-packed-bitfield-compat</option> to disable this warning.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wpadded</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="459" incode="1">Wpadded</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="460" incode="1">Wno-padded</indexterm></indexcommand>
<para>Warn if padding is included in a structure, either to align an element
of the structure or to align the whole structure.  Sometimes when this
happens it is possible to rearrange the fields of the structure to
reduce the padding and so make the structure smaller.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wredundant-decls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="461" incode="1">Wredundant-decls</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="462" incode="1">Wno-redundant-decls</indexterm></indexcommand>
<para>Warn if anything is declared more than once in the same scope, even in
cases where multiple declaration is valid and changes nothing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wnested-externs <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="463" incode="1">Wnested-externs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="464" incode="1">Wno-nested-externs</indexterm></indexcommand>
<para>Warn if an <code>extern</code> declaration is encountered within a function.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-inherited-variadic-ctor</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="465" incode="1">Winherited-variadic-ctor</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="466" incode="1">Wno-inherited-variadic-ctor</indexterm></indexcommand>
<para>Suppress warnings about use of C++11 inheriting constructors when the
base class inherited from has a C variadic constructor; the warning is
on by default because the ellipsis is not inherited.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Winline</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="467" incode="1">Winline</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="468" incode="1">Wno-inline</indexterm></indexcommand>
<para>Warn if a function that is declared as inline cannot be inlined.
Even with this option, the compiler does not warn about failures to
inline functions declared in system headers.
</para>
<para>The compiler uses a variety of heuristics to determine whether or not
to inline a function.  For example, the compiler takes into account
the size of the function being inlined and the amount of inlining
that has already been done in the current function.  Therefore,
seemingly insignificant changes in the source program can cause the
warnings produced by <option>-Winline</option> to appear or disappear.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-invalid-offsetof <r>(C++ and Objective-C++ only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="469" incode="1">Wno-invalid-offsetof</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="470" incode="1">Winvalid-offsetof</indexterm></indexcommand>
<para>Suppress warnings from applying the <code>offsetof</code> macro to a non-POD
type.  According to the 2014 ISO C++ standard, applying <code>offsetof</code>
to a non-standard-layout type is undefined.  In existing C++ implementations,
however, <code>offsetof</code> typically gives meaningful results.
This flag is for users who are aware that they are
writing nonportable code and who have deliberately chosen to ignore the
warning about it.
</para>
<para>The restrictions on <code>offsetof</code> may be relaxed in a future version
of the C++ standard.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-int-to-pointer-cast</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="471" incode="1">Wno-int-to-pointer-cast</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="472" incode="1">Wint-to-pointer-cast</indexterm></indexcommand>
<para>Suppress warnings from casts to pointer type of an integer of a
different size. In C++, casting to a pointer type of smaller size is
an error. <option>Wint-to-pointer-cast</option> is enabled by default.
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-pointer-to-int-cast <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="473" incode="1">Wno-pointer-to-int-cast</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="474" incode="1">Wpointer-to-int-cast</indexterm></indexcommand>
<para>Suppress warnings from casts from a pointer to an integer type of a
different size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Winvalid-pch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="475" incode="1">Winvalid-pch</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="476" incode="1">Wno-invalid-pch</indexterm></indexcommand>
<para>Warn if a precompiled header (<pxref label="Precompiled-Headers"><xrefnodename>Precompiled Headers</xrefnodename></pxref>) is found in
the search path but can&textrsquo;t be used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wlong-long</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="477" incode="1">Wlong-long</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="478" incode="1">Wno-long-long</indexterm></indexcommand>
<para>Warn if <code>long long</code> type is used.  This is enabled by either
<option>-Wpedantic</option> or <option>-Wtraditional</option> in ISO C90 and C++98
modes.  To inhibit the warning messages, use <option>-Wno-long-long</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wvariadic-macros</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="479" incode="1">Wvariadic-macros</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="480" incode="1">Wno-variadic-macros</indexterm></indexcommand>
<para>Warn if variadic macros are used in ISO C90 mode, or if the GNU
alternate syntax is used in ISO C99 mode.  This is enabled by either
<option>-Wpedantic</option> or <option>-Wtraditional</option>.  To inhibit the warning
messages, use <option>-Wno-variadic-macros</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wvarargs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="481" incode="1">Wvarargs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="482" incode="1">Wno-varargs</indexterm></indexcommand>
<para>Warn upon questionable usage of the macros used to handle variable
arguments like <code>va_start</code>.  This is default.  To inhibit the
warning messages, use <option>-Wno-varargs</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wvector-operation-performance</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="483" incode="1">Wvector-operation-performance</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="484" incode="1">Wno-vector-operation-performance</indexterm></indexcommand>
<para>Warn if vector operation is not implemented via SIMD capabilities of the
architecture.  Mainly useful for the performance tuning.
Vector operation can be implemented <code>piecewise</code>, which means that the
scalar operation is performed on every vector element; 
<code>in parallel</code>, which means that the vector operation is implemented
using scalars of wider type, which normally is more performance efficient;
and <code>as a single scalar</code>, which means that vector fits into a
scalar type.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-virtual-move-assign</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="485" incode="1">Wvirtual-move-assign</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="486" incode="1">Wno-virtual-move-assign</indexterm></indexcommand>
<para>Suppress warnings about inheriting from a virtual base with a
non-trivial C++11 move assignment operator.  This is dangerous because
if the virtual base is reachable along more than one path, it is
moved multiple times, which can mean both objects end up in the
moved-from state.  If the move assignment operator is written to avoid
moving from a moved-from object, this warning can be disabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wvla</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="487" incode="1">Wvla</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="488" incode="1">Wno-vla</indexterm></indexcommand>
<para>Warn if variable length array is used in the code.
<option>-Wno-vla</option> prevents the <option>-Wpedantic</option> warning of
the variable length array.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wvolatile-register-var</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="489" incode="1">Wvolatile-register-var</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="490" incode="1">Wno-volatile-register-var</indexterm></indexcommand>
<para>Warn if a register variable is declared volatile.  The volatile
modifier does not inhibit all optimizations that may eliminate reads
and/or writes to register variables.  This warning is enabled by
<option>-Wall</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wdisabled-optimization</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="491" incode="1">Wdisabled-optimization</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="492" incode="1">Wno-disabled-optimization</indexterm></indexcommand>
<para>Warn if a requested optimization pass is disabled.  This warning does
not generally indicate that there is anything wrong with your code; it
merely indicates that GCC&textrsquo;s optimizers are unable to handle the code
effectively.  Often, the problem is that your code is too big or too
complex; GCC refuses to optimize programs when the optimization
itself is likely to take inordinate amounts of time.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wpointer-sign <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="493" incode="1">Wpointer-sign</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="494" incode="1">Wno-pointer-sign</indexterm></indexcommand>
<para>Warn for pointer argument passing or assignment with different signedness.
This option is only supported for C and Objective-C&eosperiod;  It is implied by
<option>-Wall</option> and by <option>-Wpedantic</option>, which can be disabled with
<option>-Wno-pointer-sign</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wstack-protector</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="495" incode="1">Wstack-protector</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="496" incode="1">Wno-stack-protector</indexterm></indexcommand>
<para>This option is only active when <option>-fstack-protector</option> is active.  It
warns about functions that are not protected against stack smashing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Woverlength-strings</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="497" incode="1">Woverlength-strings</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="498" incode="1">Wno-overlength-strings</indexterm></indexcommand>
<para>Warn about string constants that are longer than the &textldquo;minimum
maximum&textrdquo; length specified in the C standard.  Modern compilers
generally allow string constants that are much longer than the
standard&textrsquo;s minimum limit, but very portable programs should avoid
using longer strings.
</para>
<para>The limit applies <emph>after</emph> string constant concatenation, and does
not count the trailing NUL&eosperiod;  In C90, the limit was 509 characters; in
C99, it was raised to 4095.  C++98 does not specify a normative
minimum maximum, so we do not diagnose overlength strings in C++&eosperiod;
</para>
<para>This option is implied by <option>-Wpedantic</option>, and can be disabled with
<option>-Wno-overlength-strings</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunsuffixed-float-constants <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="499" incode="1">Wunsuffixed-float-constants</indexterm></indexcommand>

<para>Issue a warning for any floating constant that does not have
a suffix.  When used together with <option>-Wsystem-headers</option> it
warns about such constants in system header files.  This can be useful
when preparing code to use with the <code>FLOAT_CONST_DECIMAL64</code> pragma
from the decimal floating-point extension to C99.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wno-designated-init <r>(C and Objective-C only)</r></itemformat></item>
</tableterm><tableitem><para>Suppress warnings when a positional initializer is used to initialize
a structure that has been marked with the <code>designated_init</code>
attribute.
</para>
</tableitem></tableentry></table>

</section>
<node name="Debugging-Options" spaces=" "><nodename>Debugging Options</nodename><nodenext automatic="on">Optimize Options</nodenext><nodeprev automatic="on">Warning Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Options for Debugging Your Program or GCC</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="121">options, debugging</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="122">debugging information options</indexterm></cindex>

<para>GCC has various special options that are used for debugging
either your program or GCC:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-g</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="500" incode="1">g</indexterm></indexcommand>
<para>Produce debugging information in the operating system&textrsquo;s native format
(stabs, COFF, XCOFF, or DWARF 2)&eosperiod;  GDB can work with this debugging
information.
</para>
<para>On most systems that use stabs format, <option>-g</option> enables use of extra
debugging information that only GDB can use; this extra information
makes debugging work better in GDB but probably makes other debuggers
crash or
refuse to read the program.  If you want to control for certain whether
to generate the extra information, use <option>-gstabs+</option>, <option>-gstabs</option>,
<option>-gxcoff+</option>, <option>-gxcoff</option>, or <option>-gvms</option> (see below).
</para>
<para>GCC allows you to use <option>-g</option> with
<option>-O</option>.  The shortcuts taken by optimized code may occasionally
produce surprising results: some variables you declared may not exist
at all; flow of control may briefly move where you did not expect it;
some statements may not be executed because they compute constant
results or their values are already at hand; some statements may
execute in different places because they have been moved out of loops.
</para>
<para>Nevertheless it proves possible to debug optimized output.  This makes
it reasonable to use the optimizer for programs that might have bugs.
</para>
<para>The following options are useful when GCC is generated with the
capability for more than one debugging format.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gsplit-dwarf</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="501" incode="1">gsplit-dwarf</indexterm></indexcommand>
<para>Separate as much dwarf debugging information as possible into a
separate output file with the extension .dwo.  This option allows
the build system to avoid linking files with debug information.  To
be useful, this option requires a debugger capable of reading .dwo
files.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ggdb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="502" incode="1">ggdb</indexterm></indexcommand>
<para>Produce debugging information for use by GDB&eosperiod;  This means to use the
most expressive format available (DWARF 2, stabs, or the native format
if neither of those are supported), including GDB extensions if at all
possible.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gpubnames</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="503" incode="1">gpubnames</indexterm></indexcommand>
<para>Generate dwarf .debug_pubnames and .debug_pubtypes sections.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ggnu-pubnames</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="504" incode="1">ggnu-pubnames</indexterm></indexcommand>
<para>Generate .debug_pubnames and .debug_pubtypes sections in a format
suitable for conversion into a GDB<spacecmd type="spc"/>index.  This option is only useful
with a linker that can produce GDB<spacecmd type="spc"/>index version 7.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gstabs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="505" incode="1">gstabs</indexterm></indexcommand>
<para>Produce debugging information in stabs format (if that is supported),
without GDB extensions.  This is the format used by DBX on most BSD
systems.  On MIPS, Alpha and System V Release 4 systems this option
produces stabs debugging output that is not understood by DBX or SDB&eosperiod;
On System V Release 4 systems this option requires the GNU assembler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-feliminate-unused-debug-symbols</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="506" incode="1">feliminate-unused-debug-symbols</indexterm></indexcommand>
<para>Produce debugging information in stabs format (if that is supported),
for only symbols that are actually used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-femit-class-debug-always</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="507" incode="1">femit-class-debug-always</indexterm></indexcommand>
<para>Instead of emitting debugging information for a C++ class in only one
object file, emit it in all object files using the class.  This option
should be used only with debuggers that are unable to handle the way GCC
normally emits debugging information for classes because using this
option increases the size of debugging information by as much as a
factor of two.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdebug-types-section</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="508" incode="1">fdebug-types-section</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="509" incode="1">fno-debug-types-section</indexterm></indexcommand>
<para>When using DWARF Version 4 or higher, type DIEs can be put into
their own <code>.debug_types</code> section instead of making them part of the
<code>.debug_info</code> section.  It is more efficient to put them in a separate
comdat sections since the linker can then remove duplicates.
But not all DWARF consumers support <code>.debug_types</code> sections yet
and on some objects <code>.debug_types</code> produces larger instead of smaller
debugging information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gstabs+</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="510" incode="1">gstabs+</indexterm></indexcommand>
<para>Produce debugging information in stabs format (if that is supported),
using GNU extensions understood only by the GNU debugger (GDB)&eosperiod;  The
use of these extensions is likely to make other debuggers crash or
refuse to read the program.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gcoff</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="511" incode="1">gcoff</indexterm></indexcommand>
<para>Produce debugging information in COFF format (if that is supported).
This is the format used by SDB on most System V systems prior to
System V Release 4.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gxcoff</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="512" incode="1">gxcoff</indexterm></indexcommand>
<para>Produce debugging information in XCOFF format (if that is supported).
This is the format used by the DBX debugger on IBM RS/6000 systems.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gxcoff+</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="513" incode="1">gxcoff+</indexterm></indexcommand>
<para>Produce debugging information in XCOFF format (if that is supported),
using GNU extensions understood only by the GNU debugger (GDB)&eosperiod;  The
use of these extensions is likely to make other debuggers crash or
refuse to read the program, and may cause assemblers other than the GNU
assembler (GAS) to fail with an error.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gdwarf-<var>version</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="514" incode="1">gdwarf-<var>version</var></indexterm></indexcommand>
<para>Produce debugging information in DWARF format (if that is supported).
The value of <var>version</var> may be either 2, 3, 4 or 5; the default version
for most targets is 4.  DWARF Version 5 is only experimental.
</para>
<para>Note that with DWARF Version 2, some ports require and always
use some non-conflicting DWARF 3 extensions in the unwind tables.
</para>
<para>Version 4 may require GDB 7.0 and <option>-fvar-tracking-assignments</option>
for maximum benefit.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-grecord-gcc-switches</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="515" incode="1">grecord-gcc-switches</indexterm></indexcommand>
<para>This switch causes the command-line options used to invoke the
compiler that may affect code generation to be appended to the
DW_AT_producer attribute in DWARF debugging information.  The options
are concatenated with spaces separating them from each other and from
the compiler version.  See also <option>-frecord-gcc-switches</option> for another
way of storing compiler options into the object file.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gno-record-gcc-switches</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="516" incode="1">gno-record-gcc-switches</indexterm></indexcommand>
<para>Disallow appending command-line options to the DW_AT_producer attribute
in DWARF debugging information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gstrict-dwarf</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="517" incode="1">gstrict-dwarf</indexterm></indexcommand>
<para>Disallow using extensions of later DWARF standard version than selected
with <option>-gdwarf-<var>version</var></option>.  On most targets using non-conflicting
DWARF extensions from later standard versions is allowed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gno-strict-dwarf</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="518" incode="1">gno-strict-dwarf</indexterm></indexcommand>
<para>Allow using extensions of later DWARF standard version than selected with
<option>-gdwarf-<var>version</var></option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gz<r>[</r>=<var>type</var><r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="519" incode="1">gz</indexterm></indexcommand>
<para>Produce compressed debug sections in DWARF format, if that is supported.
If <var>type</var> is not given, the default type depends on the capabilities
of the assembler and linker used.  <var>type</var> may be one of
<samp>none</samp> (don&textrsquo;t compress debug sections), <samp>zlib</samp> (use zlib
compression in ELF gABI format), or <samp>zlib-gnu</samp> (use zlib
compression in traditional GNU format).  If the linker doesn&textrsquo;t support
writing compressed debug sections, the option is rejected.  Otherwise,
if the assembler does not support them, <option>-gz</option> is silently ignored
when producing object files.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gvms</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="520" incode="1">gvms</indexterm></indexcommand>
<para>Produce debugging information in Alpha/VMS debug format (if that is
supported).  This is the format used by DEBUG on Alpha/VMS systems.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-g<var>level</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-ggdb<var>level</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-gstabs<var>level</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-gcoff<var>level</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-gxcoff<var>level</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-gvms<var>level</var></itemformat></itemx>
</tableterm><tableitem><para>Request debugging information and also use <var>level</var> to specify how
much information.  The default level is 2.
</para>
<para>Level 0 produces no debug information at all.  Thus, <option>-g0</option> negates
<option>-g</option>.
</para>
<para>Level 1 produces minimal information, enough for making backtraces in
parts of the program that you don&textrsquo;t plan to debug.  This includes
descriptions of functions and external variables, and line number
tables, but no information about local variables.
</para>
<para>Level 3 includes extra information, such as all the macro definitions
present in the program.  Some debuggers support macro expansion when
you use <option>-g3</option>.
</para>
<para><option>-gdwarf-2</option> does not accept a concatenated debug level, because
GCC used to support an option <option>-gdwarf</option> that meant to generate
debug information in version 1 of the DWARF format (which is very
different from version 2), and it would have been too confusing.  That
debug format is long obsolete, but the option cannot be changed now.
Instead use an additional <option>-g<var>level</var></option> option to change the
debug level for DWARF.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gtoggle</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="521" incode="1">gtoggle</indexterm></indexcommand>
<para>Turn off generation of debug info, if leaving out this option
generates it, or turn it on at level 2 otherwise.  The position of this
argument in the command line does not matter; it takes effect after all
other options are processed, and it does so only once, no matter how
many times it is given.  This is mainly intended to be used with
<option>-fcompare-debug</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=address</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="522" incode="1">fsanitize=address</indexterm></indexcommand>
<para>Enable AddressSanitizer, a fast memory error detector.
Memory access instructions are instrumented to detect
out-of-bounds and use-after-free bugs.
See <uref><urefurl>http://code.google.com/p/address-sanitizer/</urefurl></uref> for
more details.  The run-time behavior can be influenced using the
<env>ASAN_OPTIONS</env> environment variable; see
<url><urefurl>https://code.google.com/p/address-sanitizer/wiki/Flags#Run-time_flags</urefurl></url> for
a list of supported options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=kernel-address</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="523" incode="1">fsanitize=kernel-address</indexterm></indexcommand>
<para>Enable AddressSanitizer for Linux kernel.
See <uref><urefurl>http://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKernel</urefurl></uref> for more details.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=thread</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="524" incode="1">fsanitize=thread</indexterm></indexcommand>
<para>Enable ThreadSanitizer, a fast data race detector.
Memory access instructions are instrumented to detect
data race bugs.  See <uref><urefurl>http://code.google.com/p/thread-sanitizer/</urefurl></uref> for more
details. The run-time behavior can be influenced using the <env>TSAN_OPTIONS</env>
environment variable; see
<url><urefurl>https://code.google.com/p/thread-sanitizer/wiki/Flags</urefurl></url> for a list of
supported options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=leak</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="525" incode="1">fsanitize=leak</indexterm></indexcommand>
<para>Enable LeakSanitizer, a memory leak detector.
This option only matters for linking of executables and if neither
<option>-fsanitize=address</option> nor <option>-fsanitize=thread</option> is used.  In that
case the executable is linked against a library that overrides <code>malloc</code>
and other allocator functions.  See
<uref><urefurl>https://code.google.com/p/address-sanitizer/wiki/LeakSanitizer</urefurl></uref> for more
details.  The run-time behavior can be influenced using the
<env>LSAN_OPTIONS</env> environment variable.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=undefined</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="526" incode="1">fsanitize=undefined</indexterm></indexcommand>
<para>Enable UndefinedBehaviorSanitizer, a fast undefined behavior detector.
Various computations are instrumented to detect undefined behavior
at runtime.  Current suboptions are:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=shift</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="527" incode="1">fsanitize=shift</indexterm></indexcommand>
<para>This option enables checking that the result of a shift operation is
not undefined.  Note that what exactly is considered undefined differs
slightly between C and C++, as well as between ISO C90 and C99, etc.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=integer-divide-by-zero</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="528" incode="1">fsanitize=integer-divide-by-zero</indexterm></indexcommand>
<para>Detect integer division by zero as well as <code>INT_MIN / -1</code> division.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=unreachable</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="529" incode="1">fsanitize=unreachable</indexterm></indexcommand>
<para>With this option, the compiler turns the <code>__builtin_unreachable</code>
call into a diagnostics message call instead.  When reaching the
<code>__builtin_unreachable</code> call, the behavior is undefined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=vla-bound</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="530" incode="1">fsanitize=vla-bound</indexterm></indexcommand>
<para>This option instructs the compiler to check that the size of a variable
length array is positive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=null</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="531" incode="1">fsanitize=null</indexterm></indexcommand>
<para>This option enables pointer checking.  Particularly, the application
built with this option turned on will issue an error message when it
tries to dereference a NULL pointer, or if a reference (possibly an
rvalue reference) is bound to a NULL pointer, or if a method is invoked
on an object pointed by a NULL pointer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=return</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="532" incode="1">fsanitize=return</indexterm></indexcommand>
<para>This option enables return statement checking.  Programs
built with this option turned on will issue an error message
when the end of a non-void function is reached without actually
returning a value.  This option works in C++ only.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=signed-integer-overflow</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="533" incode="1">fsanitize=signed-integer-overflow</indexterm></indexcommand>
<para>This option enables signed integer overflow checking.  We check that
the result of <code>+</code>, <code>*</code>, and both unary and binary <code>-</code>
does not overflow in the signed arithmetics.  Note, integer promotion
rules must be taken into account.  That is, the following is not an
overflow:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">signed char a = SCHAR_MAX;
a++;
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=bounds</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="534" incode="1">fsanitize=bounds</indexterm></indexcommand>
<para>This option enables instrumentation of array bounds.  Various out of bounds
accesses are detected.  Flexible array members, flexible array member-like
arrays, and initializers of variables with static storage are not instrumented.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=bounds-strict</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="535" incode="1">fsanitize=bounds-strict</indexterm></indexcommand>
<para>This option enables strict instrumentation of array bounds.  Most out of bounds
accesses are detected, including flexible array members and flexible array
member-like arrays.  Initializers of variables with static storage are not
instrumented.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=alignment</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="536" incode="1">fsanitize=alignment</indexterm></indexcommand>

<para>This option enables checking of alignment of pointers when they are
dereferenced, or when a reference is bound to insufficiently aligned target,
or when a method or constructor is invoked on insufficiently aligned object.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=object-size</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="537" incode="1">fsanitize=object-size</indexterm></indexcommand>
<para>This option enables instrumentation of memory references using the
<code>__builtin_object_size</code> function.  Various out of bounds pointer
accesses are detected.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=float-divide-by-zero</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="538" incode="1">fsanitize=float-divide-by-zero</indexterm></indexcommand>
<para>Detect floating-point division by zero.  Unlike other similar options,
<option>-fsanitize=float-divide-by-zero</option> is not enabled by
<option>-fsanitize=undefined</option>, since floating-point division by zero can
be a legitimate way of obtaining infinities and NaNs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=float-cast-overflow</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="539" incode="1">fsanitize=float-cast-overflow</indexterm></indexcommand>
<para>This option enables floating-point type to integer conversion checking.
We check that the result of the conversion does not overflow.
Unlike other similar options, <option>-fsanitize=float-cast-overflow</option> is
not enabled by <option>-fsanitize=undefined</option>.
This option does not work well with <code>FE_INVALID</code> exceptions enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=nonnull-attribute</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="540" incode="1">fsanitize=nonnull-attribute</indexterm></indexcommand>

<para>This option enables instrumentation of calls, checking whether null values
are not passed to arguments marked as requiring a non-null value by the
<code>nonnull</code> function attribute.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=returns-nonnull-attribute</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="541" incode="1">fsanitize=returns-nonnull-attribute</indexterm></indexcommand>

<para>This option enables instrumentation of return statements in functions
marked with <code>returns_nonnull</code> function attribute, to detect returning
of null values from such functions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=bool</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="542" incode="1">fsanitize=bool</indexterm></indexcommand>

<para>This option enables instrumentation of loads from bool.  If a value other
than 0/1 is loaded, a run-time error is issued.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=enum</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="543" incode="1">fsanitize=enum</indexterm></indexcommand>

<para>This option enables instrumentation of loads from an enum type.  If
a value outside the range of values for the enum type is loaded,
a run-time error is issued.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize=vptr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="544" incode="1">fsanitize=vptr</indexterm></indexcommand>

<para>This option enables instrumentation of C++ member function calls, member
accesses and some conversions between pointers to base and derived classes,
to verify the referenced object has the correct dynamic type.
</para>
</tableitem></tableentry></table>

<para>While <option>-ftrapv</option> causes traps for signed overflows to be emitted,
<option>-fsanitize=undefined</option> gives a diagnostic message.
This currently works only for the C family of languages.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-sanitize=all</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="545" incode="1">fno-sanitize=all</indexterm></indexcommand>

<para>This option disables all previously enabled sanitizers.
<option>-fsanitize=all</option> is not allowed, as some sanitizers cannot be used
together.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fasan-shadow-offset=<var>number</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="546" incode="1">fasan-shadow-offset</indexterm></indexcommand>
<para>This option forces GCC to use custom shadow offset in AddressSanitizer checks.
It is useful for experimenting with different shadow memory layouts in
Kernel AddressSanitizer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize-sections=<var>s1,s2,...</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="547" incode="1">fsanitize-sections</indexterm></indexcommand>
<para>Sanitize global variables in selected user-defined sections.  <var>si</var> may
contain wildcards.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize-recover<r>[</r>=<var>opts</var><r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="548" incode="1">fsanitize-recover</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="549" incode="1">fno-sanitize-recover</indexterm></indexcommand>
<para><option>-fsanitize-recover=</option> controls error recovery mode for sanitizers
mentioned in comma-separated list of <var>opts</var>.  Enabling this option
for a sanitizer component causes it to attempt to continue
running the program as if no error happened.  This means multiple
runtime errors can be reported in a single program run, and the exit
code of the program may indicate success even when errors
have been reported.  The <option>-fno-sanitize-recover=</option> option
can be used to alter
this behavior: only the first detected error is reported
and program then exits with a non-zero exit code.
</para>
<para>Currently this feature only works for <option>-fsanitize=undefined</option> (and its suboptions
except for <option>-fsanitize=unreachable</option> and <option>-fsanitize=return</option>),
<option>-fsanitize=float-cast-overflow</option>, <option>-fsanitize=float-divide-by-zero</option> and
<option>-fsanitize=kernel-address</option>.  For these sanitizers error recovery is turned on by default.
<option>-fsanitize-recover=all</option> and <option>-fno-sanitize-recover=all</option> is also
accepted, the former enables recovery for all sanitizers that support it,
the latter disables recovery for all sanitizers that support it.
</para>
<para>Syntax without explicit <var>opts</var> parameter is deprecated.  It is equivalent to
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-fsanitize-recover=undefined,float-cast-overflow,float-divide-by-zero
</pre></smallexample>
<noindent></noindent>
<para>Similarly <option>-fno-sanitize-recover</option> is equivalent to
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-fno-sanitize-recover=undefined,float-cast-overflow,float-divide-by-zero
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsanitize-undefined-trap-on-error</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="550" incode="1">fsanitize-undefined-trap-on-error</indexterm></indexcommand>
<para>The <option>-fsanitize-undefined-trap-on-error</option> option instructs the compiler to
report undefined behavior using <code>__builtin_trap</code> rather than
a <code>libubsan</code> library routine.  The advantage of this is that the
<code>libubsan</code> library is not needed and is not linked in, so this
is usable even in freestanding environments.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcheck-pointer-bounds</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="551" incode="1">fcheck-pointer-bounds</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="552" incode="1">fno-check-pointer-bounds</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="123">Pointer Bounds Checker options</indexterm></cindex>
<para>Enable Pointer Bounds Checker instrumentation.  Each memory reference
is instrumented with checks of the pointer used for memory access against
bounds associated with that pointer.  
</para>
<para>Currently there
is only an implementation for Intel MPX available, thus x86 target
and <option>-mmpx</option> are required to enable this feature.  
MPX-based instrumentation requires
a runtime library to enable MPX in hardware and handle bounds
violation signals.  By default when <option>-fcheck-pointer-bounds</option>
and <option>-mmpx</option> options are used to link a program, the GCC driver
links against the <file>libmpx</file> runtime library and <file>libmpxwrappers</file>
library.  It also passes &textrsquo;-z bndplt&textrsquo; to a linker in case it supports this
option (which is checked on libmpx configuration).  Note that old versions
of linker may ignore option.  Gold linker doesn&textrsquo;t support &textrsquo;-z bndplt&textrsquo;
option.  With no &textrsquo;-z bndplt&textrsquo; support in linker all calls to dynamic libraries
lose passed bounds reducing overall protection level.  It&textrsquo;s highly
recommended to use linker with &textrsquo;-z bndplt&textrsquo; support.  In case such linker
is not available it is adviced to always use <option>-static-libmpxwrappers</option>
for better protection level or use <option>-static</option> to completely avoid
external calls to dynamic libraries.  MPX-based instrumentation
may be used for debugging and also may be included in production code
to increase program security.  Depending on usage, you may
have different requirements for the runtime library.  The current version
of the MPX runtime library is more oriented for use as a debugging
tool.  MPX runtime library usage implies <option>-lpthread</option>.  See
also <option>-static-libmpx</option>.  The runtime library  behavior can be
influenced using various <env>CHKP_RT_*</env> environment variables.  See
<uref><urefurl>https://gcc.gnu.org/wiki/Intel%20MPX%20support%20in%20the%20GCC%20compiler</urefurl></uref>
for more details.
</para>
<para>Generated instrumentation may be controlled by various
<option>-fchkp-*</option> options and by the <code>bnd_variable_size</code>
structure field attribute (<pxref label="Type-Attributes"><xrefnodename>Type Attributes</xrefnodename></pxref>) and
<code>bnd_legacy</code>, and <code>bnd_instrument</code> function attributes
(<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>).  GCC also provides a number of built-in
functions for controlling the Pointer Bounds Checker.  <xref label="Pointer-Bounds-Checker-builtins"><xrefnodename>Pointer
Bounds Checker builtins</xrefnodename></xref>, for more information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-check-incomplete-type</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="553" incode="1">fchkp-check-incomplete-type</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="554" incode="1">fno-chkp-check-incomplete-type</indexterm></indexcommand>
<para>Generate pointer bounds checks for variables with incomplete type.
Enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-narrow-bounds</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="555" incode="1">fchkp-narrow-bounds</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="556" incode="1">fno-chkp-narrow-bounds</indexterm></indexcommand>
<para>Controls bounds used by Pointer Bounds Checker for pointers to object
fields.  If narrowing is enabled then field bounds are used.  Otherwise
object bounds are used.  See also <option>-fchkp-narrow-to-innermost-array</option>
and <option>-fchkp-first-field-has-own-bounds</option>.  Enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-first-field-has-own-bounds</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="557" incode="1">fchkp-first-field-has-own-bounds</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="558" incode="1">fno-chkp-first-field-has-own-bounds</indexterm></indexcommand>
<para>Forces Pointer Bounds Checker to use narrowed bounds for the address of the
first field in the structure.  By default a pointer to the first field has
the same bounds as a pointer to the whole structure.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-narrow-to-innermost-array</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="559" incode="1">fchkp-narrow-to-innermost-array</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="560" incode="1">fno-chkp-narrow-to-innermost-array</indexterm></indexcommand>
<para>Forces Pointer Bounds Checker to use bounds of the innermost arrays in
case of nested static array access.  By default this option is disabled and
bounds of the outermost array are used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-optimize</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="561" incode="1">fchkp-optimize</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="562" incode="1">fno-chkp-optimize</indexterm></indexcommand>
<para>Enables Pointer Bounds Checker optimizations.  Enabled by default at
optimization levels <option>-O</option>, <option>-O2</option>, <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-use-fast-string-functions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="563" incode="1">fchkp-use-fast-string-functions</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="564" incode="1">fno-chkp-use-fast-string-functions</indexterm></indexcommand>
<para>Enables use of <code>*_nobnd</code> versions of string functions (not copying bounds)
by Pointer Bounds Checker.  Disabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-use-nochk-string-functions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="565" incode="1">fchkp-use-nochk-string-functions</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="566" incode="1">fno-chkp-use-nochk-string-functions</indexterm></indexcommand>
<para>Enables use of <code>*_nochk</code> versions of string functions (not checking bounds)
by Pointer Bounds Checker.  Disabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-use-static-bounds</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="567" incode="1">fchkp-use-static-bounds</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="568" incode="1">fno-chkp-use-static-bounds</indexterm></indexcommand>
<para>Allow Pointer Bounds Checker to generate static bounds holding
bounds of static variables.  Enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-use-static-const-bounds</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="569" incode="1">fchkp-use-static-const-bounds</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="570" incode="1">fno-chkp-use-static-const-bounds</indexterm></indexcommand>
<para>Use statically-initialized bounds for constant bounds instead of
generating them each time they are required.  By default enabled when
<option>-fchkp-use-static-bounds</option> is enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-treat-zero-dynamic-size-as-infinite</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="571" incode="1">fchkp-treat-zero-dynamic-size-as-infinite</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="572" incode="1">fno-chkp-treat-zero-dynamic-size-as-infinite</indexterm></indexcommand>
<para>With this option, objects with incomplete type whose
dynamically-obtained size is zero are treated as having infinite size
instead by Pointer Bounds
Checker.  This option may be helpful if a program is linked with a library
missing size information for some symbols.  Disabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-check-read</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="573" incode="1">fchkp-check-read</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="574" incode="1">fno-chkp-check-read</indexterm></indexcommand>
<para>Instructs Pointer Bounds Checker to generate checks for all read
accesses to memory.  Enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-check-write</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="575" incode="1">fchkp-check-write</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="576" incode="1">fno-chkp-check-write</indexterm></indexcommand>
<para>Instructs Pointer Bounds Checker to generate checks for all write
accesses to memory.  Enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-store-bounds</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="577" incode="1">fchkp-store-bounds</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="578" incode="1">fno-chkp-store-bounds</indexterm></indexcommand>
<para>Instructs Pointer Bounds Checker to generate bounds stores for
pointer writes.  Enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-instrument-calls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="579" incode="1">fchkp-instrument-calls</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="580" incode="1">fno-chkp-instrument-calls</indexterm></indexcommand>
<para>Instructs Pointer Bounds Checker to pass pointer bounds to calls.
Enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-instrument-marked-only</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="581" incode="1">fchkp-instrument-marked-only</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="582" incode="1">fno-chkp-instrument-marked-only</indexterm></indexcommand>
<para>Instructs Pointer Bounds Checker to instrument only functions
marked with the <code>bnd_instrument</code> attribute
(<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>).  Disabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fchkp-use-wrappers</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="583" incode="1">fchkp-use-wrappers</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="584" incode="1">fno-chkp-use-wrappers</indexterm></indexcommand>
<para>Allows Pointer Bounds Checker to replace calls to built-in functions
with calls to wrapper functions.  When <option>-fchkp-use-wrappers</option>
is used to link a program, the GCC driver automatically links
against <file>libmpxwrappers</file>.  See also <option>-static-libmpxwrappers</option>.
Enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-final-insns<r>[</r>=<var>file</var><r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="585" incode="1">fdump-final-insns</indexterm></indexcommand>
<para>Dump the final internal representation (RTL) to <var>file</var>.  If the
optional argument is omitted (or if <var>file</var> is <code>.</code>), the name
of the dump file is determined by appending <code>.gkd</code> to the
compilation output file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcompare-debug<r>[</r>=<var>opts</var><r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="586" incode="1">fcompare-debug</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="587" incode="1">fno-compare-debug</indexterm></indexcommand>
<para>If no error occurs during compilation, run the compiler a second time,
adding <var>opts</var> and <option>-fcompare-debug-second</option> to the arguments
passed to the second compilation.  Dump the final internal
representation in both compilations, and print an error if they differ.
</para>
<para>If the equal sign is omitted, the default <option>-gtoggle</option> is used.
</para>
<para>The environment variable <env>GCC_COMPARE_DEBUG</env>, if defined, non-empty
and nonzero, implicitly enables <option>-fcompare-debug</option>.  If
<env>GCC_COMPARE_DEBUG</env> is defined to a string starting with a dash,
then it is used for <var>opts</var>, otherwise the default <option>-gtoggle</option>
is used.
</para>
<para><option>-fcompare-debug=</option>, with the equal sign but without <var>opts</var>,
is equivalent to <option>-fno-compare-debug</option>, which disables the dumping
of the final representation and the second compilation, preventing even
<env>GCC_COMPARE_DEBUG</env> from taking effect.
</para>
<para>To verify full coverage during <option>-fcompare-debug</option> testing, set
<env>GCC_COMPARE_DEBUG</env> to say <option>-fcompare-debug-not-overridden</option>,
which GCC rejects as an invalid option in any actual compilation
(rather than preprocessing, assembly or linking).  To get just a
warning, setting <env>GCC_COMPARE_DEBUG</env> to <samp>-w%n-fcompare-debug
not overridden</samp> will do.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcompare-debug-second</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="588" incode="1">fcompare-debug-second</indexterm></indexcommand>
<para>This option is implicitly passed to the compiler for the second
compilation requested by <option>-fcompare-debug</option>, along with options to
silence warnings, and omitting other options that would cause
side-effect compiler outputs to files or to the standard output.  Dump
files and preserved temporary files are renamed so as to contain the
<code>.gk</code> additional extension during the second compilation, to avoid
overwriting those generated by the first.
</para>
<para>When this option is passed to the compiler driver, it causes the
<emph>first</emph> compilation to be skipped, which makes it useful for little
other than debugging the compiler proper.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-feliminate-dwarf2-dups</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="589" incode="1">feliminate-dwarf2-dups</indexterm></indexcommand>
<para>Compress DWARF 2 debugging information by eliminating duplicated
information about each symbol.  This option only makes sense when
generating DWARF 2 debugging information with <option>-gdwarf-2</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-femit-struct-debug-baseonly</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="590" incode="1">femit-struct-debug-baseonly</indexterm></indexcommand>
<para>Emit debug information for struct-like types
only when the base name of the compilation source file
matches the base name of file in which the struct is defined.
</para>
<para>This option substantially reduces the size of debugging information,
but at significant potential loss in type information to the debugger.
See <option>-femit-struct-debug-reduced</option> for a less aggressive option.
See <option>-femit-struct-debug-detailed</option> for more detailed control.
</para>
<para>This option works only with DWARF 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-femit-struct-debug-reduced</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="591" incode="1">femit-struct-debug-reduced</indexterm></indexcommand>
<para>Emit debug information for struct-like types
only when the base name of the compilation source file
matches the base name of file in which the type is defined,
unless the struct is a template or defined in a system header.
</para>
<para>This option significantly reduces the size of debugging information,
with some potential loss in type information to the debugger.
See <option>-femit-struct-debug-baseonly</option> for a more aggressive option.
See <option>-femit-struct-debug-detailed</option> for more detailed control.
</para>
<para>This option works only with DWARF 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-femit-struct-debug-detailed<r>[</r>=<var>spec-list</var><r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="592" incode="1">femit-struct-debug-detailed</indexterm></indexcommand>
<para>Specify the struct-like types
for which the compiler generates debug information.
The intent is to reduce duplicate struct debug information
between different object files within the same program.
</para>
<para>This option is a detailed version of
<option>-femit-struct-debug-reduced</option> and <option>-femit-struct-debug-baseonly</option>,
which serves for most needs.
</para>
<para>A specification has the syntax&linebreak;
[<samp>dir:</samp>|<samp>ind:</samp>][<samp>ord:</samp>|<samp>gen:</samp>](<samp>any</samp>|<samp>sys</samp>|<samp>base</samp>|<samp>none</samp>)
</para>
<para>The optional first word limits the specification to
structs that are used directly (<samp>dir:</samp>) or used indirectly (<samp>ind:</samp>).
A struct type is used directly when it is the type of a variable, member.
Indirect uses arise through pointers to structs.
That is, when use of an incomplete struct is valid, the use is indirect.
An example is
<samp>struct one direct; struct two * indirect;</samp>.
</para>
<para>The optional second word limits the specification to
ordinary structs (<samp>ord:</samp>) or generic structs (<samp>gen:</samp>).
Generic structs are a bit complicated to explain.
For C++, these are non-explicit specializations of template classes,
or non-template classes within the above.
Other programming languages have generics,
but <option>-femit-struct-debug-detailed</option> does not yet implement them.
</para>
<para>The third word specifies the source files for those
structs for which the compiler should emit debug information.
The values <samp>none</samp> and <samp>any</samp> have the normal meaning.
The value <samp>base</samp> means that
the base of name of the file in which the type declaration appears
must match the base of the name of the main compilation file.
In practice, this means that when compiling <file>foo.c</file>, debug information
is generated for types declared in that file and <file>foo.h</file>,
but not other header files.
The value <samp>sys</samp> means those types satisfying <samp>base</samp>
or declared in system or compiler headers.
</para>
<para>You may need to experiment to determine the best settings for your application.
</para>
<para>The default is <option>-femit-struct-debug-detailed=all</option>.
</para>
<para>This option works only with DWARF 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-merge-debug-strings</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="593" incode="1">fmerge-debug-strings</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="594" incode="1">fno-merge-debug-strings</indexterm></indexcommand>
<para>Direct the linker to not merge together strings in the debugging
information that are identical in different object files.  Merging is
not supported by all assemblers or linkers.  Merging decreases the size
of the debug information in the output file at the cost of increasing
link processing time.  Merging is enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdebug-prefix-map=<var>old</var>=<var>new</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="595" incode="1">fdebug-prefix-map</indexterm></indexcommand>
<para>When compiling files in directory <file><var>old</var></file>, record debugging
information describing them as in <file><var>new</var></file> instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-dwarf2-cfi-asm</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="596" incode="1">fdwarf2-cfi-asm</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="597" incode="1">fno-dwarf2-cfi-asm</indexterm></indexcommand>
<para>Emit DWARF 2 unwind info as compiler generated <code>.eh_frame</code> section
instead of using GAS <code>.cfi_*</code> directives.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="124"><command>prof</command></indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-p</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="598" incode="1">p</indexterm></indexcommand>
<para>Generate extra code to write profile information suitable for the
analysis program <command>prof</command>.  You must use this option when compiling
the source files you want data about, and you must also use it when
linking.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="125"><command>gprof</command></indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-pg</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="599" incode="1">pg</indexterm></indexcommand>
<para>Generate extra code to write profile information suitable for the
analysis program <command>gprof</command>.  You must use this option when compiling
the source files you want data about, and you must also use it when
linking.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Q</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="600" incode="1">Q</indexterm></indexcommand>
<para>Makes the compiler print out each function name as it is compiled, and
print some statistics about each pass when it finishes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftime-report</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="601" incode="1">ftime-report</indexterm></indexcommand>
<para>Makes the compiler print some statistics about the time consumed by each
pass when it finishes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fmem-report</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="602" incode="1">fmem-report</indexterm></indexcommand>
<para>Makes the compiler print some statistics about permanent memory
allocation when it finishes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fmem-report-wpa</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="603" incode="1">fmem-report-wpa</indexterm></indexcommand>
<para>Makes the compiler print some statistics about permanent memory
allocation for the WPA phase only.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpre-ipa-mem-report</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="604" incode="1">fpre-ipa-mem-report</indexterm></indexcommand>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpost-ipa-mem-report</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="605" incode="1">fpost-ipa-mem-report</indexterm></indexcommand>
<para>Makes the compiler print some statistics about permanent memory
allocation before or after interprocedural optimization.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fprofile-report</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="606" incode="1">fprofile-report</indexterm></indexcommand>
<para>Makes the compiler print some statistics about consistency of the
(estimated) profile and effect of individual passes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstack-usage</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="607" incode="1">fstack-usage</indexterm></indexcommand>
<para>Makes the compiler output stack usage information for the program, on a
per-function basis.  The filename for the dump is made by appending
<file>.su</file> to the <var>auxname</var>.  <var>auxname</var> is generated from the name of
the output file, if explicitly specified and it is not an executable,
otherwise it is the basename of the source file.  An entry is made up
of three fields:
</para>
<itemize commandarg="bullet" endspaces=" ">
<listitem><prepend>&bullet;</prepend>
<para>The name of the function.
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>A number of bytes.
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>One or more qualifiers: <code>static</code>, <code>dynamic</code>, <code>bounded</code>.
</para></listitem></itemize>

<para>The qualifier <code>static</code> means that the function manipulates the stack
statically: a fixed number of bytes are allocated for the frame on function
entry and released on function exit; no stack adjustments are otherwise made
in the function.  The second field is this fixed number of bytes.
</para>
<para>The qualifier <code>dynamic</code> means that the function manipulates the stack
dynamically: in addition to the static allocation described above, stack
adjustments are made in the body of the function, for example to push/pop
arguments around function calls.  If the qualifier <code>bounded</code> is also
present, the amount of these adjustments is bounded at compile time and
the second field is an upper bound of the total amount of stack used by
the function.  If it is not present, the amount of these adjustments is
not bounded at compile time and the second field only represents the
bounded part.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fprofile-arcs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="608" incode="1">fprofile-arcs</indexterm></indexcommand>
<para>Add code so that program flow <dfn>arcs</dfn> are instrumented.  During
execution the program records how many times each branch and call is
executed and how many times it is taken or returns.  When the compiled
program exits it saves this data to a file called
<file><var>auxname</var>.gcda</file> for each source file.  The data may be used for
profile-directed optimizations (<option>-fbranch-probabilities</option>), or for
test coverage analysis (<option>-ftest-coverage</option>).  Each object file&textrsquo;s
<var>auxname</var> is generated from the name of the output file, if
explicitly specified and it is not the final executable, otherwise it is
the basename of the source file.  In both cases any suffix is removed
(e.g.&noeos; <file>foo.gcda</file> for input file <file>dir/foo.c</file>, or
<file>dir/foo.gcda</file> for output file specified as <option>-o dir/foo.o</option>).
<xref label="Cross_002dprofiling"><xrefnodename>Cross-profiling</xrefnodename></xref>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="126"><command>gcov</command></indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">--coverage</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="609" incode="1">coverage</indexterm></indexcommand>

<para>This option is used to compile and link code instrumented for coverage
analysis.  The option is a synonym for <option>-fprofile-arcs</option>
<option>-ftest-coverage</option> (when compiling) and <option>-lgcov</option> (when
linking).  See the documentation for those options for more details.
</para>
<itemize commandarg="bullet" endspaces=" ">
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>Compile the source files with <option>-fprofile-arcs</option> plus optimization
and code generation options.  For test coverage analysis, use the
additional <option>-ftest-coverage</option> option.  You do not need to profile
every source file in a program.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Link your object files with <option>-lgcov</option> or <option>-fprofile-arcs</option>
(the latter implies the former).
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Run the program on a representative workload to generate the arc profile
information.  This may be repeated any number of times.  You can run
concurrent instances of your program, and provided that the file system
supports locking, the data files will be correctly updated.  Also
<code>fork</code> calls are detected and correctly handled (double counting
will not happen).
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>For profile-directed optimizations, compile the source files again with
the same optimization and code generation options plus
<option>-fbranch-probabilities</option> (<pxref label="Optimize-Options"><xrefnodename>Optimize Options</xrefnodename><xrefprinteddesc>Options that
Control Optimization</xrefprinteddesc></pxref>).
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>For test coverage analysis, use <command>gcov</command> to produce human readable
information from the <file>.gcno</file> and <file>.gcda</file> files.  Refer to the
<command>gcov</command> documentation for further information.
</para>
</listitem></itemize>

<para>With <option>-fprofile-arcs</option>, for each function of your program GCC
creates a program flow graph, then finds a spanning tree for the graph.
Only arcs that are not on the spanning tree have to be instrumented: the
compiler adds code to count the number of times that these arcs are
executed.  When an arc is the only exit or only entrance to a block, the
instrumentation code can be added to the block; otherwise, a new basic
block must be created to hold the instrumentation code.
</para>
<need value="2000" line=" 2000"></need>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftest-coverage</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="610" incode="1">ftest-coverage</indexterm></indexcommand>
<para>Produce a notes file that the <command>gcov</command> code-coverage utility
(<pxref label="Gcov"><xrefnodename>Gcov</xrefnodename><xrefprinteddesc spaces=" "><command>gcov</command>&textmdash;a Test Coverage Program</xrefprinteddesc></pxref>) can use to
show program coverage.  Each source file&textrsquo;s note file is called
<file><var>auxname</var>.gcno</file>.  Refer to the <option>-fprofile-arcs</option> option
above for a description of <var>auxname</var> and instructions on how to
generate test coverage data.  Coverage data matches the source files
more closely if you do not optimize.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdbg-cnt-list</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="611" incode="1">fdbg-cnt-list</indexterm></indexcommand>
<para>Print the name and the counter upper bound for all debug counters.
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdbg-cnt=<var>counter-value-list</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="612" incode="1">fdbg-cnt</indexterm></indexcommand>
<para>Set the internal debug counter upper bound.  <var>counter-value-list</var>
is a comma-separated list of <var>name</var>:<var>value</var> pairs
which sets the upper bound of each debug counter <var>name</var> to <var>value</var>.
All debug counters have the initial upper bound of <code>UINT_MAX</code>;
thus <code>dbg_cnt</code> returns true always unless the upper bound
is set by this option.
For example, with <option>-fdbg-cnt=dce:10,tail_call:0</option>,
<code>dbg_cnt(dce)</code> returns true only for first 10 invocations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fenable-<var>kind</var>-<var>pass</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdisable-<var>kind</var>-<var>pass</var>=<var>range-list</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="613" incode="1">fdisable-</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="614" incode="1">fenable-</indexterm></indexcommand>

<para>This is a set of options that are used to explicitly disable/enable
optimization passes.  These options are intended for use for debugging GCC.
Compiler users should use regular options for enabling/disabling
passes instead.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdisable-ipa-<var>pass</var></itemformat></item>
</tableterm><tableitem><para>Disable IPA pass <var>pass</var>. <var>pass</var> is the pass name.  If the same pass is
statically invoked in the compiler multiple times, the pass name should be
appended with a sequential number starting from 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdisable-rtl-<var>pass</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdisable-rtl-<var>pass</var>=<var>range-list</var></itemformat></itemx>
</tableterm><tableitem><para>Disable RTL pass <var>pass</var>.  <var>pass</var> is the pass name.  If the same pass is
statically invoked in the compiler multiple times, the pass name should be
appended with a sequential number starting from 1.  <var>range-list</var> is a 
comma-separated list of function ranges or assembler names.  Each range is a number
pair separated by a colon.  The range is inclusive in both ends.  If the range
is trivial, the number pair can be simplified as a single number.  If the
function&textrsquo;s call graph node&textrsquo;s <var>uid</var> falls within one of the specified ranges,
the <var>pass</var> is disabled for that function.  The <var>uid</var> is shown in the
function header of a dump file, and the pass names can be dumped by using
option <option>-fdump-passes</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdisable-tree-<var>pass</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdisable-tree-<var>pass</var>=<var>range-list</var></itemformat></itemx>
</tableterm><tableitem><para>Disable tree pass <var>pass</var>.  See <option>-fdisable-rtl</option> for the description of
option arguments.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fenable-ipa-<var>pass</var></itemformat></item>
</tableterm><tableitem><para>Enable IPA pass <var>pass</var>.  <var>pass</var> is the pass name.  If the same pass is
statically invoked in the compiler multiple times, the pass name should be
appended with a sequential number starting from 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fenable-rtl-<var>pass</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-fenable-rtl-<var>pass</var>=<var>range-list</var></itemformat></itemx>
</tableterm><tableitem><para>Enable RTL pass <var>pass</var>.  See <option>-fdisable-rtl</option> for option argument
description and examples.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fenable-tree-<var>pass</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-fenable-tree-<var>pass</var>=<var>range-list</var></itemformat></itemx>
</tableterm><tableitem><para>Enable tree pass <var>pass</var>.  See <option>-fdisable-rtl</option> for the description
of option arguments.
</para>
</tableitem></tableentry></table>

<para>Here are some examples showing uses of these options.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">
# disable ccp1 for all functions
   -fdisable-tree-ccp1
# disable complete unroll for function whose cgraph node uid is 1
   -fenable-tree-cunroll=1
# disable gcse2 for functions at the following ranges [1,1],
# [300,400], and [400,1000]
# disable gcse2 for functions foo and foo2
   -fdisable-rtl-gcse2=foo,foo2
# disable early inlining
   -fdisable-tree-einline
# disable ipa inlining
   -fdisable-ipa-inline
# enable tree full unroll
   -fenable-tree-unroll

</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-d<var>letters</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-<var>pass</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-<var>pass</var>=<var>filename</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="615" incode="1">d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="616" incode="1">fdump-rtl-<var>pass</var></indexterm></indexcommand>
<para>Says to make debugging dumps during compilation at times specified by
<var>letters</var>.  This is used for debugging the RTL-based passes of the
compiler.  The file names for most of the dumps are made by appending
a pass number and a word to the <var>dumpname</var>, and the files are
created in the directory of the output file. In case of
<option>=<var>filename</var></option> option, the dump is output on the given file
instead of the pass numbered dump files. Note that the pass number is
computed statically as passes get registered into the pass manager.
Thus the numbering is not related to the dynamic order of execution of
passes.  In particular, a pass installed by a plugin could have a
number over 200 even if it executed quite early.  <var>dumpname</var> is
generated from the name of the output file, if explicitly specified
and it is not an executable, otherwise it is the basename of the
source file. These switches may have different effects when
<option>-E</option> is used for preprocessing.
</para>
<para>Debug dumps can be enabled with a <option>-fdump-rtl</option> switch or some
<option>-d</option> option <var>letters</var>.  Here are the possible
letters for use in <var>pass</var> and <var>letters</var>, and their meanings:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-alignments</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="617" incode="1">fdump-rtl-alignments</indexterm></indexcommand>
<para>Dump after branch alignments have been computed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-asmcons</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="618" incode="1">fdump-rtl-asmcons</indexterm></indexcommand>
<para>Dump after fixing rtl statements that have unsatisfied in/out constraints.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-auto_inc_dec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="619" incode="1">fdump-rtl-auto_inc_dec</indexterm></indexcommand>
<para>Dump after auto-inc-dec discovery.  This pass is only run on
architectures that have auto inc or auto dec instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-barriers</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="620" incode="1">fdump-rtl-barriers</indexterm></indexcommand>
<para>Dump after cleaning up the barrier instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-bbpart</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="621" incode="1">fdump-rtl-bbpart</indexterm></indexcommand>
<para>Dump after partitioning hot and cold basic blocks.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-bbro</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="622" incode="1">fdump-rtl-bbro</indexterm></indexcommand>
<para>Dump after block reordering.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-btl1</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-btl2</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="623" incode="1">fdump-rtl-btl2</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="624" incode="1">fdump-rtl-btl2</indexterm></indexcommand>
<para><option>-fdump-rtl-btl1</option> and <option>-fdump-rtl-btl2</option> enable dumping
after the two branch
target load optimization passes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-bypass</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="625" incode="1">fdump-rtl-bypass</indexterm></indexcommand>
<para>Dump after jump bypassing and control flow optimizations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-combine</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="626" incode="1">fdump-rtl-combine</indexterm></indexcommand>
<para>Dump after the RTL instruction combination pass.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-compgotos</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="627" incode="1">fdump-rtl-compgotos</indexterm></indexcommand>
<para>Dump after duplicating the computed gotos.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-ce1</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-ce2</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-ce3</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="628" incode="1">fdump-rtl-ce1</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="629" incode="1">fdump-rtl-ce2</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="630" incode="1">fdump-rtl-ce3</indexterm></indexcommand>
<para><option>-fdump-rtl-ce1</option>, <option>-fdump-rtl-ce2</option>, and
<option>-fdump-rtl-ce3</option> enable dumping after the three
if conversion passes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-cprop_hardreg</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="631" incode="1">fdump-rtl-cprop_hardreg</indexterm></indexcommand>
<para>Dump after hard register copy propagation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-csa</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="632" incode="1">fdump-rtl-csa</indexterm></indexcommand>
<para>Dump after combining stack adjustments.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-cse1</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-cse2</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="633" incode="1">fdump-rtl-cse1</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="634" incode="1">fdump-rtl-cse2</indexterm></indexcommand>
<para><option>-fdump-rtl-cse1</option> and <option>-fdump-rtl-cse2</option> enable dumping after
the two common subexpression elimination passes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-dce</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="635" incode="1">fdump-rtl-dce</indexterm></indexcommand>
<para>Dump after the standalone dead code elimination passes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-dbr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="636" incode="1">fdump-rtl-dbr</indexterm></indexcommand>
<para>Dump after delayed branch scheduling.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-dce1</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-dce2</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="637" incode="1">fdump-rtl-dce1</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="638" incode="1">fdump-rtl-dce2</indexterm></indexcommand>
<para><option>-fdump-rtl-dce1</option> and <option>-fdump-rtl-dce2</option> enable dumping after
the two dead store elimination passes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-eh</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="639" incode="1">fdump-rtl-eh</indexterm></indexcommand>
<para>Dump after finalization of EH handling code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-eh_ranges</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="640" incode="1">fdump-rtl-eh_ranges</indexterm></indexcommand>
<para>Dump after conversion of EH handling range regions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-expand</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="641" incode="1">fdump-rtl-expand</indexterm></indexcommand>
<para>Dump after RTL generation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-fwprop1</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-fwprop2</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="642" incode="1">fdump-rtl-fwprop1</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="643" incode="1">fdump-rtl-fwprop2</indexterm></indexcommand>
<para><option>-fdump-rtl-fwprop1</option> and <option>-fdump-rtl-fwprop2</option> enable
dumping after the two forward propagation passes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-gcse1</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-gcse2</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="644" incode="1">fdump-rtl-gcse1</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="645" incode="1">fdump-rtl-gcse2</indexterm></indexcommand>
<para><option>-fdump-rtl-gcse1</option> and <option>-fdump-rtl-gcse2</option> enable dumping
after global common subexpression elimination.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-init-regs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="646" incode="1">fdump-rtl-init-regs</indexterm></indexcommand>
<para>Dump after the initialization of the registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-initvals</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="647" incode="1">fdump-rtl-initvals</indexterm></indexcommand>
<para>Dump after the computation of the initial value sets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-into_cfglayout</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="648" incode="1">fdump-rtl-into_cfglayout</indexterm></indexcommand>
<para>Dump after converting to cfglayout mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-ira</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="649" incode="1">fdump-rtl-ira</indexterm></indexcommand>
<para>Dump after iterated register allocation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-jump</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="650" incode="1">fdump-rtl-jump</indexterm></indexcommand>
<para>Dump after the second jump optimization.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-loop2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="651" incode="1">fdump-rtl-loop2</indexterm></indexcommand>
<para><option>-fdump-rtl-loop2</option> enables dumping after the rtl
loop optimization passes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-mach</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="652" incode="1">fdump-rtl-mach</indexterm></indexcommand>
<para>Dump after performing the machine dependent reorganization pass, if that
pass exists.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-mode_sw</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="653" incode="1">fdump-rtl-mode_sw</indexterm></indexcommand>
<para>Dump after removing redundant mode switches.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-rnreg</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="654" incode="1">fdump-rtl-rnreg</indexterm></indexcommand>
<para>Dump after register renumbering.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-outof_cfglayout</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="655" incode="1">fdump-rtl-outof_cfglayout</indexterm></indexcommand>
<para>Dump after converting from cfglayout mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-peephole2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="656" incode="1">fdump-rtl-peephole2</indexterm></indexcommand>
<para>Dump after the peephole pass.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-postreload</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="657" incode="1">fdump-rtl-postreload</indexterm></indexcommand>
<para>Dump after post-reload optimizations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-pro_and_epilogue</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="658" incode="1">fdump-rtl-pro_and_epilogue</indexterm></indexcommand>
<para>Dump after generating the function prologues and epilogues.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-sched1</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-sched2</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="659" incode="1">fdump-rtl-sched1</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="660" incode="1">fdump-rtl-sched2</indexterm></indexcommand>
<para><option>-fdump-rtl-sched1</option> and <option>-fdump-rtl-sched2</option> enable dumping
after the basic block scheduling passes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-ree</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="661" incode="1">fdump-rtl-ree</indexterm></indexcommand>
<para>Dump after sign/zero extension elimination.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-seqabstr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="662" incode="1">fdump-rtl-seqabstr</indexterm></indexcommand>
<para>Dump after common sequence discovery.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-shorten</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="663" incode="1">fdump-rtl-shorten</indexterm></indexcommand>
<para>Dump after shortening branches.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-sibling</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="664" incode="1">fdump-rtl-sibling</indexterm></indexcommand>
<para>Dump after sibling call optimizations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-split1</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-split2</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-split3</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-split4</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-split5</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="665" incode="1">fdump-rtl-split1</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="666" incode="1">fdump-rtl-split2</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="667" incode="1">fdump-rtl-split3</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="668" incode="1">fdump-rtl-split4</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="669" incode="1">fdump-rtl-split5</indexterm></indexcommand>
<para>These options enable dumping after five rounds of
instruction splitting.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-sms</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="670" incode="1">fdump-rtl-sms</indexterm></indexcommand>
<para>Dump after modulo scheduling.  This pass is only run on some
architectures.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-stack</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="671" incode="1">fdump-rtl-stack</indexterm></indexcommand>
<para>Dump after conversion from GCC&textrsquo;s &textldquo;flat register file&textrdquo; registers to the
x87&textrsquo;s stack-like registers.  This pass is only run on x86 variants.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-subreg1</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-subreg2</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="672" incode="1">fdump-rtl-subreg1</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="673" incode="1">fdump-rtl-subreg2</indexterm></indexcommand>
<para><option>-fdump-rtl-subreg1</option> and <option>-fdump-rtl-subreg2</option> enable dumping after
the two subreg expansion passes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-unshare</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="674" incode="1">fdump-rtl-unshare</indexterm></indexcommand>
<para>Dump after all rtl has been unshared.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-vartrack</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="675" incode="1">fdump-rtl-vartrack</indexterm></indexcommand>
<para>Dump after variable tracking.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-vregs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="676" incode="1">fdump-rtl-vregs</indexterm></indexcommand>
<para>Dump after converting virtual registers to hard registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-web</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="677" incode="1">fdump-rtl-web</indexterm></indexcommand>
<para>Dump after live range splitting.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-rtl-regclass</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-subregs_of_mode_init</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-subregs_of_mode_finish</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-dfinit</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-dfinish</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="678" incode="1">fdump-rtl-regclass</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="679" incode="1">fdump-rtl-subregs_of_mode_init</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="680" incode="1">fdump-rtl-subregs_of_mode_finish</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="681" incode="1">fdump-rtl-dfinit</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="682" incode="1">fdump-rtl-dfinish</indexterm></indexcommand>
<para>These dumps are defined but always produce empty files.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-da</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-rtl-all</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="683" incode="1">da</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="684" incode="1">fdump-rtl-all</indexterm></indexcommand>
<para>Produce all the dumps listed above.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-dA</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="685" incode="1">dA</indexterm></indexcommand>
<para>Annotate the assembler output with miscellaneous debugging information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-dD</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="686" incode="1">dD</indexterm></indexcommand>
<para>Dump all macro definitions, at the end of preprocessing, in addition to
normal output.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-dH</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="687" incode="1">dH</indexterm></indexcommand>
<para>Produce a core dump whenever an error occurs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-dp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="688" incode="1">dp</indexterm></indexcommand>
<para>Annotate the assembler output with a comment indicating which
pattern and alternative is used.  The length of each instruction is
also printed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-dP</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="689" incode="1">dP</indexterm></indexcommand>
<para>Dump the RTL in the assembler output as a comment before each instruction.
Also turns on <option>-dp</option> annotation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-dx</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="690" incode="1">dx</indexterm></indexcommand>
<para>Just generate RTL for a function instead of compiling it.  Usually used
with <option>-fdump-rtl-expand</option>.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-noaddr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="691" incode="1">fdump-noaddr</indexterm></indexcommand>
<para>When doing debugging dumps, suppress address output.  This makes it more
feasible to use diff on debugging dumps for compiler invocations with
different compiler binaries and/or different
text / bss / data / heap / stack / dso start locations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-freport-bug</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="692" incode="1">freport-bug</indexterm></indexcommand>
<para>Collect and dump debug information into temporary file if ICE in C/C++
compiler occured.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-unnumbered</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="693" incode="1">fdump-unnumbered</indexterm></indexcommand>
<para>When doing debugging dumps, suppress instruction numbers and address output.
This makes it more feasible to use diff on debugging dumps for compiler
invocations with different options, in particular with and without
<option>-g</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-unnumbered-links</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="694" incode="1">fdump-unnumbered-links</indexterm></indexcommand>
<para>When doing debugging dumps (see <option>-d</option> option above), suppress
instruction numbers for the links to the previous and next instructions
in a sequence.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-translation-unit <r>(C++ only)</r></itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-translation-unit-<var>options</var> <r>(C++ only)</r></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="695" incode="1">fdump-translation-unit</indexterm></indexcommand>
<para>Dump a representation of the tree structure for the entire translation
unit to a file.  The file name is made by appending <file>.tu</file> to the
source file name, and the file is created in the same directory as the
output file.  If the <samp>-<var>options</var></samp> form is used, <var>options</var>
controls the details of the dump as described for the
<option>-fdump-tree</option> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-class-hierarchy <r>(C++ only)</r></itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-class-hierarchy-<var>options</var> <r>(C++ only)</r></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="696" incode="1">fdump-class-hierarchy</indexterm></indexcommand>
<para>Dump a representation of each class&textrsquo;s hierarchy and virtual function
table layout to a file.  The file name is made by appending
<file>.class</file> to the source file name, and the file is created in the
same directory as the output file.  If the <samp>-<var>options</var></samp> form
is used, <var>options</var> controls the details of the dump as described
for the <option>-fdump-tree</option> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-ipa-<var>switch</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="697" incode="1">fdump-ipa</indexterm></indexcommand>
<para>Control the dumping at various stages of inter-procedural analysis
language tree to a file.  The file name is generated by appending a
switch specific suffix to the source file name, and the file is created
in the same directory as the output file.  The following dumps are
possible:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">all</itemformat></item>
</tableterm><tableitem><para>Enables all inter-procedural analysis dumps.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cgraph</itemformat></item>
</tableterm><tableitem><para>Dumps information about call-graph optimization, unused function removal,
and inlining decisions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">inline</itemformat></item>
</tableterm><tableitem><para>Dump after function inlining.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-passes</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="698" incode="1">fdump-passes</indexterm></indexcommand>
<para>Dump the list of optimization passes that are turned on and off by
the current command-line options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-statistics-<var>option</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="699" incode="1">fdump-statistics</indexterm></indexcommand>
<para>Enable and control dumping of pass statistics in a separate file.  The
file name is generated by appending a suffix ending in
<samp>.statistics</samp> to the source file name, and the file is created in
the same directory as the output file.  If the <samp>-<var>option</var></samp>
form is used, <samp>-stats</samp> causes counters to be summed over the
whole compilation unit while <samp>-details</samp> dumps every event as
the passes generate them.  The default with no option is to sum
counters for each function compiled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdump-tree-<var>switch</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdump-tree-<var>switch</var>-<var>options</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fdump-tree-<var>switch</var>-<var>options</var>=<var>filename</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="700" incode="1">fdump-tree</indexterm></indexcommand>
<para>Control the dumping at various stages of processing the intermediate
language tree to a file.  The file name is generated by appending a
switch-specific suffix to the source file name, and the file is
created in the same directory as the output file. In case of
<option>=<var>filename</var></option> option, the dump is output on the given file
instead of the auto named dump files.  If the <samp>-<var>options</var></samp>
form is used, <var>options</var> is a list of <samp>-</samp> separated options
which control the details of the dump.  Not all options are applicable
to all dumps; those that are not meaningful are ignored.  The
following options are available
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">address</itemformat></item>
</tableterm><tableitem><para>Print the address of each node.  Usually this is not meaningful as it
changes according to the environment and source file.  Its primary use
is for tying up a dump file with a debug environment.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">asmname</itemformat></item>
</tableterm><tableitem><para>If <code>DECL_ASSEMBLER_NAME</code> has been set for a given decl, use that
in the dump instead of <code>DECL_NAME</code>.  Its primary use is ease of
use working backward from mangled names in the assembly file.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">slim</itemformat></item>
</tableterm><tableitem><para>When dumping front-end intermediate representations, inhibit dumping
of members of a scope or body of a function merely because that scope
has been reached.  Only dump such items when they are directly reachable
by some other path.
</para>
<para>When dumping pretty-printed trees, this option inhibits dumping the
bodies of control structures.
</para>
<para>When dumping RTL, print the RTL in slim (condensed) form instead of
the default LISP-like representation.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">raw</itemformat></item>
</tableterm><tableitem><para>Print a raw representation of the tree.  By default, trees are
pretty-printed into a C-like representation.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">details</itemformat></item>
</tableterm><tableitem><para>Enable more detailed dumps (not honored by every dump option). Also
include information from the optimization passes.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">stats</itemformat></item>
</tableterm><tableitem><para>Enable dumping various statistics about the pass (not honored by every dump
option).
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">blocks</itemformat></item>
</tableterm><tableitem><para>Enable showing basic block boundaries (disabled in raw dumps).
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">graph</itemformat></item>
</tableterm><tableitem><para>For each of the other indicated dump files (<option>-fdump-rtl-<var>pass</var></option>),
dump a representation of the control flow graph suitable for viewing with
GraphViz to <file><var>file</var>.<var>passid</var>.<var>pass</var>.dot</file>.  Each function in
the file is pretty-printed as a subgraph, so that GraphViz can render them
all in a single plot.
</para>
<para>This option currently only works for RTL dumps, and the RTL is always
dumped in slim form.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">vops</itemformat></item>
</tableterm><tableitem><para>Enable showing virtual operands for every statement.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">lineno</itemformat></item>
</tableterm><tableitem><para>Enable showing line numbers for statements.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">uid</itemformat></item>
</tableterm><tableitem><para>Enable showing the unique ID (<code>DECL_UID</code>) for each variable.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">verbose</itemformat></item>
</tableterm><tableitem><para>Enable showing the tree dump for each statement.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">eh</itemformat></item>
</tableterm><tableitem><para>Enable showing the EH region number holding each statement.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">scev</itemformat></item>
</tableterm><tableitem><para>Enable showing scalar evolution analysis details.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">optimized</itemformat></item>
</tableterm><tableitem><para>Enable showing optimization information (only available in certain
passes).
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">missed</itemformat></item>
</tableterm><tableitem><para>Enable showing missed optimization information (only available in certain
passes).
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">note</itemformat></item>
</tableterm><tableitem><para>Enable other detailed optimization information (only available in
certain passes).
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">=<var>filename</var></itemformat></item>
</tableterm><tableitem><para>Instead of an auto named dump file, output into the given file
name. The file names <file>stdout</file> and <file>stderr</file> are treated
specially and are considered already open standard streams. For
example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -O2 -ftree-vectorize -fdump-tree-vect-blocks=foo.dump
     -fdump-tree-pre=stderr file.c
</pre></smallexample>

<para>outputs vectorizer dump into <file>foo.dump</file>, while the PRE dump is
output on to <file>stderr</file>. If two conflicting dump filenames are
given for the same pass, then the latter option overrides the earlier
one.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">all</itemformat></item>
</tableterm><tableitem><para>Turn on all options, except <option>raw</option>, <option>slim</option>, <option>verbose</option>
and <option>lineno</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">optall</itemformat></item>
</tableterm><tableitem><para>Turn on all optimization options, i.e., <option>optimized</option>,
<option>missed</option>, and <option>note</option>.
</para></tableitem></tableentry></table>

<para>The following tree dumps are possible:
</para><table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">original</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="701" incode="1">fdump-tree-original</indexterm></indexcommand>
<para>Dump before any tree based optimization, to <file><var>file</var>.original</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">optimized</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="702" incode="1">fdump-tree-optimized</indexterm></indexcommand>
<para>Dump after all tree based optimization, to <file><var>file</var>.optimized</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">gimple</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="703" incode="1">fdump-tree-gimple</indexterm></indexcommand>
<para>Dump each function before and after the gimplification pass to a file.  The
file name is made by appending <file>.gimple</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cfg</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="704" incode="1">fdump-tree-cfg</indexterm></indexcommand>
<para>Dump the control flow graph of each function to a file.  The file name is
made by appending <file>.cfg</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="705" incode="1">fdump-tree-ch</indexterm></indexcommand>
<para>Dump each function after copying loop headers.  The file name is made by
appending <file>.ch</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ssa</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="706" incode="1">fdump-tree-ssa</indexterm></indexcommand>
<para>Dump SSA related information to a file.  The file name is made by appending
<file>.ssa</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">alias</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="707" incode="1">fdump-tree-alias</indexterm></indexcommand>
<para>Dump aliasing information for each function.  The file name is made by
appending <file>.alias</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ccp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="708" incode="1">fdump-tree-ccp</indexterm></indexcommand>
<para>Dump each function after CCP&eosperiod;  The file name is made by appending
<file>.ccp</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">storeccp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="709" incode="1">fdump-tree-storeccp</indexterm></indexcommand>
<para>Dump each function after STORE-CCP&eosperiod;  The file name is made by appending
<file>.storeccp</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">pre</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="710" incode="1">fdump-tree-pre</indexterm></indexcommand>
<para>Dump trees after partial redundancy elimination.  The file name is made
by appending <file>.pre</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">fre</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="711" incode="1">fdump-tree-fre</indexterm></indexcommand>
<para>Dump trees after full redundancy elimination.  The file name is made
by appending <file>.fre</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">copyprop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="712" incode="1">fdump-tree-copyprop</indexterm></indexcommand>
<para>Dump trees after copy propagation.  The file name is made
by appending <file>.copyprop</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">store_copyprop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="713" incode="1">fdump-tree-store_copyprop</indexterm></indexcommand>
<para>Dump trees after store copy-propagation.  The file name is made
by appending <file>.store_copyprop</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">dce</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="714" incode="1">fdump-tree-dce</indexterm></indexcommand>
<para>Dump each function after dead code elimination.  The file name is made by
appending <file>.dce</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sra</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="715" incode="1">fdump-tree-sra</indexterm></indexcommand>
<para>Dump each function after performing scalar replacement of aggregates.  The
file name is made by appending <file>.sra</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sink</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="716" incode="1">fdump-tree-sink</indexterm></indexcommand>
<para>Dump each function after performing code sinking.  The file name is made
by appending <file>.sink</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">dom</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="717" incode="1">fdump-tree-dom</indexterm></indexcommand>
<para>Dump each function after applying dominator tree optimizations.  The file
name is made by appending <file>.dom</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">dse</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="718" incode="1">fdump-tree-dse</indexterm></indexcommand>
<para>Dump each function after applying dead store elimination.  The file
name is made by appending <file>.dse</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">phiopt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="719" incode="1">fdump-tree-phiopt</indexterm></indexcommand>
<para>Dump each function after optimizing PHI nodes into straightline code.  The file
name is made by appending <file>.phiopt</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">forwprop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="720" incode="1">fdump-tree-forwprop</indexterm></indexcommand>
<para>Dump each function after forward propagating single use variables.  The file
name is made by appending <file>.forwprop</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">copyrename</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="721" incode="1">fdump-tree-copyrename</indexterm></indexcommand>
<para>Dump each function after applying the copy rename optimization.  The file
name is made by appending <file>.copyrename</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">nrv</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="722" incode="1">fdump-tree-nrv</indexterm></indexcommand>
<para>Dump each function after applying the named return value optimization on
generic trees.  The file name is made by appending <file>.nrv</file> to the source
file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">vect</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="723" incode="1">fdump-tree-vect</indexterm></indexcommand>
<para>Dump each function after applying vectorization of loops.  The file name is
made by appending <file>.vect</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">slp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="724" incode="1">fdump-tree-slp</indexterm></indexcommand>
<para>Dump each function after applying vectorization of basic blocks.  The file name
is made by appending <file>.slp</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">vrp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="725" incode="1">fdump-tree-vrp</indexterm></indexcommand>
<para>Dump each function after Value Range Propagation (VRP).  The file name
is made by appending <file>.vrp</file> to the source file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">all</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="726" incode="1">fdump-tree-all</indexterm></indexcommand>
<para>Enable all the available tree dumps with the flags provided in this option.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fopt-info</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fopt-info-<var>options</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fopt-info-<var>options</var>=<var>filename</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="727" incode="1">fopt-info</indexterm></indexcommand>
<para>Controls optimization dumps from various optimization passes. If the
<samp>-<var>options</var></samp> form is used, <var>options</var> is a list of
<samp>-</samp> separated option keywords to select the dump details and
optimizations.  
</para>
<para>The <var>options</var> can be divided into two groups: options describing the
verbosity of the dump, and options describing which optimizations
should be included. The options from both the groups can be freely
mixed as they are non-overlapping. However, in case of any conflicts,
the later options override the earlier options on the command
line. 
</para>
<para>The following options control the dump verbosity:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">optimized</itemformat></item>
</tableterm><tableitem><para>Print information when an optimization is successfully applied. It is
up to a pass to decide which information is relevant. For example, the
vectorizer passes print the source location of loops which are
successfully vectorized.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">missed</itemformat></item>
</tableterm><tableitem><para>Print information about missed optimizations. Individual passes
control which information to include in the output. 
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">note</itemformat></item>
</tableterm><tableitem><para>Print verbose information about optimizations, such as certain
transformations, more detailed messages about decisions etc.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">all</itemformat></item>
</tableterm><tableitem><para>Print detailed optimization information. This includes
<samp>optimized</samp>, <samp>missed</samp>, and <samp>note</samp>.
</para></tableitem></tableentry></table>

<para>One or more of the following option keywords can be used to describe a
group of optimizations:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">ipa</itemformat></item>
</tableterm><tableitem><para>Enable dumps from all interprocedural optimizations.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">loop</itemformat></item>
</tableterm><tableitem><para>Enable dumps from all loop optimizations.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">inline</itemformat></item>
</tableterm><tableitem><para>Enable dumps from all inlining optimizations.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">vec</itemformat></item>
</tableterm><tableitem><para>Enable dumps from all vectorization optimizations.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">optall</itemformat></item>
</tableterm><tableitem><para>Enable dumps from all optimizations. This is a superset of
the optimization groups listed above.
</para></tableitem></tableentry></table>

<para>If <var>options</var> is
omitted, it defaults to <samp>optimized-optall</samp>, which means to dump all
info about successful optimizations from all the passes.  
</para>
<para>If the <var>filename</var> is provided, then the dumps from all the
applicable optimizations are concatenated into the <var>filename</var>.
Otherwise the dump is output onto <file>stderr</file>. Though multiple
<option>-fopt-info</option> options are accepted, only one of them can include
a <var>filename</var>. If other filenames are provided then all but the
first such option are ignored.
</para>
<para>Note that the output <var>filename</var> is overwritten
in case of multiple translation units. If a combined output from
multiple translation units is desired, <file>stderr</file> should be used
instead.
</para>
<para>In the following example, the optimization info is output to
<file>stderr</file>:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -O3 -fopt-info
</pre></smallexample>

<para>This example:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">gcc -O3 -fopt-info-missed=missed.all
</pre></smallexample>

<noindent></noindent>
<para>outputs missed optimization report from all the passes into
<file>missed.all</file>, and this one:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -O2 -ftree-vectorize -fopt-info-vec-missed
</pre></smallexample>

<noindent></noindent>
<para>prints information about missed optimization opportunities from
vectorization passes on <file>stderr</file>.  
Note that <option>-fopt-info-vec-missed</option> is equivalent to 
<option>-fopt-info-missed-vec</option>.
</para>
<para>As another example,
</para><smallexample endspaces=" ">
<pre xml:space="preserve">gcc -O3 -fopt-info-inline-optimized-missed=inline.txt
</pre></smallexample>

<noindent></noindent>
<para>outputs information about missed optimizations as well as
optimized locations from all the inlining passes into
<file>inline.txt</file>.
</para>
<para>Finally, consider:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -fopt-info-vec-missed=vec.miss -fopt-info-loop-optimized=loop.opt
</pre></smallexample>

<noindent></noindent>
<para>Here the two output filenames <file>vec.miss</file> and <file>loop.opt</file> are
in conflict since only one output file is allowed. In this case, only
the first option takes effect and the subsequent options are
ignored. Thus only <file>vec.miss</file> is produced which contains
dumps from the vectorizer about missed opportunities.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-frandom-seed=<var>number</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="728" incode="1">frandom-seed</indexterm></indexcommand>
<para>This option provides a seed that GCC uses in place of
random numbers in generating certain symbol names
that have to be different in every compiled file.  It is also used to
place unique stamps in coverage data files and the object files that
produce them.  You can use the <option>-frandom-seed</option> option to produce
reproducibly identical object files.
</para>
<para>The <var>number</var> should be different for every file you compile.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched-verbose=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="729" incode="1">fsched-verbose</indexterm></indexcommand>
<para>On targets that use instruction scheduling, this option controls the
amount of debugging output the scheduler prints.  This information is
written to standard error, unless <option>-fdump-rtl-sched1</option> or
<option>-fdump-rtl-sched2</option> is specified, in which case it is output
to the usual dump listing file, <file>.sched1</file> or <file>.sched2</file>
respectively.  However for <var>n</var> greater than nine, the output is
always printed to standard error.
</para>
<para>For <var>n</var> greater than zero, <option>-fsched-verbose</option> outputs the
same information as <option>-fdump-rtl-sched1</option> and <option>-fdump-rtl-sched2</option>.
For <var>n</var> greater than one, it also output basic block probabilities,
detailed ready list information and unit/insn info.  For <var>n</var> greater
than two, it includes RTL at abort point, control-flow and regions info.
And for <var>n</var> over four, <option>-fsched-verbose</option> also includes
dependence info.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-save-temps</itemformat></item>
<itemx spaces=" "><itemformat command="code">-save-temps=cwd</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="730" incode="1">save-temps</indexterm></indexcommand>
<para>Store the usual &textldquo;temporary&textrdquo; intermediate files permanently; place them
in the current directory and name them based on the source file.  Thus,
compiling <file>foo.c</file> with <option>-c -save-temps</option> produces files
<file>foo.i</file> and <file>foo.s</file>, as well as <file>foo.o</file>.  This creates a
preprocessed <file>foo.i</file> output file even though the compiler now
normally uses an integrated preprocessor.
</para>
<para>When used in combination with the <option>-x</option> command-line option,
<option>-save-temps</option> is sensible enough to avoid over writing an
input source file with the same extension as an intermediate file.
The corresponding intermediate file may be obtained by renaming the
source file before using <option>-save-temps</option>.
</para>
<para>If you invoke GCC in parallel, compiling several different source
files that share a common base name in different subdirectories or the
same source file compiled for multiple output destinations, it is
likely that the different parallel compilers will interfere with each
other, and overwrite the temporary files.  For instance:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -save-temps -o outdir1/foo.o indir1/foo.c&amp;
gcc -save-temps -o outdir2/foo.o indir2/foo.c&amp;
</pre></smallexample>

<para>may result in <file>foo.i</file> and <file>foo.o</file> being written to
simultaneously by both compilers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-save-temps=obj</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="731" incode="1">save-temps=obj</indexterm></indexcommand>
<para>Store the usual &textldquo;temporary&textrdquo; intermediate files permanently.  If the
<option>-o</option> option is used, the temporary files are based on the
object file.  If the <option>-o</option> option is not used, the
<option>-save-temps=obj</option> switch behaves like <option>-save-temps</option>.
</para>
<para>For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -save-temps=obj -c foo.c
gcc -save-temps=obj -c bar.c -o dir/xbar.o
gcc -save-temps=obj foobar.c -o dir2/yfoobar
</pre></smallexample>

<noindent></noindent>
<para>creates <file>foo.i</file>, <file>foo.s</file>, <file>dir/xbar.i</file>,
<file>dir/xbar.s</file>, <file>dir2/yfoobar.i</file>, <file>dir2/yfoobar.s</file>, and
<file>dir2/yfoobar.o</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-time<r>[</r>=<var>file</var><r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="732" incode="1">time</indexterm></indexcommand>
<para>Report the CPU time taken by each subprocess in the compilation
sequence.  For C source files, this is the compiler proper and assembler
(plus the linker if linking is done).
</para>
<para>Without the specification of an output file, the output looks like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"># cc1 0.12 0.01
# as 0.00 0.01
</pre></smallexample>

<para>The first number on each line is the &textldquo;user time&textrdquo;, that is time spent
executing the program itself.  The second number is &textldquo;system time&textrdquo;,
time spent executing operating system routines on behalf of the program.
Both numbers are in seconds.
</para>
<para>With the specification of an output file, the output is appended to the
named file, and it looks like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">0.12 0.01 cc1 <var>options</var>
0.00 0.01 as <var>options</var>
</pre></smallexample>

<para>The &textldquo;user time&textrdquo; and the &textldquo;system time&textrdquo; are moved before the program
name, and the options passed to the program are displayed, so that one
can later tell what file was being compiled, and with which options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fvar-tracking</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="733" incode="1">fvar-tracking</indexterm></indexcommand>
<para>Run variable tracking pass.  It computes where variables are stored at each
position in code.  Better debugging information is then generated
(if the debugging information format supports this information).
</para>
<para>It is enabled by default when compiling with optimization (<option>-Os</option>,
<option>-O</option>, <option>-O2</option>, &dots;), debugging information (<option>-g</option>) and
the debug info format supports it.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fvar-tracking-assignments</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="734" incode="1">fvar-tracking-assignments</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="735" incode="1">fno-var-tracking-assignments</indexterm></indexcommand>
<para>Annotate assignments to user variables early in the compilation and
attempt to carry the annotations over throughout the compilation all the
way to the end, in an attempt to improve debug information while
optimizing.  Use of <option>-gdwarf-4</option> is recommended along with it.
</para>
<para>It can be enabled even if var-tracking is disabled, in which case
annotations are created and maintained, but discarded at the end.
By default, this flag is enabled together with <option>-fvar-tracking</option>,
except when selective scheduling is enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fvar-tracking-assignments-toggle</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="736" incode="1">fvar-tracking-assignments-toggle</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="737" incode="1">fno-var-tracking-assignments-toggle</indexterm></indexcommand>
<para>Toggle <option>-fvar-tracking-assignments</option>, in the same way that
<option>-gtoggle</option> toggles <option>-g</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-print-file-name=<var>library</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="738" incode="1">print-file-name</indexterm></indexcommand>
<para>Print the full absolute name of the library file <var>library</var> that
would be used when linking&textmdash;and don&textrsquo;t do anything else.  With this
option, GCC does not compile or link anything; it just prints the
file name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-print-multi-directory</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="739" incode="1">print-multi-directory</indexterm></indexcommand>
<para>Print the directory name corresponding to the multilib selected by any
other switches present in the command line.  This directory is supposed
to exist in <env>GCC_EXEC_PREFIX</env>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-print-multi-lib</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="740" incode="1">print-multi-lib</indexterm></indexcommand>
<para>Print the mapping from multilib directory names to compiler switches
that enable them.  The directory name is separated from the switches by
<samp>;</samp>, and each switch starts with an <samp>&arobase;</samp> instead of the
<samp>-</samp>, without spaces between multiple switches.  This is supposed to
ease shell processing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-print-multi-os-directory</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="741" incode="1">print-multi-os-directory</indexterm></indexcommand>
<para>Print the path to OS libraries for the selected
multilib, relative to some <file>lib</file> subdirectory.  If OS libraries are
present in the <file>lib</file> subdirectory and no multilibs are used, this is
usually just <file>.</file>, if OS libraries are present in <file>lib<var>suffix</var></file>
sibling directories this prints e.g.&noeos; <file>../lib64</file>, <file>../lib</file> or
<file>../lib32</file>, or if OS libraries are present in <file>lib/<var>subdir</var></file>
subdirectories it prints e.g.&noeos; <file>amd64</file>, <file>sparcv9</file> or <file>ev6</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-print-multiarch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="742" incode="1">print-multiarch</indexterm></indexcommand>
<para>Print the path to OS libraries for the selected multiarch,
relative to some <file>lib</file> subdirectory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-print-prog-name=<var>program</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="743" incode="1">print-prog-name</indexterm></indexcommand>
<para>Like <option>-print-file-name</option>, but searches for a program such as <command>cpp</command>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-print-libgcc-file-name</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="744" incode="1">print-libgcc-file-name</indexterm></indexcommand>
<para>Same as <option>-print-file-name=libgcc.a</option>.
</para>
<para>This is useful when you use <option>-nostdlib</option> or <option>-nodefaultlibs</option>
but you do want to link with <file>libgcc.a</file>.  You can do:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -nostdlib <var>files</var>&dots; `gcc -print-libgcc-file-name`
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-print-search-dirs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="745" incode="1">print-search-dirs</indexterm></indexcommand>
<para>Print the name of the configured installation directory and a list of
program and library directories <command>gcc</command> searches&textmdash;and don&textrsquo;t do anything else.
</para>
<para>This is useful when <command>gcc</command> prints the error message
<samp>installation problem, cannot exec cpp0: No such file or directory</samp>.
To resolve this you either need to put <file>cpp0</file> and the other compiler
components where <command>gcc</command> expects to find them, or you can set the environment
variable <env>GCC_EXEC_PREFIX</env> to the directory where you installed them.
Don&textrsquo;t forget the trailing <samp>/</samp>.
<xref label="Environment-Variables"><xrefnodename>Environment Variables</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-print-sysroot</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="746" incode="1">print-sysroot</indexterm></indexcommand>
<para>Print the target sysroot directory that is used during
compilation.  This is the target sysroot specified either at configure
time or using the <option>--sysroot</option> option, possibly with an extra
suffix that depends on compilation options.  If no target sysroot is
specified, the option prints nothing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-print-sysroot-headers-suffix</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="747" incode="1">print-sysroot-headers-suffix</indexterm></indexcommand>
<para>Print the suffix added to the target sysroot when searching for
headers, or give an error if the compiler is not configured with such
a suffix&textmdash;and don&textrsquo;t do anything else.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-dumpmachine</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="748" incode="1">dumpmachine</indexterm></indexcommand>
<para>Print the compiler&textrsquo;s target machine (for example,
<samp>i686-pc-linux-gnu</samp>)&textmdash;and don&textrsquo;t do anything else.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-dumpversion</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="749" incode="1">dumpversion</indexterm></indexcommand>
<para>Print the compiler version (for example, <code>3.0</code>)&textmdash;and don&textrsquo;t do
anything else.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-dumpspecs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="750" incode="1">dumpspecs</indexterm></indexcommand>
<para>Print the compiler&textrsquo;s built-in specs&textmdash;and don&textrsquo;t do anything else.  (This
is used when GCC itself is being built.)  <xref label="Spec-Files"><xrefnodename>Spec Files</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-eliminate-unused-debug-types</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="751" incode="1">feliminate-unused-debug-types</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="752" incode="1">fno-eliminate-unused-debug-types</indexterm></indexcommand>
<para>Normally, when producing DWARF 2 output, GCC avoids producing debug symbol 
output for types that are nowhere used in the source file being compiled.
Sometimes it is useful to have GCC emit debugging
information for all types declared in a compilation
unit, regardless of whether or not they are actually used
in that compilation unit, for example 
if, in the debugger, you want to cast a value to a type that is
not actually used in your program (but is declared).  More often,
however, this results in a significant amount of wasted space.
</para></tableitem></tableentry></table>

</section>
<node name="Optimize-Options" spaces=" "><nodename>Optimize Options</nodename><nodenext automatic="on">Preprocessor Options</nodenext><nodeprev automatic="on">Debugging Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Options That Control Optimization</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="127">optimize options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="128">options, optimization</indexterm></cindex>

<para>These options control various sorts of optimizations.
</para>
<para>Without any optimization option, the compiler&textrsquo;s goal is to reduce the
cost of compilation and to make debugging produce the expected
results.  Statements are independent: if you stop the program with a
breakpoint between statements, you can then assign a new value to any
variable or change the program counter to any other statement in the
function and get exactly the results you expect from the source
code.
</para>
<para>Turning on optimization flags makes the compiler attempt to improve
the performance and/or code size at the expense of compilation time
and possibly the ability to debug the program.
</para>
<para>The compiler performs optimization based on the knowledge it has of the
program.  Compiling multiple files at once to a single output file mode allows
the compiler to use information gained from all of the files when compiling
each of them.
</para>
<para>Not all optimizations are controlled directly by a flag.  Only
optimizations that have a flag are listed in this section.
</para>
<para>Most optimizations are only enabled if an <option>-O</option> level is set on
the command line.  Otherwise they are disabled, even if individual
optimization flags are specified.
</para>
<para>Depending on the target and how GCC was configured, a slightly different
set of optimizations may be enabled at each <option>-O</option> level than
those listed here.  You can invoke GCC with <option>-Q --help=optimizers</option>
to find out the exact set of optimizations that are enabled at each level.
<xref label="Overall-Options"><xrefnodename>Overall Options</xrefnodename></xref>, for examples.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-O</itemformat></item>
<itemx spaces=" "><itemformat command="code">-O1</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="753" incode="1">O</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="754" incode="1">O1</indexterm></indexcommand>
<para>Optimize.  Optimizing compilation takes somewhat more time, and a lot
more memory for a large function.
</para>
<para>With <option>-O</option>, the compiler tries to reduce code size and execution
time, without performing any optimizations that take a great deal of
compilation time.
</para>
<para><option>-O</option> turns on the following optimization flags:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-fauto-inc-dec 
-fbranch-count-reg 
-fcombine-stack-adjustments 
-fcompare-elim 
-fcprop-registers 
-fdce 
-fdefer-pop 
-fdelayed-branch 
-fdse 
-fforward-propagate 
-fguess-branch-probability 
-fif-conversion2 
-fif-conversion 
-finline-functions-called-once 
-fipa-pure-const 
-fipa-profile 
-fipa-reference 
-fmerge-constants 
-fmove-loop-invariants 
-fshrink-wrap 
-fsplit-wide-types 
-ftree-bit-ccp 
-ftree-ccp 
-fssa-phiopt 
-ftree-ch 
-ftree-copy-prop 
-ftree-copyrename 
-ftree-dce 
-ftree-dominator-opts 
-ftree-dse 
-ftree-forwprop 
-ftree-fre 
-ftree-phiprop 
-ftree-sink 
-ftree-slsr 
-ftree-sra 
-ftree-pta 
-ftree-ter 
-funit-at-a-time
</pre></smallexample>

<para><option>-O</option> also turns on <option>-fomit-frame-pointer</option> on machines
where doing so does not interfere with debugging.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-O2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="755" incode="1">O2</indexterm></indexcommand>
<para>Optimize even more.  GCC performs nearly all supported optimizations
that do not involve a space-speed tradeoff.
As compared to <option>-O</option>, this option increases both compilation time
and the performance of the generated code.
</para>
<para><option>-O2</option> turns on all optimization flags specified by <option>-O</option>.  It
also turns on the following optimization flags:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-fthread-jumps 
-falign-functions  -falign-jumps 
-falign-loops  -falign-labels 
-fcaller-saves 
-fcrossjumping 
-fcse-follow-jumps  -fcse-skip-blocks 
-fdelete-null-pointer-checks 
-fdevirtualize -fdevirtualize-speculatively 
-fexpensive-optimizations 
-fgcse  -fgcse-lm  
-fhoist-adjacent-loads 
-finline-small-functions 
-findirect-inlining 
-fipa-cp 
-fipa-cp-alignment 
-fipa-sra 
-fipa-icf 
-fisolate-erroneous-paths-dereference 
-flra-remat 
-foptimize-sibling-calls 
-foptimize-strlen 
-fpartial-inlining 
-fpeephole2 
-freorder-blocks -freorder-blocks-and-partition -freorder-functions 
-frerun-cse-after-loop  
-fsched-interblock  -fsched-spec 
-fschedule-insns  -fschedule-insns2 
-fstrict-aliasing -fstrict-overflow 
-ftree-builtin-call-dce 
-ftree-switch-conversion -ftree-tail-merge 
-ftree-pre 
-ftree-vrp 
-fipa-ra
</pre></smallexample>

<para>Please note the warning under <option>-fgcse</option> about
invoking <option>-O2</option> on programs that use computed gotos.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-O3</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="756" incode="1">O3</indexterm></indexcommand>
<para>Optimize yet more.  <option>-O3</option> turns on all optimizations specified
by <option>-O2</option> and also turns on the <option>-finline-functions</option>,
<option>-funswitch-loops</option>, <option>-fpredictive-commoning</option>,
<option>-fgcse-after-reload</option>, <option>-ftree-loop-vectorize</option>,
<option>-ftree-loop-distribute-patterns</option>,
<option>-ftree-slp-vectorize</option>, <option>-fvect-cost-model</option>,
<option>-ftree-partial-pre</option> and <option>-fipa-cp-clone</option> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-O0</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="757" incode="1">O0</indexterm></indexcommand>
<para>Reduce compilation time and make debugging produce the expected
results.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Os</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="758" incode="1">Os</indexterm></indexcommand>
<para>Optimize for size.  <option>-Os</option> enables all <option>-O2</option> optimizations that
do not typically increase code size.  It also performs further
optimizations designed to reduce code size.
</para>
<para><option>-Os</option> disables the following optimization flags:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-falign-functions  -falign-jumps  -falign-loops 
-falign-labels  -freorder-blocks  -freorder-blocks-and-partition 
-fprefetch-loop-arrays
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Ofast</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="759" incode="1">Ofast</indexterm></indexcommand>
<para>Disregard strict standards compliance.  <option>-Ofast</option> enables all
<option>-O3</option> optimizations.  It also enables optimizations that are not
valid for all standard-compliant programs.
It turns on <option>-ffast-math</option> and the Fortran-specific
<option>-fno-protect-parens</option> and <option>-fstack-arrays</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Og</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="760" incode="1">Og</indexterm></indexcommand>
<para>Optimize debugging experience.  <option>-Og</option> enables optimizations
that do not interfere with debugging. It should be the optimization
level of choice for the standard edit-compile-debug cycle, offering
a reasonable level of optimization while maintaining fast compilation
and a good debugging experience.
</para>
<para>If you use multiple <option>-O</option> options, with or without level numbers,
the last such option is the one that is effective.
</para></tableitem></tableentry></table>

<para>Options of the form <option>-f<var>flag</var></option> specify machine-independent
flags.  Most flags have both positive and negative forms; the negative
form of <option>-ffoo</option> is <option>-fno-foo</option>.  In the table
below, only one of the forms is listed&textmdash;the one you typically 
use.  You can figure out the other form by either removing <samp>no-</samp>
or adding it.
</para>
<para>The following options control specific optimizations.  They are either
activated by <option>-O</option> options or are related to ones that are.  You
can use the following flags in the rare cases when &textldquo;fine-tuning&textrdquo; of
optimizations to be performed is desired.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-defer-pop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="761" incode="1">fno-defer-pop</indexterm></indexcommand>
<para>Always pop the arguments to each function call as soon as that function
returns.  For machines that must pop arguments after a function call,
the compiler normally lets arguments accumulate on the stack for several
function calls and pops them all at once.
</para>
<para>Disabled at levels <option>-O</option>, <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fforward-propagate</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="762" incode="1">fforward-propagate</indexterm></indexcommand>
<para>Perform a forward propagation pass on RTL&eosperiod;  The pass tries to combine two
instructions and checks if the result can be simplified.  If loop unrolling
is active, two passes are performed and the second is scheduled after
loop unrolling.
</para>
<para>This option is enabled by default at optimization levels <option>-O</option>,
<option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ffp-contract=<var>style</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="763" incode="1">ffp-contract</indexterm></indexcommand>
<para><option>-ffp-contract=off</option> disables floating-point expression contraction.
<option>-ffp-contract=fast</option> enables floating-point expression contraction
such as forming of fused multiply-add operations if the target has
native support for them.
<option>-ffp-contract=on</option> enables floating-point expression contraction
if allowed by the language standard.  This is currently not implemented
and treated equal to <option>-ffp-contract=off</option>.
</para>
<para>The default is <option>-ffp-contract=fast</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fomit-frame-pointer</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="764" incode="1">fomit-frame-pointer</indexterm></indexcommand>
<para>Don&textrsquo;t keep the frame pointer in a register for functions that
don&textrsquo;t need one.  This avoids the instructions to save, set up and
restore frame pointers; it also makes an extra register available
in many functions.  <strong>It also makes debugging impossible on
some machines.</strong>
</para>
<para>On some machines, such as the VAX, this flag has no effect, because
the standard calling sequence automatically handles the frame pointer
and nothing is saved by pretending it doesn&textrsquo;t exist.  The
machine-description macro <code>FRAME_POINTER_REQUIRED</code> controls
whether a target machine supports this flag.  <xref label="Registers" manual="gccint"><xrefnodename>Registers</xrefnodename><xrefprinteddesc>Register
Usage</xrefprinteddesc><xrefinfofile spaces=" ">gccint</xrefinfofile><xrefprintedname spaces=" ">GNU Compiler Collection (GCC) Internals</xrefprintedname></xref>.
</para>
<para>The default setting (when not optimizing for
size) for 32-bit GNU/Linux x86 and 32-bit Darwin x86 targets is
<option>-fomit-frame-pointer</option>.  You can configure GCC with the
<option>--enable-frame-pointer</option> configure option to change the default.
</para>
<para>Enabled at levels <option>-O</option>, <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-foptimize-sibling-calls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="765" incode="1">foptimize-sibling-calls</indexterm></indexcommand>
<para>Optimize sibling and tail recursive calls.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-foptimize-strlen</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="766" incode="1">foptimize-strlen</indexterm></indexcommand>
<para>Optimize various standard C string functions (e.g. <code>strlen</code>,
<code>strchr</code> or <code>strcpy</code>) and
their <code>_FORTIFY_SOURCE</code> counterparts into faster alternatives.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-inline</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="767" incode="1">fno-inline</indexterm></indexcommand>
<para>Do not expand any functions inline apart from those marked with
the <code>always_inline</code> attribute.  This is the default when not
optimizing.
</para>
<para>Single functions can be exempted from inlining by marking them
with the <code>noinline</code> attribute.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-finline-small-functions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="768" incode="1">finline-small-functions</indexterm></indexcommand>
<para>Integrate functions into their callers when their body is smaller than expected
function call code (so overall size of program gets smaller).  The compiler
heuristically decides which functions are simple enough to be worth integrating
in this way.  This inlining applies to all functions, even those not declared
inline.
</para>
<para>Enabled at level <option>-O2</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-findirect-inlining</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="769" incode="1">findirect-inlining</indexterm></indexcommand>
<para>Inline also indirect calls that are discovered to be known at compile
time thanks to previous inlining.  This option has any effect only
when inlining itself is turned on by the <option>-finline-functions</option>
or <option>-finline-small-functions</option> options.
</para>
<para>Enabled at level <option>-O2</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-finline-functions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="770" incode="1">finline-functions</indexterm></indexcommand>
<para>Consider all functions for inlining, even if they are not declared inline.
The compiler heuristically decides which functions are worth integrating
in this way.
</para>
<para>If all calls to a given function are integrated, and the function is
declared <code>static</code>, then the function is normally not output as
assembler code in its own right.
</para>
<para>Enabled at level <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-finline-functions-called-once</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="771" incode="1">finline-functions-called-once</indexterm></indexcommand>
<para>Consider all <code>static</code> functions called once for inlining into their
caller even if they are not marked <code>inline</code>.  If a call to a given
function is integrated, then the function is not output as assembler code
in its own right.
</para>
<para>Enabled at levels <option>-O1</option>, <option>-O2</option>, <option>-O3</option> and <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fearly-inlining</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="772" incode="1">fearly-inlining</indexterm></indexcommand>
<para>Inline functions marked by <code>always_inline</code> and functions whose body seems
smaller than the function call overhead early before doing
<option>-fprofile-generate</option> instrumentation and real inlining pass.  Doing so
makes profiling significantly cheaper and usually inlining faster on programs
having large chains of nested wrapper functions.
</para>
<para>Enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fipa-sra</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="773" incode="1">fipa-sra</indexterm></indexcommand>
<para>Perform interprocedural scalar replacement of aggregates, removal of
unused parameters and replacement of parameters passed by reference
by parameters passed by value.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option> and <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-finline-limit=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="774" incode="1">finline-limit</indexterm></indexcommand>
<para>By default, GCC limits the size of functions that can be inlined.  This flag
allows coarse control of this limit.  <var>n</var> is the size of functions that
can be inlined in number of pseudo instructions.
</para>
<para>Inlining is actually controlled by a number of parameters, which may be
specified individually by using <option>--param <var>name</var>=<var>value</var></option>.
The <option>-finline-limit=<var>n</var></option> option sets some of these parameters
as follows:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">max-inline-insns-single</itemformat></item>
</tableterm><tableitem><para>is set to <var>n</var>/2.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-inline-insns-auto</itemformat></item>
</tableterm><tableitem><para>is set to <var>n</var>/2.
</para></tableitem></tableentry></table>

<para>See below for a documentation of the individual
parameters controlling inlining and for the defaults of these parameters.
</para>
<para><emph>Note:</emph> there may be no value to <option>-finline-limit</option> that results
in default behavior.
</para>
<para><emph>Note:</emph> pseudo instruction represents, in this particular context, an
abstract measurement of function&textrsquo;s size.  In no way does it represent a count
of assembly instructions and as such its exact meaning might change from one
release to an another.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-keep-inline-dllexport</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="775" incode="1">fno-keep-inline-dllexport</indexterm></indexcommand>
<para>This is a more fine-grained version of <option>-fkeep-inline-functions</option>,
which applies only to functions that are declared using the <code>dllexport</code>
attribute or declspec (<xref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename><xrefprinteddesc>Declaring Attributes of
Functions</xrefprinteddesc></xref>.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fkeep-inline-functions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="776" incode="1">fkeep-inline-functions</indexterm></indexcommand>
<para>In C, emit <code>static</code> functions that are declared <code>inline</code>
into the object file, even if the function has been inlined into all
of its callers.  This switch does not affect functions using the
<code>extern inline</code> extension in GNU C90&eosperiod;  In C++, emit any and all
inline functions into the object file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fkeep-static-consts</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="777" incode="1">fkeep-static-consts</indexterm></indexcommand>
<para>Emit variables declared <code>static const</code> when optimization isn&textrsquo;t turned
on, even if the variables aren&textrsquo;t referenced.
</para>
<para>GCC enables this option by default.  If you want to force the compiler to
check if a variable is referenced, regardless of whether or not
optimization is turned on, use the <option>-fno-keep-static-consts</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fmerge-constants</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="778" incode="1">fmerge-constants</indexterm></indexcommand>
<para>Attempt to merge identical constants (string constants and floating-point
constants) across compilation units.
</para>
<para>This option is the default for optimized compilation if the assembler and
linker support it.  Use <option>-fno-merge-constants</option> to inhibit this
behavior.
</para>
<para>Enabled at levels <option>-O</option>, <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fmerge-all-constants</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="779" incode="1">fmerge-all-constants</indexterm></indexcommand>
<para>Attempt to merge identical constants and identical variables.
</para>
<para>This option implies <option>-fmerge-constants</option>.  In addition to
<option>-fmerge-constants</option> this considers e.g.&noeos; even constant initialized
arrays or initialized constant variables with integral or floating-point
types.  Languages like C or C++ require each variable, including multiple
instances of the same variable in recursive calls, to have distinct locations,
so using this option results in non-conforming
behavior.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fmodulo-sched</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="780" incode="1">fmodulo-sched</indexterm></indexcommand>
<para>Perform swing modulo scheduling immediately before the first scheduling
pass.  This pass looks at innermost loops and reorders their
instructions by overlapping different iterations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fmodulo-sched-allow-regmoves</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="781" incode="1">fmodulo-sched-allow-regmoves</indexterm></indexcommand>
<para>Perform more aggressive SMS-based modulo scheduling with register moves
allowed.  By setting this flag certain anti-dependences edges are
deleted, which triggers the generation of reg-moves based on the
life-range analysis.  This option is effective only with
<option>-fmodulo-sched</option> enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-branch-count-reg</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="782" incode="1">fno-branch-count-reg</indexterm></indexcommand>
<para>Do not use &textldquo;decrement and branch&textrdquo; instructions on a count register,
but instead generate a sequence of instructions that decrement a
register, compare it against zero, then branch based upon the result.
This option is only meaningful on architectures that support such
instructions, which include x86, PowerPC, IA-64 and S/390.
</para>
<para>Enabled by default at <option>-O1</option> and higher.
</para>
<para>The default is <option>-fbranch-count-reg</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-function-cse</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="783" incode="1">fno-function-cse</indexterm></indexcommand>
<para>Do not put function addresses in registers; make each instruction that
calls a constant function contain the function&textrsquo;s address explicitly.
</para>
<para>This option results in less efficient code, but some strange hacks
that alter the assembler output may be confused by the optimizations
performed when this option is not used.
</para>
<para>The default is <option>-ffunction-cse</option>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-zero-initialized-in-bss</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="784" incode="1">fno-zero-initialized-in-bss</indexterm></indexcommand>
<para>If the target supports a BSS section, GCC by default puts variables that
are initialized to zero into BSS&eosperiod;  This can save space in the resulting
code.
</para>
<para>This option turns off this behavior because some programs explicitly
rely on variables going to the data section&textmdash;e.g., so that the
resulting executable can find the beginning of that section and/or make
assumptions based on that.
</para>
<para>The default is <option>-fzero-initialized-in-bss</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fthread-jumps</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="785" incode="1">fthread-jumps</indexterm></indexcommand>
<para>Perform optimizations that check to see if a jump branches to a
location where another comparison subsumed by the first is found.  If
so, the first branch is redirected to either the destination of the
second branch or a point immediately following it, depending on whether
the condition is known to be true or false.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsplit-wide-types</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="786" incode="1">fsplit-wide-types</indexterm></indexcommand>
<para>When using a type that occupies multiple registers, such as <code>long
long</code> on a 32-bit system, split the registers apart and allocate them
independently.  This normally generates better code for those types,
but may make debugging more difficult.
</para>
<para>Enabled at levels <option>-O</option>, <option>-O2</option>, <option>-O3</option>,
<option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcse-follow-jumps</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="787" incode="1">fcse-follow-jumps</indexterm></indexcommand>
<para>In common subexpression elimination (CSE), scan through jump instructions
when the target of the jump is not reached by any other path.  For
example, when CSE encounters an <code>if</code> statement with an
<code>else</code> clause, CSE follows the jump when the condition
tested is false.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcse-skip-blocks</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="788" incode="1">fcse-skip-blocks</indexterm></indexcommand>
<para>This is similar to <option>-fcse-follow-jumps</option>, but causes CSE to
follow jumps that conditionally skip over blocks.  When CSE
encounters a simple <code>if</code> statement with no else clause,
<option>-fcse-skip-blocks</option> causes CSE to follow the jump around the
body of the <code>if</code>.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-frerun-cse-after-loop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="789" incode="1">frerun-cse-after-loop</indexterm></indexcommand>
<para>Re-run common subexpression elimination after loop optimizations are
performed.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fgcse</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="790" incode="1">fgcse</indexterm></indexcommand>
<para>Perform a global common subexpression elimination pass.
This pass also performs global constant and copy propagation.
</para>
<para><emph>Note:</emph> When compiling a program using computed gotos, a GCC
extension, you may get better run-time performance if you disable
the global common subexpression elimination pass by adding
<option>-fno-gcse</option> to the command line.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fgcse-lm</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="791" incode="1">fgcse-lm</indexterm></indexcommand>
<para>When <option>-fgcse-lm</option> is enabled, global common subexpression elimination
attempts to move loads that are only killed by stores into themselves.  This
allows a loop containing a load/store sequence to be changed to a load outside
the loop, and a copy/store within the loop.
</para>
<para>Enabled by default when <option>-fgcse</option> is enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fgcse-sm</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="792" incode="1">fgcse-sm</indexterm></indexcommand>
<para>When <option>-fgcse-sm</option> is enabled, a store motion pass is run after
global common subexpression elimination.  This pass attempts to move
stores out of loops.  When used in conjunction with <option>-fgcse-lm</option>,
loops containing a load/store sequence can be changed to a load before
the loop and a store after the loop.
</para>
<para>Not enabled at any optimization level.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fgcse-las</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="793" incode="1">fgcse-las</indexterm></indexcommand>
<para>When <option>-fgcse-las</option> is enabled, the global common subexpression
elimination pass eliminates redundant loads that come after stores to the
same memory location (both partial and full redundancies).
</para>
<para>Not enabled at any optimization level.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fgcse-after-reload</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="794" incode="1">fgcse-after-reload</indexterm></indexcommand>
<para>When <option>-fgcse-after-reload</option> is enabled, a redundant load elimination
pass is performed after reload.  The purpose of this pass is to clean up
redundant spilling.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-faggressive-loop-optimizations</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="795" incode="1">faggressive-loop-optimizations</indexterm></indexcommand>
<para>This option tells the loop optimizer to use language constraints to
derive bounds for the number of iterations of a loop.  This assumes that
loop code does not invoke undefined behavior by for example causing signed
integer overflows or out-of-bound array accesses.  The bounds for the
number of iterations of a loop are used to guide loop unrolling and peeling
and loop exit test optimizations.
This option is enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-funsafe-loop-optimizations</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="796" incode="1">funsafe-loop-optimizations</indexterm></indexcommand>
<para>This option tells the loop optimizer to assume that loop indices do not
overflow, and that loops with nontrivial exit condition are not
infinite.  This enables a wider range of loop optimizations even if
the loop optimizer itself cannot prove that these assumptions are valid.
If you use <option>-Wunsafe-loop-optimizations</option>, the compiler warns you
if it finds this kind of loop.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcrossjumping</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="797" incode="1">fcrossjumping</indexterm></indexcommand>
<para>Perform cross-jumping transformation.
This transformation unifies equivalent code and saves code size.  The
resulting code may or may not perform better than without cross-jumping.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fauto-inc-dec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="798" incode="1">fauto-inc-dec</indexterm></indexcommand>
<para>Combine increments or decrements of addresses with memory accesses.
This pass is always skipped on architectures that do not have
instructions to support this.  Enabled by default at <option>-O</option> and
higher on architectures that support this.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdce</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="799" incode="1">fdce</indexterm></indexcommand>
<para>Perform dead code elimination (DCE) on RTL&eosperiod;
Enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdse</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="800" incode="1">fdse</indexterm></indexcommand>
<para>Perform dead store elimination (DSE) on RTL&eosperiod;
Enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fif-conversion</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="801" incode="1">fif-conversion</indexterm></indexcommand>
<para>Attempt to transform conditional jumps into branch-less equivalents.  This
includes use of conditional moves, min, max, set flags and abs instructions, and
some tricks doable by standard arithmetics.  The use of conditional execution
on chips where it is available is controlled by <option>-fif-conversion2</option>.
</para>
<para>Enabled at levels <option>-O</option>, <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fif-conversion2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="802" incode="1">fif-conversion2</indexterm></indexcommand>
<para>Use conditional execution (where available) to transform conditional jumps into
branch-less equivalents.
</para>
<para>Enabled at levels <option>-O</option>, <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdeclone-ctor-dtor</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="803" incode="1">fdeclone-ctor-dtor</indexterm></indexcommand>
<para>The C++ ABI requires multiple entry points for constructors and
destructors: one for a base subobject, one for a complete object, and
one for a virtual destructor that calls operator delete afterwards.
For a hierarchy with virtual bases, the base and complete variants are
clones, which means two copies of the function.  With this option, the
base and complete variants are changed to be thunks that call a common
implementation.
</para>
<para>Enabled by <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdelete-null-pointer-checks</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="804" incode="1">fdelete-null-pointer-checks</indexterm></indexcommand>
<para>Assume that programs cannot safely dereference null pointers, and that
no code or data element resides at address zero.
This option enables simple constant
folding optimizations at all optimization levels.  In addition, other
optimization passes in GCC use this flag to control global dataflow
analyses that eliminate useless checks for null pointers; these assume
that a memory access to address zero always results in a trap, so
that if a pointer is checked after it has already been dereferenced,
it cannot be null.
</para>
<para>Note however that in some environments this assumption is not true.
Use <option>-fno-delete-null-pointer-checks</option> to disable this optimization
for programs that depend on that behavior.
</para>
<para>This option is enabled by default on most targets.  On Nios II ELF, it
defaults to off.  On AVR and CR16, this option is completely disabled.  
</para>
<para>Passes that use the dataflow information
are enabled independently at different optimization levels.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdevirtualize</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="805" incode="1">fdevirtualize</indexterm></indexcommand>
<para>Attempt to convert calls to virtual functions to direct calls.  This
is done both within a procedure and interprocedurally as part of
indirect inlining (<option>-findirect-inlining</option>) and interprocedural constant
propagation (<option>-fipa-cp</option>).
Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdevirtualize-speculatively</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="806" incode="1">fdevirtualize-speculatively</indexterm></indexcommand>
<para>Attempt to convert calls to virtual functions to speculative direct calls.
Based on the analysis of the type inheritance graph, determine for a given call
the set of likely targets. If the set is small, preferably of size 1, change
the call into a conditional deciding between direct and indirect calls.  The
speculative calls enable more optimizations, such as inlining.  When they seem
useless after further optimization, they are converted back into original form.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdevirtualize-at-ltrans</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="807" incode="1">fdevirtualize-at-ltrans</indexterm></indexcommand>
<para>Stream extra information needed for aggressive devirtualization when running
the link-time optimizer in local transformation mode.  
This option enables more devirtualization but
significantly increases the size of streamed data. For this reason it is
disabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fexpensive-optimizations</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="808" incode="1">fexpensive-optimizations</indexterm></indexcommand>
<para>Perform a number of minor optimizations that are relatively expensive.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-free</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="809" incode="1">free</indexterm></indexcommand>
<para>Attempt to remove redundant extension instructions.  This is especially
helpful for the x86-64 architecture, which implicitly zero-extends in 64-bit
registers after writing to their lower 32-bit half.
</para>
<para>Enabled for Alpha, AArch64 and x86 at levels <option>-O2</option>,
<option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-lifetime-dse</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="810" incode="1">fno-lifetime-dse</indexterm></indexcommand>
<para>In C++ the value of an object is only affected by changes within its
lifetime: when the constructor begins, the object has an indeterminate
value, and any changes during the lifetime of the object are dead when
the object is destroyed.  Normally dead store elimination will take
advantage of this; if your code relies on the value of the object
storage persisting beyond the lifetime of the object, you can use this
flag to disable this optimization.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-flive-range-shrinkage</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="811" incode="1">flive-range-shrinkage</indexterm></indexcommand>
<para>Attempt to decrease register pressure through register live range
shrinkage.  This is helpful for fast processors with small or moderate
size register sets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fira-algorithm=<var>algorithm</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="812" incode="1">fira-algorithm</indexterm></indexcommand>
<para>Use the specified coloring algorithm for the integrated register
allocator.  The <var>algorithm</var> argument can be <samp>priority</samp>, which
specifies Chow&textrsquo;s priority coloring, or <samp>CB</samp>, which specifies
Chaitin-Briggs coloring.  Chaitin-Briggs coloring is not implemented
for all architectures, but for those targets that do support it, it is
the default because it generates better code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fira-region=<var>region</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="813" incode="1">fira-region</indexterm></indexcommand>
<para>Use specified regions for the integrated register allocator.  The
<var>region</var> argument should be one of the following:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">all</itemformat></item>
</tableterm><tableitem><para>Use all loops as register allocation regions.
This can give the best results for machines with a small and/or
irregular register set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">mixed</itemformat></item>
</tableterm><tableitem><para>Use all loops except for loops with small register pressure 
as the regions.  This value usually gives
the best results in most cases and for most architectures,
and is enabled by default when compiling with optimization for speed
(<option>-O</option>, <option>-O2</option>, &dots;).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">one</itemformat></item>
</tableterm><tableitem><para>Use all functions as a single region.  
This typically results in the smallest code size, and is enabled by default for
<option>-Os</option> or <option>-O0</option>.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fira-hoist-pressure</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="814" incode="1">fira-hoist-pressure</indexterm></indexcommand>
<para>Use IRA to evaluate register pressure in the code hoisting pass for
decisions to hoist expressions.  This option usually results in smaller
code, but it can slow the compiler down.
</para>
<para>This option is enabled at level <option>-Os</option> for all targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fira-loop-pressure</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="815" incode="1">fira-loop-pressure</indexterm></indexcommand>
<para>Use IRA to evaluate register pressure in loops for decisions to move
loop invariants.  This option usually results in generation
of faster and smaller code on machines with large register files (&gt;= 32
registers), but it can slow the compiler down.
</para>
<para>This option is enabled at level <option>-O3</option> for some targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-ira-share-save-slots</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="816" incode="1">fno-ira-share-save-slots</indexterm></indexcommand>
<para>Disable sharing of stack slots used for saving call-used hard
registers living through a call.  Each hard register gets a
separate stack slot, and as a result function stack frames are
larger.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-ira-share-spill-slots</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="817" incode="1">fno-ira-share-spill-slots</indexterm></indexcommand>
<para>Disable sharing of stack slots allocated for pseudo-registers.  Each
pseudo-register that does not get a hard register gets a separate
stack slot, and as a result function stack frames are larger.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fira-verbose=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="818" incode="1">fira-verbose</indexterm></indexcommand>
<para>Control the verbosity of the dump file for the integrated register allocator.
The default value is 5.  If the value <var>n</var> is greater or equal to 10,
the dump output is sent to stderr using the same format as <var>n</var> minus 10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-flra-remat</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="819" incode="1">flra-remat</indexterm></indexcommand>
<para>Enable CFG-sensitive rematerialization in LRA.  Instead of loading
values of spilled pseudos, LRA tries to rematerialize (recalculate)
values if it is profitable.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdelayed-branch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="820" incode="1">fdelayed-branch</indexterm></indexcommand>
<para>If supported for the target machine, attempt to reorder instructions
to exploit instruction slots available after delayed branch
instructions.
</para>
<para>Enabled at levels <option>-O</option>, <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fschedule-insns</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="821" incode="1">fschedule-insns</indexterm></indexcommand>
<para>If supported for the target machine, attempt to reorder instructions to
eliminate execution stalls due to required data being unavailable.  This
helps machines that have slow floating point or memory load instructions
by allowing other instructions to be issued until the result of the load
or floating-point instruction is required.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fschedule-insns2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="822" incode="1">fschedule-insns2</indexterm></indexcommand>
<para>Similar to <option>-fschedule-insns</option>, but requests an additional pass of
instruction scheduling after register allocation has been done.  This is
especially useful on machines with a relatively small number of
registers and where memory load instructions take more than one cycle.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-sched-interblock</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="823" incode="1">fno-sched-interblock</indexterm></indexcommand>
<para>Don&textrsquo;t schedule instructions across basic blocks.  This is normally
enabled by default when scheduling before register allocation, i.e.&noeos;
with <option>-fschedule-insns</option> or at <option>-O2</option> or higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-sched-spec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="824" incode="1">fno-sched-spec</indexterm></indexcommand>
<para>Don&textrsquo;t allow speculative motion of non-load instructions.  This is normally
enabled by default when scheduling before register allocation, i.e.&noeos;
with <option>-fschedule-insns</option> or at <option>-O2</option> or higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched-pressure</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="825" incode="1">fsched-pressure</indexterm></indexcommand>
<para>Enable register pressure sensitive insn scheduling before register
allocation.  This only makes sense when scheduling before register
allocation is enabled, i.e.&noeos; with <option>-fschedule-insns</option> or at
<option>-O2</option> or higher.  Usage of this option can improve the
generated code and decrease its size by preventing register pressure
increase above the number of available hard registers and subsequent
spills in register allocation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched-spec-load</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="826" incode="1">fsched-spec-load</indexterm></indexcommand>
<para>Allow speculative motion of some load instructions.  This only makes
sense when scheduling before register allocation, i.e.&noeos; with
<option>-fschedule-insns</option> or at <option>-O2</option> or higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched-spec-load-dangerous</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="827" incode="1">fsched-spec-load-dangerous</indexterm></indexcommand>
<para>Allow speculative motion of more load instructions.  This only makes
sense when scheduling before register allocation, i.e.&noeos; with
<option>-fschedule-insns</option> or at <option>-O2</option> or higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched-stalled-insns</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fsched-stalled-insns=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="828" incode="1">fsched-stalled-insns</indexterm></indexcommand>
<para>Define how many insns (if any) can be moved prematurely from the queue
of stalled insns into the ready list during the second scheduling pass.
<option>-fno-sched-stalled-insns</option> means that no insns are moved
prematurely, <option>-fsched-stalled-insns=0</option> means there is no limit
on how many queued insns can be moved prematurely.
<option>-fsched-stalled-insns</option> without a value is equivalent to
<option>-fsched-stalled-insns=1</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched-stalled-insns-dep</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fsched-stalled-insns-dep=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="829" incode="1">fsched-stalled-insns-dep</indexterm></indexcommand>
<para>Define how many insn groups (cycles) are examined for a dependency
on a stalled insn that is a candidate for premature removal from the queue
of stalled insns.  This has an effect only during the second scheduling pass,
and only if <option>-fsched-stalled-insns</option> is used.
<option>-fno-sched-stalled-insns-dep</option> is equivalent to
<option>-fsched-stalled-insns-dep=0</option>.
<option>-fsched-stalled-insns-dep</option> without a value is equivalent to
<option>-fsched-stalled-insns-dep=1</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched2-use-superblocks</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="830" incode="1">fsched2-use-superblocks</indexterm></indexcommand>
<para>When scheduling after register allocation, use superblock scheduling.
This allows motion across basic block boundaries,
resulting in faster schedules.  This option is experimental, as not all machine
descriptions used by GCC model the CPU closely enough to avoid unreliable
results from the algorithm.
</para>
<para>This only makes sense when scheduling after register allocation, i.e.&noeos; with
<option>-fschedule-insns2</option> or at <option>-O2</option> or higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched-group-heuristic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="831" incode="1">fsched-group-heuristic</indexterm></indexcommand>
<para>Enable the group heuristic in the scheduler.  This heuristic favors
the instruction that belongs to a schedule group.  This is enabled
by default when scheduling is enabled, i.e.&noeos; with <option>-fschedule-insns</option>
or <option>-fschedule-insns2</option> or at <option>-O2</option> or higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched-critical-path-heuristic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="832" incode="1">fsched-critical-path-heuristic</indexterm></indexcommand>
<para>Enable the critical-path heuristic in the scheduler.  This heuristic favors
instructions on the critical path.  This is enabled by default when
scheduling is enabled, i.e.&noeos; with <option>-fschedule-insns</option>
or <option>-fschedule-insns2</option> or at <option>-O2</option> or higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched-spec-insn-heuristic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="833" incode="1">fsched-spec-insn-heuristic</indexterm></indexcommand>
<para>Enable the speculative instruction heuristic in the scheduler.  This
heuristic favors speculative instructions with greater dependency weakness.
This is enabled by default when scheduling is enabled, i.e.&noeos;
with <option>-fschedule-insns</option> or <option>-fschedule-insns2</option>
or at <option>-O2</option> or higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched-rank-heuristic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="834" incode="1">fsched-rank-heuristic</indexterm></indexcommand>
<para>Enable the rank heuristic in the scheduler.  This heuristic favors
the instruction belonging to a basic block with greater size or frequency.
This is enabled by default when scheduling is enabled, i.e.&noeos;
with <option>-fschedule-insns</option> or <option>-fschedule-insns2</option> or
at <option>-O2</option> or higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched-last-insn-heuristic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="835" incode="1">fsched-last-insn-heuristic</indexterm></indexcommand>
<para>Enable the last-instruction heuristic in the scheduler.  This heuristic
favors the instruction that is less dependent on the last instruction
scheduled.  This is enabled by default when scheduling is enabled,
i.e.&noeos; with <option>-fschedule-insns</option> or <option>-fschedule-insns2</option> or
at <option>-O2</option> or higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsched-dep-count-heuristic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="836" incode="1">fsched-dep-count-heuristic</indexterm></indexcommand>
<para>Enable the dependent-count heuristic in the scheduler.  This heuristic
favors the instruction that has more instructions depending on it.
This is enabled by default when scheduling is enabled, i.e.&noeos;
with <option>-fschedule-insns</option> or <option>-fschedule-insns2</option> or
at <option>-O2</option> or higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-freschedule-modulo-scheduled-loops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="837" incode="1">freschedule-modulo-scheduled-loops</indexterm></indexcommand>
<para>Modulo scheduling is performed before traditional scheduling.  If a loop
is modulo scheduled, later scheduling passes may change its schedule.  
Use this option to control that behavior.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fselective-scheduling</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="838" incode="1">fselective-scheduling</indexterm></indexcommand>
<para>Schedule instructions using selective scheduling algorithm.  Selective
scheduling runs instead of the first scheduler pass.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fselective-scheduling2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="839" incode="1">fselective-scheduling2</indexterm></indexcommand>
<para>Schedule instructions using selective scheduling algorithm.  Selective
scheduling runs instead of the second scheduler pass.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsel-sched-pipelining</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="840" incode="1">fsel-sched-pipelining</indexterm></indexcommand>
<para>Enable software pipelining of innermost loops during selective scheduling.
This option has no effect unless one of <option>-fselective-scheduling</option> or
<option>-fselective-scheduling2</option> is turned on.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsel-sched-pipelining-outer-loops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="841" incode="1">fsel-sched-pipelining-outer-loops</indexterm></indexcommand>
<para>When pipelining loops during selective scheduling, also pipeline outer loops.
This option has no effect unless <option>-fsel-sched-pipelining</option> is turned on.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsemantic-interposition</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="842" incode="1">fsemantic-interposition</indexterm></indexcommand>
<para>Some object formats, like ELF, allow interposing of symbols by the 
dynamic linker.
This means that for symbols exported from the DSO, the compiler cannot perform
interprocedural propagation, inlining and other optimizations in anticipation
that the function or variable in question may change. While this feature is
useful, for example, to rewrite memory allocation functions by a debugging
implementation, it is expensive in the terms of code quality.
With <option>-fno-semantic-interposition</option> the compiler assumes that 
if interposition happens for functions the overwriting function will have 
precisely the same semantics (and side effects). 
Similarly if interposition happens
for variables, the constructor of the variable will be the same. The flag
has no effect for functions explicitly declared inline 
(where it is never allowed for interposition to change semantics) 
and for symbols explicitly declared weak.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fshrink-wrap</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="843" incode="1">fshrink-wrap</indexterm></indexcommand>
<para>Emit function prologues only before parts of the function that need it,
rather than at the top of the function.  This flag is enabled by default at
<option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcaller-saves</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="844" incode="1">fcaller-saves</indexterm></indexcommand>
<para>Enable allocation of values to registers that are clobbered by
function calls, by emitting extra instructions to save and restore the
registers around such calls.  Such allocation is done only when it
seems to result in better code.
</para>
<para>This option is always enabled by default on certain machines, usually
those which have no call-preserved registers to use instead.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcombine-stack-adjustments</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="845" incode="1">fcombine-stack-adjustments</indexterm></indexcommand>
<para>Tracks stack adjustments (pushes and pops) and stack memory references
and then tries to find ways to combine them.
</para>
<para>Enabled by default at <option>-O1</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fipa-ra</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="846" incode="1">fipa-ra</indexterm></indexcommand>
<para>Use caller save registers for allocation if those registers are not used by
any called function.  In that case it is not necessary to save and restore
them around calls.  This is only possible if called functions are part of
same compilation unit as current function and they are compiled before it.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fconserve-stack</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="847" incode="1">fconserve-stack</indexterm></indexcommand>
<para>Attempt to minimize stack usage.  The compiler attempts to use less
stack space, even if that makes the program slower.  This option
implies setting the <option>large-stack-frame</option> parameter to 100
and the <option>large-stack-frame-growth</option> parameter to 400.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-reassoc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="848" incode="1">ftree-reassoc</indexterm></indexcommand>
<para>Perform reassociation on trees.  This flag is enabled by default
at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-pre</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="849" incode="1">ftree-pre</indexterm></indexcommand>
<para>Perform partial redundancy elimination (PRE) on trees.  This flag is
enabled by default at <option>-O2</option> and <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-partial-pre</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="850" incode="1">ftree-partial-pre</indexterm></indexcommand>
<para>Make partial redundancy elimination (PRE) more aggressive.  This flag is
enabled by default at <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-forwprop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="851" incode="1">ftree-forwprop</indexterm></indexcommand>
<para>Perform forward propagation on trees.  This flag is enabled by default
at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-fre</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="852" incode="1">ftree-fre</indexterm></indexcommand>
<para>Perform full redundancy elimination (FRE) on trees.  The difference
between FRE and PRE is that FRE only considers expressions
that are computed on all paths leading to the redundant computation.
This analysis is faster than PRE, though it exposes fewer redundancies.
This flag is enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-phiprop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="853" incode="1">ftree-phiprop</indexterm></indexcommand>
<para>Perform hoisting of loads from conditional pointers on trees.  This
pass is enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fhoist-adjacent-loads</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="854" incode="1">fhoist-adjacent-loads</indexterm></indexcommand>
<para>Speculatively hoist loads from both branches of an if-then-else if the
loads are from adjacent locations in the same structure and the target
architecture has a conditional move instruction.  This flag is enabled
by default at <option>-O2</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-copy-prop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="855" incode="1">ftree-copy-prop</indexterm></indexcommand>
<para>Perform copy propagation on trees.  This pass eliminates unnecessary
copy operations.  This flag is enabled by default at <option>-O</option> and
higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fipa-pure-const</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="856" incode="1">fipa-pure-const</indexterm></indexcommand>
<para>Discover which functions are pure or constant.
Enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fipa-reference</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="857" incode="1">fipa-reference</indexterm></indexcommand>
<para>Discover which static variables do not escape the
compilation unit.
Enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fipa-pta</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="858" incode="1">fipa-pta</indexterm></indexcommand>
<para>Perform interprocedural pointer analysis and interprocedural modification
and reference analysis.  This option can cause excessive memory and
compile-time usage on large compilation units.  It is not enabled by
default at any optimization level.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fipa-profile</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="859" incode="1">fipa-profile</indexterm></indexcommand>
<para>Perform interprocedural profile propagation.  The functions called only from
cold functions are marked as cold. Also functions executed once (such as
<code>cold</code>, <code>noreturn</code>, static constructors or destructors) are identified. Cold
functions and loop less parts of functions executed once are then optimized for
size.
Enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fipa-cp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="860" incode="1">fipa-cp</indexterm></indexcommand>
<para>Perform interprocedural constant propagation.
This optimization analyzes the program to determine when values passed
to functions are constants and then optimizes accordingly.
This optimization can substantially increase performance
if the application has constants passed to functions.
This flag is enabled by default at <option>-O2</option>, <option>-Os</option> and <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fipa-cp-clone</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="861" incode="1">fipa-cp-clone</indexterm></indexcommand>
<para>Perform function cloning to make interprocedural constant propagation stronger.
When enabled, interprocedural constant propagation performs function cloning
when externally visible function can be called with constant arguments.
Because this optimization can create multiple copies of functions,
it may significantly increase code size
(see <option>--param ipcp-unit-growth=<var>value</var></option>).
This flag is enabled by default at <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fipa-cp-alignment</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="862" incode="1">-fipa-cp-alignment</indexterm></indexcommand>
<para>When enabled, this optimization propagates alignment of function
parameters to support better vectorization and string operations.
</para>
<para>This flag is enabled by default at <option>-O2</option> and <option>-Os</option>.  It
requires that <option>-fipa-cp</option> is enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fipa-icf</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="863" incode="1">fipa-icf</indexterm></indexcommand>
<para>Perform Identical Code Folding for functions and read-only variables.
The optimization reduces code size and may disturb unwind stacks by replacing
a function by equivalent one with a different name. The optimization works
more effectively with link time optimization enabled.
</para>
<para>Nevertheless the behavior is similar to Gold Linker ICF optimization, GCC ICF
works on different levels and thus the optimizations are not same - there are
equivalences that are found only by GCC and equivalences found only by Gold.
</para>
<para>This flag is enabled by default at <option>-O2</option> and <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fisolate-erroneous-paths-dereference</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="864" incode="1">fisolate-erroneous-paths-dereference</indexterm></indexcommand>
<para>Detect paths that trigger erroneous or undefined behavior due to
dereferencing a null pointer.  Isolate those paths from the main control
flow and turn the statement with erroneous or undefined behavior into a trap.
This flag is enabled by default at <option>-O2</option> and higher and depends on
<option>-fdelete-null-pointer-checks</option> also being enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fisolate-erroneous-paths-attribute</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="865" incode="1">fisolate-erroneous-paths-attribute</indexterm></indexcommand>
<para>Detect paths that trigger erroneous or undefined behavior due a null value
being used in a way forbidden by a <code>returns_nonnull</code> or <code>nonnull</code>
attribute.  Isolate those paths from the main control flow and turn the
statement with erroneous or undefined behavior into a trap.  This is not
currently enabled, but may be enabled by <option>-O2</option> in the future.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-sink</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="866" incode="1">ftree-sink</indexterm></indexcommand>
<para>Perform forward store motion  on trees.  This flag is
enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-bit-ccp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="867" incode="1">ftree-bit-ccp</indexterm></indexcommand>
<para>Perform sparse conditional bit constant propagation on trees and propagate
pointer alignment information.
This pass only operates on local scalar variables and is enabled by default
at <option>-O</option> and higher.  It requires that <option>-ftree-ccp</option> is enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-ccp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="868" incode="1">ftree-ccp</indexterm></indexcommand>
<para>Perform sparse conditional constant propagation (CCP) on trees.  This
pass only operates on local scalar variables and is enabled by default
at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fssa-phiopt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="869" incode="1">fssa-phiopt</indexterm></indexcommand>
<para>Perform pattern matching on SSA PHI nodes to optimize conditional
code.  This pass is enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-switch-conversion</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="870" incode="1">ftree-switch-conversion</indexterm></indexcommand>
<para>Perform conversion of simple initializations in a switch to
initializations from a scalar array.  This flag is enabled by default
at <option>-O2</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-tail-merge</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="871" incode="1">ftree-tail-merge</indexterm></indexcommand>
<para>Look for identical code sequences.  When found, replace one with a jump to the
other.  This optimization is known as tail merging or cross jumping.  This flag
is enabled by default at <option>-O2</option> and higher.  The compilation time
in this pass can
be limited using <option>max-tail-merge-comparisons</option> parameter and
<option>max-tail-merge-iterations</option> parameter.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-dce</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="872" incode="1">ftree-dce</indexterm></indexcommand>
<para>Perform dead code elimination (DCE) on trees.  This flag is enabled by
default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-builtin-call-dce</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="873" incode="1">ftree-builtin-call-dce</indexterm></indexcommand>
<para>Perform conditional dead code elimination (DCE) for calls to built-in functions
that may set <code>errno</code> but are otherwise side-effect free.  This flag is
enabled by default at <option>-O2</option> and higher if <option>-Os</option> is not also
specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-dominator-opts</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="874" incode="1">ftree-dominator-opts</indexterm></indexcommand>
<para>Perform a variety of simple scalar cleanups (constant/copy
propagation, redundancy elimination, range propagation and expression
simplification) based on a dominator tree traversal.  This also
performs jump threading (to reduce jumps to jumps). This flag is
enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-dse</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="875" incode="1">ftree-dse</indexterm></indexcommand>
<para>Perform dead store elimination (DSE) on trees.  A dead store is a store into
a memory location that is later overwritten by another store without
any intervening loads.  In this case the earlier store can be deleted.  This
flag is enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-ch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="876" incode="1">ftree-ch</indexterm></indexcommand>
<para>Perform loop header copying on trees.  This is beneficial since it increases
effectiveness of code motion optimizations.  It also saves one jump.  This flag
is enabled by default at <option>-O</option> and higher.  It is not enabled
for <option>-Os</option>, since it usually increases code size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-loop-optimize</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="877" incode="1">ftree-loop-optimize</indexterm></indexcommand>
<para>Perform loop optimizations on trees.  This flag is enabled by default
at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-loop-linear</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="878" incode="1">ftree-loop-linear</indexterm></indexcommand>
<para>Perform loop interchange transformations on tree.  Same as
<option>-floop-interchange</option>.  To use this code transformation, GCC has
to be configured with <option>--with-isl</option> to enable the Graphite loop
transformation infrastructure.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-floop-interchange</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="879" incode="1">floop-interchange</indexterm></indexcommand>
<para>Perform loop interchange transformations on loops.  Interchanging two
nested loops switches the inner and outer loops.  For example, given a
loop like:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">DO J = 1, M
  DO I = 1, N
    A(J, I) = A(J, I) * C
  ENDDO
ENDDO
</pre></smallexample>
<noindent></noindent>
<para>loop interchange transforms the loop as if it were written:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">DO I = 1, N
  DO J = 1, M
    A(J, I) = A(J, I) * C
  ENDDO
ENDDO
</pre></smallexample>
<para>which can be beneficial when <code>N</code> is larger than the caches,
because in Fortran, the elements of an array are stored in memory
contiguously by column, and the original loop iterates over rows,
potentially creating at each access a cache miss.  This optimization
applies to all the languages supported by GCC and is not limited to
Fortran.  To use this code transformation, GCC has to be configured
with <option>--with-isl</option> to enable the Graphite loop transformation
infrastructure.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-floop-strip-mine</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="880" incode="1">floop-strip-mine</indexterm></indexcommand>
<para>Perform loop strip mining transformations on loops.  Strip mining
splits a loop into two nested loops.  The outer loop has strides
equal to the strip size and the inner loop has strides of the
original loop within a strip.  The strip length can be changed
using the <option>loop-block-tile-size</option> parameter.  For example,
given a loop like:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">DO I = 1, N
  A(I) = A(I) + C
ENDDO
</pre></smallexample>
<noindent></noindent>
<para>loop strip mining transforms the loop as if it were written:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">DO II = 1, N, 51
  DO I = II, min (II + 50, N)
    A(I) = A(I) + C
  ENDDO
ENDDO
</pre></smallexample>
<para>This optimization applies to all the languages supported by GCC and is
not limited to Fortran.  To use this code transformation, GCC has to
be configured with <option>--with-isl</option> to enable the Graphite loop
transformation infrastructure.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-floop-block</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="881" incode="1">floop-block</indexterm></indexcommand>
<para>Perform loop blocking transformations on loops.  Blocking strip mines
each loop in the loop nest such that the memory accesses of the
element loops fit inside caches.  The strip length can be changed
using the <option>loop-block-tile-size</option> parameter.  For example, given
a loop like:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">DO I = 1, N
  DO J = 1, M
    A(J, I) = B(I) + C(J)
  ENDDO
ENDDO
</pre></smallexample>
<noindent></noindent>
<para>loop blocking transforms the loop as if it were written:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">DO II = 1, N, 51
  DO JJ = 1, M, 51
    DO I = II, min (II + 50, N)
      DO J = JJ, min (JJ + 50, M)
        A(J, I) = B(I) + C(J)
      ENDDO
    ENDDO
  ENDDO
ENDDO
</pre></smallexample>
<para>which can be beneficial when <code>M</code> is larger than the caches,
because the innermost loop iterates over a smaller amount of data
which can be kept in the caches.  This optimization applies to all the
languages supported by GCC and is not limited to Fortran.  To use this
code transformation, GCC has to be configured with <option>--with-isl</option>
to enable the Graphite loop transformation infrastructure.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fgraphite-identity</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="882" incode="1">fgraphite-identity</indexterm></indexcommand>
<para>Enable the identity transformation for graphite.  For every SCoP we generate
the polyhedral representation and transform it back to gimple.  Using
<option>-fgraphite-identity</option> we can check the costs or benefits of the
GIMPLE -&gt; GRAPHITE -&gt; GIMPLE transformation.  Some minimal optimizations
are also performed by the code generator ISL, like index splitting and
dead code elimination in loops.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-floop-nest-optimize</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="883" incode="1">floop-nest-optimize</indexterm></indexcommand>
<para>Enable the ISL based loop nest optimizer.  This is a generic loop nest
optimizer based on the Pluto optimization algorithms.  It calculates a loop
structure optimized for data-locality and parallelism.  This option
is experimental.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-floop-unroll-and-jam</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="884" incode="1">floop-unroll-and-jam</indexterm></indexcommand>
<para>Enable unroll and jam for the ISL based loop nest optimizer.  The unroll 
factor can be changed using the <option>loop-unroll-jam-size</option> parameter.
The unrolled dimension (counting from the most inner one) can be changed 
using the <option>loop-unroll-jam-depth</option> parameter.                 .
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-floop-parallelize-all</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="885" incode="1">floop-parallelize-all</indexterm></indexcommand>
<para>Use the Graphite data dependence analysis to identify loops that can
be parallelized.  Parallelize all the loops that can be analyzed to
not contain loop carried dependences without checking that it is
profitable to parallelize the loops.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcheck-data-deps</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="886" incode="1">fcheck-data-deps</indexterm></indexcommand>
<para>Compare the results of several data dependence analyzers.  This option
is used for debugging the data dependence analyzers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-loop-if-convert</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="887" incode="1">ftree-loop-if-convert</indexterm></indexcommand>
<para>Attempt to transform conditional jumps in the innermost loops to
branch-less equivalents.  The intent is to remove control-flow from
the innermost loops in order to improve the ability of the
vectorization pass to handle these loops.  This is enabled by default
if vectorization is enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-loop-if-convert-stores</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="888" incode="1">ftree-loop-if-convert-stores</indexterm></indexcommand>
<para>Attempt to also if-convert conditional jumps containing memory writes.
This transformation can be unsafe for multi-threaded programs as it
transforms conditional memory writes into unconditional memory writes.
For example,
</para><smallexample endspaces=" ">
<pre xml:space="preserve">for (i = 0; i &lt; N; i++)
  if (cond)
    A[i] = expr;
</pre></smallexample>
<para>is transformed to
</para><smallexample endspaces=" ">
<pre xml:space="preserve">for (i = 0; i &lt; N; i++)
  A[i] = cond ? expr : A[i];
</pre></smallexample>
<para>potentially producing data races.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-loop-distribution</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="889" incode="1">ftree-loop-distribution</indexterm></indexcommand>
<para>Perform loop distribution.  This flag can improve cache performance on
big loop bodies and allow further loop optimizations, like
parallelization or vectorization, to take place.  For example, the loop
</para><smallexample endspaces=" ">
<pre xml:space="preserve">DO I = 1, N
  A(I) = B(I) + C
  D(I) = E(I) * F
ENDDO
</pre></smallexample>
<para>is transformed to
</para><smallexample endspaces=" ">
<pre xml:space="preserve">DO I = 1, N
   A(I) = B(I) + C
ENDDO
DO I = 1, N
   D(I) = E(I) * F
ENDDO
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-loop-distribute-patterns</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="890" incode="1">ftree-loop-distribute-patterns</indexterm></indexcommand>
<para>Perform loop distribution of patterns that can be code generated with
calls to a library.  This flag is enabled by default at <option>-O3</option>.
</para>
<para>This pass distributes the initialization loops and generates a call to
memset zero.  For example, the loop
</para><smallexample endspaces=" ">
<pre xml:space="preserve">DO I = 1, N
  A(I) = 0
  B(I) = A(I) + I
ENDDO
</pre></smallexample>
<para>is transformed to
</para><smallexample endspaces=" ">
<pre xml:space="preserve">DO I = 1, N
   A(I) = 0
ENDDO
DO I = 1, N
   B(I) = A(I) + I
ENDDO
</pre></smallexample>
<para>and the initialization loop is transformed into a call to memset zero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-loop-im</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="891" incode="1">ftree-loop-im</indexterm></indexcommand>
<para>Perform loop invariant motion on trees.  This pass moves only invariants that
are hard to handle at RTL level (function calls, operations that expand to
nontrivial sequences of insns).  With <option>-funswitch-loops</option> it also moves
operands of conditions that are invariant out of the loop, so that we can use
just trivial invariantness analysis in loop unswitching.  The pass also includes
store motion.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-loop-ivcanon</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="892" incode="1">ftree-loop-ivcanon</indexterm></indexcommand>
<para>Create a canonical counter for number of iterations in loops for which
determining number of iterations requires complicated analysis.  Later
optimizations then may determine the number easily.  Useful especially
in connection with unrolling.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fivopts</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="893" incode="1">fivopts</indexterm></indexcommand>
<para>Perform induction variable optimizations (strength reduction, induction
variable merging and induction variable elimination) on trees.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-parallelize-loops=n</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="894" incode="1">ftree-parallelize-loops</indexterm></indexcommand>
<para>Parallelize loops, i.e., split their iteration space to run in n threads.
This is only possible for loops whose iterations are independent
and can be arbitrarily reordered.  The optimization is only
profitable on multiprocessor machines, for loops that are CPU-intensive,
rather than constrained e.g.&noeos; by memory bandwidth.  This option
implies <option>-pthread</option>, and thus is only supported on targets
that have support for <option>-pthread</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-pta</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="895" incode="1">ftree-pta</indexterm></indexcommand>
<para>Perform function-local points-to analysis on trees.  This flag is
enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-sra</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="896" incode="1">ftree-sra</indexterm></indexcommand>
<para>Perform scalar replacement of aggregates.  This pass replaces structure
references with scalars to prevent committing structures to memory too
early.  This flag is enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-copyrename</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="897" incode="1">ftree-copyrename</indexterm></indexcommand>
<para>Perform copy renaming on trees.  This pass attempts to rename compiler
temporaries to other variables at copy locations, usually resulting in
variable names which more closely resemble the original variables.  This flag
is enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-coalesce-inlined-vars</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="898" incode="1">ftree-coalesce-inlined-vars</indexterm></indexcommand>
<para>Tell the copyrename pass (see <option>-ftree-copyrename</option>) to attempt to
combine small user-defined variables too, but only if they are inlined
from other functions.  It is a more limited form of
<option>-ftree-coalesce-vars</option>.  This may harm debug information of such
inlined variables, but it keeps variables of the inlined-into
function apart from each other, such that they are more likely to
contain the expected values in a debugging session.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-coalesce-vars</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="899" incode="1">ftree-coalesce-vars</indexterm></indexcommand>
<para>Tell the copyrename pass (see <option>-ftree-copyrename</option>) to attempt to
combine small user-defined variables too, instead of just compiler
temporaries.  This may severely limit the ability to debug an optimized
program compiled with <option>-fno-var-tracking-assignments</option>.  In the
negated form, this flag prevents SSA coalescing of user variables,
including inlined ones.  This option is enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-ter</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="900" incode="1">ftree-ter</indexterm></indexcommand>
<para>Perform temporary expression replacement during the SSA-&gt;normal phase.  Single
use/single def temporaries are replaced at their use location with their
defining expression.  This results in non-GIMPLE code, but gives the expanders
much more complex trees to work on resulting in better RTL generation.  This is
enabled by default at <option>-O</option> and higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-slsr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="901" incode="1">ftree-slsr</indexterm></indexcommand>
<para>Perform straight-line strength reduction on trees.  This recognizes related
expressions involving multiplications and replaces them by less expensive
calculations when possible.  This is enabled by default at <option>-O</option> and
higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-vectorize</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="902" incode="1">ftree-vectorize</indexterm></indexcommand>
<para>Perform vectorization on trees. This flag enables <option>-ftree-loop-vectorize</option>
and <option>-ftree-slp-vectorize</option> if not explicitly specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-loop-vectorize</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="903" incode="1">ftree-loop-vectorize</indexterm></indexcommand>
<para>Perform loop vectorization on trees. This flag is enabled by default at
<option>-O3</option> and when <option>-ftree-vectorize</option> is enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-slp-vectorize</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="904" incode="1">ftree-slp-vectorize</indexterm></indexcommand>
<para>Perform basic block vectorization on trees. This flag is enabled by default at
<option>-O3</option> and when <option>-ftree-vectorize</option> is enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fvect-cost-model=<var>model</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="905" incode="1">fvect-cost-model</indexterm></indexcommand>
<para>Alter the cost model used for vectorization.  The <var>model</var> argument
should be one of <samp>unlimited</samp>, <samp>dynamic</samp> or <samp>cheap</samp>.
With the <samp>unlimited</samp> model the vectorized code-path is assumed
to be profitable while with the <samp>dynamic</samp> model a runtime check
guards the vectorized code-path to enable it only for iteration
counts that will likely execute faster than when executing the original
scalar loop.  The <samp>cheap</samp> model disables vectorization of
loops where doing so would be cost prohibitive for example due to
required runtime checks for data dependence or alignment but otherwise
is equal to the <samp>dynamic</samp> model.
The default cost model depends on other optimization flags and is
either <samp>dynamic</samp> or <samp>cheap</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsimd-cost-model=<var>model</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="906" incode="1">fsimd-cost-model</indexterm></indexcommand>
<para>Alter the cost model used for vectorization of loops marked with the OpenMP
or Cilk Plus simd directive.  The <var>model</var> argument should be one of
<samp>unlimited</samp>, <samp>dynamic</samp>, <samp>cheap</samp>.  All values of <var>model</var>
have the same meaning as described in <option>-fvect-cost-model</option> and by
default a cost model defined with <option>-fvect-cost-model</option> is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftree-vrp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="907" incode="1">ftree-vrp</indexterm></indexcommand>
<para>Perform Value Range Propagation on trees.  This is similar to the
constant propagation pass, but instead of values, ranges of values are
propagated.  This allows the optimizers to remove unnecessary range
checks like array bound checks and null pointer checks.  This is
enabled by default at <option>-O2</option> and higher.  Null pointer check
elimination is only done if <option>-fdelete-null-pointer-checks</option> is
enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsplit-ivs-in-unroller</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="908" incode="1">fsplit-ivs-in-unroller</indexterm></indexcommand>
<para>Enables expression of values of induction variables in later iterations
of the unrolled loop using the value in the first iteration.  This breaks
long dependency chains, thus improving efficiency of the scheduling passes.
</para>
<para>A combination of <option>-fweb</option> and CSE is often sufficient to obtain the
same effect.  However, that is not reliable in cases where the loop body
is more complicated than a single basic block.  It also does not work at all
on some architectures due to restrictions in the CSE pass.
</para>
<para>This optimization is enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fvariable-expansion-in-unroller</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="909" incode="1">fvariable-expansion-in-unroller</indexterm></indexcommand>
<para>With this option, the compiler creates multiple copies of some
local variables when unrolling a loop, which can result in superior code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpartial-inlining</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="910" incode="1">fpartial-inlining</indexterm></indexcommand>
<para>Inline parts of functions.  This option has any effect only
when inlining itself is turned on by the <option>-finline-functions</option>
or <option>-finline-small-functions</option> options.
</para>
<para>Enabled at level <option>-O2</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpredictive-commoning</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="911" incode="1">fpredictive-commoning</indexterm></indexcommand>
<para>Perform predictive commoning optimization, i.e., reusing computations
(especially memory loads and stores) performed in previous
iterations of loops.
</para>
<para>This option is enabled at level <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fprefetch-loop-arrays</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="912" incode="1">fprefetch-loop-arrays</indexterm></indexcommand>
<para>If supported by the target machine, generate instructions to prefetch
memory to improve the performance of loops that access large arrays.
</para>
<para>This option may generate better or worse code; results are highly
dependent on the structure of loops within the source code.
</para>
<para>Disabled at level <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-peephole</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fno-peephole2</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="913" incode="1">fno-peephole</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="914" incode="1">fno-peephole2</indexterm></indexcommand>
<para>Disable any machine-specific peephole optimizations.  The difference
between <option>-fno-peephole</option> and <option>-fno-peephole2</option> is in how they
are implemented in the compiler; some targets use one, some use the
other, a few use both.
</para>
<para><option>-fpeephole</option> is enabled by default.
<option>-fpeephole2</option> enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-guess-branch-probability</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="915" incode="1">fno-guess-branch-probability</indexterm></indexcommand>
<para>Do not guess branch probabilities using heuristics.
</para>
<para>GCC uses heuristics to guess branch probabilities if they are
not provided by profiling feedback (<option>-fprofile-arcs</option>).  These
heuristics are based on the control flow graph.  If some branch probabilities
are specified by <code>__builtin_expect</code>, then the heuristics are
used to guess branch probabilities for the rest of the control flow graph,
taking the <code>__builtin_expect</code> info into account.  The interactions
between the heuristics and <code>__builtin_expect</code> can be complex, and in
some cases, it may be useful to disable the heuristics so that the effects
of <code>__builtin_expect</code> are easier to understand.
</para>
<para>The default is <option>-fguess-branch-probability</option> at levels
<option>-O</option>, <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-freorder-blocks</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="916" incode="1">freorder-blocks</indexterm></indexcommand>
<para>Reorder basic blocks in the compiled function in order to reduce number of
taken branches and improve code locality.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-freorder-blocks-and-partition</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="917" incode="1">freorder-blocks-and-partition</indexterm></indexcommand>
<para>In addition to reordering basic blocks in the compiled function, in order
to reduce number of taken branches, partitions hot and cold basic blocks
into separate sections of the assembly and .o files, to improve
paging and cache locality performance.
</para>
<para>This optimization is automatically turned off in the presence of
exception handling, for linkonce sections, for functions with a user-defined
section attribute and on any architecture that does not support named
sections.
</para>
<para>Enabled for x86 at levels <option>-O2</option>, <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-freorder-functions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="918" incode="1">freorder-functions</indexterm></indexcommand>
<para>Reorder functions in the object file in order to
improve code locality.  This is implemented by using special
subsections <code>.text.hot</code> for most frequently executed functions and
<code>.text.unlikely</code> for unlikely executed functions.  Reordering is done by
the linker so object file format must support named sections and linker must
place them in a reasonable way.
</para>
<para>Also profile feedback must be available to make this option effective.  See
<option>-fprofile-arcs</option> for details.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstrict-aliasing</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="919" incode="1">fstrict-aliasing</indexterm></indexcommand>
<para>Allow the compiler to assume the strictest aliasing rules applicable to
the language being compiled.  For C (and C++), this activates
optimizations based on the type of expressions.  In particular, an
object of one type is assumed never to reside at the same address as an
object of a different type, unless the types are almost the same.  For
example, an <code>unsigned int</code> can alias an <code>int</code>, but not a
<code>void*</code> or a <code>double</code>.  A character type may alias any other
type.
</para>
<anchor name="Type_002dpunning">Type-punning</anchor><para>Pay special attention to code like this:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">union a_union &lbrace;
  int i;
  double d;
&rbrace;;

int f() &lbrace;
  union a_union t;
  t.d = 3.0;
  return t.i;
&rbrace;
</pre></smallexample>
<para>The practice of reading from a different union member than the one most
recently written to (called &textldquo;type-punning&textrdquo;) is common.  Even with
<option>-fstrict-aliasing</option>, type-punning is allowed, provided the memory
is accessed through the union type.  So, the code above works as
expected.  <xref label="Structures-unions-enumerations-and-bit_002dfields-implementation"><xrefnodename>Structures unions enumerations and bit-fields
implementation</xrefnodename></xref>.  However, this code might not:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">int f() &lbrace;
  union a_union t;
  int* ip;
  t.d = 3.0;
  ip = &amp;t.i;
  return *ip;
&rbrace;
</pre></smallexample>

<para>Similarly, access by taking the address, casting the resulting pointer
and dereferencing the result has undefined behavior, even if the cast
uses a union type, e.g.:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">int f() &lbrace;
  double d = 3.0;
  return ((union a_union *) &amp;d)-&gt;i;
&rbrace;
</pre></smallexample>

<para>The <option>-fstrict-aliasing</option> option is enabled at levels
<option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstrict-overflow</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="920" incode="1">fstrict-overflow</indexterm></indexcommand>
<para>Allow the compiler to assume strict signed overflow rules, depending
on the language being compiled.  For C (and C++) this means that
overflow when doing arithmetic with signed numbers is undefined, which
means that the compiler may assume that it does not happen.  This
permits various optimizations.  For example, the compiler assumes
that an expression like <code>i + 10 &gt; i</code> is always true for
signed <code>i</code>.  This assumption is only valid if signed overflow is
undefined, as the expression is false if <code>i + 10</code> overflows when
using twos complement arithmetic.  When this option is in effect any
attempt to determine whether an operation on signed numbers 
overflows must be written carefully to not actually involve overflow.
</para>
<para>This option also allows the compiler to assume strict pointer
semantics: given a pointer to an object, if adding an offset to that
pointer does not produce a pointer to the same object, the addition is
undefined.  This permits the compiler to conclude that <code>p + u &gt;
p</code> is always true for a pointer <code>p</code> and unsigned integer
<code>u</code>.  This assumption is only valid because pointer wraparound is
undefined, as the expression is false if <code>p + u</code> overflows using
twos complement arithmetic.
</para>
<para>See also the <option>-fwrapv</option> option.  Using <option>-fwrapv</option> means
that integer signed overflow is fully defined: it wraps.  When
<option>-fwrapv</option> is used, there is no difference between
<option>-fstrict-overflow</option> and <option>-fno-strict-overflow</option> for
integers.  With <option>-fwrapv</option> certain types of overflow are
permitted.  For example, if the compiler gets an overflow when doing
arithmetic on constants, the overflowed value can still be used with
<option>-fwrapv</option>, but not otherwise.
</para>
<para>The <option>-fstrict-overflow</option> option is enabled at levels
<option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-falign-functions</itemformat></item>
<itemx spaces=" "><itemformat command="code">-falign-functions=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="921" incode="1">falign-functions</indexterm></indexcommand>
<para>Align the start of functions to the next power-of-two greater than
<var>n</var>, skipping up to <var>n</var> bytes.  For instance,
<option>-falign-functions=32</option> aligns functions to the next 32-byte
boundary, but <option>-falign-functions=24</option> aligns to the next
32-byte boundary only if this can be done by skipping 23 bytes or less.
</para>
<para><option>-fno-align-functions</option> and <option>-falign-functions=1</option> are
equivalent and mean that functions are not aligned.
</para>
<para>Some assemblers only support this flag when <var>n</var> is a power of two;
in that case, it is rounded up.
</para>
<para>If <var>n</var> is not specified or is zero, use a machine-dependent default.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-falign-labels</itemformat></item>
<itemx spaces=" "><itemformat command="code">-falign-labels=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="922" incode="1">falign-labels</indexterm></indexcommand>
<para>Align all branch targets to a power-of-two boundary, skipping up to
<var>n</var> bytes like <option>-falign-functions</option>.  This option can easily
make code slower, because it must insert dummy operations for when the
branch target is reached in the usual flow of the code.
</para>
<para><option>-fno-align-labels</option> and <option>-falign-labels=1</option> are
equivalent and mean that labels are not aligned.
</para>
<para>If <option>-falign-loops</option> or <option>-falign-jumps</option> are applicable and
are greater than this value, then their values are used instead.
</para>
<para>If <var>n</var> is not specified or is zero, use a machine-dependent default
which is very likely to be <samp>1</samp>, meaning no alignment.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-falign-loops</itemformat></item>
<itemx spaces=" "><itemformat command="code">-falign-loops=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="923" incode="1">falign-loops</indexterm></indexcommand>
<para>Align loops to a power-of-two boundary, skipping up to <var>n</var> bytes
like <option>-falign-functions</option>.  If the loops are
executed many times, this makes up for any execution of the dummy
operations.
</para>
<para><option>-fno-align-loops</option> and <option>-falign-loops=1</option> are
equivalent and mean that loops are not aligned.
</para>
<para>If <var>n</var> is not specified or is zero, use a machine-dependent default.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-falign-jumps</itemformat></item>
<itemx spaces=" "><itemformat command="code">-falign-jumps=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="924" incode="1">falign-jumps</indexterm></indexcommand>
<para>Align branch targets to a power-of-two boundary, for branch targets
where the targets can only be reached by jumping, skipping up to <var>n</var>
bytes like <option>-falign-functions</option>.  In this case, no dummy operations
need be executed.
</para>
<para><option>-fno-align-jumps</option> and <option>-falign-jumps=1</option> are
equivalent and mean that loops are not aligned.
</para>
<para>If <var>n</var> is not specified or is zero, use a machine-dependent default.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-funit-at-a-time</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="925" incode="1">funit-at-a-time</indexterm></indexcommand>
<para>This option is left for compatibility reasons. <option>-funit-at-a-time</option>
has no effect, while <option>-fno-unit-at-a-time</option> implies
<option>-fno-toplevel-reorder</option> and <option>-fno-section-anchors</option>.
</para>
<para>Enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-toplevel-reorder</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="926" incode="1">fno-toplevel-reorder</indexterm></indexcommand>
<para>Do not reorder top-level functions, variables, and <code>asm</code>
statements.  Output them in the same order that they appear in the
input file.  When this option is used, unreferenced static variables
are not removed.  This option is intended to support existing code
that relies on a particular ordering.  For new code, it is better to
use attributes when possible.
</para>
<para>Enabled at level <option>-O0</option>.  When disabled explicitly, it also implies
<option>-fno-section-anchors</option>, which is otherwise enabled at <option>-O0</option> on some
targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fweb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="927" incode="1">fweb</indexterm></indexcommand>
<para>Constructs webs as commonly used for register allocation purposes and assign
each web individual pseudo register.  This allows the register allocation pass
to operate on pseudos directly, but also strengthens several other optimization
passes, such as CSE, loop optimizer and trivial dead code remover.  It can,
however, make debugging impossible, since variables no longer stay in a
&textldquo;home register&textrdquo;.
</para>
<para>Enabled by default with <option>-funroll-loops</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fwhole-program</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="928" incode="1">fwhole-program</indexterm></indexcommand>
<para>Assume that the current compilation unit represents the whole program being
compiled.  All public functions and variables with the exception of <code>main</code>
and those merged by attribute <code>externally_visible</code> become static functions
and in effect are optimized more aggressively by interprocedural optimizers.
</para>
<para>This option should not be used in combination with <option>-flto</option>.
Instead relying on a linker plugin should provide safer and more precise
information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-flto[=<var>n</var>]</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="929" incode="1">flto</indexterm></indexcommand>
<para>This option runs the standard link-time optimizer.  When invoked
with source code, it generates GIMPLE (one of GCC&textrsquo;s internal
representations) and writes it to special ELF sections in the object
file.  When the object files are linked together, all the function
bodies are read from these ELF sections and instantiated as if they
had been part of the same translation unit.
</para>
<para>To use the link-time optimizer, <option>-flto</option> and optimization
options should be specified at compile time and during the final link.
For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -c -O2 -flto foo.c
gcc -c -O2 -flto bar.c
gcc -o myprog -flto -O2 foo.o bar.o
</pre></smallexample>

<para>The first two invocations to GCC save a bytecode representation
of GIMPLE into special ELF sections inside <file>foo.o</file> and
<file>bar.o</file>.  The final invocation reads the GIMPLE bytecode from
<file>foo.o</file> and <file>bar.o</file>, merges the two files into a single
internal image, and compiles the result as usual.  Since both
<file>foo.o</file> and <file>bar.o</file> are merged into a single image, this
causes all the interprocedural analyses and optimizations in GCC to
work across the two files as if they were a single one.  This means,
for example, that the inliner is able to inline functions in
<file>bar.o</file> into functions in <file>foo.o</file> and vice-versa.
</para>
<para>Another (simpler) way to enable link-time optimization is:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -o myprog -flto -O2 foo.c bar.c
</pre></smallexample>

<para>The above generates bytecode for <file>foo.c</file> and <file>bar.c</file>,
merges them together into a single GIMPLE representation and optimizes
them as usual to produce <file>myprog</file>.
</para>
<para>The only important thing to keep in mind is that to enable link-time
optimizations you need to use the GCC driver to perform the link-step.
GCC then automatically performs link-time optimization if any of the
objects involved were compiled with the <option>-flto</option> command-line option.  
You generally
should specify the optimization options to be used for link-time
optimization though GCC tries to be clever at guessing an
optimization level to use from the options used at compile-time
if you fail to specify one at link-time.  You can always override
the automatic decision to do link-time optimization at link-time
by passing <option>-fno-lto</option> to the link command.
</para>
<para>To make whole program optimization effective, it is necessary to make
certain whole program assumptions.  The compiler needs to know
what functions and variables can be accessed by libraries and runtime
outside of the link-time optimized unit.  When supported by the linker,
the linker plugin (see <option>-fuse-linker-plugin</option>) passes information
to the compiler about used and externally visible symbols.  When
the linker plugin is not available, <option>-fwhole-program</option> should be
used to allow the compiler to make these assumptions, which leads
to more aggressive optimization decisions.
</para>
<para>When <option>-fuse-linker-plugin</option> is not enabled then, when a file is
compiled with <option>-flto</option>, the generated object file is larger than
a regular object file because it contains GIMPLE bytecodes and the usual
final code (see <option>-ffat-lto-objects</option>.  This means that
object files with LTO information can be linked as normal object
files; if <option>-fno-lto</option> is passed to the linker, no
interprocedural optimizations are applied.  Note that when
<option>-fno-fat-lto-objects</option> is enabled the compile-stage is faster
but you cannot perform a regular, non-LTO link on them.
</para>
<para>Additionally, the optimization flags used to compile individual files
are not necessarily related to those used at link time.  For instance,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -c -O0 -ffat-lto-objects -flto foo.c
gcc -c -O0 -ffat-lto-objects -flto bar.c
gcc -o myprog -O3 foo.o bar.o
</pre></smallexample>

<para>This produces individual object files with unoptimized assembler
code, but the resulting binary <file>myprog</file> is optimized at
<option>-O3</option>.  If, instead, the final binary is generated with
<option>-fno-lto</option>, then <file>myprog</file> is not optimized.
</para>
<para>When producing the final binary, GCC only
applies link-time optimizations to those files that contain bytecode.
Therefore, you can mix and match object files and libraries with
GIMPLE bytecodes and final object code.  GCC automatically selects
which files to optimize in LTO mode and which files to link without
further processing.
</para>
<para>There are some code generation flags preserved by GCC when
generating bytecodes, as they need to be used during the final link
stage.  Generally options specified at link-time override those
specified at compile-time.
</para>
<para>If you do not specify an optimization level option <option>-O</option> at
link-time then GCC computes one based on the optimization levels
used when compiling the object files.  The highest optimization
level wins here.
</para>
<para>Currently, the following options and their setting are take from
the first object file that explicitely specified it: 
<option>-fPIC</option>, <option>-fpic</option>, <option>-fpie</option>, <option>-fcommon</option>,
<option>-fexceptions</option>, <option>-fnon-call-exceptions</option>, <option>-fgnu-tm</option>
and all the <option>-m</option> target flags.
</para>
<para>Certain ABI changing flags are required to match in all compilation-units
and trying to override this at link-time with a conflicting value
is ignored.  This includes options such as <option>-freg-struct-return</option>
and <option>-fpcc-struct-return</option>. 
</para>
<para>Other options such as <option>-ffp-contract</option>, <option>-fno-strict-overflow</option>,
<option>-fwrapv</option>, <option>-fno-trapv</option> or <option>-fno-strict-aliasing</option>
are passed through to the link stage and merged conservatively for
conflicting translation units.  Specifically
<option>-fno-strict-overflow</option>, <option>-fwrapv</option> and <option>-fno-trapv</option> take
precedence and for example <option>-ffp-contract=off</option> takes precedence
over <option>-ffp-contract=fast</option>.  You can override them at linke-time.
</para>
<para>It is recommended that you compile all the files participating in the
same link with the same options and also specify those options at
link time.
</para>
<para>If LTO encounters objects with C linkage declared with incompatible
types in separate translation units to be linked together (undefined
behavior according to ISO C99 6.2.7), a non-fatal diagnostic may be
issued.  The behavior is still undefined at run time.  Similar
diagnostics may be raised for other languages.
</para>
<para>Another feature of LTO is that it is possible to apply interprocedural
optimizations on files written in different languages:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -c -flto foo.c
g++ -c -flto bar.cc
gfortran -c -flto baz.f90
g++ -o myprog -flto -O3 foo.o bar.o baz.o -lgfortran
</pre></smallexample>

<para>Notice that the final link is done with <command>g++</command> to get the C++
runtime libraries and <option>-lgfortran</option> is added to get the Fortran
runtime libraries.  In general, when mixing languages in LTO mode, you
should use the same link command options as when mixing languages in a
regular (non-LTO) compilation.
</para>
<para>If object files containing GIMPLE bytecode are stored in a library archive, say
<file>libfoo.a</file>, it is possible to extract and use them in an LTO link if you
are using a linker with plugin support.  To create static libraries suitable
for LTO, use <command>gcc-ar</command> and <command>gcc-ranlib</command> instead of <command>ar</command>
and <command>ranlib</command>; 
to show the symbols of object files with GIMPLE bytecode, use
<command>gcc-nm</command>.  Those commands require that <command>ar</command>, <command>ranlib</command>
and <command>nm</command> have been compiled with plugin support.  At link time, use the the
flag <option>-fuse-linker-plugin</option> to ensure that the library participates in
the LTO optimization process:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">gcc -o myprog -O2 -flto -fuse-linker-plugin a.o b.o -lfoo
</pre></smallexample>

<para>With the linker plugin enabled, the linker extracts the needed
GIMPLE files from <file>libfoo.a</file> and passes them on to the running GCC
to make them part of the aggregated GIMPLE image to be optimized.
</para>
<para>If you are not using a linker with plugin support and/or do not
enable the linker plugin, then the objects inside <file>libfoo.a</file>
are extracted and linked as usual, but they do not participate
in the LTO optimization process.  In order to make a static library suitable
for both LTO optimization and usual linkage, compile its object files with
<option>-flto</option> <option>-ffat-lto-objects</option>.
</para>
<para>Link-time optimizations do not require the presence of the whole program to
operate.  If the program does not require any symbols to be exported, it is
possible to combine <option>-flto</option> and <option>-fwhole-program</option> to allow
the interprocedural optimizers to use more aggressive assumptions which may
lead to improved optimization opportunities.
Use of <option>-fwhole-program</option> is not needed when linker plugin is
active (see <option>-fuse-linker-plugin</option>).
</para>
<para>The current implementation of LTO makes no
attempt to generate bytecode that is portable between different
types of hosts.  The bytecode files are versioned and there is a
strict version check, so bytecode files generated in one version of
GCC do not work with an older or newer version of GCC.
</para>
<para>Link-time optimization does not work well with generation of debugging
information.  Combining <option>-flto</option> with
<option>-g</option> is currently experimental and expected to produce unexpected
results.
</para>
<para>If you specify the optional <var>n</var>, the optimization and code
generation done at link time is executed in parallel using <var>n</var>
parallel jobs by utilizing an installed <command>make</command> program.  The
environment variable <env>MAKE</env> may be used to override the program
used.  The default value for <var>n</var> is 1.
</para>
<para>You can also specify <option>-flto=jobserver</option> to use GNU make&textrsquo;s
job server mode to determine the number of parallel jobs. This
is useful when the Makefile calling GCC is already executing in parallel.
You must prepend a <samp>+</samp> to the command recipe in the parent Makefile
for this to work.  This option likely only works if <env>MAKE</env> is
GNU make.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-flto-partition=<var>alg</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="930" incode="1">flto-partition</indexterm></indexcommand>
<para>Specify the partitioning algorithm used by the link-time optimizer.
The value is either <samp>1to1</samp> to specify a partitioning mirroring
the original source files or <samp>balanced</samp> to specify partitioning
into equally sized chunks (whenever possible) or <samp>max</samp> to create
new partition for every symbol where possible.  Specifying <samp>none</samp>
as an algorithm disables partitioning and streaming completely. 
The default value is <samp>balanced</samp>. While <samp>1to1</samp> can be used
as an workaround for various code ordering issues, the <samp>max</samp>
partitioning is intended for internal testing only.
The value <samp>one</samp> specifies that exactly one partition should be
used while the value <samp>none</samp> bypasses partitioning and executes
the link-time optimization step directly from the WPA phase.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-flto-odr-type-merging</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="931" incode="1">flto-odr-type-merging</indexterm></indexcommand>
<para>Enable streaming of mangled types names of C++ types and their unification
at linktime.  This increases size of LTO object files, but enable
diagnostics about One Definition Rule violations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-flto-compression-level=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="932" incode="1">flto-compression-level</indexterm></indexcommand>
<para>This option specifies the level of compression used for intermediate
language written to LTO object files, and is only meaningful in
conjunction with LTO mode (<option>-flto</option>).  Valid
values are 0 (no compression) to 9 (maximum compression).  Values
outside this range are clamped to either 0 or 9.  If the option is not
given, a default balanced compression setting is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-flto-report</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="933" incode="1">flto-report</indexterm></indexcommand>
<para>Prints a report with internal details on the workings of the link-time
optimizer.  The contents of this report vary from version to version.
It is meant to be useful to GCC developers when processing object
files in LTO mode (via <option>-flto</option>).
</para>
<para>Disabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-flto-report-wpa</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="934" incode="1">flto-report-wpa</indexterm></indexcommand>
<para>Like <option>-flto-report</option>, but only print for the WPA phase of Link
Time Optimization.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fuse-linker-plugin</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="935" incode="1">fuse-linker-plugin</indexterm></indexcommand>
<para>Enables the use of a linker plugin during link-time optimization.  This
option relies on plugin support in the linker, which is available in gold
or in GNU ld 2.21 or newer.
</para>
<para>This option enables the extraction of object files with GIMPLE bytecode out
of library archives. This improves the quality of optimization by exposing
more code to the link-time optimizer.  This information specifies what
symbols can be accessed externally (by non-LTO object or during dynamic
linking).  Resulting code quality improvements on binaries (and shared
libraries that use hidden visibility) are similar to <option>-fwhole-program</option>.
See <option>-flto</option> for a description of the effect of this flag and how to
use it.
</para>
<para>This option is enabled by default when LTO support in GCC is enabled
and GCC was configured for use with
a linker supporting plugins (GNU ld 2.21 or newer or gold).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ffat-lto-objects</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="936" incode="1">ffat-lto-objects</indexterm></indexcommand>
<para>Fat LTO objects are object files that contain both the intermediate language
and the object code. This makes them usable for both LTO linking and normal
linking. This option is effective only when compiling with <option>-flto</option>
and is ignored at link time.
</para>
<para><option>-fno-fat-lto-objects</option> improves compilation time over plain LTO, but
requires the complete toolchain to be aware of LTO. It requires a linker with
linker plugin support for basic functionality.  Additionally,
<command>nm</command>, <command>ar</command> and <command>ranlib</command>
need to support linker plugins to allow a full-featured build environment
(capable of building static libraries etc).  GCC provides the <command>gcc-ar</command>,
<command>gcc-nm</command>, <command>gcc-ranlib</command> wrappers to pass the right options
to these tools. With non fat LTO makefiles need to be modified to use them.
</para>
<para>The default is <option>-fno-fat-lto-objects</option> on targets with linker plugin
support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcompare-elim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="937" incode="1">fcompare-elim</indexterm></indexcommand>
<para>After register allocation and post-register allocation instruction splitting,
identify arithmetic instructions that compute processor flags similar to a
comparison operation based on that arithmetic.  If possible, eliminate the
explicit comparison operation.
</para>
<para>This pass only applies to certain targets that cannot explicitly represent
the comparison operation before register allocation is complete.
</para>
<para>Enabled at levels <option>-O</option>, <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcprop-registers</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="938" incode="1">fcprop-registers</indexterm></indexcommand>
<para>After register allocation and post-register allocation instruction splitting,
perform a copy-propagation pass to try to reduce scheduling dependencies
and occasionally eliminate the copy.
</para>
<para>Enabled at levels <option>-O</option>, <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fprofile-correction</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="939" incode="1">fprofile-correction</indexterm></indexcommand>
<para>Profiles collected using an instrumented binary for multi-threaded programs may
be inconsistent due to missed counter updates. When this option is specified,
GCC uses heuristics to correct or smooth out such inconsistencies. By
default, GCC emits an error message when an inconsistent profile is detected.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fprofile-dir=<var>path</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="940" incode="1">fprofile-dir</indexterm></indexcommand>

<para>Set the directory to search for the profile data files in to <var>path</var>.
This option affects only the profile data generated by
<option>-fprofile-generate</option>, <option>-ftest-coverage</option>, <option>-fprofile-arcs</option>
and used by <option>-fprofile-use</option> and <option>-fbranch-probabilities</option>
and its related options.  Both absolute and relative paths can be used.
By default, GCC uses the current directory as <var>path</var>, thus the
profile data file appears in the same directory as the object file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fprofile-generate</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fprofile-generate=<var>path</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="941" incode="1">fprofile-generate</indexterm></indexcommand>

<para>Enable options usually used for instrumenting application to produce
profile useful for later recompilation with profile feedback based
optimization.  You must use <option>-fprofile-generate</option> both when
compiling and when linking your program.
</para>
<para>The following options are enabled: <option>-fprofile-arcs</option>, <option>-fprofile-values</option>, <option>-fvpt</option>.
</para>
<para>If <var>path</var> is specified, GCC looks at the <var>path</var> to find
the profile feedback data files. See <option>-fprofile-dir</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fprofile-use</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fprofile-use=<var>path</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="942" incode="1">fprofile-use</indexterm></indexcommand>
<para>Enable profile feedback-directed optimizations, 
and the following optimizations
which are generally profitable only with profile feedback available:
<option>-fbranch-probabilities</option>, <option>-fvpt</option>,
<option>-funroll-loops</option>, <option>-fpeel-loops</option>, <option>-ftracer</option>, 
<option>-ftree-vectorize</option>, and <option>ftree-loop-distribute-patterns</option>.
</para>
<para>By default, GCC emits an error message if the feedback profiles do not
match the source code.  This error can be turned into a warning by using
<option>-Wcoverage-mismatch</option>.  Note this may result in poorly optimized
code.
</para>
<para>If <var>path</var> is specified, GCC looks at the <var>path</var> to find
the profile feedback data files. See <option>-fprofile-dir</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fauto-profile</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fauto-profile=<var>path</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="943" incode="1">fauto-profile</indexterm></indexcommand>
<para>Enable sampling-based feedback-directed optimizations, 
and the following optimizations
which are generally profitable only with profile feedback available:
<option>-fbranch-probabilities</option>, <option>-fvpt</option>,
<option>-funroll-loops</option>, <option>-fpeel-loops</option>, <option>-ftracer</option>, 
<option>-ftree-vectorize</option>,
<option>-finline-functions</option>, <option>-fipa-cp</option>, <option>-fipa-cp-clone</option>,
<option>-fpredictive-commoning</option>, <option>-funswitch-loops</option>,
<option>-fgcse-after-reload</option>, and <option>-ftree-loop-distribute-patterns</option>.
</para>
<para><var>path</var> is the name of a file containing AutoFDO profile information.
If omitted, it defaults to <file>fbdata.afdo</file> in the current directory.
</para>
<para>Producing an AutoFDO profile data file requires running your program
with the <command>perf</command> utility on a supported GNU/Linux target system.
For more information, see <uref><urefurl>https://perf.wiki.kernel.org/</urefurl></uref>.
</para>
<para>E.g.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">perf record -e br_inst_retired:near_taken -b -o perf.data \
    -- your_program
</pre></smallexample>

<para>Then use the <command>create_gcov</command> tool to convert the raw profile data
to a format that can be used by GCC.<spacecmd type="spc"/> You must also supply the 
unstripped binary for your program to this tool.  
See <uref><urefurl>https://github.com/google/autofdo</urefurl></uref>.
</para>
<para>E.g.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">create_gcov --binary=your_program.unstripped --profile=perf.data \
    --gcov=profile.afdo
</pre></smallexample>
</tableitem></tableentry></table>

<para>The following options control compiler behavior regarding floating-point 
arithmetic.  These options trade off between speed and
correctness.  All must be specifically enabled.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-ffloat-store</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="944" incode="1">ffloat-store</indexterm></indexcommand>
<para>Do not store floating-point variables in registers, and inhibit other
options that might change whether a floating-point value is taken from a
register or memory.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="129">floating-point precision</indexterm></cindex>
<para>This option prevents undesirable excess precision on machines such as
the 68000 where the floating registers (of the 68881) keep more
precision than a <code>double</code> is supposed to have.  Similarly for the
x86 architecture.  For most programs, the excess precision does only
good, but a few programs rely on the precise definition of IEEE floating
point.  Use <option>-ffloat-store</option> for such programs, after modifying
them to store all pertinent intermediate computations into variables.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fexcess-precision=<var>style</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="945" incode="1">fexcess-precision</indexterm></indexcommand>
<para>This option allows further control over excess precision on machines
where floating-point registers have more precision than the IEEE
<code>float</code> and <code>double</code> types and the processor does not
support operations rounding to those types.  By default,
<option>-fexcess-precision=fast</option> is in effect; this means that
operations are carried out in the precision of the registers and that
it is unpredictable when rounding to the types specified in the source
code takes place.  When compiling C, if
<option>-fexcess-precision=standard</option> is specified then excess
precision follows the rules specified in ISO C99; in particular,
both casts and assignments cause values to be rounded to their
semantic types (whereas <option>-ffloat-store</option> only affects
assignments).  This option is enabled by default for C if a strict
conformance option such as <option>-std=c99</option> is used.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="946" incode="1">mfpmath</indexterm></indexcommand>
<para><option>-fexcess-precision=standard</option> is not implemented for languages
other than C, and has no effect if
<option>-funsafe-math-optimizations</option> or <option>-ffast-math</option> is
specified.  On the x86, it also has no effect if <option>-mfpmath=sse</option>
or <option>-mfpmath=sse+387</option> is specified; in the former case, IEEE
semantics apply without excess precision, and in the latter, rounding
is unpredictable.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ffast-math</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="947" incode="1">ffast-math</indexterm></indexcommand>
<para>Sets the options <option>-fno-math-errno</option>, <option>-funsafe-math-optimizations</option>,
<option>-ffinite-math-only</option>, <option>-fno-rounding-math</option>,
<option>-fno-signaling-nans</option> and <option>-fcx-limited-range</option>.
</para>
<para>This option causes the preprocessor macro <code>__FAST_MATH__</code> to be defined.
</para>
<para>This option is not turned on by any <option>-O</option> option besides
<option>-Ofast</option> since it can result in incorrect output for programs
that depend on an exact implementation of IEEE or ISO rules/specifications
for math functions. It may, however, yield faster code for programs
that do not require the guarantees of these specifications.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-math-errno</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="948" incode="1">fno-math-errno</indexterm></indexcommand>
<para>Do not set <code>errno</code> after calling math functions that are executed
with a single instruction, e.g., <code>sqrt</code>.  A program that relies on
IEEE exceptions for math error handling may want to use this flag
for speed while maintaining IEEE arithmetic compatibility.
</para>
<para>This option is not turned on by any <option>-O</option> option since
it can result in incorrect output for programs that depend on
an exact implementation of IEEE or ISO rules/specifications for
math functions. It may, however, yield faster code for programs
that do not require the guarantees of these specifications.
</para>
<para>The default is <option>-fmath-errno</option>.
</para>
<para>On Darwin systems, the math library never sets <code>errno</code>.  There is
therefore no reason for the compiler to consider the possibility that
it might, and <option>-fno-math-errno</option> is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-funsafe-math-optimizations</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="949" incode="1">funsafe-math-optimizations</indexterm></indexcommand>

<para>Allow optimizations for floating-point arithmetic that (a) assume
that arguments and results are valid and (b) may violate IEEE or
ANSI standards.  When used at link-time, it may include libraries
or startup files that change the default FPU control word or other
similar optimizations.
</para>
<para>This option is not turned on by any <option>-O</option> option since
it can result in incorrect output for programs that depend on
an exact implementation of IEEE or ISO rules/specifications for
math functions. It may, however, yield faster code for programs
that do not require the guarantees of these specifications.
Enables <option>-fno-signed-zeros</option>, <option>-fno-trapping-math</option>,
<option>-fassociative-math</option> and <option>-freciprocal-math</option>.
</para>
<para>The default is <option>-fno-unsafe-math-optimizations</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fassociative-math</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="950" incode="1">fassociative-math</indexterm></indexcommand>

<para>Allow re-association of operands in series of floating-point operations.
This violates the ISO C and C++ language standard by possibly changing
computation result.  NOTE: re-ordering may change the sign of zero as
well as ignore NaNs and inhibit or create underflow or overflow (and
thus cannot be used on code that relies on rounding behavior like
<code>(x + 2**52) - 2**52</code>.  May also reorder floating-point comparisons
and thus may not be used when ordered comparisons are required.
This option requires that both <option>-fno-signed-zeros</option> and
<option>-fno-trapping-math</option> be in effect.  Moreover, it doesn&textrsquo;t make
much sense with <option>-frounding-math</option>. For Fortran the option
is automatically enabled when both <option>-fno-signed-zeros</option> and
<option>-fno-trapping-math</option> are in effect.
</para>
<para>The default is <option>-fno-associative-math</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-freciprocal-math</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="951" incode="1">freciprocal-math</indexterm></indexcommand>

<para>Allow the reciprocal of a value to be used instead of dividing by
the value if this enables optimizations.  For example <code>x / y</code>
can be replaced with <code>x * (1/y)</code>, which is useful if <code>(1/y)</code>
is subject to common subexpression elimination.  Note that this loses
precision and increases the number of flops operating on the value.
</para>
<para>The default is <option>-fno-reciprocal-math</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ffinite-math-only</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="952" incode="1">ffinite-math-only</indexterm></indexcommand>
<para>Allow optimizations for floating-point arithmetic that assume
that arguments and results are not NaNs or +-Infs.
</para>
<para>This option is not turned on by any <option>-O</option> option since
it can result in incorrect output for programs that depend on
an exact implementation of IEEE or ISO rules/specifications for
math functions. It may, however, yield faster code for programs
that do not require the guarantees of these specifications.
</para>
<para>The default is <option>-fno-finite-math-only</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-signed-zeros</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="953" incode="1">fno-signed-zeros</indexterm></indexcommand>
<para>Allow optimizations for floating-point arithmetic that ignore the
signedness of zero.  IEEE arithmetic specifies the behavior of
distinct +0.0 and &minus;0.0 values, which then prohibits simplification
of expressions such as x+0.0 or 0.0*x (even with <option>-ffinite-math-only</option>).
This option implies that the sign of a zero result isn&textrsquo;t significant.
</para>
<para>The default is <option>-fsigned-zeros</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-trapping-math</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="954" incode="1">fno-trapping-math</indexterm></indexcommand>
<para>Compile code assuming that floating-point operations cannot generate
user-visible traps.  These traps include division by zero, overflow,
underflow, inexact result and invalid operation.  This option requires
that <option>-fno-signaling-nans</option> be in effect.  Setting this option may
allow faster code if one relies on &textldquo;non-stop&textrdquo; IEEE arithmetic, for example.
</para>
<para>This option should never be turned on by any <option>-O</option> option since
it can result in incorrect output for programs that depend on
an exact implementation of IEEE or ISO rules/specifications for
math functions.
</para>
<para>The default is <option>-ftrapping-math</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-frounding-math</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="955" incode="1">frounding-math</indexterm></indexcommand>
<para>Disable transformations and optimizations that assume default floating-point
rounding behavior.  This is round-to-zero for all floating point
to integer conversions, and round-to-nearest for all other arithmetic
truncations.  This option should be specified for programs that change
the FP rounding mode dynamically, or that may be executed with a
non-default rounding mode.  This option disables constant folding of
floating-point expressions at compile time (which may be affected by
rounding mode) and arithmetic transformations that are unsafe in the
presence of sign-dependent rounding modes.
</para>
<para>The default is <option>-fno-rounding-math</option>.
</para>
<para>This option is experimental and does not currently guarantee to
disable all GCC optimizations that are affected by rounding mode.
Future versions of GCC may provide finer control of this setting
using C99&textrsquo;s <code>FENV_ACCESS</code> pragma.  This command-line option
will be used to specify the default state for <code>FENV_ACCESS</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsignaling-nans</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="956" incode="1">fsignaling-nans</indexterm></indexcommand>
<para>Compile code assuming that IEEE signaling NaNs may generate user-visible
traps during floating-point operations.  Setting this option disables
optimizations that may change the number of exceptions visible with
signaling NaNs.  This option implies <option>-ftrapping-math</option>.
</para>
<para>This option causes the preprocessor macro <code>__SUPPORT_SNAN__</code> to
be defined.
</para>
<para>The default is <option>-fno-signaling-nans</option>.
</para>
<para>This option is experimental and does not currently guarantee to
disable all GCC optimizations that affect signaling NaN behavior.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsingle-precision-constant</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="957" incode="1">fsingle-precision-constant</indexterm></indexcommand>
<para>Treat floating-point constants as single precision instead of
implicitly converting them to double-precision constants.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcx-limited-range</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="958" incode="1">fcx-limited-range</indexterm></indexcommand>
<para>When enabled, this option states that a range reduction step is not
needed when performing complex division.  Also, there is no checking
whether the result of a complex multiplication or division is <code>NaN
+ I*NaN</code>, with an attempt to rescue the situation in that case.  The
default is <option>-fno-cx-limited-range</option>, but is enabled by
<option>-ffast-math</option>.
</para>
<para>This option controls the default setting of the ISO C99
<code>CX_LIMITED_RANGE</code> pragma.  Nevertheless, the option applies to
all languages.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcx-fortran-rules</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="959" incode="1">fcx-fortran-rules</indexterm></indexcommand>
<para>Complex multiplication and division follow Fortran rules.  Range
reduction is done as part of complex division, but there is no checking
whether the result of a complex multiplication or division is <code>NaN
+ I*NaN</code>, with an attempt to rescue the situation in that case.
</para>
<para>The default is <option>-fno-cx-fortran-rules</option>.
</para>
</tableitem></tableentry></table>

<para>The following options control optimizations that may improve
performance, but are not enabled by any <option>-O</option> options.  This
section includes experimental options that may produce broken code.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-fbranch-probabilities</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="960" incode="1">fbranch-probabilities</indexterm></indexcommand>
<para>After running a program compiled with <option>-fprofile-arcs</option>
(<pxref label="Debugging-Options"><xrefnodename>Debugging Options</xrefnodename><xrefprinteddesc spaces=" ">Options for Debugging Your Program or
<command>gcc</command></xrefprinteddesc></pxref>), you can compile it a second time using
<option>-fbranch-probabilities</option>, to improve optimizations based on
the number of times each branch was taken.  When a program
compiled with <option>-fprofile-arcs</option> exits, it saves arc execution
counts to a file called <file><var>sourcename</var>.gcda</file> for each source
file.  The information in this data file is very dependent on the
structure of the generated code, so you must use the same source code
and the same optimization options for both compilations.
</para>
<para>With <option>-fbranch-probabilities</option>, GCC puts a
<samp>REG_BR_PROB</samp> note on each <samp>JUMP_INSN</samp> and <samp>CALL_INSN</samp>.
These can be used to improve optimization.  Currently, they are only
used in one place: in <file>reorg.c</file>, instead of guessing which path a
branch is most likely to take, the <samp>REG_BR_PROB</samp> values are used to
exactly determine which path is taken more often.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fprofile-values</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="961" incode="1">fprofile-values</indexterm></indexcommand>
<para>If combined with <option>-fprofile-arcs</option>, it adds code so that some
data about values of expressions in the program is gathered.
</para>
<para>With <option>-fbranch-probabilities</option>, it reads back the data gathered
from profiling values of expressions for usage in optimizations.
</para>
<para>Enabled with <option>-fprofile-generate</option> and <option>-fprofile-use</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fprofile-reorder-functions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="962" incode="1">fprofile-reorder-functions</indexterm></indexcommand>
<para>Function reordering based on profile instrumentation collects
first time of execution of a function and orders these functions
in ascending order.
</para>
<para>Enabled with <option>-fprofile-use</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fvpt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="963" incode="1">fvpt</indexterm></indexcommand>
<para>If combined with <option>-fprofile-arcs</option>, this option instructs the compiler
to add code to gather information about values of expressions.
</para>
<para>With <option>-fbranch-probabilities</option>, it reads back the data gathered
and actually performs the optimizations based on them.
Currently the optimizations include specialization of division operations
using the knowledge about the value of the denominator.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-frename-registers</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="964" incode="1">frename-registers</indexterm></indexcommand>
<para>Attempt to avoid false dependencies in scheduled code by making use
of registers left over after register allocation.  This optimization
most benefits processors with lots of registers.  Depending on the
debug information format adopted by the target, however, it can
make debugging impossible, since variables no longer stay in
a &textldquo;home register&textrdquo;.
</para>
<para>Enabled by default with <option>-funroll-loops</option> and <option>-fpeel-loops</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fschedule-fusion</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="965" incode="1">fschedule-fusion</indexterm></indexcommand>
<para>Performs a target dependent pass over the instruction stream to schedule
instructions of same type together because target machine can execute them
more efficiently if they are adjacent to each other in the instruction flow.
</para>
<para>Enabled at levels <option>-O2</option>, <option>-O3</option>, <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftracer</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="966" incode="1">ftracer</indexterm></indexcommand>
<para>Perform tail duplication to enlarge superblock size.  This transformation
simplifies the control flow of the function allowing other optimizations to do
a better job.
</para>
<para>Enabled with <option>-fprofile-use</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-funroll-loops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="967" incode="1">funroll-loops</indexterm></indexcommand>
<para>Unroll loops whose number of iterations can be determined at compile time or
upon entry to the loop.  <option>-funroll-loops</option> implies
<option>-frerun-cse-after-loop</option>, <option>-fweb</option> and <option>-frename-registers</option>.
It also turns on complete loop peeling (i.e.&noeos; complete removal of loops with
a small constant number of iterations).  This option makes code larger, and may
or may not make it run faster.
</para>
<para>Enabled with <option>-fprofile-use</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-funroll-all-loops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="968" incode="1">funroll-all-loops</indexterm></indexcommand>
<para>Unroll all loops, even if their number of iterations is uncertain when
the loop is entered.  This usually makes programs run more slowly.
<option>-funroll-all-loops</option> implies the same options as
<option>-funroll-loops</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpeel-loops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="969" incode="1">fpeel-loops</indexterm></indexcommand>
<para>Peels loops for which there is enough information that they do not
roll much (from profile feedback).  It also turns on complete loop peeling
(i.e.&noeos; complete removal of loops with small constant number of iterations).
</para>
<para>Enabled with <option>-fprofile-use</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fmove-loop-invariants</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="970" incode="1">fmove-loop-invariants</indexterm></indexcommand>
<para>Enables the loop invariant motion pass in the RTL loop optimizer.  Enabled
at level <option>-O1</option>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-funswitch-loops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="971" incode="1">funswitch-loops</indexterm></indexcommand>
<para>Move branches with loop invariant conditions out of the loop, with duplicates
of the loop on both branches (modified according to result of the condition).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ffunction-sections</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fdata-sections</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="972" incode="1">ffunction-sections</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="973" incode="1">fdata-sections</indexterm></indexcommand>
<para>Place each function or data item into its own section in the output
file if the target supports arbitrary sections.  The name of the
function or the name of the data item determines the section&textrsquo;s name
in the output file.
</para>
<para>Use these options on systems where the linker can perform optimizations
to improve locality of reference in the instruction space.  Most systems
using the ELF object format and SPARC processors running Solaris 2 have
linkers with such optimizations.  AIX may have these optimizations in
the future.
</para>
<para>Only use these options when there are significant benefits from doing
so.  When you specify these options, the assembler and linker
create larger object and executable files and are also slower.
You cannot use <command>gprof</command> on all systems if you
specify this option, and you may have problems with debugging if
you specify both this option and <option>-g</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fbranch-target-load-optimize</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="974" incode="1">fbranch-target-load-optimize</indexterm></indexcommand>
<para>Perform branch target register load optimization before prologue / epilogue
threading.
The use of target registers can typically be exposed only during reload,
thus hoisting loads out of loops and doing inter-block scheduling needs
a separate optimization pass.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fbranch-target-load-optimize2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="975" incode="1">fbranch-target-load-optimize2</indexterm></indexcommand>
<para>Perform branch target register load optimization after prologue / epilogue
threading.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fbtr-bb-exclusive</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="976" incode="1">fbtr-bb-exclusive</indexterm></indexcommand>
<para>When performing branch target register load optimization, don&textrsquo;t reuse
branch target registers within any basic block.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstack-protector</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="977" incode="1">fstack-protector</indexterm></indexcommand>
<para>Emit extra code to check for buffer overflows, such as stack smashing
attacks.  This is done by adding a guard variable to functions with
vulnerable objects.  This includes functions that call <code>alloca</code>, and
functions with buffers larger than 8 bytes.  The guards are initialized
when a function is entered and then checked when the function exits.
If a guard check fails, an error message is printed and the program exits.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstack-protector-all</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="978" incode="1">fstack-protector-all</indexterm></indexcommand>
<para>Like <option>-fstack-protector</option> except that all functions are protected.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstack-protector-strong</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="979" incode="1">fstack-protector-strong</indexterm></indexcommand>
<para>Like <option>-fstack-protector</option> but includes additional functions to
be protected &textmdash; those that have local array definitions, or have
references to local frame addresses.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstack-protector-explicit</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="980" incode="1">fstack-protector-explicit</indexterm></indexcommand>
<para>Like <option>-fstack-protector</option> but only protects those functions which
have the <code>stack_protect</code> attribute
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstdarg-opt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="981" incode="1">fstdarg-opt</indexterm></indexcommand>
<para>Optimize the prologue of variadic argument functions with respect to usage of
those arguments.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsection-anchors</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="982" incode="1">fsection-anchors</indexterm></indexcommand>
<para>Try to reduce the number of symbolic address calculations by using
shared &textldquo;anchor&textrdquo; symbols to address nearby objects.  This transformation
can help to reduce the number of GOT entries and GOT accesses on some
targets.
</para>
<para>For example, the implementation of the following function <code>foo</code>:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">static int a, b, c;
int foo (void) &lbrace; return a + b + c; &rbrace;
</pre></smallexample>

<noindent></noindent>
<para>usually calculates the addresses of all three variables, but if you
compile it with <option>-fsection-anchors</option>, it accesses the variables
from a common anchor point instead.  The effect is similar to the
following pseudocode (which isn&textrsquo;t valid C):
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int foo (void)
&lbrace;
  register int *xr = &amp;x;
  return xr[&amp;a - &amp;x] + xr[&amp;b - &amp;x] + xr[&amp;c - &amp;x];
&rbrace;
</pre></smallexample>

<para>Not all targets support this option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">--param <var>name</var>=<var>value</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="983" incode="1">param</indexterm></indexcommand>
<para>In some places, GCC uses various constants to control the amount of
optimization that is done.  For example, GCC does not inline functions
that contain more than a certain number of instructions.  You can
control some of these constants on the command line using the
<option>--param</option> option.
</para>
<para>The names of specific parameters, and the meaning of the values, are
tied to the internals of the compiler, and are subject to change
without notice in future releases.
</para>
<para>In each case, the <var>value</var> is an integer.  The allowable choices for
<var>name</var> are:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">predictable-branch-outcome</itemformat></item>
</tableterm><tableitem><para>When branch is predicted to be taken with probability lower than this threshold
(in percent), then it is considered well predictable. The default is 10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-crossjump-edges</itemformat></item>
</tableterm><tableitem><para>The maximum number of incoming edges to consider for cross-jumping.
The algorithm used by <option>-fcrossjumping</option> is <math>O(N^2)</math> in
the number of edges incoming to each block.  Increasing values mean
more aggressive optimization, making the compilation time increase with
probably small improvement in executable size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">min-crossjump-insns</itemformat></item>
</tableterm><tableitem><para>The minimum number of instructions that must be matched at the end
of two blocks before cross-jumping is performed on them.  This
value is ignored in the case where all instructions in the block being
cross-jumped from are matched.  The default value is 5.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-grow-copy-bb-insns</itemformat></item>
</tableterm><tableitem><para>The maximum code size expansion factor when copying basic blocks
instead of jumping.  The expansion is relative to a jump instruction.
The default value is 8.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-goto-duplication-insns</itemformat></item>
</tableterm><tableitem><para>The maximum number of instructions to duplicate to a block that jumps
to a computed goto.  To avoid <math>O(N^2)</math> behavior in a number of
passes, GCC factors computed gotos early in the compilation process,
and unfactors them as late as possible.  Only computed jumps at the
end of a basic blocks with no more than max-goto-duplication-insns are
unfactored.  The default value is 8.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-delay-slot-insn-search</itemformat></item>
</tableterm><tableitem><para>The maximum number of instructions to consider when looking for an
instruction to fill a delay slot.  If more than this arbitrary number of
instructions are searched, the time savings from filling the delay slot
are minimal, so stop searching.  Increasing values mean more
aggressive optimization, making the compilation time increase with probably
small improvement in execution time.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-delay-slot-live-search</itemformat></item>
</tableterm><tableitem><para>When trying to fill delay slots, the maximum number of instructions to
consider when searching for a block with valid live register
information.  Increasing this arbitrarily chosen value means more
aggressive optimization, increasing the compilation time.  This parameter
should be removed when the delay slot code is rewritten to maintain the
control-flow graph.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-gcse-memory</itemformat></item>
</tableterm><tableitem><para>The approximate maximum amount of memory that can be allocated in
order to perform the global common subexpression elimination
optimization.  If more memory than specified is required, the
optimization is not done.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-gcse-insertion-ratio</itemformat></item>
</tableterm><tableitem><para>If the ratio of expression insertions to deletions is larger than this value
for any expression, then RTL PRE inserts or removes the expression and thus
leaves partially redundant computations in the instruction stream.  The default value is 20.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-pending-list-length</itemformat></item>
</tableterm><tableitem><para>The maximum number of pending dependencies scheduling allows
before flushing the current state and starting over.  Large functions
with few branches or calls can create excessively large lists which
needlessly consume memory and resources.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-modulo-backtrack-attempts</itemformat></item>
</tableterm><tableitem><para>The maximum number of backtrack attempts the scheduler should make
when modulo scheduling a loop.  Larger values can exponentially increase
compilation time.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-inline-insns-single</itemformat></item>
</tableterm><tableitem><para>Several parameters control the tree inliner used in GCC&eosperiod;
This number sets the maximum number of instructions (counted in GCC&textrsquo;s
internal representation) in a single function that the tree inliner
considers for inlining.  This only affects functions declared
inline and methods implemented in a class declaration (C++).
The default value is 400.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-inline-insns-auto</itemformat></item>
</tableterm><tableitem><para>When you use <option>-finline-functions</option> (included in <option>-O3</option>),
a lot of functions that would otherwise not be considered for inlining
by the compiler are investigated.  To those functions, a different
(more restrictive) limit compared to functions declared inline can
be applied.
The default value is 40.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">inline-min-speedup</itemformat></item>
</tableterm><tableitem><para>When estimated performance improvement of caller + callee runtime exceeds this
threshold (in precent), the function can be inlined regardless the limit on
<option>--param max-inline-insns-single</option> and <option>--param
max-inline-insns-auto</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">large-function-insns</itemformat></item>
</tableterm><tableitem><para>The limit specifying really large functions.  For functions larger than this
limit after inlining, inlining is constrained by
<option>--param large-function-growth</option>.  This parameter is useful primarily
to avoid extreme compilation time caused by non-linear algorithms used by the
back end.
The default value is 2700.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">large-function-growth</itemformat></item>
</tableterm><tableitem><para>Specifies maximal growth of large function caused by inlining in percents.
The default value is 100 which limits large function growth to 2.0 times
the original size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">large-unit-insns</itemformat></item>
</tableterm><tableitem><para>The limit specifying large translation unit.  Growth caused by inlining of
units larger than this limit is limited by <option>--param inline-unit-growth</option>.
For small units this might be too tight.
For example, consider a unit consisting of function A
that is inline and B that just calls A three times.  If B is small relative to
A, the growth of unit is 300\% and yet such inlining is very sane.  For very
large units consisting of small inlineable functions, however, the overall unit
growth limit is needed to avoid exponential explosion of code size.  Thus for
smaller units, the size is increased to <option>--param large-unit-insns</option>
before applying <option>--param inline-unit-growth</option>.  The default is 10000.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">inline-unit-growth</itemformat></item>
</tableterm><tableitem><para>Specifies maximal overall growth of the compilation unit caused by inlining.
The default value is 20 which limits unit growth to 1.2 times the original
size. Cold functions (either marked cold via an attribute or by profile
feedback) are not accounted into the unit size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ipcp-unit-growth</itemformat></item>
</tableterm><tableitem><para>Specifies maximal overall growth of the compilation unit caused by
interprocedural constant propagation.  The default value is 10 which limits
unit growth to 1.1 times the original size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">large-stack-frame</itemformat></item>
</tableterm><tableitem><para>The limit specifying large stack frames.  While inlining the algorithm is trying
to not grow past this limit too much.  The default value is 256 bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">large-stack-frame-growth</itemformat></item>
</tableterm><tableitem><para>Specifies maximal growth of large stack frames caused by inlining in percents.
The default value is 1000 which limits large stack frame growth to 11 times
the original size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-inline-insns-recursive</itemformat></item>
<itemx spaces=" "><itemformat command="code">max-inline-insns-recursive-auto</itemformat></itemx>
</tableterm><tableitem><para>Specifies the maximum number of instructions an out-of-line copy of a
self-recursive inline
function can grow into by performing recursive inlining.
</para>
<para><option>--param max-inline-insns-recursive</option> applies to functions
declared inline.
For functions not declared inline, recursive inlining
happens only when <option>-finline-functions</option> (included in <option>-O3</option>) is
enabled; <option>--param max-inline-insns-recursive-auto</option> applies instead.  The
default value is 450.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-inline-recursive-depth</itemformat></item>
<itemx spaces=" "><itemformat command="code">max-inline-recursive-depth-auto</itemformat></itemx>
</tableterm><tableitem><para>Specifies the maximum recursion depth used for recursive inlining.
</para>
<para><option>--param max-inline-recursive-depth</option> applies to functions
declared inline.  For functions not declared inline, recursive inlining
happens only when <option>-finline-functions</option> (included in <option>-O3</option>) is
enabled; <option>--param max-inline-recursive-depth-auto</option> applies instead.  The
default value is 8.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">min-inline-recursive-probability</itemformat></item>
</tableterm><tableitem><para>Recursive inlining is profitable only for function having deep recursion
in average and can hurt for function having little recursion depth by
increasing the prologue size or complexity of function body to other
optimizers.
</para>
<para>When profile feedback is available (see <option>-fprofile-generate</option>) the actual
recursion depth can be guessed from probability that function recurses via a
given call expression.  This parameter limits inlining only to call expressions
whose probability exceeds the given threshold (in percents).
The default value is 10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">early-inlining-insns</itemformat></item>
</tableterm><tableitem><para>Specify growth that the early inliner can make.  In effect it increases
the amount of inlining for code having a large abstraction penalty.
The default value is 14.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-early-inliner-iterations</itemformat></item>
</tableterm><tableitem><para>Limit of iterations of the early inliner.  This basically bounds
the number of nested indirect calls the early inliner can resolve.
Deeper chains are still handled by late inlining.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">comdat-sharing-probability</itemformat></item>
</tableterm><tableitem><para>Probability (in percent) that C++ inline function with comdat visibility
are shared across multiple compilation units.  The default value is 20.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">profile-func-internal-id</itemformat></item>
</tableterm><tableitem><para>A parameter to control whether to use function internal id in profile
database lookup. If the value is 0, the compiler uses an id that
is based on function assembler name and filename, which makes old profile
data more tolerant to source changes such as function reordering etc.
The default value is 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">min-vect-loop-bound</itemformat></item>
</tableterm><tableitem><para>The minimum number of iterations under which loops are not vectorized
when <option>-ftree-vectorize</option> is used.  The number of iterations after
vectorization needs to be greater than the value specified by this option
to allow vectorization.  The default value is 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">gcse-cost-distance-ratio</itemformat></item>
</tableterm><tableitem><para>Scaling factor in calculation of maximum distance an expression
can be moved by GCSE optimizations.  This is currently supported only in the
code hoisting pass.  The bigger the ratio, the more aggressive code hoisting
is with simple expressions, i.e., the expressions that have cost
less than <option>gcse-unrestricted-cost</option>.  Specifying 0 disables
hoisting of simple expressions.  The default value is 10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">gcse-unrestricted-cost</itemformat></item>
</tableterm><tableitem><para>Cost, roughly measured as the cost of a single typical machine
instruction, at which GCSE optimizations do not constrain
the distance an expression can travel.  This is currently
supported only in the code hoisting pass.  The lesser the cost,
the more aggressive code hoisting is.  Specifying 0 
allows all expressions to travel unrestricted distances.
The default value is 3.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-hoist-depth</itemformat></item>
</tableterm><tableitem><para>The depth of search in the dominator tree for expressions to hoist.
This is used to avoid quadratic behavior in hoisting algorithm.
The value of 0 does not limit on the search, but may slow down compilation
of huge functions.  The default value is 30.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-tail-merge-comparisons</itemformat></item>
</tableterm><tableitem><para>The maximum amount of similar bbs to compare a bb with.  This is used to
avoid quadratic behavior in tree tail merging.  The default value is 10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-tail-merge-iterations</itemformat></item>
</tableterm><tableitem><para>The maximum amount of iterations of the pass over the function.  This is used to
limit compilation time in tree tail merging.  The default value is 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-unrolled-insns</itemformat></item>
</tableterm><tableitem><para>The maximum number of instructions that a loop may have to be unrolled.
If a loop is unrolled, this parameter also determines how many times
the loop code is unrolled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-average-unrolled-insns</itemformat></item>
</tableterm><tableitem><para>The maximum number of instructions biased by probabilities of their execution
that a loop may have to be unrolled.  If a loop is unrolled,
this parameter also determines how many times the loop code is unrolled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-unroll-times</itemformat></item>
</tableterm><tableitem><para>The maximum number of unrollings of a single loop.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-peeled-insns</itemformat></item>
</tableterm><tableitem><para>The maximum number of instructions that a loop may have to be peeled.
If a loop is peeled, this parameter also determines how many times
the loop code is peeled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-peel-times</itemformat></item>
</tableterm><tableitem><para>The maximum number of peelings of a single loop.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-peel-branches</itemformat></item>
</tableterm><tableitem><para>The maximum number of branches on the hot path through the peeled sequence.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-completely-peeled-insns</itemformat></item>
</tableterm><tableitem><para>The maximum number of insns of a completely peeled loop.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-completely-peel-times</itemformat></item>
</tableterm><tableitem><para>The maximum number of iterations of a loop to be suitable for complete peeling.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-completely-peel-loop-nest-depth</itemformat></item>
</tableterm><tableitem><para>The maximum depth of a loop nest suitable for complete peeling.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-unswitch-insns</itemformat></item>
</tableterm><tableitem><para>The maximum number of insns of an unswitched loop.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-unswitch-level</itemformat></item>
</tableterm><tableitem><para>The maximum number of branches unswitched in a single loop.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">lim-expensive</itemformat></item>
</tableterm><tableitem><para>The minimum cost of an expensive expression in the loop invariant motion.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">iv-consider-all-candidates-bound</itemformat></item>
</tableterm><tableitem><para>Bound on number of candidates for induction variables, below which
all candidates are considered for each use in induction variable
optimizations.  If there are more candidates than this,
only the most relevant ones are considered to avoid quadratic time complexity.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">iv-max-considered-uses</itemformat></item>
</tableterm><tableitem><para>The induction variable optimizations give up on loops that contain more
induction variable uses.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">iv-always-prune-cand-set-bound</itemformat></item>
</tableterm><tableitem><para>If the number of candidates in the set is smaller than this value,
always try to remove unnecessary ivs from the set
when adding a new one.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">scev-max-expr-size</itemformat></item>
</tableterm><tableitem><para>Bound on size of expressions used in the scalar evolutions analyzer.
Large expressions slow the analyzer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">scev-max-expr-complexity</itemformat></item>
</tableterm><tableitem><para>Bound on the complexity of the expressions in the scalar evolutions analyzer.
Complex expressions slow the analyzer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">omega-max-vars</itemformat></item>
</tableterm><tableitem><para>The maximum number of variables in an Omega constraint system.
The default value is 128.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">omega-max-geqs</itemformat></item>
</tableterm><tableitem><para>The maximum number of inequalities in an Omega constraint system.
The default value is 256.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">omega-max-eqs</itemformat></item>
</tableterm><tableitem><para>The maximum number of equalities in an Omega constraint system.
The default value is 128.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">omega-max-wild-cards</itemformat></item>
</tableterm><tableitem><para>The maximum number of wildcard variables that the Omega solver is
able to insert.  The default value is 18.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">omega-hash-table-size</itemformat></item>
</tableterm><tableitem><para>The size of the hash table in the Omega solver.  The default value is
550.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">omega-max-keys</itemformat></item>
</tableterm><tableitem><para>The maximal number of keys used by the Omega solver.  The default
value is 500.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">omega-eliminate-redundant-constraints</itemformat></item>
</tableterm><tableitem><para>When set to 1, use expensive methods to eliminate all redundant
constraints.  The default value is 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">vect-max-version-for-alignment-checks</itemformat></item>
</tableterm><tableitem><para>The maximum number of run-time checks that can be performed when
doing loop versioning for alignment in the vectorizer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">vect-max-version-for-alias-checks</itemformat></item>
</tableterm><tableitem><para>The maximum number of run-time checks that can be performed when
doing loop versioning for alias in the vectorizer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">vect-max-peeling-for-alignment</itemformat></item>
</tableterm><tableitem><para>The maximum number of loop peels to enhance access alignment
for vectorizer. Value -1 means &textrsquo;no limit&textrsquo;.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-iterations-to-track</itemformat></item>
</tableterm><tableitem><para>The maximum number of iterations of a loop the brute-force algorithm
for analysis of the number of iterations of the loop tries to evaluate.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">hot-bb-count-ws-permille</itemformat></item>
</tableterm><tableitem><para>A basic block profile count is considered hot if it contributes to 
the given permillage (i.e. 0...1000) of the entire profiled execution.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">hot-bb-frequency-fraction</itemformat></item>
</tableterm><tableitem><para>Select fraction of the entry block frequency of executions of basic block in
function given basic block needs to have to be considered hot.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-predicted-iterations</itemformat></item>
</tableterm><tableitem><para>The maximum number of loop iterations we predict statically.  This is useful
in cases where a function contains a single loop with known bound and
another loop with unknown bound.
The known number of iterations is predicted correctly, while
the unknown number of iterations average to roughly 10.  This means that the
loop without bounds appears artificially cold relative to the other one.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">builtin-expect-probability</itemformat></item>
</tableterm><tableitem><para>Control the probability of the expression having the specified value. This
parameter takes a percentage (i.e. 0 ... 100) as input.
The default probability of 90 is obtained empirically.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">align-threshold</itemformat></item>
</tableterm><tableitem>
<para>Select fraction of the maximal frequency of executions of a basic block in
a function to align the basic block.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">align-loop-iterations</itemformat></item>
</tableterm><tableitem>
<para>A loop expected to iterate at least the selected number of iterations is
aligned.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">tracer-dynamic-coverage</itemformat></item>
<itemx spaces=" "><itemformat command="code">tracer-dynamic-coverage-feedback</itemformat></itemx>
</tableterm><tableitem>
<para>This value is used to limit superblock formation once the given percentage of
executed instructions is covered.  This limits unnecessary code size
expansion.
</para>
<para>The <option>tracer-dynamic-coverage-feedback</option> parameter
is used only when profile
feedback is available.  The real profiles (as opposed to statically estimated
ones) are much less balanced allowing the threshold to be larger value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">tracer-max-code-growth</itemformat></item>
</tableterm><tableitem><para>Stop tail duplication once code growth has reached given percentage.  This is
a rather artificial limit, as most of the duplicates are eliminated later in
cross jumping, so it may be set to much higher values than is the desired code
growth.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">tracer-min-branch-ratio</itemformat></item>
</tableterm><tableitem>
<para>Stop reverse growth when the reverse probability of best edge is less than this
threshold (in percent).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">tracer-min-branch-ratio</itemformat></item>
<itemx spaces=" "><itemformat command="code">tracer-min-branch-ratio-feedback</itemformat></itemx>
</tableterm><tableitem>
<para>Stop forward growth if the best edge has probability lower than this
threshold.
</para>
<para>Similarly to <option>tracer-dynamic-coverage</option> two values are present, one for
compilation for profile feedback and one for compilation without.  The value
for compilation with profile feedback needs to be more conservative (higher) in
order to make tracer effective.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-cse-path-length</itemformat></item>
</tableterm><tableitem>
<para>The maximum number of basic blocks on path that CSE considers.
The default is 10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-cse-insns</itemformat></item>
</tableterm><tableitem><para>The maximum number of instructions CSE processes before flushing.
The default is 1000.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ggc-min-expand</itemformat></item>
</tableterm><tableitem>
<para>GCC uses a garbage collector to manage its own memory allocation.  This
parameter specifies the minimum percentage by which the garbage
collector&textrsquo;s heap should be allowed to expand between collections.
Tuning this may improve compilation speed; it has no effect on code
generation.
</para>
<para>The default is 30% + 70% * (RAM/1GB) with an upper bound of 100% when
RAM &gt;= 1GB&eosperiod;  If <code>getrlimit</code> is available, the notion of &textldquo;RAM&textrdquo; is
the smallest of actual RAM and <code>RLIMIT_DATA</code> or <code>RLIMIT_AS</code>.  If
GCC is not able to calculate RAM on a particular platform, the lower
bound of 30% is used.  Setting this parameter and
<option>ggc-min-heapsize</option> to zero causes a full collection to occur at
every opportunity.  This is extremely slow, but can be useful for
debugging.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ggc-min-heapsize</itemformat></item>
</tableterm><tableitem>
<para>Minimum size of the garbage collector&textrsquo;s heap before it begins bothering
to collect garbage.  The first collection occurs after the heap expands
by <option>ggc-min-expand</option>% beyond <option>ggc-min-heapsize</option>.  Again,
tuning this may improve compilation speed, and has no effect on code
generation.
</para>
<para>The default is the smaller of RAM/8, RLIMIT_RSS, or a limit that
tries to ensure that RLIMIT_DATA or RLIMIT_AS are not exceeded, but
with a lower bound of 4096 (four megabytes) and an upper bound of
131072 (128 megabytes).  If GCC is not able to calculate RAM on a
particular platform, the lower bound is used.  Setting this parameter
very large effectively disables garbage collection.  Setting this
parameter and <option>ggc-min-expand</option> to zero causes a full collection
to occur at every opportunity.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-reload-search-insns</itemformat></item>
</tableterm><tableitem><para>The maximum number of instruction reload should look backward for equivalent
register.  Increasing values mean more aggressive optimization, making the
compilation time increase with probably slightly better performance.
The default value is 100.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-cselib-memory-locations</itemformat></item>
</tableterm><tableitem><para>The maximum number of memory locations cselib should take into account.
Increasing values mean more aggressive optimization, making the compilation time
increase with probably slightly better performance.  The default value is 500.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">reorder-blocks-duplicate</itemformat></item>
<itemx spaces=" "><itemformat command="code">reorder-blocks-duplicate-feedback</itemformat></itemx>
</tableterm><tableitem>
<para>Used by the basic block reordering pass to decide whether to use unconditional
branch or duplicate the code on its destination.  Code is duplicated when its
estimated size is smaller than this value multiplied by the estimated size of
unconditional jump in the hot spots of the program.
</para>
<para>The <option>reorder-block-duplicate-feedback</option> parameter
is used only when profile
feedback is available.  It may be set to higher values than
<option>reorder-block-duplicate</option> since information about the hot spots is more
accurate.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-sched-ready-insns</itemformat></item>
</tableterm><tableitem><para>The maximum number of instructions ready to be issued the scheduler should
consider at any given time during the first scheduling pass.  Increasing
values mean more thorough searches, making the compilation time increase
with probably little benefit.  The default value is 100.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-sched-region-blocks</itemformat></item>
</tableterm><tableitem><para>The maximum number of blocks in a region to be considered for
interblock scheduling.  The default value is 10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-pipeline-region-blocks</itemformat></item>
</tableterm><tableitem><para>The maximum number of blocks in a region to be considered for
pipelining in the selective scheduler.  The default value is 15.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-sched-region-insns</itemformat></item>
</tableterm><tableitem><para>The maximum number of insns in a region to be considered for
interblock scheduling.  The default value is 100.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-pipeline-region-insns</itemformat></item>
</tableterm><tableitem><para>The maximum number of insns in a region to be considered for
pipelining in the selective scheduler.  The default value is 200.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">min-spec-prob</itemformat></item>
</tableterm><tableitem><para>The minimum probability (in percents) of reaching a source block
for interblock speculative scheduling.  The default value is 40.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-sched-extend-regions-iters</itemformat></item>
</tableterm><tableitem><para>The maximum number of iterations through CFG to extend regions.
A value of 0 (the default) disables region extensions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-sched-insn-conflict-delay</itemformat></item>
</tableterm><tableitem><para>The maximum conflict delay for an insn to be considered for speculative motion.
The default value is 3.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sched-spec-prob-cutoff</itemformat></item>
</tableterm><tableitem><para>The minimal probability of speculation success (in percents), so that
speculative insns are scheduled.
The default value is 40.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sched-spec-state-edge-prob-cutoff</itemformat></item>
</tableterm><tableitem><para>The minimum probability an edge must have for the scheduler to save its
state across it.
The default value is 10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sched-mem-true-dep-cost</itemformat></item>
</tableterm><tableitem><para>Minimal distance (in CPU cycles) between store and load targeting same
memory locations.  The default value is 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">selsched-max-lookahead</itemformat></item>
</tableterm><tableitem><para>The maximum size of the lookahead window of selective scheduling.  It is a
depth of search for available instructions.
The default value is 50.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">selsched-max-sched-times</itemformat></item>
</tableterm><tableitem><para>The maximum number of times that an instruction is scheduled during
selective scheduling.  This is the limit on the number of iterations
through which the instruction may be pipelined.  The default value is 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">selsched-max-insns-to-rename</itemformat></item>
</tableterm><tableitem><para>The maximum number of best instructions in the ready list that are considered
for renaming in the selective scheduler.  The default value is 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sms-min-sc</itemformat></item>
</tableterm><tableitem><para>The minimum value of stage count that swing modulo scheduler
generates.  The default value is 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-last-value-rtl</itemformat></item>
</tableterm><tableitem><para>The maximum size measured as number of RTLs that can be recorded in an expression
in combiner for a pseudo register as last known value of that register.  The default
is 10000.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-combine-insns</itemformat></item>
</tableterm><tableitem><para>The maximum number of instructions the RTL combiner tries to combine.
The default value is 2 at <option>-Og</option> and 4 otherwise.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">integer-share-limit</itemformat></item>
</tableterm><tableitem><para>Small integer constants can use a shared data structure, reducing the
compiler&textrsquo;s memory usage and increasing its speed.  This sets the maximum
value of a shared integer constant.  The default value is 256.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ssp-buffer-size</itemformat></item>
</tableterm><tableitem><para>The minimum size of buffers (i.e.&noeos; arrays) that receive stack smashing
protection when <option>-fstack-protection</option> is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">min-size-for-stack-sharing</itemformat></item>
</tableterm><tableitem><para>The minimum size of variables taking part in stack slot sharing when not
optimizing. The default value is 32.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-jump-thread-duplication-stmts</itemformat></item>
</tableterm><tableitem><para>Maximum number of statements allowed in a block that needs to be
duplicated when threading jumps.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-fields-for-field-sensitive</itemformat></item>
</tableterm><tableitem><para>Maximum number of fields in a structure treated in
a field sensitive manner during pointer analysis.  The default is zero
for <option>-O0</option> and <option>-O1</option>,
and 100 for <option>-Os</option>, <option>-O2</option>, and <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">prefetch-latency</itemformat></item>
</tableterm><tableitem><para>Estimate on average number of instructions that are executed before
prefetch finishes.  The distance prefetched ahead is proportional
to this constant.  Increasing this number may also lead to less
streams being prefetched (see <option>simultaneous-prefetches</option>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">simultaneous-prefetches</itemformat></item>
</tableterm><tableitem><para>Maximum number of prefetches that can run at the same time.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l1-cache-line-size</itemformat></item>
</tableterm><tableitem><para>The size of cache line in L1 cache, in bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l1-cache-size</itemformat></item>
</tableterm><tableitem><para>The size of L1 cache, in kilobytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l2-cache-size</itemformat></item>
</tableterm><tableitem><para>The size of L2 cache, in kilobytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">min-insn-to-prefetch-ratio</itemformat></item>
</tableterm><tableitem><para>The minimum ratio between the number of instructions and the
number of prefetches to enable prefetching in a loop.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">prefetch-min-insn-to-mem-ratio</itemformat></item>
</tableterm><tableitem><para>The minimum ratio between the number of instructions and the
number of memory references to enable prefetching in a loop.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">use-canonical-types</itemformat></item>
</tableterm><tableitem><para>Whether the compiler should use the &textldquo;canonical&textrdquo; type system.  By
default, this should always be 1, which uses a more efficient internal
mechanism for comparing types in C++ and Objective-C++.  However, if
bugs in the canonical type system are causing compilation failures,
set this value to 0 to disable canonical types.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">switch-conversion-max-branch-ratio</itemformat></item>
</tableterm><tableitem><para>Switch initialization conversion refuses to create arrays that are
bigger than <option>switch-conversion-max-branch-ratio</option> times the number of
branches in the switch.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-partial-antic-length</itemformat></item>
</tableterm><tableitem><para>Maximum length of the partial antic set computed during the tree
partial redundancy elimination optimization (<option>-ftree-pre</option>) when
optimizing at <option>-O3</option> and above.  For some sorts of source code
the enhanced partial redundancy elimination optimization can run away,
consuming all of the memory available on the host machine.  This
parameter sets a limit on the length of the sets that are computed,
which prevents the runaway behavior.  Setting a value of 0 for
this parameter allows an unlimited set length.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sccvn-max-scc-size</itemformat></item>
</tableterm><tableitem><para>Maximum size of a strongly connected component (SCC) during SCCVN
processing.  If this limit is hit, SCCVN processing for the whole
function is not done and optimizations depending on it are
disabled.  The default maximum SCC size is 10000.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sccvn-max-alias-queries-per-access</itemformat></item>
</tableterm><tableitem><para>Maximum number of alias-oracle queries we perform when looking for
redundancies for loads and stores.  If this limit is hit the search
is aborted and the load or store is not considered redundant.  The
number of queries is algorithmically limited to the number of
stores on all paths from the load to the function entry.
The default maxmimum number of queries is 1000.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ira-max-loops-num</itemformat></item>
</tableterm><tableitem><para>IRA uses regional register allocation by default.  If a function
contains more loops than the number given by this parameter, only at most
the given number of the most frequently-executed loops form regions
for regional register allocation.  The default value of the
parameter is 100.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ira-max-conflict-table-size </itemformat></item>
</tableterm><tableitem><para>Although IRA uses a sophisticated algorithm to compress the conflict
table, the table can still require excessive amounts of memory for
huge functions.  If the conflict table for a function could be more
than the size in MB given by this parameter, the register allocator
instead uses a faster, simpler, and lower-quality
algorithm that does not require building a pseudo-register conflict table.  
The default value of the parameter is 2000.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ira-loop-reserved-regs</itemformat></item>
</tableterm><tableitem><para>IRA can be used to evaluate more accurate register pressure in loops
for decisions to move loop invariants (see <option>-O3</option>).  The number
of available registers reserved for some other purposes is given
by this parameter.  The default value of the parameter is 2, which is
the minimal number of registers needed by typical instructions.
This value is the best found from numerous experiments.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">lra-inheritance-ebb-probability-cutoff</itemformat></item>
</tableterm><tableitem><para>LRA tries to reuse values reloaded in registers in subsequent insns.
This optimization is called inheritance.  EBB is used as a region to
do this optimization.  The parameter defines a minimal fall-through
edge probability in percentage used to add BB to inheritance EBB in
LRA.  The default value of the parameter is 40.  The value was chosen
from numerous runs of SPEC2000 on x86-64.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">loop-invariant-max-bbs-in-loop</itemformat></item>
</tableterm><tableitem><para>Loop invariant motion can be very expensive, both in compilation time and
in amount of needed compile-time memory, with very large loops.  Loops
with more basic blocks than this parameter won&textrsquo;t have loop invariant
motion optimization performed on them.  The default value of the
parameter is 1000 for <option>-O1</option> and 10000 for <option>-O2</option> and above.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">loop-max-datarefs-for-datadeps</itemformat></item>
</tableterm><tableitem><para>Building data dapendencies is expensive for very large loops.  This
parameter limits the number of data references in loops that are
considered for data dependence analysis.  These large loops are no
handled by the optimizations using loop data dependencies.
The default value is 1000.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-vartrack-size</itemformat></item>
</tableterm><tableitem><para>Sets a maximum number of hash table slots to use during variable
tracking dataflow analysis of any function.  If this limit is exceeded
with variable tracking at assignments enabled, analysis for that
function is retried without it, after removing all debug insns from
the function.  If the limit is exceeded even without debug insns, var
tracking analysis is completely disabled for the function.  Setting
the parameter to zero makes it unlimited.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-vartrack-expr-depth</itemformat></item>
</tableterm><tableitem><para>Sets a maximum number of recursion levels when attempting to map
variable names or debug temporaries to value expressions.  This trades
compilation time for more complete debug information.  If this is set too
low, value expressions that are available and could be represented in
debug information may end up not being used; setting this higher may
enable the compiler to find more complex debug expressions, but compile
time and memory use may grow.  The default is 12.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">min-nondebug-insn-uid</itemformat></item>
</tableterm><tableitem><para>Use uids starting at this parameter for nondebug insns.  The range below
the parameter is reserved exclusively for debug insns created by
<option>-fvar-tracking-assignments</option>, but debug insns may get
(non-overlapping) uids above it if the reserved range is exhausted.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ipa-sra-ptr-growth-factor</itemformat></item>
</tableterm><tableitem><para>IPA-SRA replaces a pointer to an aggregate with one or more new
parameters only when their cumulative size is less or equal to
<option>ipa-sra-ptr-growth-factor</option> times the size of the original
pointer parameter.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sra-max-scalarization-size-Ospeed</itemformat></item>
</tableterm></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sra-max-scalarization-size-Osize</itemformat></item>
</tableterm><tableitem><para>The two Scalar Reduction of Aggregates passes (SRA and IPA-SRA) aim to
replace scalar parts of aggregates with uses of independent scalar
variables.  These parameters control the maximum size, in storage units,
of aggregate which is considered for replacement when compiling for
speed
(<option>sra-max-scalarization-size-Ospeed</option>) or size
(<option>sra-max-scalarization-size-Osize</option>) respectively.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">tm-max-aggregate-size</itemformat></item>
</tableterm><tableitem><para>When making copies of thread-local variables in a transaction, this
parameter specifies the size in bytes after which variables are
saved with the logging functions as opposed to save/restore code
sequence pairs.  This option only applies when using
<option>-fgnu-tm</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">graphite-max-nb-scop-params</itemformat></item>
</tableterm><tableitem><para>To avoid exponential effects in the Graphite loop transforms, the
number of parameters in a Static Control Part (SCoP) is bounded.  The
default value is 10 parameters.  A variable whose value is unknown at
compilation time and defined outside a SCoP is a parameter of the SCoP.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">graphite-max-bbs-per-function</itemformat></item>
</tableterm><tableitem><para>To avoid exponential effects in the detection of SCoPs, the size of
the functions analyzed by Graphite is bounded.  The default value is
100 basic blocks.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">loop-block-tile-size</itemformat></item>
</tableterm><tableitem><para>Loop blocking or strip mining transforms, enabled with
<option>-floop-block</option> or <option>-floop-strip-mine</option>, strip mine each
loop in the loop nest by a given number of iterations.  The strip
length can be changed using the <option>loop-block-tile-size</option>
parameter.  The default value is 51 iterations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">loop-unroll-jam-size</itemformat></item>
</tableterm><tableitem><para>Specify the unroll factor for the <option>-floop-unroll-and-jam</option> option.  The 
default value is 4.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">loop-unroll-jam-depth</itemformat></item>
</tableterm><tableitem><para>Specify the dimension to be unrolled (counting from the most inner loop)
for the  <option>-floop-unroll-and-jam</option>.  The default value is 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ipa-cp-value-list-size</itemformat></item>
</tableterm><tableitem><para>IPA-CP attempts to track all possible values and types passed to a function&textrsquo;s
parameter in order to propagate them and perform devirtualization.
<option>ipa-cp-value-list-size</option> is the maximum number of values and types it
stores per one formal parameter of a function.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ipa-cp-eval-threshold</itemformat></item>
</tableterm><tableitem><para>IPA-CP calculates its own score of cloning profitability heuristics
and performs those cloning opportunities with scores that exceed
<option>ipa-cp-eval-threshold</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ipa-cp-recursion-penalty</itemformat></item>
</tableterm><tableitem><para>Percentage penalty the recursive functions will receive when they
are evaluated for cloning.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ipa-cp-single-call-penalty</itemformat></item>
</tableterm><tableitem><para>Percentage penalty functions containg a single call to another
function will receive when they are evaluated for cloning.
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ipa-max-agg-items</itemformat></item>
</tableterm><tableitem><para>IPA-CP is also capable to propagate a number of scalar values passed
in an aggregate. <option>ipa-max-agg-items</option> controls the maximum
number of such values per one parameter.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ipa-cp-loop-hint-bonus</itemformat></item>
</tableterm><tableitem><para>When IPA-CP determines that a cloning candidate would make the number
of iterations of a loop known, it adds a bonus of
<option>ipa-cp-loop-hint-bonus</option> to the profitability score of
the candidate.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ipa-cp-array-index-hint-bonus</itemformat></item>
</tableterm><tableitem><para>When IPA-CP determines that a cloning candidate would make the index of
an array access known, it adds a bonus of
<option>ipa-cp-array-index-hint-bonus</option> to the profitability
score of the candidate.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ipa-max-aa-steps</itemformat></item>
</tableterm><tableitem><para>During its analysis of function bodies, IPA-CP employs alias analysis
in order to track values pointed to by function parameters.  In order
not spend too much time analyzing huge functions, it gives up and
consider all memory clobbered after examining
<option>ipa-max-aa-steps</option> statements modifying memory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">lto-partitions</itemformat></item>
</tableterm><tableitem><para>Specify desired number of partitions produced during WHOPR compilation.
The number of partitions should exceed the number of CPUs used for compilation.
The default value is 32.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">lto-minpartition</itemformat></item>
</tableterm><tableitem><para>Size of minimal partition for WHOPR (in estimated instructions).
This prevents expenses of splitting very small programs into too many
partitions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">cxx-max-namespaces-for-diagnostic-help</itemformat></item>
</tableterm><tableitem><para>The maximum number of namespaces to consult for suggestions when C++
name lookup fails for an identifier.  The default is 1000.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sink-frequency-threshold</itemformat></item>
</tableterm><tableitem><para>The maximum relative execution frequency (in percents) of the target block
relative to a statement&textrsquo;s original block to allow statement sinking of a
statement.  Larger numbers result in more aggressive statement sinking.
The default value is 75.  A small positive adjustment is applied for
statements with memory operands as those are even more profitable so sink.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-stores-to-sink</itemformat></item>
</tableterm><tableitem><para>The maximum number of conditional stores paires that can be sunk.  Set to 0
if either vectorization (<option>-ftree-vectorize</option>) or if-conversion
(<option>-ftree-loop-if-convert</option>) is disabled.  The default is 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">allow-store-data-races</itemformat></item>
</tableterm><tableitem><para>Allow optimizers to introduce new data races on stores.
Set to 1 to allow, otherwise to 0.  This option is enabled by default
at optimization level <option>-Ofast</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">case-values-threshold</itemformat></item>
</tableterm><tableitem><para>The smallest number of different values for which it is best to use a
jump-table instead of a tree of conditional branches.  If the value is
0, use the default for the machine.  The default is 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">tree-reassoc-width</itemformat></item>
</tableterm><tableitem><para>Set the maximum number of instructions executed in parallel in
reassociated tree. This parameter overrides target dependent
heuristics used by default if has non zero value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sched-pressure-algorithm</itemformat></item>
</tableterm><tableitem><para>Choose between the two available implementations of
<option>-fsched-pressure</option>.  Algorithm 1 is the original implementation
and is the more likely to prevent instructions from being reordered.
Algorithm 2 was designed to be a compromise between the relatively
conservative approach taken by algorithm 1 and the rather aggressive
approach taken by the default scheduler.  It relies more heavily on
having a regular register file and accurate register pressure classes.
See <file>haifa-sched.c</file> in the GCC sources for more details.
</para>
<para>The default choice depends on the target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-slsr-cand-scan</itemformat></item>
</tableterm><tableitem><para>Set the maximum number of existing candidates that are considered when
seeking a basis for a new straight-line strength reduction candidate.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">asan-globals</itemformat></item>
</tableterm><tableitem><para>Enable buffer overflow detection for global objects.  This kind
of protection is enabled by default if you are using
<option>-fsanitize=address</option> option.
To disable global objects protection use <option>--param asan-globals=0</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">asan-stack</itemformat></item>
</tableterm><tableitem><para>Enable buffer overflow detection for stack objects.  This kind of
protection is enabled by default when using<option>-fsanitize=address</option>.
To disable stack protection use <option>--param asan-stack=0</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">asan-instrument-reads</itemformat></item>
</tableterm><tableitem><para>Enable buffer overflow detection for memory reads.  This kind of
protection is enabled by default when using <option>-fsanitize=address</option>.
To disable memory reads protection use
<option>--param asan-instrument-reads=0</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">asan-instrument-writes</itemformat></item>
</tableterm><tableitem><para>Enable buffer overflow detection for memory writes.  This kind of
protection is enabled by default when using <option>-fsanitize=address</option>.
To disable memory writes protection use
<option>--param asan-instrument-writes=0</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">asan-memintrin</itemformat></item>
</tableterm><tableitem><para>Enable detection for built-in functions.  This kind of protection
is enabled by default when using <option>-fsanitize=address</option>.
To disable built-in functions protection use
<option>--param asan-memintrin=0</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">asan-use-after-return</itemformat></item>
</tableterm><tableitem><para>Enable detection of use-after-return.  This kind of protection
is enabled by default when using <option>-fsanitize=address</option> option.
To disable use-after-return detection use 
<option>--param asan-use-after-return=0</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">asan-instrumentation-with-call-threshold</itemformat></item>
</tableterm><tableitem><para>If number of memory accesses in function being instrumented
is greater or equal to this number, use callbacks instead of inline checks.
E.g. to disable inline code use
<option>--param asan-instrumentation-with-call-threshold=0</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">chkp-max-ctor-size</itemformat></item>
</tableterm><tableitem><para>Static constructors generated by Pointer Bounds Checker may become very
large and significantly increase compile time at optimization level
<option>-O1</option> and higher.  This parameter is a maximum nubmer of statements
in a single generated constructor.  Default value is 5000.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-fsm-thread-path-insns</itemformat></item>
</tableterm><tableitem><para>Maximum number of instructions to copy when duplicating blocks on a
finite state automaton jump thread path.  The default is 100.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-fsm-thread-length</itemformat></item>
</tableterm><tableitem><para>Maximum number of basic blocks on a finite state automaton jump thread
path.  The default is 10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">max-fsm-thread-paths</itemformat></item>
</tableterm><tableitem><para>Maximum number of new jump thread paths to create for a finite state
automaton.  The default is 50.
</para>
</tableitem></tableentry></table>
</tableitem></tableentry></table>

</section>
<node name="Preprocessor-Options" spaces=" "><nodename>Preprocessor Options</nodename><nodenext automatic="on">Assembler Options</nodenext><nodeprev automatic="on">Optimize Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Options Controlling the Preprocessor</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="130">preprocessor options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="131">options, preprocessor</indexterm></cindex>

<para>These options control the C preprocessor, which is run on each C source
file before actual compilation.
</para>
<para>If you use the <option>-E</option> option, nothing is done except preprocessing.
Some of these options make sense only together with <option>-E</option> because
they cause the preprocessor output to be unsuitable for actual
compilation.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-Wp,<var>option</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="984" incode="1">Wp</indexterm></indexcommand>
<para>You can use <option>-Wp,<var>option</var></option> to bypass the compiler driver
and pass <var>option</var> directly through to the preprocessor.  If
<var>option</var> contains commas, it is split into multiple options at the
commas.  However, many options are modified, translated or interpreted
by the compiler driver before being passed to the preprocessor, and
<option>-Wp</option> forcibly bypasses this phase.  The preprocessor&textrsquo;s direct
interface is undocumented and subject to change, so whenever possible
you should avoid using <option>-Wp</option> and let the driver handle the
options instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Xpreprocessor <var>option</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="985" incode="1">Xpreprocessor</indexterm></indexcommand>
<para>Pass <var>option</var> as an option to the preprocessor.  You can use this to
supply system-specific preprocessor options that GCC does not 
recognize.
</para>
<para>If you want to pass an option that takes an argument, you must use
<option>-Xpreprocessor</option> twice, once for the option and once for the argument.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-no-integrated-cpp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="986" incode="1">no-integrated-cpp</indexterm></indexcommand>
<para>Perform preprocessing as a separate pass before compilation.
By default, GCC performs preprocessing as an integrated part of
input tokenization and parsing.
If this option is provided, the appropriate language front end
(<command>cc1</command>, <command>cc1plus</command>, or <command>cc1obj</command> for C, C++,
and Objective-C, respectively) is instead invoked twice,
once for preprocessing only and once for actual compilation
of the preprocessed input.
This option may be useful in conjunction with the <option>-B</option> or
<option>-wrapper</option> options to specify an alternate preprocessor or
perform additional processing of the program source between
normal preprocessing and compilation.
</para></tableitem></tableentry></table>

<!-- c Copyright (C) 1999-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the CPP and GCC manuals. -->
<!-- c For copying conditions, see the file gcc.texi. -->

<!-- c - -->
<!-- c Options affecting the preprocessor -->
<!-- c - -->

<!-- c If this file is included with the flag ``cppmanual'' set, it is -->
<!-- c formatted for inclusion in the CPP manual; otherwise the main GCC manual. -->

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-D <var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="987" incode="1">D</indexterm></indexcommand>
<para>Predefine <var>name</var> as a macro, with definition <code>1</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-D <var>name</var>=<var>definition</var></itemformat></item>
</tableterm><tableitem><para>The contents of <var>definition</var> are tokenized and processed as if
they appeared during translation phase three in a <samp>#define</samp>
directive.  In particular, the definition will be truncated by
embedded newline characters.
</para>
<para>If you are invoking the preprocessor from a shell or shell-like
program you may need to use the shell&textrsquo;s quoting syntax to protect
characters such as spaces that have a meaning in the shell syntax.
</para>
<para>If you wish to define a function-like macro on the command line, write
its argument list with surrounding parentheses before the equals sign
(if any).  Parentheses are meaningful to most shells, so you will need
to quote the option.  With <command>sh</command> and <command>csh</command>,
<option>-D'<var>name</var>(<var>args&dots;</var>)=<var>definition</var>'</option> works.
</para>
<para><option>-D</option> and <option>-U</option> options are processed in the order they
are given on the command line.  All <option>-imacros <var>file</var></option> and
<option>-include <var>file</var></option> options are processed after all
<option>-D</option> and <option>-U</option> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-U <var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="988" incode="1">U</indexterm></indexcommand>
<para>Cancel any previous definition of <var>name</var>, either built in or
provided with a <option>-D</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-undef</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="989" incode="1">undef</indexterm></indexcommand>
<para>Do not predefine any system-specific or GCC-specific macros.  The
standard predefined macros remain defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-I <var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="990" incode="1">I</indexterm></indexcommand>
<para>Add the directory <var>dir</var> to the list of directories to be searched
for header files.
Directories named by <option>-I</option> are searched before the standard
system include directories.  If the directory <var>dir</var> is a standard
system include directory, the option is ignored to ensure that the
default search order for system directories and the special treatment
of system headers are not defeated
.
If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced
by the sysroot prefix; see <option>--sysroot</option> and <option>-isysroot</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-o <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="991" incode="1">o</indexterm></indexcommand>
<para>Write output to <var>file</var>.  This is the same as specifying <var>file</var>
as the second non-option argument to <command>cpp</command>.  <command>gcc</command> has a
different interpretation of a second non-option argument, so you must
use <option>-o</option> to specify the output file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wall</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="992" incode="1">Wall</indexterm></indexcommand>
<para>Turns on all optional warnings which are desirable for normal code.
At present this is <option>-Wcomment</option>, <option>-Wtrigraphs</option>,
<option>-Wmultichar</option> and a warning about integer promotion causing a
change of sign in <code>#if</code> expressions.  Note that many of the
preprocessor&textrsquo;s warnings are on by default and have no options to
control them.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wcomment</itemformat></item>
<itemx spaces=" "><itemformat command="code">-Wcomments</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="993" incode="1">Wcomment</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="994" incode="1">Wcomments</indexterm></indexcommand>
<para>Warn whenever a comment-start sequence <samp>/*</samp> appears in a <samp>/*</samp>
comment, or whenever a backslash-newline appears in a <samp>//</samp> comment.
(Both forms have the same effect.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wtrigraphs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="995" incode="1">Wtrigraphs</indexterm></indexcommand>
<anchor name="Wtrigraphs">Wtrigraphs</anchor>
<para>Most trigraphs in comments cannot affect the meaning of the program.
However, a trigraph that would form an escaped newline (<samp>??/</samp> at
the end of a line) can, by changing where the comment begins or ends.
Therefore, only trigraphs that would form escaped newlines produce
warnings inside a comment.
</para>
<para>This option is implied by <option>-Wall</option>.  If <option>-Wall</option> is not
given, this option is still enabled unless trigraphs are enabled.  To
get trigraph conversion without warnings, but get the other
<option>-Wall</option> warnings, use <samp>-trigraphs -Wall -Wno-trigraphs</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wtraditional</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="996" incode="1">Wtraditional</indexterm></indexcommand>
<para>Warn about certain constructs that behave differently in traditional and
ISO C&eosperiod;  Also warn about ISO C constructs that have no traditional C
equivalent, and problematic constructs which should be avoided.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wundef</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="997" incode="1">Wundef</indexterm></indexcommand>
<para>Warn whenever an identifier which is not a macro is encountered in an
<samp>#if</samp> directive, outside of <samp>defined</samp>.  Such identifiers are
replaced with zero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wunused-macros</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="998" incode="1">Wunused-macros</indexterm></indexcommand>
<para>Warn about macros defined in the main file that are unused.  A macro
is <dfn>used</dfn> if it is expanded or tested for existence at least once.
The preprocessor will also warn if the macro has not been used at the
time it is redefined or undefined.
</para>
<para>Built-in macros, macros defined on the command line, and macros
defined in include files are not warned about.
</para>
<para><emph>Note:</emph> If a macro is actually used, but only used in skipped
conditional blocks, then CPP will report it as unused.  To avoid the
warning in such a case, you might improve the scope of the macro&textrsquo;s
definition by, for example, moving it into the first skipped block.
Alternatively, you could provide a dummy use with something like:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#if defined the_macro_causing_the_warning
#endif
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wendif-labels</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="999" incode="1">Wendif-labels</indexterm></indexcommand>
<para>Warn whenever an <samp>#else</samp> or an <samp>#endif</samp> are followed by text.
This usually happens in code of the form
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#if FOO
&dots;
#else FOO
&dots;
#endif FOO
</pre></smallexample>

<noindent></noindent>
<para>The second and third <code>FOO</code> should be in comments, but often are not
in older programs.  This warning is on by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Werror</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1000" incode="1">Werror</indexterm></indexcommand>
<para>Make all warnings into hard errors.  Source code which triggers warnings
will be rejected.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wsystem-headers</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1001" incode="1">Wsystem-headers</indexterm></indexcommand>
<para>Issue warnings for code in system headers.  These are normally unhelpful
in finding bugs in your own code, therefore suppressed.  If you are
responsible for the system library, you may want to see them.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-w</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1002" incode="1">w</indexterm></indexcommand>
<para>Suppress all warnings, including those which GNU CPP issues by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-pedantic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1003" incode="1">pedantic</indexterm></indexcommand>
<para>Issue all the mandatory diagnostics listed in the C standard.  Some of
them are left out by default, since they trigger frequently on harmless
code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-pedantic-errors</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1004" incode="1">pedantic-errors</indexterm></indexcommand>
<para>Issue all the mandatory diagnostics, and make all mandatory diagnostics
into errors.  This includes mandatory diagnostics that GCC issues
without <samp>-pedantic</samp> but treats as warnings.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-M</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1005" incode="1">M</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="132"><command>make</command></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="133">dependencies, <command>make</command></indexterm></cindex>
<para>Instead of outputting the result of preprocessing, output a rule
suitable for <command>make</command> describing the dependencies of the main
source file.  The preprocessor outputs one <command>make</command> rule containing
the object file name for that source file, a colon, and the names of all
the included files, including those coming from <option>-include</option> or
<option>-imacros</option> command-line options.
</para>
<para>Unless specified explicitly (with <option>-MT</option> or <option>-MQ</option>), the
object file name consists of the name of the source file with any
suffix replaced with object file suffix and with any leading directory
parts removed.  If there are many included files then the rule is
split into several lines using <samp>\</samp>-newline.  The rule has no
commands.
</para>
<para>This option does not suppress the preprocessor&textrsquo;s debug output, such as
<option>-dM</option>.  To avoid mixing such debug output with the dependency
rules you should explicitly specify the dependency output file with
<option>-MF</option>, or use an environment variable like
<env>DEPENDENCIES_OUTPUT</env> (<pxref label="Environment-Variables"><xrefnodename>Environment Variables</xrefnodename></pxref>).  Debug output
will still be sent to the regular output stream as normal.
</para>
<para>Passing <option>-M</option> to the driver implies <option>-E</option>, and suppresses
warnings with an implicit <option>-w</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-MM</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1006" incode="1">MM</indexterm></indexcommand>
<para>Like <option>-M</option> but do not mention header files that are found in
system header directories, nor header files that are included,
directly or indirectly, from such a header.
</para>
<para>This implies that the choice of angle brackets or double quotes in an
<samp>#include</samp> directive does not in itself determine whether that
header will appear in <option>-MM</option> dependency output.  This is a
slight change in semantics from GCC versions 3.0 and earlier.
</para>
<anchor name="dashMF">dashMF</anchor>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-MF <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1007" incode="1">MF</indexterm></indexcommand>
<para>When used with <option>-M</option> or <option>-MM</option>, specifies a
file to write the dependencies to.  If no <option>-MF</option> switch is given
the preprocessor sends the rules to the same place it would have sent
preprocessed output.
</para>
<para>When used with the driver options <option>-MD</option> or <option>-MMD</option>,
<option>-MF</option> overrides the default dependency output file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-MG</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1008" incode="1">MG</indexterm></indexcommand>
<para>In conjunction with an option such as <option>-M</option> requesting
dependency generation, <option>-MG</option> assumes missing header files are
generated files and adds them to the dependency list without raising
an error.  The dependency filename is taken directly from the
<code>#include</code> directive without prepending any path.  <option>-MG</option>
also suppresses preprocessed output, as a missing header file renders
this useless.
</para>
<para>This feature is used in automatic updating of makefiles.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-MP</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1009" incode="1">MP</indexterm></indexcommand>
<para>This option instructs CPP to add a phony target for each dependency
other than the main file, causing each to depend on nothing.  These
dummy rules work around errors <command>make</command> gives if you remove header
files without updating the <file>Makefile</file> to match.
</para>
<para>This is typical output:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">test.o: test.c test.h

test.h:
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-MT <var>target</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1010" incode="1">MT</indexterm></indexcommand>

<para>Change the target of the rule emitted by dependency generation.  By
default CPP takes the name of the main input file, deletes any
directory components and any file suffix such as <samp>.c</samp>, and
appends the platform&textrsquo;s usual object suffix.  The result is the target.
</para>
<para>An <option>-MT</option> option will set the target to be exactly the string you
specify.  If you want multiple targets, you can specify them as a single
argument to <option>-MT</option>, or use multiple <option>-MT</option> options.
</para>
<para>For example, <option><w>-MT '$(objpfx)foo.o'</w></option> might give
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">$(objpfx)foo.o: foo.c
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-MQ <var>target</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1011" incode="1">MQ</indexterm></indexcommand>

<para>Same as <option>-MT</option>, but it quotes any characters which are special to
Make.  <option><w>-MQ '$(objpfx)foo.o'</w></option> gives
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">$$(objpfx)foo.o: foo.c
</pre></smallexample>

<para>The default target is automatically quoted, as if it were given with
<option>-MQ</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-MD</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1012" incode="1">MD</indexterm></indexcommand>
<para><option>-MD</option> is equivalent to <option>-M -MF <var>file</var></option>, except that
<option>-E</option> is not implied.  The driver determines <var>file</var> based on
whether an <option>-o</option> option is given.  If it is, the driver uses its
argument but with a suffix of <file>.d</file>, otherwise it takes the name
of the input file, removes any directory components and suffix, and
applies a <file>.d</file> suffix.
</para>
<para>If <option>-MD</option> is used in conjunction with <option>-E</option>, any
<option>-o</option> switch is understood to specify the dependency output file
(<pxref label="dashMF"><xrefnodename>dashMF</xrefnodename><xrefprinteddesc>-MF</xrefprinteddesc></pxref>), but if used without <option>-E</option>, each <option>-o</option>
is understood to specify a target object file.
</para>
<para>Since <option>-E</option> is not implied, <option>-MD</option> can be used to generate
a dependency output file as a side-effect of the compilation process.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-MMD</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1013" incode="1">MMD</indexterm></indexcommand>
<para>Like <option>-MD</option> except mention only user header files, not system
header files.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpch-deps</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1014" incode="1">fpch-deps</indexterm></indexcommand>
<para>When using precompiled headers (<pxref label="Precompiled-Headers"><xrefnodename>Precompiled Headers</xrefnodename></pxref>), this flag
will cause the dependency-output flags to also list the files from the
precompiled header&textrsquo;s dependencies.  If not specified only the
precompiled header would be listed and not the files that were used to
create it because those files are not consulted when a precompiled
header is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpch-preprocess</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1015" incode="1">fpch-preprocess</indexterm></indexcommand>
<para>This option allows use of a precompiled header (<pxref label="Precompiled-Headers"><xrefnodename>Precompiled
Headers</xrefnodename></pxref>) together with <option>-E</option>.  It inserts a special <code>#pragma</code>,
<code>#pragma GCC pch_preprocess &quot;<var>filename</var>&quot;</code> in the output to mark
the place where the precompiled header was found, and its <var>filename</var>.
When <option>-fpreprocessed</option> is in use, GCC recognizes this <code>#pragma</code>
and loads the PCH&eosperiod;
</para>
<para>This option is off by default, because the resulting preprocessed output
is only really suitable as input to GCC&eosperiod;  It is switched on by
<option>-save-temps</option>.
</para>
<para>You should not write this <code>#pragma</code> in your own code, but it is
safe to edit the filename if the PCH file is available in a different
location.  The filename may be absolute or it may be relative to GCC&textrsquo;s
current directory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-x c</itemformat></item>
<itemx spaces=" "><itemformat command="code">-x c++</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-x objective-c</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-x assembler-with-cpp</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1016" incode="1">x</indexterm></indexcommand>
<para>Specify the source language: C, C++, Objective-C, or assembly.  This has
nothing to do with standards conformance or extensions; it merely
selects which base syntax to expect.  If you give none of these options,
cpp will deduce the language from the extension of the source file:
<samp>.c</samp>, <samp>.cc</samp>, <samp>.m</samp>, or <samp>.S</samp>.  Some other common
extensions for C++ and assembly are also recognized.  If cpp does not
recognize the extension, it will treat the file as C; this is the most
generic mode.
</para>
<para><emph>Note:</emph> Previous versions of cpp accepted a <option>-lang</option> option
which selected both the language and the standards conformance level.
This option has been removed, because it conflicts with the <option>-l</option>
option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-std=<var>standard</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-ansi</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1017" incode="1">ansi</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1018" incode="1">std=</indexterm></indexcommand>
<para>Specify the standard to which the code should conform.  Currently CPP
knows about C and C++ standards; others may be added in the future.
</para>
<para><var>standard</var>
may be one of:
</para><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">c90</itemformat></item>
<itemx spaces=" "><itemformat command="code">c89</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">iso9899:1990</itemformat></itemx>
</tableterm><tableitem><para>The ISO C standard from 1990.  <samp>c90</samp> is the customary shorthand for
this version of the standard.
</para>
<para>The <option>-ansi</option> option is equivalent to <option>-std=c90</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">iso9899:199409</itemformat></item>
</tableterm><tableitem><para>The 1990 C standard, as amended in 1994.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">iso9899:1999</itemformat></item>
<itemx spaces=" "><itemformat command="code">c99</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">iso9899:199x</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">c9x</itemformat></itemx>
</tableterm><tableitem><para>The revised ISO C standard, published in December 1999.  Before
publication, this was known as C9X&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">iso9899:2011</itemformat></item>
<itemx spaces=" "><itemformat command="code">c11</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">c1x</itemformat></itemx>
</tableterm><tableitem><para>The revised ISO C standard, published in December 2011.  Before
publication, this was known as C1X&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">gnu90</itemformat></item>
<itemx spaces=" "><itemformat command="code">gnu89</itemformat></itemx>
</tableterm><tableitem><para>The 1990 C standard plus GNU extensions.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">gnu99</itemformat></item>
<itemx spaces=" "><itemformat command="code">gnu9x</itemformat></itemx>
</tableterm><tableitem><para>The 1999 C standard plus GNU extensions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">gnu11</itemformat></item>
<itemx spaces=" "><itemformat command="code">gnu1x</itemformat></itemx>
</tableterm><tableitem><para>The 2011 C standard plus GNU extensions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c++98</itemformat></item>
</tableterm><tableitem><para>The 1998 ISO C++ standard plus amendments.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">gnu++98</itemformat></item>
</tableterm><tableitem><para>The same as <option>-std=c++98</option> plus GNU extensions.  This is the
default for C++ code.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-I-</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1019" incode="1">I-</indexterm></indexcommand>
<para>Split the include path.  Any directories specified with <option>-I</option>
options before <option>-I-</option> are searched only for headers requested with
<code><w>#include &quot;<var>file</var>&quot;</w></code>; they are not searched for
<code><w>#include &lt;<var>file</var>&gt;</w></code>.  If additional directories are
specified with <option>-I</option> options after the <option>-I-</option>, those
directories are searched for all <samp>#include</samp> directives.
</para>
<para>In addition, <option>-I-</option> inhibits the use of the directory of the current
file directory as the first search directory for <code><w>#include
&quot;<var>file</var>&quot;</w></code>.
This option has been deprecated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-nostdinc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1020" incode="1">nostdinc</indexterm></indexcommand>
<para>Do not search the standard system directories for header files.
Only the directories you have specified with <option>-I</option> options
(and the directory of the current file, if appropriate) are searched.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-nostdinc++</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1021" incode="1">nostdinc++</indexterm></indexcommand>
<para>Do not search for header files in the C++-specific standard directories,
but do still search the other standard directories.  (This option is
used when building the C++ library.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-include <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1022" incode="1">include</indexterm></indexcommand>
<para>Process <var>file</var> as if <code>#include &quot;file&quot;</code> appeared as the first
line of the primary source file.  However, the first directory searched
for <var>file</var> is the preprocessor&textrsquo;s working directory <emph>instead of</emph>
the directory containing the main source file.  If not found there, it
is searched for in the remainder of the <code>#include &quot;&dots;&quot;</code> search
chain as normal.
</para>
<para>If multiple <option>-include</option> options are given, the files are included
in the order they appear on the command line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-imacros <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1023" incode="1">imacros</indexterm></indexcommand>
<para>Exactly like <option>-include</option>, except that any output produced by
scanning <var>file</var> is thrown away.  Macros it defines remain defined.
This allows you to acquire all the macros from a header without also
processing its declarations.
</para>
<para>All files specified by <option>-imacros</option> are processed before all files
specified by <option>-include</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-idirafter <var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1024" incode="1">idirafter</indexterm></indexcommand>
<para>Search <var>dir</var> for header files, but do it <emph>after</emph> all
directories specified with <option>-I</option> and the standard system directories
have been exhausted.  <var>dir</var> is treated as a system include directory.
If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced
by the sysroot prefix; see <option>--sysroot</option> and <option>-isysroot</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-iprefix <var>prefix</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1025" incode="1">iprefix</indexterm></indexcommand>
<para>Specify <var>prefix</var> as the prefix for subsequent <option>-iwithprefix</option>
options.  If the prefix represents a directory, you should include the
final <samp>/</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-iwithprefix <var>dir</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-iwithprefixbefore <var>dir</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1026" incode="1">iwithprefix</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1027" incode="1">iwithprefixbefore</indexterm></indexcommand>
<para>Append <var>dir</var> to the prefix specified previously with
<option>-iprefix</option>, and add the resulting directory to the include search
path.  <option>-iwithprefixbefore</option> puts it in the same place <option>-I</option>
would; <option>-iwithprefix</option> puts it where <option>-idirafter</option> would.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-isysroot <var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1028" incode="1">isysroot</indexterm></indexcommand>
<para>This option is like the <option>--sysroot</option> option, but applies only to
header files (except for Darwin targets, where it applies to both header
files and libraries).  See the <option>--sysroot</option> option for more
information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-imultilib <var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1029" incode="1">imultilib</indexterm></indexcommand>
<para>Use <var>dir</var> as a subdirectory of the directory containing
target-specific C++ headers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-isystem <var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1030" incode="1">isystem</indexterm></indexcommand>
<para>Search <var>dir</var> for header files, after all directories specified by
<option>-I</option> but before the standard system directories.  Mark it
as a system directory, so that it gets the same special treatment as
is applied to the standard system directories.
If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced
by the sysroot prefix; see <option>--sysroot</option> and <option>-isysroot</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-iquote <var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1031" incode="1">iquote</indexterm></indexcommand>
<para>Search <var>dir</var> only for header files requested with
<code><w>#include &quot;<var>file</var>&quot;</w></code>; they are not searched for
<code><w>#include &lt;<var>file</var>&gt;</w></code>, before all directories specified by
<option>-I</option> and before the standard system directories.
If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced
by the sysroot prefix; see <option>--sysroot</option> and <option>-isysroot</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdirectives-only</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1032" incode="1">fdirectives-only</indexterm></indexcommand>
<para>When preprocessing, handle directives, but do not expand macros.
</para>
<para>The option&textrsquo;s behavior depends on the <option>-E</option> and <option>-fpreprocessed</option>
options.
</para>
<para>With <option>-E</option>, preprocessing is limited to the handling of directives
such as <code>#define</code>, <code>#ifdef</code>, and <code>#error</code>.  Other
preprocessor operations, such as macro expansion and trigraph
conversion are not performed.  In addition, the <option>-dD</option> option is
implicitly enabled.
</para>
<para>With <option>-fpreprocessed</option>, predefinition of command line and most
builtin macros is disabled.  Macros such as <code>__LINE__</code>, which are
contextually dependent, are handled normally.  This enables compilation of
files previously preprocessed with <code>-E -fdirectives-only</code>.
</para>
<para>With both <option>-E</option> and <option>-fpreprocessed</option>, the rules for
<option>-fpreprocessed</option> take precedence.  This enables full preprocessing of
files previously preprocessed with <code>-E -fdirectives-only</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdollars-in-identifiers</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1033" incode="1">fdollars-in-identifiers</indexterm></indexcommand>
<anchor name="fdollars_002din_002didentifiers">fdollars-in-identifiers</anchor>
<para>Accept <samp>$</samp> in identifiers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fextended-identifiers</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1034" incode="1">fextended-identifiers</indexterm></indexcommand>
<para>Accept universal character names in identifiers.  This option is
enabled by default for C99 (and later C standard versions) and C++.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-canonical-system-headers</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1035" incode="1">fno-canonical-system-headers</indexterm></indexcommand>
<para>When preprocessing, do not shorten system header paths with canonicalization.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpreprocessed</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1036" incode="1">fpreprocessed</indexterm></indexcommand>
<para>Indicate to the preprocessor that the input file has already been
preprocessed.  This suppresses things like macro expansion, trigraph
conversion, escaped newline splicing, and processing of most directives.
The preprocessor still recognizes and removes comments, so that you can
pass a file preprocessed with <option>-C</option> to the compiler without
problems.  In this mode the integrated preprocessor is little more than
a tokenizer for the front ends.
</para>
<para><option>-fpreprocessed</option> is implicit if the input file has one of the
extensions <samp>.i</samp>, <samp>.ii</samp> or <samp>.mi</samp>.  These are the
extensions that GCC uses for preprocessed files created by
<option>-save-temps</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftabstop=<var>width</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1037" incode="1">ftabstop</indexterm></indexcommand>
<para>Set the distance between tab stops.  This helps the preprocessor report
correct column numbers in warnings or errors, even if tabs appear on the
line.  If the value is less than 1 or greater than 100, the option is
ignored.  The default is 8.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdebug-cpp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1038" incode="1">fdebug-cpp</indexterm></indexcommand>
<para>This option is only useful for debugging GCC.  When used with
<option>-E</option>, dumps debugging information about location maps.  Every
token in the output is preceded by the dump of the map its location
belongs to.  The dump of the map holding the location of a token would
be:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">&lbrace;<samp>P</samp>:<file>/file/path</file>;<samp>F</samp>:<file>/includer/path</file>;<samp>L</samp>:<var>line_num</var>;<samp>C</samp>:<var>col_num</var>;<samp>S</samp>:<var>system_header_p</var>;<samp>M</samp>:<var>map_address</var>;<samp>E</samp>:<var>macro_expansion_p</var>,<samp>loc</samp>:<var>location</var>&rbrace;
</pre></smallexample>

<para>When used without <option>-E</option>, this option has no effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftrack-macro-expansion<r>[</r>=<var>level</var><r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1039" incode="1">ftrack-macro-expansion</indexterm></indexcommand>
<para>Track locations of tokens across macro expansions. This allows the
compiler to emit diagnostic about the current macro expansion stack
when a compilation error occurs in a macro expansion. Using this
option makes the preprocessor and the compiler consume more
memory. The <var>level</var> parameter can be used to choose the level of
precision of token location tracking thus decreasing the memory
consumption if necessary. Value <samp>0</samp> of <var>level</var> de-activates
this option just as if no <option>-ftrack-macro-expansion</option> was present
on the command line. Value <samp>1</samp> tracks tokens locations in a
degraded mode for the sake of minimal memory overhead. In this mode
all tokens resulting from the expansion of an argument of a
function-like macro have the same location. Value <samp>2</samp> tracks
tokens locations completely. This value is the most memory hungry.
When this option is given no argument, the default parameter value is
<samp>2</samp>.
</para>
<para>Note that <code>-ftrack-macro-expansion=2</code> is activated by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fexec-charset=<var>charset</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1040" incode="1">fexec-charset</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="134">character set, execution</indexterm></cindex>
<para>Set the execution character set, used for string and character
constants.  The default is UTF-8.  <var>charset</var> can be any encoding
supported by the system&textrsquo;s <code>iconv</code> library routine.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fwide-exec-charset=<var>charset</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1041" incode="1">fwide-exec-charset</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="135">character set, wide execution</indexterm></cindex>
<para>Set the wide execution character set, used for wide string and
character constants.  The default is UTF-32 or UTF-16, whichever
corresponds to the width of <code>wchar_t</code>.  As with
<option>-fexec-charset</option>, <var>charset</var> can be any encoding supported
by the system&textrsquo;s <code>iconv</code> library routine; however, you will have
problems with encodings that do not fit exactly in <code>wchar_t</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-finput-charset=<var>charset</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1042" incode="1">finput-charset</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="136">character set, input</indexterm></cindex>
<para>Set the input character set, used for translation from the character
set of the input file to the source character set used by GCC&eosperiod;  If the
locale does not specify, or GCC cannot get this information from the
locale, the default is UTF-8.  This can be overridden by either the locale
or this command-line option.  Currently the command-line option takes
precedence if there&textrsquo;s a conflict.  <var>charset</var> can be any encoding
supported by the system&textrsquo;s <code>iconv</code> library routine.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fworking-directory</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1043" incode="1">fworking-directory</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1044" incode="1">fno-working-directory</indexterm></indexcommand>
<para>Enable generation of linemarkers in the preprocessor output that will
let the compiler know the current working directory at the time of
preprocessing.  When this option is enabled, the preprocessor will
emit, after the initial linemarker, a second linemarker with the
current working directory followed by two slashes.  GCC will use this
directory, when it&textrsquo;s present in the preprocessed input, as the
directory emitted as the current working directory in some debugging
information formats.  This option is implicitly enabled if debugging
information is enabled, but this can be inhibited with the negated
form <option>-fno-working-directory</option>.  If the <option>-P</option> flag is
present in the command line, this option has no effect, since no
<code>#line</code> directives are emitted whatsoever.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-show-column</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1045" incode="1">fno-show-column</indexterm></indexcommand>
<para>Do not print column numbers in diagnostics.  This may be necessary if
diagnostics are being scanned by a program that does not understand the
column numbers, such as <command>dejagnu</command>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-A <var>predicate</var>=<var>answer</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1046" incode="1">A</indexterm></indexcommand>
<para>Make an assertion with the predicate <var>predicate</var> and answer
<var>answer</var>.  This form is preferred to the older form <option>-A
<var>predicate</var>(<var>answer</var>)</option>, which is still supported, because
it does not use shell special characters.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-A -<var>predicate</var>=<var>answer</var></itemformat></item>
</tableterm><tableitem><para>Cancel an assertion with the predicate <var>predicate</var> and answer
<var>answer</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-dCHARS</itemformat></item>
</tableterm><tableitem><para><var>CHARS</var> is a sequence of one or more of the following characters,
and must not be preceded by a space.  Other characters are interpreted
by the compiler proper, or reserved for future versions of GCC, and so
are silently ignored.  If you specify characters whose behavior
conflicts, the result is undefined.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">M</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1047" incode="1">dM</indexterm></indexcommand>
<para>Instead of the normal output, generate a list of <samp>#define</samp>
directives for all the macros defined during the execution of the
preprocessor, including predefined macros.  This gives you a way of
finding out what is predefined in your version of the preprocessor.
Assuming you have no file <file>foo.h</file>, the command
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">touch foo.h; cpp -dM foo.h
</pre></smallexample>

<noindent></noindent>
<para>will show all the predefined macros.
</para>
<para>If you use <option>-dM</option> without the <option>-E</option> option, <option>-dM</option> is
interpreted as a synonym for <option>-fdump-rtl-mach</option>.
<xref label="Debugging-Options" manual="gcc"><xrefnodename>Debugging Options</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" "></xrefprinteddesc><xrefinfofile>gcc</xrefinfofile></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">D</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1048" incode="1">dD</indexterm></indexcommand>
<para>Like <samp>M</samp> except in two respects: it does <emph>not</emph> include the
predefined macros, and it outputs <emph>both</emph> the <samp>#define</samp>
directives and the result of preprocessing.  Both kinds of output go to
the standard output file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">N</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1049" incode="1">dN</indexterm></indexcommand>
<para>Like <samp>D</samp>, but emit only the macro names, not their expansions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">I</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1050" incode="1">dI</indexterm></indexcommand>
<para>Output <samp>#include</samp> directives in addition to the result of
preprocessing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">U</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1051" incode="1">dU</indexterm></indexcommand>
<para>Like <samp>D</samp> except that only macros that are expanded, or whose
definedness is tested in preprocessor directives, are output; the
output is delayed until the use or test of the macro; and
<samp>#undef</samp> directives are also output for macros tested but
undefined at the time.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-P</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1052" incode="1">P</indexterm></indexcommand>
<para>Inhibit generation of linemarkers in the output from the preprocessor.
This might be useful when running the preprocessor on something that is
not C code, and will be sent to a program which might be confused by the
linemarkers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-C</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1053" incode="1">C</indexterm></indexcommand>
<para>Do not discard comments.  All comments are passed through to the output
file, except for comments in processed directives, which are deleted
along with the directive.
</para>
<para>You should be prepared for side effects when using <option>-C</option>; it
causes the preprocessor to treat comments as tokens in their own right.
For example, comments appearing at the start of what would be a
directive line have the effect of turning that line into an ordinary
source line, since the first token on the line is no longer a <samp>#</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-CC</itemformat></item>
</tableterm><tableitem><para>Do not discard comments, including during macro expansion.  This is
like <option>-C</option>, except that comments contained within macros are
also passed through to the output file where the macro is expanded.
</para>
<para>In addition to the side-effects of the <option>-C</option> option, the
<option>-CC</option> option causes all C++-style comments inside a macro
to be converted to C-style comments.  This is to prevent later use
of that macro from inadvertently commenting out the remainder of
the source line.
</para>
<para>The <option>-CC</option> option is generally used to support lint comments.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-traditional-cpp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1054" incode="1">traditional-cpp</indexterm></indexcommand>
<para>Try to imitate the behavior of old-fashioned C preprocessors, as
opposed to ISO C preprocessors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-trigraphs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1055" incode="1">trigraphs</indexterm></indexcommand>
<para>Process trigraph sequences.
These are three-character sequences, all starting with <samp>??</samp>, that
are defined by ISO C to stand for single characters.  For example,
<samp>??/</samp> stands for <samp>\</samp>, so <samp>'??/n'</samp> is a character
constant for a newline.  By default, GCC ignores trigraphs, but in
standard-conforming modes it converts them.  See the <option>-std</option> and
<option>-ansi</option> options.
</para>
<para>The nine trigraphs and their replacements are
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">Trigraph:       ??(  ??)  ??&lt;  ??&gt;  ??=  ??/  ??'  ??!  ??-
Replacement:      [    ]    &lbrace;    &rbrace;    #    \    ^    |    ~
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-remap</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1056" incode="1">remap</indexterm></indexcommand>
<para>Enable special code to work around file systems which only permit very
short file names, such as MS-DOS&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">--help</itemformat></item>
<itemx spaces=" "><itemformat command="code">--target-help</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1057" incode="1">help</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1058" incode="1">target-help</indexterm></indexcommand>
<para>Print text describing all the command-line options instead of
preprocessing anything.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-v</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1059" incode="1">v</indexterm></indexcommand>
<para>Verbose mode.  Print out GNU CPP&textrsquo;s version number at the beginning of
execution, and report the final form of the include path.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-H</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1060" incode="1">H</indexterm></indexcommand>
<para>Print the name of each header file used, in addition to other normal
activities.  Each name is indented to show how deep in the
<samp>#include</samp> stack it is.  Precompiled header files are also
printed, even if they are found to be invalid; an invalid precompiled
header file is printed with <samp>...x</samp> and a valid one with <samp>...!</samp> .
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-version</itemformat></item>
<itemx spaces=" "><itemformat command="code">--version</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1061" incode="1">version</indexterm></indexcommand>
<para>Print out GNU CPP&textrsquo;s version number.  With one dash, proceed to
preprocess as normal.  With two dashes, exit immediately.
</para></tableitem></tableentry></table>

</section>
<node name="Assembler-Options" spaces=" "><nodename>Assembler Options</nodename><nodenext automatic="on">Link Options</nodenext><nodeprev automatic="on">Preprocessor Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Passing Options to the Assembler</sectiontitle>

<!-- c prevent bad page break with this line -->
<para>You can pass options to the assembler.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-Wa,<var>option</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1062" incode="1">Wa</indexterm></indexcommand>
<para>Pass <var>option</var> as an option to the assembler.  If <var>option</var>
contains commas, it is split into multiple options at the commas.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Xassembler <var>option</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1063" incode="1">Xassembler</indexterm></indexcommand>
<para>Pass <var>option</var> as an option to the assembler.  You can use this to
supply system-specific assembler options that GCC does not
recognize.
</para>
<para>If you want to pass an option that takes an argument, you must use
<option>-Xassembler</option> twice, once for the option and once for the argument.
</para>
</tableitem></tableentry></table>

</section>
<node name="Link-Options" spaces=" "><nodename>Link Options</nodename><nodenext automatic="on">Directory Options</nodenext><nodeprev automatic="on">Assembler Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Options for Linking</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="137">link options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="138">options, linking</indexterm></cindex>

<para>These options come into play when the compiler links object files into
an executable output file.  They are meaningless if the compiler is
not doing a link step.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem><cindex index="cp" spaces=" "><indexterm index="cp" number="139">file names</indexterm></cindex>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>object-file-name</var></itemformat></item>
</tableterm><tableitem><para>A file name that does not end in a special recognized suffix is
considered to name an object file or library.  (Object files are
distinguished from libraries by the linker according to the file
contents.)  If linking is done, these object files are used as input
to the linker.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-c</itemformat></item>
<itemx spaces=" "><itemformat command="code">-S</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-E</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1064" incode="1">c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1065" incode="1">S</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1066" incode="1">E</indexterm></indexcommand>
<para>If any of these options is used, then the linker is not run, and
object file names should not be used as arguments.  <xref label="Overall-Options"><xrefnodename>Overall
Options</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fuse-ld=bfd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1067" incode="1">fuse-ld=bfd</indexterm></indexcommand>
<para>Use the <command>bfd</command> linker instead of the default linker.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fuse-ld=gold</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1068" incode="1">fuse-ld=gold</indexterm></indexcommand>
<para>Use the <command>gold</command> linker instead of the default linker.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="140">Libraries</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-l<var>library</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-l <var>library</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1069" incode="1">l</indexterm></indexcommand>
<para>Search the library named <var>library</var> when linking.  (The second
alternative with the library as a separate argument is only for
POSIX compliance and is not recommended.)
</para>
<para>It makes a difference where in the command you write this option; the
linker searches and processes libraries and object files in the order they
are specified.  Thus, <samp>foo.o -lz bar.o</samp> searches library <samp>z</samp>
after file <file>foo.o</file> but before <file>bar.o</file>.  If <file>bar.o</file> refers
to functions in <samp>z</samp>, those functions may not be loaded.
</para>
<para>The linker searches a standard list of directories for the library,
which is actually a file named <file>lib<var>library</var>.a</file>.  The linker
then uses this file as if it had been specified precisely by name.
</para>
<para>The directories searched include several standard system directories
plus any that you specify with <option>-L</option>.
</para>
<para>Normally the files found this way are library files&textmdash;archive files
whose members are object files.  The linker handles an archive file by
scanning through it for members which define symbols that have so far
been referenced but not defined.  But if the file that is found is an
ordinary object file, it is linked in the usual fashion.  The only
difference between using an <option>-l</option> option and specifying a file name
is that <option>-l</option> surrounds <var>library</var> with <samp>lib</samp> and <samp>.a</samp>
and searches several directories.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-lobjc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1070" incode="1">lobjc</indexterm></indexcommand>
<para>You need this special case of the <option>-l</option> option in order to
link an Objective-C or Objective-C++ program.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-nostartfiles</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1071" incode="1">nostartfiles</indexterm></indexcommand>
<para>Do not use the standard system startup files when linking.
The standard system libraries are used normally, unless <option>-nostdlib</option>
or <option>-nodefaultlibs</option> is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-nodefaultlibs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1072" incode="1">nodefaultlibs</indexterm></indexcommand>
<para>Do not use the standard system libraries when linking.
Only the libraries you specify are passed to the linker, and options
specifying linkage of the system libraries, such as <option>-static-libgcc</option>
or <option>-shared-libgcc</option>, are ignored.  
The standard startup files are used normally, unless <option>-nostartfiles</option>
is used.  
</para>
<para>The compiler may generate calls to <code>memcmp</code>,
<code>memset</code>, <code>memcpy</code> and <code>memmove</code>.
These entries are usually resolved by entries in
libc.  These entry points should be supplied through some other
mechanism when this option is specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-nostdlib</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1073" incode="1">nostdlib</indexterm></indexcommand>
<para>Do not use the standard system startup files or libraries when linking.
No startup files and only the libraries you specify are passed to
the linker, and options specifying linkage of the system libraries, such as
<option>-static-libgcc</option> or <option>-shared-libgcc</option>, are ignored.
</para>
<para>The compiler may generate calls to <code>memcmp</code>, <code>memset</code>,
<code>memcpy</code> and <code>memmove</code>.
These entries are usually resolved by entries in
libc.  These entry points should be supplied through some other
mechanism when this option is specified.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="141"><option>-lgcc</option>, use with <option>-nostdlib</option></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="142"><option>-nostdlib</option> and unresolved references</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="143">unresolved references and <option>-nostdlib</option></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="144"><option>-lgcc</option>, use with <option>-nodefaultlibs</option></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="145"><option>-nodefaultlibs</option> and unresolved references</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="146">unresolved references and <option>-nodefaultlibs</option></indexterm></cindex>
<para>One of the standard libraries bypassed by <option>-nostdlib</option> and
<option>-nodefaultlibs</option> is <file>libgcc.a</file>, a library of internal subroutines
which GCC uses to overcome shortcomings of particular machines, or special
needs for some languages.
(<xref label="Interface" manual="gccint"><xrefnodename>Interface</xrefnodename><xrefprinteddesc>Interfacing to GCC Output</xrefprinteddesc><xrefinfofile>gccint</xrefinfofile><xrefprintedname>GNU Compiler
Collection (GCC) Internals</xrefprintedname></xref>,
for more discussion of <file>libgcc.a</file>.)
In most cases, you need <file>libgcc.a</file> even when you want to avoid
other standard libraries.  In other words, when you specify <option>-nostdlib</option>
or <option>-nodefaultlibs</option> you should usually specify <option>-lgcc</option> as well.
This ensures that you have no unresolved references to internal GCC
library subroutines.
(An example of such an internal subroutine is <code>__main</code>, used to ensure C++
constructors are called; <pxref label="Collect2" manual="gccint"><xrefnodename>Collect2</xrefnodename><xrefprinteddesc><code>collect2</code></xrefprinteddesc><xrefinfofile spaces=" ">gccint</xrefinfofile><xrefprintedname spaces="\n">GNU Compiler Collection (GCC) Internals</xrefprintedname></pxref>.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-pie</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1074" incode="1">pie</indexterm></indexcommand>
<para>Produce a position independent executable on targets that support it.
For predictable results, you must also specify the same set of options
used for compilation (<option>-fpie</option>, <option>-fPIE</option>,
or model suboptions) when you specify this linker option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-rdynamic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1075" incode="1">rdynamic</indexterm></indexcommand>
<para>Pass the flag <option>-export-dynamic</option> to the ELF linker, on targets
that support it. This instructs the linker to add all symbols, not
only used ones, to the dynamic symbol table. This option is needed
for some uses of <code>dlopen</code> or to allow obtaining backtraces
from within a program.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-s</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1076" incode="1">s</indexterm></indexcommand>
<para>Remove all symbol table and relocation information from the executable.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-static</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1077" incode="1">static</indexterm></indexcommand>
<para>On systems that support dynamic linking, this prevents linking with the shared
libraries.  On other systems, this option has no effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-shared</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1078" incode="1">shared</indexterm></indexcommand>
<para>Produce a shared object which can then be linked with other objects to
form an executable.  Not all systems support this option.  For predictable
results, you must also specify the same set of options used for compilation
(<option>-fpic</option>, <option>-fPIC</option>, or model suboptions) when
you specify this linker option.<footnote><para>On some systems, <samp>gcc -shared</samp>
needs to build supplementary stub code for constructors to work.  On
multi-libbed systems, <samp>gcc -shared</samp> must select the correct support
libraries to link against.  Failing to supply the correct flags may lead
to subtle defects.  Supplying them in cases where they are not necessary
is innocuous.</para></footnote>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-shared-libgcc</itemformat></item>
<itemx spaces=" "><itemformat command="code">-static-libgcc</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1079" incode="1">shared-libgcc</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1080" incode="1">static-libgcc</indexterm></indexcommand>
<para>On systems that provide <file>libgcc</file> as a shared library, these options
force the use of either the shared or static version, respectively.
If no shared version of <file>libgcc</file> was built when the compiler was
configured, these options have no effect.
</para>
<para>There are several situations in which an application should use the
shared <file>libgcc</file> instead of the static version.  The most common
of these is when the application wishes to throw and catch exceptions
across different shared libraries.  In that case, each of the libraries
as well as the application itself should use the shared <file>libgcc</file>.
</para>
<para>Therefore, the G++ and GCJ drivers automatically add
<option>-shared-libgcc</option> whenever you build a shared library or a main
executable, because C++ and Java programs typically use exceptions, so
this is the right thing to do.
</para>
<para>If, instead, you use the GCC driver to create shared libraries, you may
find that they are not always linked with the shared <file>libgcc</file>.
If GCC finds, at its configuration time, that you have a non-GNU linker
or a GNU linker that does not support option <option>--eh-frame-hdr</option>,
it links the shared version of <file>libgcc</file> into shared libraries
by default.  Otherwise, it takes advantage of the linker and optimizes
away the linking with the shared version of <file>libgcc</file>, linking with
the static version of libgcc by default.  This allows exceptions to
propagate through such shared libraries, without incurring relocation
costs at library load time.
</para>
<para>However, if a library or main executable is supposed to throw or catch
exceptions, you must link it using the G++ or GCJ driver, as appropriate
for the languages used in the program, or using the option
<option>-shared-libgcc</option>, such that it is linked with the shared
<file>libgcc</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-static-libasan</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1081" incode="1">static-libasan</indexterm></indexcommand>
<para>When the <option>-fsanitize=address</option> option is used to link a program,
the GCC driver automatically links against <option>libasan</option>.  If
<file>libasan</file> is available as a shared library, and the <option>-static</option>
option is not used, then this links against the shared version of
<file>libasan</file>.  The <option>-static-libasan</option> option directs the GCC
driver to link <file>libasan</file> statically, without necessarily linking
other libraries statically.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-static-libtsan</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1082" incode="1">static-libtsan</indexterm></indexcommand>
<para>When the <option>-fsanitize=thread</option> option is used to link a program,
the GCC driver automatically links against <option>libtsan</option>.  If
<file>libtsan</file> is available as a shared library, and the <option>-static</option>
option is not used, then this links against the shared version of
<file>libtsan</file>.  The <option>-static-libtsan</option> option directs the GCC
driver to link <file>libtsan</file> statically, without necessarily linking
other libraries statically.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-static-liblsan</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1083" incode="1">static-liblsan</indexterm></indexcommand>
<para>When the <option>-fsanitize=leak</option> option is used to link a program,
the GCC driver automatically links against <option>liblsan</option>.  If
<file>liblsan</file> is available as a shared library, and the <option>-static</option>
option is not used, then this links against the shared version of
<file>liblsan</file>.  The <option>-static-liblsan</option> option directs the GCC
driver to link <file>liblsan</file> statically, without necessarily linking
other libraries statically.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-static-libubsan</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1084" incode="1">static-libubsan</indexterm></indexcommand>
<para>When the <option>-fsanitize=undefined</option> option is used to link a program,
the GCC driver automatically links against <option>libubsan</option>.  If
<file>libubsan</file> is available as a shared library, and the <option>-static</option>
option is not used, then this links against the shared version of
<file>libubsan</file>.  The <option>-static-libubsan</option> option directs the GCC
driver to link <file>libubsan</file> statically, without necessarily linking
other libraries statically.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-static-libmpx</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1085" incode="1">static-libmpx</indexterm></indexcommand>
<para>When the <option>-fcheck-pointer bounds</option> and <option>-mmpx</option> options are
used to link a program, the GCC driver automatically links against
<file>libmpx</file>.  If <file>libmpx</file> is available as a shared library,
and the <option>-static</option> option is not used, then this links against
the shared version of <file>libmpx</file>.  The <option>-static-libmpx</option>
option directs the GCC driver to link <file>libmpx</file> statically,
without necessarily linking other libraries statically.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-static-libmpxwrappers</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1086" incode="1">static-libmpxwrappers</indexterm></indexcommand>
<para>When the <option>-fcheck-pointer bounds</option> and <option>-mmpx</option> options are used
to link a program without also using <option>-fno-chkp-use-wrappers</option>, the
GCC driver automatically links against <file>libmpxwrappers</file>.  If
<file>libmpxwrappers</file> is available as a shared library, and the
<option>-static</option> option is not used, then this links against the shared
version of <file>libmpxwrappers</file>.  The <option>-static-libmpxwrappers</option>
option directs the GCC driver to link <file>libmpxwrappers</file> statically,
without necessarily linking other libraries statically.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-static-libstdc++</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1087" incode="1">static-libstdc++</indexterm></indexcommand>
<para>When the <command>g++</command> program is used to link a C++ program, it
normally automatically links against <option>libstdc++</option>.  If
<file>libstdc++</file> is available as a shared library, and the
<option>-static</option> option is not used, then this links against the
shared version of <file>libstdc++</file>.  That is normally fine.  However, it
is sometimes useful to freeze the version of <file>libstdc++</file> used by
the program without going all the way to a fully static link.  The
<option>-static-libstdc++</option> option directs the <command>g++</command> driver to
link <file>libstdc++</file> statically, without necessarily linking other
libraries statically.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-symbolic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1088" incode="1">symbolic</indexterm></indexcommand>
<para>Bind references to global symbols when building a shared object.  Warn
about any unresolved references (unless overridden by the link editor
option <option>-Xlinker -z -Xlinker defs</option>).  Only a few systems support
this option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-T <var>script</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1089" incode="1">T</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="147">linker script</indexterm></cindex>
<para>Use <var>script</var> as the linker script.  This option is supported by most
systems using the GNU linker.  On some targets, such as bare-board
targets without an operating system, the <option>-T</option> option may be required
when linking to avoid references to undefined symbols.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Xlinker <var>option</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1090" incode="1">Xlinker</indexterm></indexcommand>
<para>Pass <var>option</var> as an option to the linker.  You can use this to
supply system-specific linker options that GCC does not recognize.
</para>
<para>If you want to pass an option that takes a separate argument, you must use
<option>-Xlinker</option> twice, once for the option and once for the argument.
For example, to pass <option>-assert definitions</option>, you must write
<option>-Xlinker -assert -Xlinker definitions</option>.  It does not work to write
<option>-Xlinker &quot;-assert definitions&quot;</option>, because this passes the entire
string as a single argument, which is not what the linker expects.
</para>
<para>When using the GNU linker, it is usually more convenient to pass
arguments to linker options using the <option><var>option</var>=<var>value</var></option>
syntax than as separate arguments.  For example, you can specify
<option>-Xlinker -Map=output.map</option> rather than
<option>-Xlinker -Map -Xlinker output.map</option>.  Other linkers may not support
this syntax for command-line options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Wl,<var>option</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1091" incode="1">Wl</indexterm></indexcommand>
<para>Pass <var>option</var> as an option to the linker.  If <var>option</var> contains
commas, it is split into multiple options at the commas.  You can use this
syntax to pass an argument to the option.
For example, <option>-Wl,-Map,output.map</option> passes <option>-Map output.map</option> to the
linker.  When using the GNU linker, you can also get the same effect with
<option>-Wl,-Map=output.map</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-u <var>symbol</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1092" incode="1">u</indexterm></indexcommand>
<para>Pretend the symbol <var>symbol</var> is undefined, to force linking of
library modules to define it.  You can use <option>-u</option> multiple times with
different symbols to force loading of additional library modules.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-z <var>keyword</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1093" incode="1">z</indexterm></indexcommand>
<para><option>-z</option> is passed directly on to the linker along with the keyword
<var>keyword</var>. See the section in the documentation of your linker for
permitted values and their meanings.
</para></tableitem></tableentry></table>

</section>
<node name="Directory-Options" spaces=" "><nodename>Directory Options</nodename><nodenext automatic="on">Spec Files</nodenext><nodeprev automatic="on">Link Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Options for Directory Search</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="148">directory options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="149">options, directory search</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="150">search path</indexterm></cindex>

<para>These options specify directories to search for header files, for
libraries and for parts of the compiler:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-I<var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1094" incode="1">I</indexterm></indexcommand>
<para>Add the directory <var>dir</var> to the head of the list of directories to be
searched for header files.  This can be used to override a system header
file, substituting your own version, since these directories are
searched before the system header file directories.  However, you should
not use this option to add directories that contain vendor-supplied
system header files (use <option>-isystem</option> for that).  If you use more than
one <option>-I</option> option, the directories are scanned in left-to-right
order; the standard system directories come after.
</para>
<para>If a standard system include directory, or a directory specified with
<option>-isystem</option>, is also specified with <option>-I</option>, the <option>-I</option>
option is ignored.  The directory is still searched but as a
system directory at its normal position in the system include chain.
This is to ensure that GCC&textrsquo;s procedure to fix buggy system headers and
the ordering for the <code>include_next</code> directive are not inadvertently changed.
If you really need to change the search order for system directories,
use the <option>-nostdinc</option> and/or <option>-isystem</option> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-iplugindir=<var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1095" incode="1">iplugindir=</indexterm></indexcommand>
<para>Set the directory to search for plugins that are passed
by <option>-fplugin=<var>name</var></option> instead of
<option>-fplugin=<var>path</var>/<var>name</var>.so</option>.  This option is not meant
to be used by the user, but only passed by the driver.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-iquote<var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1096" incode="1">iquote</indexterm></indexcommand>
<para>Add the directory <var>dir</var> to the head of the list of directories to
be searched for header files only for the case of <code>#include
&quot;<var>file</var>&quot;</code>; they are not searched for <code>#include &lt;<var>file</var>&gt;</code>,
otherwise just like <option>-I</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-L<var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1097" incode="1">L</indexterm></indexcommand>
<para>Add directory <var>dir</var> to the list of directories to be searched
for <option>-l</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-B<var>prefix</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1098" incode="1">B</indexterm></indexcommand>
<para>This option specifies where to find the executables, libraries,
include files, and data files of the compiler itself.
</para>
<para>The compiler driver program runs one or more of the subprograms
<command>cpp</command>, <command>cc1</command>, <command>as</command> and <command>ld</command>.  It tries
<var>prefix</var> as a prefix for each program it tries to run, both with and
without <samp><var>machine</var>/<var>version</var>/</samp> (<pxref label="Target-Options"><xrefnodename>Target Options</xrefnodename></pxref>).
</para>
<para>For each subprogram to be run, the compiler driver first tries the
<option>-B</option> prefix, if any.  If that name is not found, or if <option>-B</option>
is not specified, the driver tries two standard prefixes, 
<file>/usr/lib/gcc/</file> and <file>/usr/local/lib/gcc/</file>.  If neither of
those results in a file name that is found, the unmodified program
name is searched for using the directories specified in your
<env>PATH</env> environment variable.
</para>
<para>The compiler checks to see if the path provided by <option>-B</option>
refers to a directory, and if necessary it adds a directory
separator character at the end of the path.
</para>
<para><option>-B</option> prefixes that effectively specify directory names also apply
to libraries in the linker, because the compiler translates these
options into <option>-L</option> options for the linker.  They also apply to
include files in the preprocessor, because the compiler translates these
options into <option>-isystem</option> options for the preprocessor.  In this case,
the compiler appends <samp>include</samp> to the prefix.
</para>
<para>The runtime support file <file>libgcc.a</file> can also be searched for using
the <option>-B</option> prefix, if needed.  If it is not found there, the two
standard prefixes above are tried, and that is all.  The file is left
out of the link if it is not found by those means.
</para>
<para>Another way to specify a prefix much like the <option>-B</option> prefix is to use
the environment variable <env>GCC_EXEC_PREFIX</env>.  <xref label="Environment-Variables"><xrefnodename>Environment
Variables</xrefnodename></xref>.
</para>
<para>As a special kludge, if the path provided by <option>-B</option> is
<file>[dir/]stage<var>N</var>/</file>, where <var>N</var> is a number in the range 0 to
9, then it is replaced by <file>[dir/]include</file>.  This is to help
with boot-strapping the compiler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-specs=<var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1099" incode="1">specs</indexterm></indexcommand>
<para>Process <var>file</var> after the compiler reads in the standard <file>specs</file>
file, in order to override the defaults which the <command>gcc</command> driver
program uses when determining what switches to pass to <command>cc1</command>,
<command>cc1plus</command>, <command>as</command>, <command>ld</command>, etc.  More than one
<option>-specs=<var>file</var></option> can be specified on the command line, and they
are processed in order, from left to right.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">--sysroot=<var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1100" incode="1">sysroot</indexterm></indexcommand>
<para>Use <var>dir</var> as the logical root directory for headers and libraries.
For example, if the compiler normally searches for headers in
<file>/usr/include</file> and libraries in <file>/usr/lib</file>, it instead
searches <file><var>dir</var>/usr/include</file> and <file><var>dir</var>/usr/lib</file>.
</para>
<para>If you use both this option and the <option>-isysroot</option> option, then
the <option>--sysroot</option> option applies to libraries, but the
<option>-isysroot</option> option applies to header files.
</para>
<para>The GNU linker (beginning with version 2.16) has the necessary support
for this option.  If your linker does not support this option, the
header file aspect of <option>--sysroot</option> still works, but the
library aspect does not.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">--no-sysroot-suffix</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1101" incode="1">no-sysroot-suffix</indexterm></indexcommand>
<para>For some targets, a suffix is added to the root directory specified
with <option>--sysroot</option>, depending on the other options used, so that
headers may for example be found in
<file><var>dir</var>/<var>suffix</var>/usr/include</file> instead of
<file><var>dir</var>/usr/include</file>.  This option disables the addition of
such a suffix.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-I-</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1102" incode="1">I-</indexterm></indexcommand>
<para>This option has been deprecated.  Please use <option>-iquote</option> instead for
<option>-I</option> directories before the <option>-I-</option> and remove the <option>-I-</option>
option.
Any directories you specify with <option>-I</option> options before the <option>-I-</option>
option are searched only for the case of <code>#include &quot;<var>file</var>&quot;</code>;
they are not searched for <code>#include &lt;<var>file</var>&gt;</code>.
</para>
<para>If additional directories are specified with <option>-I</option> options after
the <option>-I-</option> option, these directories are searched for all <code>#include</code>
directives.  (Ordinarily <emph>all</emph> <option>-I</option> directories are used
this way.)
</para>
<para>In addition, the <option>-I-</option> option inhibits the use of the current
directory (where the current input file came from) as the first search
directory for <code>#include &quot;<var>file</var>&quot;</code>.  There is no way to
override this effect of <option>-I-</option>.  With <option>-I.</option> you can specify
searching the directory that is current when the compiler is
invoked.  That is not exactly the same as what the preprocessor does
by default, but it is often satisfactory.
</para>
<para><option>-I-</option> does not inhibit the use of the standard system directories
for header files.  Thus, <option>-I-</option> and <option>-nostdinc</option> are
independent.
</para></tableitem></tableentry></table>

<!-- c man end -->

</section>
<node name="Spec-Files" spaces=" "><nodename>Spec Files</nodename><nodenext automatic="on">Target Options</nodenext><nodeprev automatic="on">Directory Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Specifying Subprocesses and the Switches to Pass to Them</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="151">Spec Files</indexterm></cindex>

<para><command>gcc</command> is a driver program.  It performs its job by invoking a
sequence of other programs to do the work of compiling, assembling and
linking.  GCC interprets its command-line parameters and uses these to
deduce which programs it should invoke, and which command-line options
it ought to place on their command lines.  This behavior is controlled
by <dfn>spec strings</dfn>.  In most cases there is one spec string for each
program that GCC can invoke, but a few programs have multiple spec
strings to control their behavior.  The spec strings built into GCC can
be overridden by using the <option>-specs=</option> command-line switch to specify
a spec file.
</para>
<para><dfn>Spec files</dfn> are plaintext files that are used to construct spec
strings.  They consist of a sequence of directives separated by blank
lines.  The type of directive is determined by the first non-whitespace
character on the line, which can be one of the following:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">%<var>command</var></itemformat></item>
</tableterm><tableitem><para>Issues a <var>command</var> to the spec file processor.  The commands that can
appear here are:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">%include &lt;<var>file</var>&gt;</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="152"><code>%include</code></indexterm></cindex>
<para>Search for <var>file</var> and insert its text at the current point in the
specs file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%include_noerr &lt;<var>file</var>&gt;</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="153"><code>%include_noerr</code></indexterm></cindex>
<para>Just like <samp>%include</samp>, but do not generate an error message if the include
file cannot be found.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%rename <var>old_name</var> <var>new_name</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="154"><code>%rename</code></indexterm></cindex>
<para>Rename the spec string <var>old_name</var> to <var>new_name</var>.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">*[<var>spec_name</var>]:</itemformat></item>
</tableterm><tableitem><para>This tells the compiler to create, override or delete the named spec
string.  All lines after this directive up to the next directive or
blank line are considered to be the text for the spec string.  If this
results in an empty string then the spec is deleted.  (Or, if the
spec did not exist, then nothing happens.)  Otherwise, if the spec
does not currently exist a new spec is created.  If the spec does
exist then its contents are overridden by the text of this
directive, unless the first character of that text is the <samp>+</samp>
character, in which case the text is appended to the spec.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">[<var>suffix</var>]:</itemformat></item>
</tableterm><tableitem><para>Creates a new <samp>[<var>suffix</var>] spec</samp> pair.  All lines after this directive
and up to the next directive or blank line are considered to make up the
spec string for the indicated suffix.  When the compiler encounters an
input file with the named suffix, it processes the spec string in
order to work out how to compile that file.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">.ZZ:
z-compile -input %i
</pre></smallexample>

<para>This says that any input file whose name ends in <samp>.ZZ</samp> should be
passed to the program <samp>z-compile</samp>, which should be invoked with the
command-line switch <option>-input</option> and with the result of performing the
<samp>%i</samp> substitution.  (See below.)
</para>
<para>As an alternative to providing a spec string, the text following a
suffix directive can be one of the following:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">&arobase;<var>language</var></itemformat></item>
</tableterm><tableitem><para>This says that the suffix is an alias for a known <var>language</var>.  This is
similar to using the <option>-x</option> command-line switch to GCC to specify a
language explicitly.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">.ZZ:
&arobase;c++
</pre></smallexample>

<para>Says that .ZZ files are, in fact, C++ source files.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">#<var>name</var></itemformat></item>
</tableterm><tableitem><para>This causes an error messages saying:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"><var>name</var> compiler not installed on this system.
</pre></smallexample>
</tableitem></tableentry></table>

<para>GCC already has an extensive list of suffixes built into it.
This directive adds an entry to the end of the list of suffixes, but
since the list is searched from the end backwards, it is effectively
possible to override earlier entries using this technique.
</para>
</tableitem></tableentry></table>

<para>GCC has the following spec strings built into it.  Spec files can
override these strings or create their own.  Note that individual
targets can also add their own spec strings to this list.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">asm          Options to pass to the assembler
asm_final    Options to pass to the assembler post-processor
cpp          Options to pass to the C preprocessor
cc1          Options to pass to the C compiler
cc1plus      Options to pass to the C++ compiler
endfile      Object files to include at the end of the link
link         Options to pass to the linker
lib          Libraries to include on the command line to the linker
libgcc       Decides which GCC support library to pass to the linker
linker       Sets the name of the linker
predefines   Defines to be passed to the C preprocessor
signed_char  Defines to pass to CPP to say whether <code>char</code> is signed
             by default
startfile    Object files to include at the start of the link
</pre></smallexample>

<para>Here is a small example of a spec file:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">%rename lib                 old_lib

*lib:
--start-group -lgcc -lc -leval1 --end-group %(old_lib)
</pre></smallexample>

<para>This example renames the spec called <samp>lib</samp> to <samp>old_lib</samp> and
then overrides the previous definition of <samp>lib</samp> with a new one.
The new definition adds in some extra command-line options before
including the text of the old definition.
</para>
<para><dfn>Spec strings</dfn> are a list of command-line options to be passed to their
corresponding program.  In addition, the spec strings can contain
<samp>%</samp>-prefixed sequences to substitute variable text or to
conditionally insert text into the command line.  Using these constructs
it is possible to generate quite complex command lines.
</para>
<para>Here is a table of all defined <samp>%</samp>-sequences for spec
strings.  Note that spaces are not generated automatically around the
results of expanding these sequences.  Therefore you can concatenate them
together or combine them with constant text in a single argument.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">%%</itemformat></item>
</tableterm><tableitem><para>Substitute one <samp>%</samp> into the program name or argument.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%i</itemformat></item>
</tableterm><tableitem><para>Substitute the name of the input file being processed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%b</itemformat></item>
</tableterm><tableitem><para>Substitute the basename of the input file being processed.
This is the substring up to (and not including) the last period
and not including the directory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%B</itemformat></item>
</tableterm><tableitem><para>This is the same as <samp>%b</samp>, but include the file suffix (text after
the last period).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%d</itemformat></item>
</tableterm><tableitem><para>Marks the argument containing or following the <samp>%d</samp> as a
temporary file name, so that that file is deleted if GCC exits
successfully.  Unlike <samp>%g</samp>, this contributes no text to the
argument.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%g<var>suffix</var></itemformat></item>
</tableterm><tableitem><para>Substitute a file name that has suffix <var>suffix</var> and is chosen
once per compilation, and mark the argument in the same way as
<samp>%d</samp>.  To reduce exposure to denial-of-service attacks, the file
name is now chosen in a way that is hard to predict even when previously
chosen file names are known.  For example, <samp>%g.s &dots; %g.o &dots; %g.s</samp>
might turn into <samp>ccUVUUAU.s ccXYAXZ12.o ccUVUUAU.s</samp>.  <var>suffix</var> matches
the regexp <samp>[.A-Za-z]*</samp> or the special string <samp>%O</samp>, which is
treated exactly as if <samp>%O</samp> had been preprocessed.  Previously, <samp>%g</samp>
was simply substituted with a file name chosen once per compilation,
without regard to any appended suffix (which was therefore treated
just like ordinary text), making such attacks more likely to succeed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%u<var>suffix</var></itemformat></item>
</tableterm><tableitem><para>Like <samp>%g</samp>, but generates a new temporary file name
each time it appears instead of once per compilation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%U<var>suffix</var></itemformat></item>
</tableterm><tableitem><para>Substitutes the last file name generated with <samp>%u<var>suffix</var></samp>, generating a
new one if there is no such last file name.  In the absence of any
<samp>%u<var>suffix</var></samp>, this is just like <samp>%g<var>suffix</var></samp>, except they don&textrsquo;t share
the same suffix <emph>space</emph>, so <samp>%g.s &dots; %U.s &dots; %g.s &dots; %U.s</samp>
involves the generation of two distinct file names, one
for each <samp>%g.s</samp> and another for each <samp>%U.s</samp>.  Previously, <samp>%U</samp> was
simply substituted with a file name chosen for the previous <samp>%u</samp>,
without regard to any appended suffix.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%j<var>suffix</var></itemformat></item>
</tableterm><tableitem><para>Substitutes the name of the <code>HOST_BIT_BUCKET</code>, if any, and if it is
writable, and if <option>-save-temps</option> is not used; 
otherwise, substitute the name
of a temporary file, just like <samp>%u</samp>.  This temporary file is not
meant for communication between processes, but rather as a junk
disposal mechanism.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%|<var>suffix</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">%m<var>suffix</var></itemformat></itemx>
</tableterm><tableitem><para>Like <samp>%g</samp>, except if <option>-pipe</option> is in effect.  In that case
<samp>%|</samp> substitutes a single dash and <samp>%m</samp> substitutes nothing at
all.  These are the two most common ways to instruct a program that it
should read from standard input or write to standard output.  If you
need something more elaborate you can use an <samp>%&lbrace;pipe:<code>X</code>&rbrace;</samp>
construct: see for example <file>f/lang-specs.h</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%.<var>SUFFIX</var></itemformat></item>
</tableterm><tableitem><para>Substitutes <var>.SUFFIX</var> for the suffixes of a matched switch&textrsquo;s args
when it is subsequently output with <samp>%*</samp>.  <var>SUFFIX</var> is
terminated by the next space or %.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%w</itemformat></item>
</tableterm><tableitem><para>Marks the argument containing or following the <samp>%w</samp> as the
designated output file of this compilation.  This puts the argument
into the sequence of arguments that <samp>%o</samp> substitutes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%o</itemformat></item>
</tableterm><tableitem><para>Substitutes the names of all the output files, with spaces
automatically placed around them.  You should write spaces
around the <samp>%o</samp> as well or the results are undefined.
<samp>%o</samp> is for use in the specs for running the linker.
Input files whose names have no recognized suffix are not compiled
at all, but they are included among the output files, so they are
linked.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%O</itemformat></item>
</tableterm><tableitem><para>Substitutes the suffix for object files.  Note that this is
handled specially when it immediately follows <samp>%g, %u, or %U</samp>,
because of the need for those to form complete file names.  The
handling is such that <samp>%O</samp> is treated exactly as if it had already
been substituted, except that <samp>%g, %u, and %U</samp> do not currently
support additional <var>suffix</var> characters following <samp>%O</samp> as they do
following, for example, <samp>.o</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%p</itemformat></item>
</tableterm><tableitem><para>Substitutes the standard macro predefinitions for the
current target machine.  Use this when running <command>cpp</command>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%P</itemformat></item>
</tableterm><tableitem><para>Like <samp>%p</samp>, but puts <samp>__</samp> before and after the name of each
predefined macro, except for macros that start with <samp>__</samp> or with
<samp>_<var>L</var></samp>, where <var>L</var> is an uppercase letter.  This is for ISO
C&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%I</itemformat></item>
</tableterm><tableitem><para>Substitute any of <option>-iprefix</option> (made from <env>GCC_EXEC_PREFIX</env>),
<option>-isysroot</option> (made from <env>TARGET_SYSTEM_ROOT</env>),
<option>-isystem</option> (made from <env>COMPILER_PATH</env> and <option>-B</option> options)
and <option>-imultilib</option> as necessary.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%s</itemformat></item>
</tableterm><tableitem><para>Current argument is the name of a library or startup file of some sort.
Search for that file in a standard list of directories and substitute
the full name found.  The current working directory is included in the
list of directories scanned.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%T</itemformat></item>
</tableterm><tableitem><para>Current argument is the name of a linker script.  Search for that file
in the current list of directories to scan for libraries. If the file
is located insert a <option>--script</option> option into the command line
followed by the full path name found.  If the file is not found then
generate an error message.  Note: the current working directory is not
searched.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%e<var>str</var></itemformat></item>
</tableterm><tableitem><para>Print <var>str</var> as an error message.  <var>str</var> is terminated by a newline.
Use this when inconsistent options are detected.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%(<var>name</var>)</itemformat></item>
</tableterm><tableitem><para>Substitute the contents of spec string <var>name</var> at this point.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%x&lbrace;<var>option</var>&rbrace;</itemformat></item>
</tableterm><tableitem><para>Accumulate an option for <samp>%X</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%X</itemformat></item>
</tableterm><tableitem><para>Output the accumulated linker options specified by <option>-Wl</option> or a <samp>%x</samp>
spec string.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%Y</itemformat></item>
</tableterm><tableitem><para>Output the accumulated assembler options specified by <option>-Wa</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%Z</itemformat></item>
</tableterm><tableitem><para>Output the accumulated preprocessor options specified by <option>-Wp</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%a</itemformat></item>
</tableterm><tableitem><para>Process the <code>asm</code> spec.  This is used to compute the
switches to be passed to the assembler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%A</itemformat></item>
</tableterm><tableitem><para>Process the <code>asm_final</code> spec.  This is a spec string for
passing switches to an assembler post-processor, if such a program is
needed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%l</itemformat></item>
</tableterm><tableitem><para>Process the <code>link</code> spec.  This is the spec for computing the
command line passed to the linker.  Typically it makes use of the
<samp>%L %G %S %D and %E</samp> sequences.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%D</itemformat></item>
</tableterm><tableitem><para>Dump out a <option>-L</option> option for each directory that GCC believes might
contain startup files.  If the target supports multilibs then the
current multilib directory is prepended to each of these paths.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%L</itemformat></item>
</tableterm><tableitem><para>Process the <code>lib</code> spec.  This is a spec string for deciding which
libraries are included on the command line to the linker.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%G</itemformat></item>
</tableterm><tableitem><para>Process the <code>libgcc</code> spec.  This is a spec string for deciding
which GCC support library is included on the command line to the linker.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%S</itemformat></item>
</tableterm><tableitem><para>Process the <code>startfile</code> spec.  This is a spec for deciding which
object files are the first ones passed to the linker.  Typically
this might be a file named <file>crt0.o</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%E</itemformat></item>
</tableterm><tableitem><para>Process the <code>endfile</code> spec.  This is a spec string that specifies
the last object files that are passed to the linker.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%C</itemformat></item>
</tableterm><tableitem><para>Process the <code>cpp</code> spec.  This is used to construct the arguments
to be passed to the C preprocessor.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%1</itemformat></item>
</tableterm><tableitem><para>Process the <code>cc1</code> spec.  This is used to construct the options to be
passed to the actual C compiler (<command>cc1</command>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%2</itemformat></item>
</tableterm><tableitem><para>Process the <code>cc1plus</code> spec.  This is used to construct the options to be
passed to the actual C++ compiler (<command>cc1plus</command>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%*</itemformat></item>
</tableterm><tableitem><para>Substitute the variable part of a matched option.  See below.
Note that each comma in the substituted string is replaced by
a single space.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lt;<code>S</code></itemformat></item>
</tableterm><tableitem><para>Remove all occurrences of <code>-S</code> from the command line.  Note&textmdash;this
command is position dependent.  <samp>%</samp> commands in the spec string
before this one see <code>-S</code>, <samp>%</samp> commands in the spec string
after this one do not.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%:<var>function</var>(<var>args</var>)</itemformat></item>
</tableterm><tableitem><para>Call the named function <var>function</var>, passing it <var>args</var>.
<var>args</var> is first processed as a nested spec string, then split
into an argument vector in the usual fashion.  The function returns
a string which is processed as if it had appeared literally as part
of the current spec.
</para>
<para>The following built-in spec functions are provided:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code"><code>getenv</code></itemformat></item>
</tableterm><tableitem><para>The <code>getenv</code> spec function takes two arguments: an environment
variable name and a string.  If the environment variable is not
defined, a fatal error is issued.  Otherwise, the return value is the
value of the environment variable concatenated with the string.  For
example, if <env>TOPDIR</env> is defined as <file>/path/to/top</file>, then:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">%:getenv(TOPDIR /include)
</pre></smallexample>

<para>expands to <file>/path/to/top/include</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><code>if-exists</code></itemformat></item>
</tableterm><tableitem><para>The <code>if-exists</code> spec function takes one argument, an absolute
pathname to a file.  If the file exists, <code>if-exists</code> returns the
pathname.  Here is a small example of its usage:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">*startfile:
crt0%O%s %:if-exists(crti%O%s) crtbegin%O%s
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><code>if-exists-else</code></itemformat></item>
</tableterm><tableitem><para>The <code>if-exists-else</code> spec function is similar to the <code>if-exists</code>
spec function, except that it takes two arguments.  The first argument is
an absolute pathname to a file.  If the file exists, <code>if-exists-else</code>
returns the pathname.  If it does not exist, it returns the second argument.
This way, <code>if-exists-else</code> can be used to select one file or another,
based on the existence of the first.  Here is a small example of its usage:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">*startfile:
crt0%O%s %:if-exists(crti%O%s) \
%:if-exists-else(crtbeginT%O%s crtbegin%O%s)
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><code>replace-outfile</code></itemformat></item>
</tableterm><tableitem><para>The <code>replace-outfile</code> spec function takes two arguments.  It looks for the
first argument in the outfiles array and replaces it with the second argument.  Here
is a small example of its usage:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">%&lbrace;fgnu-runtime:%:replace-outfile(-lobjc -lobjc-gnu)&rbrace;
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><code>remove-outfile</code></itemformat></item>
</tableterm><tableitem><para>The <code>remove-outfile</code> spec function takes one argument.  It looks for the
first argument in the outfiles array and removes it.  Here is a small example
its usage:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">%:remove-outfile(-lm)
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><code>pass-through-libs</code></itemformat></item>
</tableterm><tableitem><para>The <code>pass-through-libs</code> spec function takes any number of arguments.  It
finds any <option>-l</option> options and any non-options ending in <file>.a</file> (which it
assumes are the names of linker input library archive files) and returns a
result containing all the found arguments each prepended by
<option>-plugin-opt=-pass-through=</option> and joined by spaces.  This list is
intended to be passed to the LTO linker plugin.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">%:pass-through-libs(%G %L %G)
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><code>print-asm-header</code></itemformat></item>
</tableterm><tableitem><para>The <code>print-asm-header</code> function takes no arguments and simply
prints a banner like:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">Assembler options
=================

Use &quot;-Wa,OPTION&quot; to pass &quot;OPTION&quot; to the assembler.
</pre></smallexample>

<para>It is used to separate compiler options from assembler options
in the <option>--target-help</option> output.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lbrace;<code>S</code>&rbrace;</itemformat></item>
</tableterm><tableitem><para>Substitutes the <code>-S</code> switch, if that switch is given to GCC&eosperiod;
If that switch is not specified, this substitutes nothing.  Note that
the leading dash is omitted when specifying this option, and it is
automatically inserted if the substitution is performed.  Thus the spec
string <samp>%&lbrace;foo&rbrace;</samp> matches the command-line option <option>-foo</option>
and outputs the command-line option <option>-foo</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%W&lbrace;<code>S</code>&rbrace;</itemformat></item>
</tableterm><tableitem><para>Like %&lbrace;<code>S</code>&rbrace; but mark last argument supplied within as a file to be
deleted on failure.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lbrace;<code>S</code>*&rbrace;</itemformat></item>
</tableterm><tableitem><para>Substitutes all the switches specified to GCC whose names start
with <code>-S</code>, but which also take an argument.  This is used for
switches like <option>-o</option>, <option>-D</option>, <option>-I</option>, etc.
GCC considers <option>-o foo</option> as being
one switch whose name starts with <samp>o</samp>.  %&lbrace;o*&rbrace; substitutes this
text, including the space.  Thus two arguments are generated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lbrace;<code>S</code>*&amp;<code>T</code>*&rbrace;</itemformat></item>
</tableterm><tableitem><para>Like %&lbrace;<code>S</code>*&rbrace;, but preserve order of <code>S</code> and <code>T</code> options
(the order of <code>S</code> and <code>T</code> in the spec is not significant).
There can be any number of ampersand-separated variables; for each the
wild card is optional.  Useful for CPP as <samp>%&lbrace;D*&amp;U*&amp;A*&rbrace;</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lbrace;<code>S</code>:<code>X</code>&rbrace;</itemformat></item>
</tableterm><tableitem><para>Substitutes <code>X</code>, if the <option>-S</option> switch is given to GCC&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lbrace;!<code>S</code>:<code>X</code>&rbrace;</itemformat></item>
</tableterm><tableitem><para>Substitutes <code>X</code>, if the <option>-S</option> switch is <emph>not</emph> given to GCC&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lbrace;<code>S</code>*:<code>X</code>&rbrace;</itemformat></item>
</tableterm><tableitem><para>Substitutes <code>X</code> if one or more switches whose names start with
<code>-S</code> are specified to GCC&eosperiod;  Normally <code>X</code> is substituted only
once, no matter how many such switches appeared.  However, if <code>%*</code>
appears somewhere in <code>X</code>, then <code>X</code> is substituted once
for each matching switch, with the <code>%*</code> replaced by the part of
that switch matching the <code>*</code>.
</para>
<para>If <code>%*</code> appears as the last part of a spec sequence then a space
is added after the end of the last substitution.  If there is more
text in the sequence, however, then a space is not generated.  This
allows the <code>%*</code> substitution to be used as part of a larger
string.  For example, a spec string like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">%&lbrace;mcu=*:--script=%*/memory.ld&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>when matching an option like <option>-mcu=newchip</option> produces:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">--script=newchip/memory.ld
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lbrace;.<code>S</code>:<code>X</code>&rbrace;</itemformat></item>
</tableterm><tableitem><para>Substitutes <code>X</code>, if processing a file with suffix <code>S</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lbrace;!.<code>S</code>:<code>X</code>&rbrace;</itemformat></item>
</tableterm><tableitem><para>Substitutes <code>X</code>, if <emph>not</emph> processing a file with suffix <code>S</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lbrace;,<code>S</code>:<code>X</code>&rbrace;</itemformat></item>
</tableterm><tableitem><para>Substitutes <code>X</code>, if processing a file for language <code>S</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lbrace;!,<code>S</code>:<code>X</code>&rbrace;</itemformat></item>
</tableterm><tableitem><para>Substitutes <code>X</code>, if not processing a file for language <code>S</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lbrace;<code>S</code>|<code>P</code>:<code>X</code>&rbrace;</itemformat></item>
</tableterm><tableitem><para>Substitutes <code>X</code> if either <code>-S</code> or <code>-P</code> is given to
GCC&eosperiod;  This may be combined with <samp>!</samp>, <samp>.</samp>, <samp>,</samp>, and
<code>*</code> sequences as well, although they have a stronger binding than
the <samp>|</samp>.  If <code>%*</code> appears in <code>X</code>, all of the
alternatives must be starred, and only the first matching alternative
is substituted.
</para>
<para>For example, a spec string like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">%&lbrace;.c:-foo&rbrace; %&lbrace;!.c:-bar&rbrace; %&lbrace;.c|d:-baz&rbrace; %&lbrace;!.c|d:-boggle&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>outputs the following command-line options from the following input
command-line options:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">fred.c        -foo -baz
jim.d         -bar -boggle
-d fred.c     -foo -baz -boggle
-d jim.d      -bar -baz -boggle
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">%&lbrace;S:X; T:Y; :D&rbrace;</itemformat></item>
</tableterm><tableitem>
<para>If <code>S</code> is given to GCC, substitutes <code>X</code>; else if <code>T</code> is
given to GCC, substitutes <code>Y</code>; else substitutes <code>D</code>.  There can
be as many clauses as you need.  This may be combined with <code>.</code>,
<code>,</code>, <code>!</code>, <code>|</code>, and <code>*</code> as needed.
</para>

</tableitem></tableentry></table>

<para>The conditional text <code>X</code> in a %&lbrace;<code>S</code>:<code>X</code>&rbrace; or similar
construct may contain other nested <samp>%</samp> constructs or spaces, or
even newlines.  They are processed as usual, as described above.
Trailing white space in <code>X</code> is ignored.  White space may also
appear anywhere on the left side of the colon in these constructs,
except between <code>.</code> or <code>*</code> and the corresponding word.
</para>
<para>The <option>-O</option>, <option>-f</option>, <option>-m</option>, and <option>-W</option> switches are
handled specifically in these constructs.  If another value of
<option>-O</option> or the negated form of a <option>-f</option>, <option>-m</option>, or
<option>-W</option> switch is found later in the command line, the earlier
switch value is ignored, except with &lbrace;<code>S</code>*&rbrace; where <code>S</code> is
just one letter, which passes all matching options.
</para>
<para>The character <samp>|</samp> at the beginning of the predicate text is used to
indicate that a command should be piped to the following command, but
only if <option>-pipe</option> is specified.
</para>
<para>It is built into GCC which switches take arguments and which do not.
(You might think it would be useful to generalize this to allow each
compiler&textrsquo;s spec to say which switches take arguments.  But this cannot
be done in a consistent fashion.  GCC cannot even decide which input
files have been specified without knowing which switches take arguments,
and it must know which input files to compile in order to tell which
compilers to run).
</para>
<para>GCC also knows implicitly that arguments starting in <option>-l</option> are to be
treated as compiler output files, and passed to the linker in their
proper position among the other output files.
</para>
<!-- c man begin OPTIONS -->

</section>
<node name="Target-Options" spaces=" "><nodename>Target Options</nodename><nodenext automatic="on">Submodel Options</nodenext><nodeprev automatic="on">Spec Files</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Specifying Target Machine and Compiler Version</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="155">target options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="156">cross compiling</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="157">specifying machine version</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="158">specifying compiler version and target machine</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="159">compiler version, specifying</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="160">target machine, specifying</indexterm></cindex>

<para>The usual way to run GCC is to run the executable called <command>gcc</command>, or
<command><var>machine</var>-gcc</command> when cross-compiling, or
<command><var>machine</var>-gcc-<var>version</var></command> to run a version other than the
one that was installed last.
</para>
</section>
<node name="Submodel-Options" spaces=" "><nodename>Submodel Options</nodename><nodenext automatic="on">Code Gen Options</nodenext><nodeprev automatic="on">Target Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Hardware Models and Configurations</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="161">submodel options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="162">specifying hardware config</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="163">hardware models and configurations, specifying</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="164">machine dependent options</indexterm></cindex>

<para>Each target machine types can have its own
special options, starting with <samp>-m</samp>, to choose among various
hardware models or configurations&textmdash;for example, 68010 vs 68020,
floating coprocessor or none.  A single installed version of the
compiler can compile for any model or configuration, according to the
options specified.
</para>
<para>Some configurations of the compiler also support additional special
options, usually for compatibility with other compilers on the same
platform.
</para>
<!-- c This list is ordered alphanumerically by subsection name. -->
<!-- c It should be the same order and spelling as these options are listed -->
<!-- c in Machine Dependent Options -->

<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">AArch64 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Adapteva Epiphany Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">ARC Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">ARM Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">AVR Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Blackfin Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">C6X Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">CRIS Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">CR16 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Darwin Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">DEC Alpha Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">FR30 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">FRV Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">GNU/Linux Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">H8/300 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">HPPA Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">IA-64 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">LM32 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">M32C Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">M32R/D Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">M680x0 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MCore Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MeP Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MicroBlaze Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MIPS Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MMIX Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MN10300 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Moxie Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MSP430 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">NDS32 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Nios II Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Nvidia PTX Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">PDP-11 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">picoChip Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">PowerPC Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">RL78 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">RS/6000 and PowerPC Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">RX Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">S/390 and zSeries Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Score Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">SH Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Solaris 2 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">SPARC Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">SPU Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">System V Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">TILE-Gx Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">TILEPro Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">V850 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">VAX Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Visium Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">VMS Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">VxWorks Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">x86 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">x86 Windows Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Xstormy16 Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Xtensa Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">zSeries Options</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="AArch64-Options" spaces=" "><nodename>AArch64 Options</nodename><nodenext automatic="on">Adapteva Epiphany Options</nodenext><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>AArch64 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="165">AArch64 Options</indexterm></cindex>

<para>These options are defined for AArch64 implementations:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabi=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1103" incode="1">mabi</indexterm></indexcommand>
<para>Generate code for the specified data model.  Permissible values
are <samp>ilp32</samp> for SysV-like data model where int, long int and pointer
are 32-bit, and <samp>lp64</samp> for SysV-like data model where int is 32-bit,
but long int and pointer are 64-bit.
</para>
<para>The default depends on the specific target configuration.  Note that
the LP64 and ILP32 ABIs are not link-compatible; you must compile your
entire program with the same ABI, and link with a compatible set of libraries.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbig-endian</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1104" incode="1">mbig-endian</indexterm></indexcommand>
<para>Generate big-endian code.  This is the default when GCC is configured for an
<samp>aarch64_be-*-*</samp> target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgeneral-regs-only</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1105" incode="1">mgeneral-regs-only</indexterm></indexcommand>
<para>Generate code which uses only the general registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlittle-endian</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1106" incode="1">mlittle-endian</indexterm></indexcommand>
<para>Generate little-endian code.  This is the default when GCC is configured for an
<samp>aarch64-*-*</samp> but not an <samp>aarch64_be-*-*</samp> target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=tiny</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1107" incode="1">mcmodel=tiny</indexterm></indexcommand>
<para>Generate code for the tiny code model.  The program and its statically defined
symbols must be within 1GB of each other.  Pointers are 64 bits.  Programs can
be statically or dynamically linked.  This model is not fully implemented and
mostly treated as <samp>small</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=small</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1108" incode="1">mcmodel=small</indexterm></indexcommand>
<para>Generate code for the small code model.  The program and its statically defined
symbols must be within 4GB of each other.  Pointers are 64 bits.  Programs can
be statically or dynamically linked.  This is the default code model.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=large</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1109" incode="1">mcmodel=large</indexterm></indexcommand>
<para>Generate code for the large code model.  This makes no assumptions about
addresses and sizes of sections.  Pointers are 64 bits.  Programs can be
statically linked only.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstrict-align</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1110" incode="1">mstrict-align</indexterm></indexcommand>
<para>Do not assume that unaligned memory references are handled by the system.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-momit-leaf-frame-pointer</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-omit-leaf-frame-pointer</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1111" incode="1">momit-leaf-frame-pointer</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1112" incode="1">mno-omit-leaf-frame-pointer</indexterm></indexcommand>
<para>Omit or keep the frame pointer in leaf functions.  The former behaviour is the
default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtls-dialect=desc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1113" incode="1">mtls-dialect=desc</indexterm></indexcommand>
<para>Use TLS descriptors as the thread-local storage mechanism for dynamic accesses
of TLS variables.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtls-dialect=traditional</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1114" incode="1">mtls-dialect=traditional</indexterm></indexcommand>
<para>Use traditional TLS as the thread-local storage mechanism for dynamic accesses
of TLS variables.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-cortex-a53-835769</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fix-cortex-a53-835769</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1115" incode="1">mfix-cortex-a53-835769</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1116" incode="1">mno-fix-cortex-a53-835769</indexterm></indexcommand>
<para>Enable or disable the workaround for the ARM Cortex-A53 erratum number 835769.
This involves inserting a NOP instruction between memory instructions and
64-bit integer multiply-accumulate instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-cortex-a53-843419</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fix-cortex-a53-843419</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1117" incode="1">mfix-cortex-a53-843419</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1118" incode="1">mno-fix-cortex-a53-843419</indexterm></indexcommand>
<para>Enable or disable the workaround for the ARM Cortex-A53 erratum number 843419.
This erratum workaround is made at link time and this will only pass the
corresponding flag to the linker.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-march=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1119" incode="1">march</indexterm></indexcommand>
<para>Specify the name of the target architecture, optionally suffixed by one or
more feature modifiers.  This option has the form
<option>-march=<var>arch</var><r>&lbrace;</r>+<r>[</r>no<r>]</r><var>feature</var><r>&rbrace;*</r></option>, where the
only permissible value for <var>arch</var> is <samp>armv8-a</samp>.
The permissible values for <var>feature</var> are documented in the sub-section
below.  Additionally on native AArch64 GNU/Linux systems the value
<samp>native</samp> is available.  This option causes the compiler to pick the
architecture of the host system.  If the compiler is unable to recognize the
architecture of the host system this option has no effect.
</para>
<para>Where conflicting feature modifiers are specified, the right-most feature is
used.
</para>
<para>GCC uses this name to determine what kind of instructions it can emit when
generating assembly code.
</para>
<para>Where <option>-march</option> is specified without either of <option>-mtune</option>
or <option>-mcpu</option> also being specified, the code is tuned to perform
well across a range of target processors implementing the target
architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1120" incode="1">mtune</indexterm></indexcommand>
<para>Specify the name of the target processor for which GCC should tune the
performance of the code.  Permissible values for this option are:
<samp>generic</samp>, <samp>cortex-a53</samp>, <samp>cortex-a57</samp>, <samp>cortex-a72</samp>,
<samp>exynos-m1</samp>, <samp>thunderx</samp>, <samp>xgene1</samp>.
</para>
<para>Additionally, this option can specify that GCC should tune the performance
of the code for a big.LITTLE system.  Permissible values for this
option are: <samp>cortex-a57.cortex-a53</samp>, <samp>cortex-a72.cortex-a53</samp>.
</para>
<para>Additionally on native AArch64 GNU/Linux systems the value <samp>native</samp>
is available.
This option causes the compiler to pick the architecture of and tune the
performance of the code for the processor of the host system.
If the compiler is unable to recognize the processor of the host system
this option has no effect.
</para>
<para>Where none of <option>-mtune=</option>, <option>-mcpu=</option> or <option>-march=</option>
are specified, the code is tuned to perform well across a range
of target processors.
</para>
<para>This option cannot be suffixed by feature modifiers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1121" incode="1">mcpu</indexterm></indexcommand>
<para>Specify the name of the target processor, optionally suffixed by one or more
feature modifiers.  This option has the form
<option>-mcpu=<var>cpu</var><r>&lbrace;</r>+<r>[</r>no<r>]</r><var>feature</var><r>&rbrace;*</r></option>, where the
permissible values for <var>cpu</var> are the same as those available for
<option>-mtune</option>.  Additionally on native AArch64 GNU/Linux systems the
value <samp>native</samp> is available.
This option causes the compiler to tune the performance of the code for the
processor of the host system.  If the compiler is unable to recognize the
processor of the host system this option has no effect.
</para>
<para>The permissible values for <var>feature</var> are documented in the sub-section
below.
</para>
<para>Where conflicting feature modifiers are specified, the right-most feature is
used.
</para>
<para>GCC uses this name to determine what kind of instructions it can emit when
generating assembly code (as if by <option>-march</option>) and to determine
the target processor for which to tune for performance (as if
by <option>-mtune</option>).  Where this option is used in conjunction
with <option>-march</option> or <option>-mtune</option>, those options take precedence
over the appropriate part of this option.
</para></tableitem></tableentry></table>

<subsubsection spaces=" "><sectiontitle><option>-march</option> and <option>-mcpu</option> Feature Modifiers</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="166"><option>-march</option> feature modifiers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="167"><option>-mcpu</option> feature modifiers</indexterm></cindex>
<para>Feature modifiers used with <option>-march</option> and <option>-mcpu</option> can be one
the following:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">crc</itemformat></item>
</tableterm><tableitem><para>Enable CRC extension.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">crypto</itemformat></item>
</tableterm><tableitem><para>Enable Crypto extension.  This implies Advanced SIMD is enabled.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">fp</itemformat></item>
</tableterm><tableitem><para>Enable floating-point instructions.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">simd</itemformat></item>
</tableterm><tableitem><para>Enable Advanced SIMD instructions.  This implies floating-point instructions
are enabled.  This is the default for all current possible values for options
<option>-march</option> and <option>-mcpu=</option>.
</para></tableitem></tableentry></table>

</subsubsection>
</subsection>
<node name="Adapteva-Epiphany-Options" spaces=" "><nodename>Adapteva Epiphany Options</nodename><nodenext automatic="on">ARC Options</nodenext><nodeprev automatic="on">AArch64 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>Adapteva Epiphany Options</sectiontitle>

<para>These <samp>-m</samp> options are defined for Adapteva Epiphany:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mhalf-reg-file</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1122" incode="1">mhalf-reg-file</indexterm></indexcommand>
<para>Don&textrsquo;t allocate any register in the range <code>r32</code>&dots;<code>r63</code>.
That allows code to run on hardware variants that lack these registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mprefer-short-insn-regs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1123" incode="1">mprefer-short-insn-regs</indexterm></indexcommand>
<para>Preferrentially allocate registers that allow short instruction generation.
This can result in increased instruction count, so this may either reduce or
increase overall code size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbranch-cost=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1124" incode="1">mbranch-cost</indexterm></indexcommand>
<para>Set the cost of branches to roughly <var>num</var> &textldquo;simple&textrdquo; instructions.
This cost is only a heuristic and is not guaranteed to produce
consistent results across releases.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmove</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1125" incode="1">mcmove</indexterm></indexcommand>
<para>Enable the generation of conditional moves.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnops=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1126" incode="1">mnops</indexterm></indexcommand>
<para>Emit <var>num</var> NOPs before every other generated instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-soft-cmpsf</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1127" incode="1">mno-soft-cmpsf</indexterm></indexcommand>
<para>For single-precision floating-point comparisons, emit an <code>fsub</code> instruction
and test the flags.  This is faster than a software comparison, but can
get incorrect results in the presence of NaNs, or when two different small
numbers are compared such that their difference is calculated as zero.
The default is <option>-msoft-cmpsf</option>, which uses slower, but IEEE-compliant,
software comparisons.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstack-offset=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1128" incode="1">mstack-offset</indexterm></indexcommand>
<para>Set the offset between the top of the stack and the stack pointer.
E.g., a value of 8 means that the eight bytes in the range <code>sp+0&dots;sp+7</code>
can be used by leaf functions without stack allocation.
Values other than <samp>8</samp> or <samp>16</samp> are untested and unlikely to work.
Note also that this option changes the ABI; compiling a program with a
different stack offset than the libraries have been compiled with
generally does not work.
This option can be useful if you want to evaluate if a different stack
offset would give you better code, but to actually use a different stack
offset to build working programs, it is recommended to configure the
toolchain with the appropriate <option>--with-stack-offset=<var>num</var></option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-round-nearest</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1129" incode="1">mno-round-nearest</indexterm></indexcommand>
<para>Make the scheduler assume that the rounding mode has been set to
truncating.  The default is <option>-mround-nearest</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong-calls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1130" incode="1">mlong-calls</indexterm></indexcommand>
<para>If not otherwise specified by an attribute, assume all calls might be beyond
the offset range of the <code>b</code> / <code>bl</code> instructions, and therefore load the
function address into a register before performing a (otherwise direct) call.
This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mshort-calls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1131" incode="1">short-calls</indexterm></indexcommand>
<para>If not otherwise specified by an attribute, assume all direct calls are
in the range of the <code>b</code> / <code>bl</code> instructions, so use these instructions
for direct calls.  The default is <option>-mlong-calls</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msmall16</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1132" incode="1">msmall16</indexterm></indexcommand>
<para>Assume addresses can be loaded as 16-bit unsigned values.  This does not
apply to function addresses for which <option>-mlong-calls</option> semantics
are in effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfp-mode=<var>mode</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1133" incode="1">mfp-mode</indexterm></indexcommand>
<para>Set the prevailing mode of the floating-point unit.
This determines the floating-point mode that is provided and expected
at function call and return time.  Making this mode match the mode you
predominantly need at function start can make your programs smaller and
faster by avoiding unnecessary mode switches.
</para>
<para><var>mode</var> can be set to one the following values:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">caller</itemformat></item>
</tableterm><tableitem><para>Any mode at function entry is valid, and retained or restored when
the function returns, and when it calls other functions.
This mode is useful for compiling libraries or other compilation units
you might want to incorporate into different programs with different
prevailing FPU modes, and the convenience of being able to use a single
object file outweighs the size and speed overhead for any extra
mode switching that might be needed, compared with what would be needed
with a more specific choice of prevailing FPU mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">truncate</itemformat></item>
</tableterm><tableitem><para>This is the mode used for floating-point calculations with
truncating (i.e.&noeos; round towards zero) rounding mode.  That includes
conversion from floating point to integer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">round-nearest</itemformat></item>
</tableterm><tableitem><para>This is the mode used for floating-point calculations with
round-to-nearest-or-even rounding mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">int</itemformat></item>
</tableterm><tableitem><para>This is the mode used to perform integer calculations in the FPU, e.g.&noeos;
integer multiply, or integer multiply-and-accumulate.
</para></tableitem></tableentry></table>

<para>The default is <option>-mfp-mode=caller</option>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnosplit-lohi</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-postinc</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-postmodify</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1134" incode="1">mnosplit-lohi</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1135" incode="1">mno-postinc</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1136" incode="1">mno-postmodify</indexterm></indexcommand>
<para>Code generation tweaks that disable, respectively, splitting of 32-bit
loads, generation of post-increment addresses, and generation of
post-modify addresses.  The defaults are <option>msplit-lohi</option>,
<option>-mpost-inc</option>, and <option>-mpost-modify</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnovect-double</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1137" incode="1">mno-vect-double</indexterm></indexcommand>
<para>Change the preferred SIMD mode to SImode.  The default is
<option>-mvect-double</option>, which uses DImode as preferred SIMD mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-max-vect-align=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1138" incode="1">max-vect-align</indexterm></indexcommand>
<para>The maximum alignment for SIMD vector mode types.
<var>num</var> may be 4 or 8.  The default is 8.
Note that this is an ABI change, even though many library function
interfaces are unaffected if they don&textrsquo;t use SIMD vector modes
in places that affect size and/or alignment of relevant types.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msplit-vecmove-early</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1139" incode="1">msplit-vecmove-early</indexterm></indexcommand>
<para>Split vector moves into single word moves before reload.  In theory this
can give better register allocation, but so far the reverse seems to be
generally the case.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m1reg-<var>reg</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1140" incode="1">m1reg-</indexterm></indexcommand>
<para>Specify a register to hold the constant &minus;1, which makes loading small negative
constants and certain bitmasks faster.
Allowable values for <var>reg</var> are <samp>r43</samp> and <samp>r63</samp>,
which specify use of that register as a fixed register,
and <samp>none</samp>, which means that no register is used for this
purpose.  The default is <option>-m1reg-none</option>.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="ARC-Options" spaces=" "><nodename>ARC Options</nodename><nodenext automatic="on">ARM Options</nodenext><nodeprev automatic="on">Adapteva Epiphany Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>ARC Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="168">ARC options</indexterm></cindex>

<para>The following options control the architecture variant for which code
is being compiled:
</para>
<!-- c architecture variants -->
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbarrel-shifter</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1141" incode="1">mbarrel-shifter</indexterm></indexcommand>
<para>Generate instructions supported by barrel shifter.  This is the default
unless <option>-mcpu=ARC601</option> is in effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>cpu</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1142" incode="1">mcpu</indexterm></indexcommand>
<para>Set architecture type, register usage, and instruction scheduling
parameters for <var>cpu</var>.  There are also shortcut alias options
available for backward compatibility and convenience.  Supported
values for <var>cpu</var> are
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1143" incode="1">mA6</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1144" incode="1">mARC600</indexterm></indexcommand>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">ARC600</itemformat></item>
</tableterm><tableitem><para>Compile for ARC600.  Aliases: <option>-mA6</option>, <option>-mARC600</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ARC601</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1145" incode="1">mARC601</indexterm></indexcommand>
<para>Compile for ARC601.  Alias: <option>-mARC601</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ARC700</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1146" incode="1">mA7</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1147" incode="1">mARC700</indexterm></indexcommand>
<para>Compile for ARC700.  Aliases: <option>-mA7</option>, <option>-mARC700</option>.
This is the default when configured with <option>--with-cpu=arc700</option>&eosperiod;
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdpfp</itemformat></item>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1148" incode="1">mdpfp</indexterm></indexcommand>
<itemx spaces=" "><itemformat command="code">-mdpfp-compact</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1149" incode="1">mdpfp-compact</indexterm></indexcommand>
<para>FPX: Generate Double Precision FPX instructions, tuned for the compact
implementation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdpfp-fast</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1150" incode="1">mdpfp-fast</indexterm></indexcommand>
<para>FPX: Generate Double Precision FPX instructions, tuned for the fast
implementation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-dpfp-lrsr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1151" incode="1">mno-dpfp-lrsr</indexterm></indexcommand>
<para>Disable LR and SR instructions from using FPX extension aux registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mea</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1152" incode="1">mea</indexterm></indexcommand>
<para>Generate Extended arithmetic instructions.  Currently only
<code>divaw</code>, <code>adds</code>, <code>subs</code>, and <code>sat16</code> are
supported.  This is always enabled for <option>-mcpu=ARC700</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-mpy</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1153" incode="1">mno-mpy</indexterm></indexcommand>
<para>Do not generate mpy instructions for ARC700.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmul32x16</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1154" incode="1">mmul32x16</indexterm></indexcommand>
<para>Generate 32x16 bit multiply and mac instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmul64</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1155" incode="1">mmul64</indexterm></indexcommand>
<para>Generate mul64 and mulu64 instructions.  Only valid for <option>-mcpu=ARC600</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnorm</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1156" incode="1">mnorm</indexterm></indexcommand>
<para>Generate norm instruction.  This is the default if <option>-mcpu=ARC700</option>
is in effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mspfp</itemformat></item>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1157" incode="1">mspfp</indexterm></indexcommand>
<itemx spaces=" "><itemformat command="code">-mspfp-compact</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1158" incode="1">mspfp-compact</indexterm></indexcommand>
<para>FPX: Generate Single Precision FPX instructions, tuned for the compact
implementation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mspfp-fast</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1159" incode="1">mspfp-fast</indexterm></indexcommand>
<para>FPX: Generate Single Precision FPX instructions, tuned for the fast
implementation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msimd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1160" incode="1">msimd</indexterm></indexcommand>
<para>Enable generation of ARC SIMD instructions via target-specific
builtins.  Only valid for <option>-mcpu=ARC700</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msoft-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1161" incode="1">msoft-float</indexterm></indexcommand>
<para>This option ignored; it is provided for compatibility purposes only.
Software floating point code is emitted by default, and this default
can overridden by FPX options; <samp>mspfp</samp>, <samp>mspfp-compact</samp>, or
<samp>mspfp-fast</samp> for single precision, and <samp>mdpfp</samp>,
<samp>mdpfp-compact</samp>, or <samp>mdpfp-fast</samp> for double precision.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mswap</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1162" incode="1">mswap</indexterm></indexcommand>
<para>Generate swap instructions.
</para>
</tableitem></tableentry></table>

<para>The following options are passed through to the assembler, and also
define preprocessor macro symbols.
</para>
<!-- c Flags used by the assembler, but for which we define preprocessor -->
<!-- c macro symbols as well. -->
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mdsp-packa</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1163" incode="1">mdsp-packa</indexterm></indexcommand>
<para>Passed down to the assembler to enable the DSP Pack A extensions.
Also sets the preprocessor symbol <code>__Xdsp_packa</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdvbf</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1164" incode="1">mdvbf</indexterm></indexcommand>
<para>Passed down to the assembler to enable the dual viterbi butterfly
extension.  Also sets the preprocessor symbol <code>__Xdvbf</code>.
</para>
<!-- c ARC700 4.10 extension instruction -->
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlock</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1165" incode="1">mlock</indexterm></indexcommand>
<para>Passed down to the assembler to enable the Locked Load/Store
Conditional extension.  Also sets the preprocessor symbol
<code>__Xlock</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmac-d16</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1166" incode="1">mmac-d16</indexterm></indexcommand>
<para>Passed down to the assembler.  Also sets the preprocessor symbol
<code>__Xxmac_d16</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmac-24</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1167" incode="1">mmac-24</indexterm></indexcommand>
<para>Passed down to the assembler.  Also sets the preprocessor symbol
<code>__Xxmac_24</code>.
</para>
<!-- c ARC700 4.10 extension instruction -->
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrtsc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1168" incode="1">mrtsc</indexterm></indexcommand>
<para>Passed down to the assembler to enable the 64-bit Time-Stamp Counter
extension instruction.  Also sets the preprocessor symbol
<code>__Xrtsc</code>.
</para>
<!-- c ARC700 4.10 extension instruction -->
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mswape</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1169" incode="1">mswape</indexterm></indexcommand>
<para>Passed down to the assembler to enable the swap byte ordering
extension instruction.  Also sets the preprocessor symbol
<code>__Xswape</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtelephony</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1170" incode="1">mtelephony</indexterm></indexcommand>
<para>Passed down to the assembler to enable dual and single operand
instructions for telephony.  Also sets the preprocessor symbol
<code>__Xtelephony</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxy</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1171" incode="1">mxy</indexterm></indexcommand>
<para>Passed down to the assembler to enable the XY Memory extension.  Also
sets the preprocessor symbol <code>__Xxy</code>.
</para>
</tableitem></tableentry></table>

<para>The following options control how the assembly code is annotated:
</para>
<!-- c Assembly annotation options -->
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-misize</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1172" incode="1">misize</indexterm></indexcommand>
<para>Annotate assembler instructions with estimated addresses.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mannotate-align</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1173" incode="1">mannotate-align</indexterm></indexcommand>
<para>Explain what alignment considerations lead to the decision to make an
instruction short or long.
</para>
</tableitem></tableentry></table>

<para>The following options are passed through to the linker:
</para>
<!-- c options passed through to the linker -->
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-marclinux</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1174" incode="1">marclinux</indexterm></indexcommand>
<para>Passed through to the linker, to specify use of the <code>arclinux</code> emulation.
This option is enabled by default in tool chains built for
<w><code>arc-linux-uclibc</code></w> and <w><code>arceb-linux-uclibc</code></w> targets
when profiling is not requested.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-marclinux_prof</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1175" incode="1">marclinux_prof</indexterm></indexcommand>
<para>Passed through to the linker, to specify use of the
<code>arclinux_prof</code> emulation.  This option is enabled by default in
tool chains built for <w><code>arc-linux-uclibc</code></w> and
<w><code>arceb-linux-uclibc</code></w> targets when profiling is requested.
</para>
</tableitem></tableentry></table>

<para>The following options control the semantics of generated code:
</para>
<!-- c semantically relevant code generation options -->
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mepilogue-cfi</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1176" incode="1">mepilogue-cfi</indexterm></indexcommand>
<para>Enable generation of call frame information for epilogues.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-epilogue-cfi</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1177" incode="1">mno-epilogue-cfi</indexterm></indexcommand>
<para>Disable generation of call frame information for epilogues.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong-calls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1178" incode="1">mlong-calls</indexterm></indexcommand>
<para>Generate call insns as register indirect calls, thus providing access
to the full 32-bit address range.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmedium-calls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1179" incode="1">mmedium-calls</indexterm></indexcommand>
<para>Don&textrsquo;t use less than 25 bit addressing range for calls, which is the
offset available for an unconditional branch-and-link
instruction.  Conditional execution of function calls is suppressed, to
allow use of the 25-bit range, rather than the 21-bit range with
conditional branch-and-link.  This is the default for tool chains built
for <w><code>arc-linux-uclibc</code></w> and <w><code>arceb-linux-uclibc</code></w> targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-sdata</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1180" incode="1">mno-sdata</indexterm></indexcommand>
<para>Do not generate sdata references.  This is the default for tool chains
built for <w><code>arc-linux-uclibc</code></w> and <w><code>arceb-linux-uclibc</code></w>
targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mucb-mcount</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1181" incode="1">mucb-mcount</indexterm></indexcommand>
<para>Instrument with mcount calls as used in UCB code.  I.e. do the
counting in the callee, not the caller.  By default ARC instrumentation
counts in the caller.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvolatile-cache</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1182" incode="1">mvolatile-cache</indexterm></indexcommand>
<para>Use ordinarily cached memory accesses for volatile references.  This is the
default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-volatile-cache</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1183" incode="1">mno-volatile-cache</indexterm></indexcommand>
<para>Enable cache bypass for volatile references.
</para>
</tableitem></tableentry></table>

<para>The following options fine tune code generation:
<!-- c code generation tuning options -->
</para><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-malign-call</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1184" incode="1">malign-call</indexterm></indexcommand>
<para>Do alignment optimizations for call instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mauto-modify-reg</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1185" incode="1">mauto-modify-reg</indexterm></indexcommand>
<para>Enable the use of pre/post modify with register displacement.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbbit-peephole</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1186" incode="1">mbbit-peephole</indexterm></indexcommand>
<para>Enable bbit peephole2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-brcc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1187" incode="1">mno-brcc</indexterm></indexcommand>
<para>This option disables a target-specific pass in <file>arc_reorg</file> to
generate <code>BRcc</code> instructions.  It has no effect on <code>BRcc</code>
generation driven by the combiner pass.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcase-vector-pcrel</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1188" incode="1">mcase-vector-pcrel</indexterm></indexcommand>
<para>Use pc-relative switch case tables - this enables case table shortening.
This is the default for <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcompact-casesi</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1189" incode="1">mcompact-casesi</indexterm></indexcommand>
<para>Enable compact casesi pattern.
This is the default for <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-cond-exec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1190" incode="1">mno-cond-exec</indexterm></indexcommand>
<para>Disable ARCompact specific pass to generate conditional execution instructions.
Due to delay slot scheduling and interactions between operand numbers,
literal sizes, instruction lengths, and the support for conditional execution,
the target-independent pass to generate conditional execution is often lacking,
so the ARC port has kept a special pass around that tries to find more
conditional execution generating opportunities after register allocation,
branch shortening, and delay slot scheduling have been done.  This pass
generally, but not always, improves performance and code size, at the cost of
extra compilation time, which is why there is an option to switch it off.
If you have a problem with call instructions exceeding their allowable
offset range because they are conditionalized, you should consider using
<option>-mmedium-calls</option> instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mearly-cbranchsi</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1191" incode="1">mearly-cbranchsi</indexterm></indexcommand>
<para>Enable pre-reload use of the cbranchsi pattern.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mexpand-adddi</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1192" incode="1">mexpand-adddi</indexterm></indexcommand>
<para>Expand <code>adddi3</code> and <code>subdi3</code> at rtl generation time into
<code>add.f</code>, <code>adc</code> etc.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mindexed-loads</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1193" incode="1">mindexed-loads</indexterm></indexcommand>
<para>Enable the use of indexed loads.  This can be problematic because some
optimizers then assume that indexed stores exist, which is not
the case.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlra</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1194" incode="1">mlra</indexterm></indexcommand>
<para>Enable Local Register Allocation.  This is still experimental for ARC,
so by default the compiler uses standard reload
(i.e. <option>-mno-lra</option>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlra-priority-none</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1195" incode="1">mlra-priority-none</indexterm></indexcommand>
<para>Don&textrsquo;t indicate any priority for target registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlra-priority-compact</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1196" incode="1">mlra-priority-compact</indexterm></indexcommand>
<para>Indicate target register priority for r0..r3 / r12..r15.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlra-priority-noncompact</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1197" incode="1">mlra-priority-noncompact</indexterm></indexcommand>
<para>Reduce target regsiter priority for r0..r3 / r12..r15.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-millicode</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1198" incode="1">mno-millicode</indexterm></indexcommand>
<para>When optimizing for size (using <option>-Os</option>), prologues and epilogues
that have to save or restore a large number of registers are often
shortened by using call to a special function in libgcc; this is
referred to as a <emph>millicode</emph> call.  As these calls can pose
performance issues, and/or cause linking issues when linking in a
nonstandard way, this option is provided to turn off millicode call
generation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmixed-code</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1199" incode="1">mmixed-code</indexterm></indexcommand>
<para>Tweak register allocation to help 16-bit instruction generation.
This generally has the effect of decreasing the average instruction size
while increasing the instruction count.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mq-class</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1200" incode="1">mq-class</indexterm></indexcommand>
<para>Enable &textrsquo;q&textrsquo; instruction alternatives.
This is the default for <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mRcq</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1201" incode="1">mRcq</indexterm></indexcommand>
<para>Enable Rcq constraint handling - most short code generation depends on this.
This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mRcw</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1202" incode="1">mRcw</indexterm></indexcommand>
<para>Enable Rcw constraint handling - ccfsm condexec mostly depends on this.
This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msize-level=<var>level</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1203" incode="1">msize-level</indexterm></indexcommand>
<para>Fine-tune size optimization with regards to instruction lengths and alignment.
The recognized values for <var>level</var> are:
</para><table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">0</itemformat></item>
</tableterm><tableitem><para>No size optimization.  This level is deprecated and treated like <samp>1</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">1</itemformat></item>
</tableterm><tableitem><para>Short instructions are used opportunistically.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">2</itemformat></item>
</tableterm><tableitem><para>In addition, alignment of loops and of code after barriers are dropped.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">3</itemformat></item>
</tableterm><tableitem><para>In addition, optional data alignment is dropped, and the option <option>Os</option> is enabled.
</para>
</tableitem></tableentry></table>

<para>This defaults to <samp>3</samp> when <option>-Os</option> is in effect.  Otherwise,
the behavior when this is not set is equivalent to level <samp>1</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>cpu</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1204" incode="1">mtune</indexterm></indexcommand>
<para>Set instruction scheduling parameters for <var>cpu</var>, overriding any implied
by <option>-mcpu=</option>.
</para>
<para>Supported values for <var>cpu</var> are
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">ARC600</itemformat></item>
</tableterm><tableitem><para>Tune for ARC600 cpu.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ARC601</itemformat></item>
</tableterm><tableitem><para>Tune for ARC601 cpu.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ARC700</itemformat></item>
</tableterm><tableitem><para>Tune for ARC700 cpu with standard multiplier block.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ARC700-xmac</itemformat></item>
</tableterm><tableitem><para>Tune for ARC700 cpu with XMAC block.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ARC725D</itemformat></item>
</tableterm><tableitem><para>Tune for ARC725D cpu.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ARC750D</itemformat></item>
</tableterm><tableitem><para>Tune for ARC750D cpu.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmultcost=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1205" incode="1">mmultcost</indexterm></indexcommand>
<para>Cost to assume for a multiply instruction, with <samp>4</samp> being equal to a
normal instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-munalign-prob-threshold=<var>probability</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1206" incode="1">munalign-prob-threshold</indexterm></indexcommand>
<para>Set probability threshold for unaligning branches.
When tuning for <samp>ARC700</samp> and optimizing for speed, branches without
filled delay slot are preferably emitted unaligned and long, unless
profiling indicates that the probability for the branch to be taken
is below <var>probability</var>.  <xref label="Cross_002dprofiling"><xrefnodename>Cross-profiling</xrefnodename></xref>.
The default is (REG_BR_PROB_BASE/2), i.e.&noeos; 5000.
</para>
</tableitem></tableentry></table>

<para>The following options are maintained for backward compatibility, but
are now deprecated and will be removed in a future release:
</para>
<!-- c Deprecated options -->
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-margonaut</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1207" incode="1">margonaut</indexterm></indexcommand>
<para>Obsolete FPX.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbig-endian</itemformat></item>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1208" incode="1">mbig-endian</indexterm></indexcommand>
<itemx spaces=" "><itemformat command="code">-EB</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1209" incode="1">EB</indexterm></indexcommand>
<para>Compile code for big endian targets.  Use of these options is now
deprecated.  Users wanting big-endian code, should use the
<w><code>arceb-elf32</code></w> and <w><code>arceb-linux-uclibc</code></w> targets when
building the tool chain, for which big-endian is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlittle-endian</itemformat></item>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1210" incode="1">mlittle-endian</indexterm></indexcommand>
<itemx spaces=" "><itemformat command="code">-EL</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1211" incode="1">EL</indexterm></indexcommand>
<para>Compile code for little endian targets.  Use of these options is now
deprecated.  Users wanting little-endian code should use the
<w><code>arc-elf32</code></w> and <w><code>arc-linux-uclibc</code></w> targets when
building the tool chain, for which little-endian is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbarrel_shifter</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1212" incode="1">mbarrel_shifter</indexterm></indexcommand>
<para>Replaced by <option>-mbarrel-shifter</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdpfp_compact</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1213" incode="1">mdpfp_compact</indexterm></indexcommand>
<para>Replaced by <option>-mdpfp-compact</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdpfp_fast</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1214" incode="1">mdpfp_fast</indexterm></indexcommand>
<para>Replaced by <option>-mdpfp-fast</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdsp_packa</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1215" incode="1">mdsp_packa</indexterm></indexcommand>
<para>Replaced by <option>-mdsp-packa</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mEA</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1216" incode="1">mEA</indexterm></indexcommand>
<para>Replaced by <option>-mea</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmac_24</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1217" incode="1">mmac_24</indexterm></indexcommand>
<para>Replaced by <option>-mmac-24</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmac_d16</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1218" incode="1">mmac_d16</indexterm></indexcommand>
<para>Replaced by <option>-mmac-d16</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mspfp_compact</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1219" incode="1">mspfp_compact</indexterm></indexcommand>
<para>Replaced by <option>-mspfp-compact</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mspfp_fast</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1220" incode="1">mspfp_fast</indexterm></indexcommand>
<para>Replaced by <option>-mspfp-fast</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>cpu</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1221" incode="1">mtune</indexterm></indexcommand>
<para>Values <samp>arc600</samp>, <samp>arc601</samp>, <samp>arc700</samp> and
<samp>arc700-xmac</samp> for <var>cpu</var> are replaced by <samp>ARC600</samp>,
<samp>ARC601</samp>, <samp>ARC700</samp> and <samp>ARC700-xmac</samp> respectively
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-multcost=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1222" incode="1">multcost</indexterm></indexcommand>
<para>Replaced by <option>-mmultcost</option>.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="ARM-Options" spaces=" "><nodename>ARM Options</nodename><nodenext automatic="on">AVR Options</nodenext><nodeprev automatic="on">ARC Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>ARM Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="169">ARM options</indexterm></cindex>

<para>These <samp>-m</samp> options are defined for the ARM port:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mabi=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1223" incode="1">mabi</indexterm></indexcommand>
<para>Generate code for the specified ABI&eosperiod;  Permissible values are: <samp>apcs-gnu</samp>,
<samp>atpcs</samp>, <samp>aapcs</samp>, <samp>aapcs-linux</samp> and <samp>iwmmxt</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mapcs-frame</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1224" incode="1">mapcs-frame</indexterm></indexcommand>
<para>Generate a stack frame that is compliant with the ARM Procedure Call
Standard for all functions, even if this is not strictly necessary for
correct execution of the code.  Specifying <option>-fomit-frame-pointer</option>
with this option causes the stack frames not to be generated for
leaf functions.  The default is <option>-mno-apcs-frame</option>.
This option is deprecated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mapcs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1225" incode="1">mapcs</indexterm></indexcommand>
<para>This is a synonym for <option>-mapcs-frame</option> and is deprecated.
</para>
<ignore>
@c not currently implemented
@item -mapcs-stack-check
@opindex mapcs-stack-check
Generate code to check the amount of stack space available upon entry to
every function (that actually uses some stack space).  If there is
insufficient space available then either the function
@code{__rt_stkovf_split_small} or @code{__rt_stkovf_split_big} is
called, depending upon the amount of stack space required.  The runtime
system is required to provide these functions.  The default is
@option{-mno-apcs-stack-check}, since this produces smaller code.

@c not currently implemented
@item -mapcs-float
@opindex mapcs-float
Pass floating-point arguments using the floating-point registers.  This is
one of the variants of the APCS@.  This option is recommended if the
target hardware has a floating-point unit or if a lot of floating-point
arithmetic is going to be performed by the code.  The default is
@option{-mno-apcs-float}, since the size of integer-only code is 
slightly increased if @option{-mapcs-float} is used.

@c not currently implemented
@item -mapcs-reentrant
@opindex mapcs-reentrant
Generate reentrant, position-independent code.  The default is
@option{-mno-apcs-reentrant}.
</ignore>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mthumb-interwork</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1226" incode="1">mthumb-interwork</indexterm></indexcommand>
<para>Generate code that supports calling between the ARM and Thumb
instruction sets.  Without this option, on pre-v5 architectures, the
two instruction sets cannot be reliably used inside one program.  The
default is <option>-mno-thumb-interwork</option>, since slightly larger code
is generated when <option>-mthumb-interwork</option> is specified.  In AAPCS
configurations this option is meaningless.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-sched-prolog</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1227" incode="1">mno-sched-prolog</indexterm></indexcommand>
<para>Prevent the reordering of instructions in the function prologue, or the
merging of those instruction with the instructions in the function&textrsquo;s
body.  This means that all functions start with a recognizable set
of instructions (or in fact one of a choice from a small set of
different function prologues), and this information can be used to
locate the start of functions inside an executable piece of code.  The
default is <option>-msched-prolog</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfloat-abi=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1228" incode="1">mfloat-abi</indexterm></indexcommand>
<para>Specifies which floating-point ABI to use.  Permissible values
are: <samp>soft</samp>, <samp>softfp</samp> and <samp>hard</samp>.
</para>
<para>Specifying <samp>soft</samp> causes GCC to generate output containing
library calls for floating-point operations.
<samp>softfp</samp> allows the generation of code using hardware floating-point
instructions, but still uses the soft-float calling conventions.
<samp>hard</samp> allows generation of floating-point instructions
and uses FPU-specific calling conventions.
</para>
<para>The default depends on the specific target configuration.  Note that
the hard-float and soft-float ABIs are not link-compatible; you must
compile your entire program with the same ABI, and link with a
compatible set of libraries.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlittle-endian</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1229" incode="1">mlittle-endian</indexterm></indexcommand>
<para>Generate code for a processor running in little-endian mode.  This is
the default for all standard configurations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbig-endian</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1230" incode="1">mbig-endian</indexterm></indexcommand>
<para>Generate code for a processor running in big-endian mode; the default is
to compile code for a little-endian processor.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-march=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1231" incode="1">march</indexterm></indexcommand>
<para>This specifies the name of the target ARM architecture.  GCC uses this
name to determine what kind of instructions it can emit when generating
assembly code.  This option can be used in conjunction with or instead
of the <option>-mcpu=</option> option.  Permissible names are: <samp>armv2</samp>,
<samp>armv2a</samp>, <samp>armv3</samp>, <samp>armv3m</samp>, <samp>armv4</samp>, <samp>armv4t</samp>,
<samp>armv5</samp>, <samp>armv5t</samp>, <samp>armv5e</samp>, <samp>armv5te</samp>,
<samp>armv6</samp>, <samp>armv6j</samp>,
<samp>armv6t2</samp>, <samp>armv6z</samp>, <samp>armv6zk</samp>, <samp>armv6-m</samp>,
<samp>armv7</samp>, <samp>armv7-a</samp>, <samp>armv7-r</samp>, <samp>armv7-m</samp>, <samp>armv7e-m</samp>,
<samp>armv7ve</samp>, <samp>armv8-a</samp>, <samp>armv8-a+crc</samp>,
<samp>iwmmxt</samp>, <samp>iwmmxt2</samp>, <samp>ep9312</samp>.
</para>
<para><option>-march=armv7ve</option> is the armv7-a architecture with virtualization
extensions.
</para>
<para><option>-march=armv8-a+crc</option> enables code generation for the ARMv8-A
architecture together with the optional CRC32 extensions.
</para>
<para><option>-march=native</option> causes the compiler to auto-detect the architecture
of the build computer.  At present, this feature is only supported on
GNU/Linux, and not all architectures are recognized.  If the auto-detect
is unsuccessful the option has no effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1232" incode="1">mtune</indexterm></indexcommand>
<para>This option specifies the name of the target ARM processor for
which GCC should tune the performance of the code.
For some ARM implementations better performance can be obtained by using
this option.
Permissible names are: <samp>arm2</samp>, <samp>arm250</samp>,
<samp>arm3</samp>, <samp>arm6</samp>, <samp>arm60</samp>, <samp>arm600</samp>, <samp>arm610</samp>,
<samp>arm620</samp>, <samp>arm7</samp>, <samp>arm7m</samp>, <samp>arm7d</samp>, <samp>arm7dm</samp>,
<samp>arm7di</samp>, <samp>arm7dmi</samp>, <samp>arm70</samp>, <samp>arm700</samp>,
<samp>arm700i</samp>, <samp>arm710</samp>, <samp>arm710c</samp>, <samp>arm7100</samp>,
<samp>arm720</samp>,
<samp>arm7500</samp>, <samp>arm7500fe</samp>, <samp>arm7tdmi</samp>, <samp>arm7tdmi-s</samp>,
<samp>arm710t</samp>, <samp>arm720t</samp>, <samp>arm740t</samp>,
<samp>strongarm</samp>, <samp>strongarm110</samp>, <samp>strongarm1100</samp>,
<samp>strongarm1110</samp>,
<samp>arm8</samp>, <samp>arm810</samp>, <samp>arm9</samp>, <samp>arm9e</samp>, <samp>arm920</samp>,
<samp>arm920t</samp>, <samp>arm922t</samp>, <samp>arm946e-s</samp>, <samp>arm966e-s</samp>,
<samp>arm968e-s</samp>, <samp>arm926ej-s</samp>, <samp>arm940t</samp>, <samp>arm9tdmi</samp>,
<samp>arm10tdmi</samp>, <samp>arm1020t</samp>, <samp>arm1026ej-s</samp>,
<samp>arm10e</samp>, <samp>arm1020e</samp>, <samp>arm1022e</samp>,
<samp>arm1136j-s</samp>, <samp>arm1136jf-s</samp>, <samp>mpcore</samp>, <samp>mpcorenovfp</samp>,
<samp>arm1156t2-s</samp>, <samp>arm1156t2f-s</samp>, <samp>arm1176jz-s</samp>, <samp>arm1176jzf-s</samp>,
<samp>cortex-a5</samp>, <samp>cortex-a7</samp>, <samp>cortex-a8</samp>, <samp>cortex-a9</samp>,
<samp>cortex-a12</samp>, <samp>cortex-a15</samp>, <samp>cortex-a53</samp>,
<samp>cortex-a57</samp>, <samp>cortex-a72</samp>,
<samp>cortex-r4</samp>,
<samp>cortex-r4f</samp>, <samp>cortex-r5</samp>, <samp>cortex-r7</samp>, <samp>cortex-m7</samp>,
<samp>cortex-m4</samp>,
<samp>cortex-m3</samp>,
<samp>cortex-m1</samp>,
<samp>cortex-m0</samp>,
<samp>cortex-m0plus</samp>,
<samp>cortex-m1.small-multiply</samp>,
<samp>cortex-m0.small-multiply</samp>,
<samp>cortex-m0plus.small-multiply</samp>,
<samp>exynos-m1</samp>,
<samp>marvell-pj4</samp>,
<samp>xscale</samp>, <samp>iwmmxt</samp>, <samp>iwmmxt2</samp>, <samp>ep9312</samp>,
<samp>fa526</samp>, <samp>fa626</samp>,
<samp>fa606te</samp>, <samp>fa626te</samp>, <samp>fmp626</samp>, <samp>fa726te</samp>,
<samp>xgene1</samp>.
</para>
<para>Additionally, this option can specify that GCC should tune the performance
of the code for a big.LITTLE system.  Permissible names are:
<samp>cortex-a15.cortex-a7</samp>, <samp>cortex-a57.cortex-a53</samp>,
<samp>cortex-a72.cortex-a53</samp>.
</para>
<para><option>-mtune=generic-<var>arch</var></option> specifies that GCC should tune the
performance for a blend of processors within architecture <var>arch</var>.
The aim is to generate code that run well on the current most popular
processors, balancing between optimizations that benefit some CPUs in the
range, and avoiding performance pitfalls of other CPUs.  The effects of
this option may change in future GCC versions as CPU models come and go.
</para>
<para><option>-mtune=native</option> causes the compiler to auto-detect the CPU
of the build computer.  At present, this feature is only supported on
GNU/Linux, and not all architectures are recognized.  If the auto-detect is
unsuccessful the option has no effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1233" incode="1">mcpu</indexterm></indexcommand>
<para>This specifies the name of the target ARM processor.  GCC uses this name
to derive the name of the target ARM architecture (as if specified
by <option>-march</option>) and the ARM processor type for which to tune for
performance (as if specified by <option>-mtune</option>).  Where this option
is used in conjunction with <option>-march</option> or <option>-mtune</option>,
those options take precedence over the appropriate part of this option.
</para>
<para>Permissible names for this option are the same as those for
<option>-mtune</option>.
</para>
<para><option>-mcpu=generic-<var>arch</var></option> is also permissible, and is
equivalent to <option>-march=<var>arch</var> -mtune=generic-<var>arch</var></option>.
See <option>-mtune</option> for more information.
</para>
<para><option>-mcpu=native</option> causes the compiler to auto-detect the CPU
of the build computer.  At present, this feature is only supported on
GNU/Linux, and not all architectures are recognized.  If the auto-detect
is unsuccessful the option has no effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfpu=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1234" incode="1">mfpu</indexterm></indexcommand>
<para>This specifies what floating-point hardware (or hardware emulation) is
available on the target.  Permissible names are: <samp>vfp</samp>, <samp>vfpv3</samp>,
<samp>vfpv3-fp16</samp>, <samp>vfpv3-d16</samp>, <samp>vfpv3-d16-fp16</samp>, <samp>vfpv3xd</samp>,
<samp>vfpv3xd-fp16</samp>, <samp>neon</samp>, <samp>neon-fp16</samp>, <samp>vfpv4</samp>,
<samp>vfpv4-d16</samp>, <samp>fpv4-sp-d16</samp>, <samp>neon-vfpv4</samp>,
<samp>fpv5-d16</samp>, <samp>fpv5-sp-d16</samp>,
<samp>fp-armv8</samp>, <samp>neon-fp-armv8</samp>, and <samp>crypto-neon-fp-armv8</samp>.
</para>
<para>If <option>-msoft-float</option> is specified this specifies the format of
floating-point values.
</para>
<para>If the selected floating-point hardware includes the NEON extension
(e.g. <option>-mfpu</option>=<samp>neon</samp>), note that floating-point
operations are not generated by GCC&textrsquo;s auto-vectorization pass unless
<option>-funsafe-math-optimizations</option> is also specified.  This is
because NEON hardware does not fully implement the IEEE 754 standard for
floating-point arithmetic (in particular denormal values are treated as
zero), so the use of NEON instructions may lead to a loss of precision.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfp16-format=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1235" incode="1">mfp16-format</indexterm></indexcommand>
<para>Specify the format of the <code>__fp16</code> half-precision floating-point type.
Permissible names are <samp>none</samp>, <samp>ieee</samp>, and <samp>alternative</samp>;
the default is <samp>none</samp>, in which case the <code>__fp16</code> type is not
defined.  <xref label="Half_002dPrecision"><xrefnodename>Half-Precision</xrefnodename></xref>, for more information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstructure-size-boundary=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1236" incode="1">mstructure-size-boundary</indexterm></indexcommand>
<para>The sizes of all structures and unions are rounded up to a multiple
of the number of bits set by this option.  Permissible values are 8, 32
and 64.  The default value varies for different toolchains.  For the COFF
targeted toolchain the default value is 8.  A value of 64 is only allowed
if the underlying ABI supports it.
</para>
<para>Specifying a larger number can produce faster, more efficient code, but
can also increase the size of the program.  Different values are potentially
incompatible.  Code compiled with one value cannot necessarily expect to
work with code or libraries compiled with another value, if they exchange
information using structures or unions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabort-on-noreturn</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1237" incode="1">mabort-on-noreturn</indexterm></indexcommand>
<para>Generate a call to the function <code>abort</code> at the end of a
<code>noreturn</code> function.  It is executed if the function tries to
return.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong-calls</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-long-calls</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1238" incode="1">mlong-calls</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1239" incode="1">mno-long-calls</indexterm></indexcommand>
<para>Tells the compiler to perform function calls by first loading the
address of the function into a register and then performing a subroutine
call on this register.  This switch is needed if the target function
lies outside of the 64-megabyte addressing range of the offset-based
version of subroutine call instruction.
</para>
<para>Even if this switch is enabled, not all function calls are turned
into long calls.  The heuristic is that static functions, functions
that have the <code>short_call</code> attribute, functions that are inside
the scope of a <code>#pragma no_long_calls</code> directive, and functions whose
definitions have already been compiled within the current compilation
unit are not turned into long calls.  The exceptions to this rule are
that weak function definitions, functions with the <code>long_call</code>
attribute or the <code>section</code> attribute, and functions that are within
the scope of a <code>#pragma long_calls</code> directive are always
turned into long calls.
</para>
<para>This feature is not enabled by default.  Specifying
<option>-mno-long-calls</option> restores the default behavior, as does
placing the function calls within the scope of a <code>#pragma
long_calls_off</code> directive.  Note these switches have no effect on how
the compiler generates code to handle function calls via function
pointers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msingle-pic-base</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1240" incode="1">msingle-pic-base</indexterm></indexcommand>
<para>Treat the register used for PIC addressing as read-only, rather than
loading it in the prologue for each function.  The runtime system is
responsible for initializing this register with an appropriate value
before execution begins.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpic-register=<var>reg</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1241" incode="1">mpic-register</indexterm></indexcommand>
<para>Specify the register to be used for PIC addressing.
For standard PIC base case, the default is any suitable register
determined by compiler.  For single PIC base case, the default is
<samp>R9</samp> if target is EABI based or stack-checking is enabled,
otherwise the default is <samp>R10</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpic-data-is-text-relative</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1242" incode="1">mpic-data-is-text-relative</indexterm></indexcommand>
<para>Assume that each data segments are relative to text segment at load time.
Therefore, it permits addressing data using PC-relative operations.
This option is on by default for targets other than VxWorks RTP.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpoke-function-name</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1243" incode="1">mpoke-function-name</indexterm></indexcommand>
<para>Write the name of each function into the text section, directly
preceding the function prologue.  The generated code is similar to this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">     t0
         .ascii &quot;arm_poke_function_name&quot;, 0
         .align
     t1
         .word 0xff000000 + (t1 - t0)
     arm_poke_function_name
         mov     ip, sp
         stmfd   sp!, &lbrace;fp, ip, lr, pc&rbrace;
         sub     fp, ip, #4
</pre></smallexample>

<para>When performing a stack backtrace, code can inspect the value of
<code>pc</code> stored at <code>fp + 0</code>.  If the trace function then looks at
location <code>pc - 12</code> and the top 8 bits are set, then we know that
there is a function name embedded immediately preceding this location
and has length <code>((pc[-3]) &amp; 0xff000000)</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mthumb</itemformat></item>
<itemx spaces=" "><itemformat command="code">-marm</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1244" incode="1">marm</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1245" incode="1">mthumb</indexterm></indexcommand>

<para>Select between generating code that executes in ARM and Thumb
states.  The default for most configurations is to generate code
that executes in ARM state, but the default can be changed by
configuring GCC with the <option>--with-mode=</option><var>state</var>
configure option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtpcs-frame</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1246" incode="1">mtpcs-frame</indexterm></indexcommand>
<para>Generate a stack frame that is compliant with the Thumb Procedure Call
Standard for all non-leaf functions.  (A leaf function is one that does
not call any other functions.)  The default is <option>-mno-tpcs-frame</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtpcs-leaf-frame</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1247" incode="1">mtpcs-leaf-frame</indexterm></indexcommand>
<para>Generate a stack frame that is compliant with the Thumb Procedure Call
Standard for all leaf functions.  (A leaf function is one that does
not call any other functions.)  The default is <option>-mno-apcs-leaf-frame</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcallee-super-interworking</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1248" incode="1">mcallee-super-interworking</indexterm></indexcommand>
<para>Gives all externally visible functions in the file being compiled an ARM
instruction set header which switches to Thumb mode before executing the
rest of the function.  This allows these functions to be called from
non-interworking code.  This option is not valid in AAPCS configurations
because interworking is enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcaller-super-interworking</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1249" incode="1">mcaller-super-interworking</indexterm></indexcommand>
<para>Allows calls via function pointers (including virtual functions) to
execute correctly regardless of whether the target code has been
compiled for interworking or not.  There is a small overhead in the cost
of executing a function pointer if this option is enabled.  This option
is not valid in AAPCS configurations because interworking is enabled
by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtp=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1250" incode="1">mtp</indexterm></indexcommand>
<para>Specify the access model for the thread local storage pointer.  The valid
models are <samp>soft</samp>, which generates calls to <code>__aeabi_read_tp</code>,
<samp>cp15</samp>, which fetches the thread pointer from <code>cp15</code> directly
(supported in the arm6k architecture), and <samp>auto</samp>, which uses the
best available method for the selected processor.  The default setting is
<samp>auto</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtls-dialect=<var>dialect</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1251" incode="1">mtls-dialect</indexterm></indexcommand>
<para>Specify the dialect to use for accessing thread local storage.  Two
<var>dialect</var>s are supported&textmdash;<samp>gnu</samp> and <samp>gnu2</samp>.  The
<samp>gnu</samp> dialect selects the original GNU scheme for supporting
local and global dynamic TLS models.  The <samp>gnu2</samp> dialect
selects the GNU descriptor scheme, which provides better performance
for shared libraries.  The GNU descriptor scheme is compatible with
the original scheme, but does require new assembler, linker and
library support.  Initial and local exec TLS models are unaffected by
this option and always use the original scheme.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mword-relocations</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1252" incode="1">mword-relocations</indexterm></indexcommand>
<para>Only generate absolute relocations on word-sized values (i.e. R_ARM_ABS32).
This is enabled by default on targets (uClinux, SymbianOS) where the runtime
loader imposes this restriction, and when <option>-fpic</option> or <option>-fPIC</option>
is specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-cortex-m3-ldrd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1253" incode="1">mfix-cortex-m3-ldrd</indexterm></indexcommand>
<para>Some Cortex-M3 cores can cause data corruption when <code>ldrd</code> instructions
with overlapping destination and base registers are used.  This option avoids
generating these instructions.  This option is enabled by default when
<option>-mcpu=cortex-m3</option> is specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-munaligned-access</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-unaligned-access</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1254" incode="1">munaligned-access</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1255" incode="1">mno-unaligned-access</indexterm></indexcommand>
<para>Enables (or disables) reading and writing of 16- and 32- bit values
from addresses that are not 16- or 32- bit aligned.  By default
unaligned access is disabled for all pre-ARMv6 and all ARMv6-M
architectures, and enabled for all other architectures.  If unaligned
access is not enabled then words in packed data structures are
accessed a byte at a time.
</para>
<para>The ARM attribute <code>Tag_CPU_unaligned_access</code> is set in the
generated object file to either true or false, depending upon the
setting of this option.  If unaligned access is enabled then the
preprocessor symbol <code>__ARM_FEATURE_UNALIGNED</code> is also
defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mneon-for-64bits</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1256" incode="1">mneon-for-64bits</indexterm></indexcommand>
<para>Enables using Neon to handle scalar 64-bits operations. This is
disabled by default since the cost of moving data from core registers
to Neon is high.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mslow-flash-data</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1257" incode="1">mslow-flash-data</indexterm></indexcommand>
<para>Assume loading data from flash is slower than fetching instruction.
Therefore literal load is minimized for better performance.
This option is only supported when compiling for ARMv7 M-profile and
off by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-masm-syntax-unified</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1258" incode="1">masm-syntax-unified</indexterm></indexcommand>
<para>Assume inline assembler is using unified asm syntax.  The default is
currently off which implies divided syntax.  Currently this option is
available only for Thumb1 and has no effect on ARM state and Thumb2.
However, this may change in future releases of GCC.  Divided syntax
should be considered deprecated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrestrict-it</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1259" incode="1">mrestrict-it</indexterm></indexcommand>
<para>Restricts generation of IT blocks to conform to the rules of ARMv8.
IT blocks can only contain a single 16-bit instruction from a select
set of instructions. This option is on by default for ARMv8 Thumb mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mprint-tune-info</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1260" incode="1">mprint-tune-info</indexterm></indexcommand>
<para>Print CPU tuning information as comment in assembler file.  This is
an option used only for regression testing of the compiler and not
intended for ordinary use in compiling code.  This option is disabled
by default.
</para></tableitem></tableentry></table>

</subsection>
<node name="AVR-Options" spaces=" "><nodename>AVR Options</nodename><nodenext automatic="on">Blackfin Options</nodenext><nodeprev automatic="on">ARM Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>AVR Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="170">AVR Options</indexterm></cindex>

<para>These options are defined for AVR implementations:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mmcu=<var>mcu</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1261" incode="1">mmcu</indexterm></indexcommand>
<para>Specify Atmel AVR instruction set architectures (ISA) or MCU type.
</para>
<para>The default for this option is&nbsp;<samp>avr2</samp>.
</para>
<para>GCC supports the following AVR devices and ISAs:
</para>
<!-- c Copyright (C) 2012-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc/doc/include/fdl.texi. -->

<!-- c This file is generated automatically using -->
<!-- c gcc/config/avr/gen-avr-mmcu-texi.c from: -->
<!-- c    gcc/config/avr/avr-arch.h -->
<!-- c    gcc/config/avr/avr-devices.c -->
<!-- c    gcc/config/avr/avr-mcus.def -->

<!-- c Please do not edit manually. -->

<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">avr2</itemformat></item>
</tableterm><tableitem><para>&textldquo;Classic&textrdquo; devices with up to 8&nbsp;KiB of program memory.
&linebreak;<var>mcu</var>&nbsp;= <code>attiny22</code>, <code>attiny26</code>, <code>at90c8534</code>, <code>at90s2313</code>, <code>at90s2323</code>, <code>at90s2333</code>, <code>at90s2343</code>, <code>at90s4414</code>, <code>at90s4433</code>, <code>at90s4434</code>, <code>at90s8515</code>, <code>at90s8535</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avr25</itemformat></item>
</tableterm><tableitem><para>&textldquo;Classic&textrdquo; devices with up to 8&nbsp;KiB of program memory and with the <code>MOVW</code> instruction.
&linebreak;<var>mcu</var>&nbsp;= <code>ata5272</code>, <code>ata6616c</code>, <code>attiny13</code>, <code>attiny13a</code>, <code>attiny2313</code>, <code>attiny2313a</code>, <code>attiny24</code>, <code>attiny24a</code>, <code>attiny25</code>, <code>attiny261</code>, <code>attiny261a</code>, <code>attiny43u</code>, <code>attiny4313</code>, <code>attiny44</code>, <code>attiny44a</code>, <code>attiny441</code>, <code>attiny45</code>, <code>attiny461</code>, <code>attiny461a</code>, <code>attiny48</code>, <code>attiny828</code>, <code>attiny84</code>, <code>attiny84a</code>, <code>attiny841</code>, <code>attiny85</code>, <code>attiny861</code>, <code>attiny861a</code>, <code>attiny87</code>, <code>attiny88</code>, <code>at86rf401</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avr3</itemformat></item>
</tableterm><tableitem><para>&textldquo;Classic&textrdquo; devices with 16&nbsp;KiB up to 64&nbsp;KiB of  program memory.
&linebreak;<var>mcu</var>&nbsp;= <code>at43usb355</code>, <code>at76c711</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avr31</itemformat></item>
</tableterm><tableitem><para>&textldquo;Classic&textrdquo; devices with 128&nbsp;KiB of program memory.
&linebreak;<var>mcu</var>&nbsp;= <code>atmega103</code>, <code>at43usb320</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avr35</itemformat></item>
</tableterm><tableitem><para>&textldquo;Classic&textrdquo; devices with 16&nbsp;KiB up to 64&nbsp;KiB of program memory and with the <code>MOVW</code> instruction.
&linebreak;<var>mcu</var>&nbsp;= <code>ata5505</code>, <code>ata6617c</code>, <code>ata664251</code>, <code>atmega16u2</code>, <code>atmega32u2</code>, <code>atmega8u2</code>, <code>attiny1634</code>, <code>attiny167</code>, <code>at90usb162</code>, <code>at90usb82</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avr4</itemformat></item>
</tableterm><tableitem><para>&textldquo;Enhanced&textrdquo; devices with up to 8&nbsp;KiB of program memory.
&linebreak;<var>mcu</var>&nbsp;= <code>ata6285</code>, <code>ata6286</code>, <code>ata6289</code>, <code>ata6612c</code>, <code>atmega48</code>, <code>atmega48a</code>, <code>atmega48p</code>, <code>atmega48pa</code>, <code>atmega8</code>, <code>atmega8a</code>, <code>atmega8hva</code>, <code>atmega8515</code>, <code>atmega8535</code>, <code>atmega88</code>, <code>atmega88a</code>, <code>atmega88p</code>, <code>atmega88pa</code>, <code>at90pwm1</code>, <code>at90pwm2</code>, <code>at90pwm2b</code>, <code>at90pwm3</code>, <code>at90pwm3b</code>, <code>at90pwm81</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avr5</itemformat></item>
</tableterm><tableitem><para>&textldquo;Enhanced&textrdquo; devices with 16&nbsp;KiB up to 64&nbsp;KiB of program memory.
&linebreak;<var>mcu</var>&nbsp;= <code>ata5702m322</code>, <code>ata5782</code>, <code>ata5790</code>, <code>ata5790n</code>, <code>ata5795</code>, <code>ata5831</code>, <code>ata6613c</code>, <code>ata6614q</code>, <code>atmega16</code>, <code>atmega16a</code>, <code>atmega16hva</code>, <code>atmega16hva2</code>, <code>atmega16hvb</code>, <code>atmega16hvbrevb</code>, <code>atmega16m1</code>, <code>atmega16u4</code>, <code>atmega161</code>, <code>atmega162</code>, <code>atmega163</code>, <code>atmega164a</code>, <code>atmega164p</code>, <code>atmega164pa</code>, <code>atmega165</code>, <code>atmega165a</code>, <code>atmega165p</code>, <code>atmega165pa</code>, <code>atmega168</code>, <code>atmega168a</code>, <code>atmega168p</code>, <code>atmega168pa</code>, <code>atmega169</code>, <code>atmega169a</code>, <code>atmega169p</code>, <code>atmega169pa</code>, <code>atmega32</code>, <code>atmega32a</code>, <code>atmega32c1</code>, <code>atmega32hvb</code>, <code>atmega32hvbrevb</code>, <code>atmega32m1</code>, <code>atmega32u4</code>, <code>atmega32u6</code>, <code>atmega323</code>, <code>atmega324a</code>, <code>atmega324p</code>, <code>atmega324pa</code>, <code>atmega325</code>, <code>atmega325a</code>, <code>atmega325p</code>, <code>atmega325pa</code>, <code>atmega3250</code>, <code>atmega3250a</code>, <code>atmega3250p</code>, <code>atmega3250pa</code>, <code>atmega328</code>, <code>atmega328p</code>, <code>atmega329</code>, <code>atmega329a</code>, <code>atmega329p</code>, <code>atmega329pa</code>, <code>atmega3290</code>, <code>atmega3290a</code>, <code>atmega3290p</code>, <code>atmega3290pa</code>, <code>atmega406</code>, <code>atmega64</code>, <code>atmega64a</code>, <code>atmega64c1</code>, <code>atmega64hve</code>, <code>atmega64hve2</code>, <code>atmega64m1</code>, <code>atmega64rfr2</code>, <code>atmega640</code>, <code>atmega644</code>, <code>atmega644a</code>, <code>atmega644p</code>, <code>atmega644pa</code>, <code>atmega644rfr2</code>, <code>atmega645</code>, <code>atmega645a</code>, <code>atmega645p</code>, <code>atmega6450</code>, <code>atmega6450a</code>, <code>atmega6450p</code>, <code>atmega649</code>, <code>atmega649a</code>, <code>atmega649p</code>, <code>atmega6490</code>, <code>atmega6490a</code>, <code>atmega6490p</code>, <code>at90can32</code>, <code>at90can64</code>, <code>at90pwm161</code>, <code>at90pwm216</code>, <code>at90pwm316</code>, <code>at90scr100</code>, <code>at90usb646</code>, <code>at90usb647</code>, <code>at94k</code>, <code>m3000</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avr51</itemformat></item>
</tableterm><tableitem><para>&textldquo;Enhanced&textrdquo; devices with 128&nbsp;KiB of program memory.
&linebreak;<var>mcu</var>&nbsp;= <code>atmega128</code>, <code>atmega128a</code>, <code>atmega128rfa1</code>, <code>atmega128rfr2</code>, <code>atmega1280</code>, <code>atmega1281</code>, <code>atmega1284</code>, <code>atmega1284p</code>, <code>atmega1284rfr2</code>, <code>at90can128</code>, <code>at90usb1286</code>, <code>at90usb1287</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avr6</itemformat></item>
</tableterm><tableitem><para>&textldquo;Enhanced&textrdquo; devices with 3-byte PC, i.e.&noeos; with more than 128&nbsp;KiB of program memory.
&linebreak;<var>mcu</var>&nbsp;= <code>atmega256rfr2</code>, <code>atmega2560</code>, <code>atmega2561</code>, <code>atmega2564rfr2</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avrxmega2</itemformat></item>
</tableterm><tableitem><para>&textldquo;XMEGA&textrdquo; devices with more than 8&nbsp;KiB and up to 64&nbsp;KiB of program memory.
&linebreak;<var>mcu</var>&nbsp;= <code>atxmega16a4</code>, <code>atxmega16a4u</code>, <code>atxmega16c4</code>, <code>atxmega16d4</code>, <code>atxmega16e5</code>, <code>atxmega32a4</code>, <code>atxmega32a4u</code>, <code>atxmega32c3</code>, <code>atxmega32c4</code>, <code>atxmega32d3</code>, <code>atxmega32d4</code>, <code>atxmega32e5</code>, <code>atxmega8e5</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avrxmega4</itemformat></item>
</tableterm><tableitem><para>&textldquo;XMEGA&textrdquo; devices with more than 64&nbsp;KiB and up to 128&nbsp;KiB of program memory.
&linebreak;<var>mcu</var>&nbsp;= <code>atxmega64a3</code>, <code>atxmega64a3u</code>, <code>atxmega64a4u</code>, <code>atxmega64b1</code>, <code>atxmega64b3</code>, <code>atxmega64c3</code>, <code>atxmega64d3</code>, <code>atxmega64d4</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avrxmega5</itemformat></item>
</tableterm><tableitem><para>&textldquo;XMEGA&textrdquo; devices with more than 64&nbsp;KiB and up to 128&nbsp;KiB of program memory and more than 64&nbsp;KiB of RAM.
&linebreak;<var>mcu</var>&nbsp;= <code>atxmega64a1</code>, <code>atxmega64a1u</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avrxmega6</itemformat></item>
</tableterm><tableitem><para>&textldquo;XMEGA&textrdquo; devices with more than 128&nbsp;KiB of program memory.
&linebreak;<var>mcu</var>&nbsp;= <code>atxmega128a3</code>, <code>atxmega128a3u</code>, <code>atxmega128b1</code>, <code>atxmega128b3</code>, <code>atxmega128c3</code>, <code>atxmega128d3</code>, <code>atxmega128d4</code>, <code>atxmega192a3</code>, <code>atxmega192a3u</code>, <code>atxmega192c3</code>, <code>atxmega192d3</code>, <code>atxmega256a3</code>, <code>atxmega256a3b</code>, <code>atxmega256a3bu</code>, <code>atxmega256a3u</code>, <code>atxmega256c3</code>, <code>atxmega256d3</code>, <code>atxmega384c3</code>, <code>atxmega384d3</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avrxmega7</itemformat></item>
</tableterm><tableitem><para>&textldquo;XMEGA&textrdquo; devices with more than 128&nbsp;KiB of program memory and more than 64&nbsp;KiB of RAM.
&linebreak;<var>mcu</var>&nbsp;= <code>atxmega128a1</code>, <code>atxmega128a1u</code>, <code>atxmega128a4u</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avrtiny</itemformat></item>
</tableterm><tableitem><para>&textldquo;TINY&textrdquo; Tiny core devices with 512&nbsp;B up to 4&nbsp;KiB of program memory.
&linebreak;<var>mcu</var>&nbsp;= <code>attiny10</code>, <code>attiny20</code>, <code>attiny4</code>, <code>attiny40</code>, <code>attiny5</code>, <code>attiny9</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">avr1</itemformat></item>
</tableterm><tableitem><para>This ISA is implemented by the minimal AVR core and supported for assembler only.
&linebreak;<var>mcu</var>&nbsp;= <code>attiny11</code>, <code>attiny12</code>, <code>attiny15</code>, <code>attiny28</code>, <code>at90s1200</code>.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-maccumulate-args</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1262" incode="1">maccumulate-args</indexterm></indexcommand>
<para>Accumulate outgoing function arguments and acquire/release the needed
stack space for outgoing function arguments once in function
prologue/epilogue.  Without this option, outgoing arguments are pushed
before calling a function and popped afterwards.
</para>
<para>Popping the arguments after the function call can be expensive on
AVR so that accumulating the stack space might lead to smaller
executables because arguments need not to be removed from the
stack after such a function call.
</para>
<para>This option can lead to reduced code size for functions that perform
several calls to functions that get their arguments on the stack like
calls to printf-like functions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbranch-cost=<var>cost</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1263" incode="1">mbranch-cost</indexterm></indexcommand>
<para>Set the branch costs for conditional branch instructions to
<var>cost</var>.  Reasonable values for <var>cost</var> are small, non-negative
integers. The default branch cost is 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcall-prologues</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1264" incode="1">mcall-prologues</indexterm></indexcommand>
<para>Functions prologues/epilogues are expanded as calls to appropriate
subroutines.  Code size is smaller.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mint8</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1265" incode="1">mint8</indexterm></indexcommand>
<para>Assume <code>int</code> to be 8-bit integer.  This affects the sizes of all types: a
<code>char</code> is 1 byte, an <code>int</code> is 1 byte, a <code>long</code> is 2 bytes,
and <code>long long</code> is 4 bytes.  Please note that this option does not
conform to the C standards, but it results in smaller code
size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mn-flash=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1266" incode="1">mn-flash</indexterm></indexcommand>
<para>Assume that the flash memory has a size of 
<var>num</var> times 64&nbsp;KiB.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-interrupts</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1267" incode="1">mno-interrupts</indexterm></indexcommand>
<para>Generated code is not compatible with hardware interrupts.
Code size is smaller.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrelax</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1268" incode="1">mrelax</indexterm></indexcommand>
<para>Try to replace <code>CALL</code> resp.&noeos; <code>JMP</code> instruction by the shorter
<code>RCALL</code> resp.&noeos; <code>RJMP</code> instruction if applicable.
Setting <option>-mrelax</option> just adds the <option>--mlink-relax</option> option to
the assembler&textrsquo;s command line and the <option>--relax</option> option to the
linker&textrsquo;s command line.
</para>
<para>Jump relaxing is performed by the linker because jump offsets are not
known before code is located. Therefore, the assembler code generated by the
compiler is the same, but the instructions in the executable may
differ from instructions in the assembler code.
</para>
<para>Relaxing must be turned on if linker stubs are needed, see the
section on <code>EIND</code> and linker stubs below.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrmw</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1269" incode="1">mrmw</indexterm></indexcommand>
<para>Assume that the device supports the Read-Modify-Write
instructions <code>XCH</code>, <code>LAC</code>, <code>LAS</code> and <code>LAT</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msp8</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1270" incode="1">msp8</indexterm></indexcommand>
<para>Treat the stack pointer register as an 8-bit register,
i.e.&noeos; assume the high byte of the stack pointer is zero.
In general, you don&textrsquo;t need to set this option by hand.
</para>
<para>This option is used internally by the compiler to select and
build multilibs for architectures <code>avr2</code> and <code>avr25</code>.
These architectures mix devices with and without <code>SPH</code>.
For any setting other than <option>-mmcu=avr2</option> or <option>-mmcu=avr25</option>
the compiler driver adds or removes this option from the compiler
proper&textrsquo;s command line, because the compiler then knows if the device
or architecture has an 8-bit stack pointer and thus no <code>SPH</code>
register or not.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstrict-X</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1271" incode="1">mstrict-X</indexterm></indexcommand>
<para>Use address register <code>X</code> in a way proposed by the hardware.  This means
that <code>X</code> is only used in indirect, post-increment or
pre-decrement addressing.
</para>
<para>Without this option, the <code>X</code> register may be used in the same way
as <code>Y</code> or <code>Z</code> which then is emulated by additional
instructions.  
For example, loading a value with <code>X+const</code> addressing with a
small non-negative <code>const &lt; 64</code> to a register <var>Rn</var> is
performed as
</para>
<example endspaces=" ">
<pre xml:space="preserve">adiw r26, const   ; X += const
ld   <var>Rn</var>, X        ; <var>Rn</var> = *X
sbiw r26, const   ; X -= const
</pre></example>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtiny-stack</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1272" incode="1">mtiny-stack</indexterm></indexcommand>
<para>Only change the lower 8&nbsp;bits of the stack pointer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-nodevicelib</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1273" incode="1">nodevicelib</indexterm></indexcommand>
<para>Don&textrsquo;t link against AVR-LibC&textrsquo;s device specific library <code>libdev.a</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Waddr-space-convert</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1274" incode="1">Waddr-space-convert</indexterm></indexcommand>
<para>Warn about conversions between address spaces in the case where the
resulting address space is not contained in the incoming address space.
</para></tableitem></tableentry></table>

<subsubsection spaces=" "><sectiontitle><code>EIND</code> and Devices with More Than 128 Ki Bytes of Flash</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="171"><code>EIND</code></indexterm></cindex>
<para>Pointers in the implementation are 16&nbsp;bits wide.
The address of a function or label is represented as word address so
that indirect jumps and calls can target any code address in the
range of 64&nbsp;Ki words.
</para>
<para>In order to facilitate indirect jump on devices with more than 128&nbsp;Ki
bytes of program memory space, there is a special function register called
<code>EIND</code> that serves as most significant part of the target address
when <code>EICALL</code> or <code>EIJMP</code> instructions are used.
</para>
<para>Indirect jumps and calls on these devices are handled as follows by
the compiler and are subject to some limitations:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>The compiler never sets <code>EIND</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The compiler uses <code>EIND</code> implicitely in <code>EICALL</code>/<code>EIJMP</code>
instructions or might read <code>EIND</code> directly in order to emulate an
indirect call/jump by means of a <code>RET</code> instruction.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The compiler assumes that <code>EIND</code> never changes during the startup
code or during the application. In particular, <code>EIND</code> is not
saved/restored in function or interrupt service routine
prologue/epilogue.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>For indirect calls to functions and computed goto, the linker
generates <emph>stubs</emph>. Stubs are jump pads sometimes also called
<emph>trampolines</emph>. Thus, the indirect call/jump jumps to such a stub.
The stub contains a direct jump to the desired address.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Linker relaxation must be turned on so that the linker generates
the stubs correctly in all situations. See the compiler option
<option>-mrelax</option> and the linker option <option>--relax</option>.
There are corner cases where the linker is supposed to generate stubs
but aborts without relaxation and without a helpful error message.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The default linker script is arranged for code with <code>EIND = 0</code>.
If code is supposed to work for a setup with <code>EIND != 0</code>, a custom
linker script has to be used in order to place the sections whose
name start with <code>.trampolines</code> into the segment where <code>EIND</code>
points to.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The startup code from libgcc never sets <code>EIND</code>.
Notice that startup code is a blend of code from libgcc and AVR-LibC.
For the impact of AVR-LibC on <code>EIND</code>, see the
<w><uref><urefurl>http://nongnu.org/avr-libc/user-manual/</urefurl><urefdesc>AVR-LibC user manual</urefdesc></uref></w>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>It is legitimate for user-specific startup code to set up <code>EIND</code>
early, for example by means of initialization code located in
section <code>.init3</code>. Such code runs prior to general startup code
that initializes RAM and calls constructors, but after the bit
of startup code from AVR-LibC that sets <code>EIND</code> to the segment
where the vector table is located.
</para><example endspaces=" ">
<pre xml:space="preserve">#include &lt;avr/io.h&gt;

static void
__attribute__((section(&quot;.init3&quot;),naked,used,no_instrument_function))
init3_set_eind (void)
&lbrace;
  __asm volatile (&quot;ldi r24,pm_hh8(__trampolines_start)\n\t&quot;
                  &quot;out %i0,r24&quot; :: &quot;n&quot; (&amp;EIND) : &quot;r24&quot;,&quot;memory&quot;);
&rbrace;
</pre></example>

<noindent></noindent>
<para>The <code>__trampolines_start</code> symbol is defined in the linker script.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Stubs are generated automatically by the linker if
the following two conditions are met:
</para><itemize commandarg="minus" spaces=" " endspaces=" "><itemprepend><formattingcommand command="minus"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem spaces=" "><prepend>&minus;</prepend><para>The address of a label is taken by means of the <code>gs</code> modifier
(short for <emph>generate stubs</emph>) like so:
</para><example endspaces=" ">
<pre xml:space="preserve">LDI r24, lo8(gs(<var>func</var>))
LDI r25, hi8(gs(<var>func</var>))
</pre></example>
</listitem><listitem spaces=" "><prepend>&minus;</prepend><para>The final location of that label is in a code segment
<emph>outside</emph> the segment where the stubs are located.
</para></listitem></itemize>

</listitem><listitem><prepend>&bullet;</prepend>
<para>The compiler emits such <code>gs</code> modifiers for code labels in the
following situations:
</para><itemize commandarg="minus" spaces=" " endspaces=" "><itemprepend><formattingcommand command="minus"/></itemprepend>
<listitem spaces=" "><prepend>&minus;</prepend><para>Taking address of a function or code label.
</para></listitem><listitem spaces=" "><prepend>&minus;</prepend><para>Computed goto.
</para></listitem><listitem spaces=" "><prepend>&minus;</prepend><para>If prologue-save function is used, see <option>-mcall-prologues</option>
command-line option.
</para></listitem><listitem spaces=" "><prepend>&minus;</prepend><para>Switch/case dispatch tables. If you do not want such dispatch
tables you can specify the <option>-fno-jump-tables</option> command-line option.
</para></listitem><listitem spaces=" "><prepend>&minus;</prepend><para>C and C++ constructors/destructors called during startup/shutdown.
</para></listitem><listitem spaces=" "><prepend>&minus;</prepend><para>If the tools hit a <code>gs()</code> modifier explained above.
</para></listitem></itemize>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Jumping to non-symbolic addresses like so is <emph>not</emph> supported:
</para>
<example endspaces=" ">
<pre xml:space="preserve">int main (void)
&lbrace;
    /* Call function at word address 0x2 */
    return ((int(*)(void)) 0x2)();
&rbrace;
</pre></example>

<para>Instead, a stub has to be set up, i.e.&noeos; the function has to be called
through a symbol (<code>func_4</code> in the example):
</para>
<example endspaces=" ">
<pre xml:space="preserve">int main (void)
&lbrace;
    extern int func_4 (void);

    /* Call function at byte address 0x4 */
    return func_4();
&rbrace;
</pre></example>

<para>and the application be linked with <option>-Wl,--defsym,func_4=0x4</option>.
Alternatively, <code>func_4</code> can be defined in the linker script.
</para></listitem></itemize>

</subsubsection>
<subsubsection spaces=" "><sectiontitle>Handling of the <code>RAMPD</code>, <code>RAMPX</code>, <code>RAMPY</code> and <code>RAMPZ</code> Special Function Registers</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="172"><code>RAMPD</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="173"><code>RAMPX</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="174"><code>RAMPY</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="175"><code>RAMPZ</code></indexterm></cindex>
<para>Some AVR devices support memories larger than the 64&nbsp;KiB range
that can be accessed with 16-bit pointers.  To access memory locations
outside this 64&nbsp;KiB range, the contentent of a <code>RAMP</code>
register is used as high part of the address:
The <code>X</code>, <code>Y</code>, <code>Z</code> address register is concatenated
with the <code>RAMPX</code>, <code>RAMPY</code>, <code>RAMPZ</code> special function
register, respectively, to get a wide address. Similarly,
<code>RAMPD</code> is used together with direct addressing.
</para>
<itemize commandarg="bullet" endspaces=" ">
<listitem><prepend>&bullet;</prepend>
<para>The startup code initializes the <code>RAMP</code> special function
registers with zero.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If a <ref label="AVR-Named-Address-Spaces"><xrefnodename>AVR Named Address Spaces</xrefnodename><xrefinfoname>named address space</xrefinfoname></ref> other than
generic or <code>__flash</code> is used, then <code>RAMPZ</code> is set
as needed before the operation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the device supports RAM larger than 64&nbsp;KiB and the compiler
needs to change <code>RAMPZ</code> to accomplish an operation, <code>RAMPZ</code>
is reset to zero after the operation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the device comes with a specific <code>RAMP</code> register, the ISR
prologue/epilogue saves/restores that SFR and initializes it with
zero in case the ISR code might (implicitly) use it.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>RAM larger than 64&nbsp;KiB is not supported by GCC for AVR targets.
If you use inline assembler to read from locations outside the
16-bit address range and change one of the <code>RAMP</code> registers,
you must reset it to zero after the access.
</para>
</listitem></itemize>

</subsubsection>
<subsubsection spaces=" "><sectiontitle>AVR Built-in Macros</sectiontitle>

<para>GCC defines several built-in macros so that the user code can test
for the presence or absence of features.  Almost any of the following
built-in macros are deduced from device capabilities and thus
triggered by the <option>-mmcu=</option> command-line option.
</para>
<para>For even more AVR-specific built-in macros see
<ref label="AVR-Named-Address-Spaces"><xrefnodename>AVR Named Address Spaces</xrefnodename></ref> and <ref label="AVR-Built_002din-Functions"><xrefnodename>AVR Built-in Functions</xrefnodename></ref>.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_ARCH__</itemformat></item>
</tableterm><tableitem><para>Build-in macro that resolves to a decimal number that identifies the
architecture and depends on the <option>-mmcu=<var>mcu</var></option> option.
Possible values are:
</para>
<para><code>2</code>, <code>25</code>, <code>3</code>, <code>31</code>, <code>35</code>,
<code>4</code>, <code>5</code>, <code>51</code>, <code>6</code>
</para>
<para>for <var>mcu</var>=<code>avr2</code>, <code>avr25</code>, <code>avr3</code>, <code>avr31</code>,
<code>avr35</code>, <code>avr4</code>, <code>avr5</code>, <code>avr51</code>, <code>avr6</code>,
</para>
<para>respectively and
</para>
<para><code>100</code>, <code>102</code>, <code>104</code>,
<code>105</code>, <code>106</code>, <code>107</code>
</para>
<para>for <var>mcu</var>=<code>avrtiny</code>, <code>avrxmega2</code>, <code>avrxmega4</code>,
<code>avrxmega5</code>, <code>avrxmega6</code>, <code>avrxmega7</code>, respectively.
If <var>mcu</var> specifies a device, this built-in macro is set
accordingly. For example, with <option>-mmcu=atmega8</option> the macro is
defined to <code>4</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_<var>Device</var>__</itemformat></item>
</tableterm><tableitem><para>Setting <option>-mmcu=<var>device</var></option> defines this built-in macro which reflects
the device&textrsquo;s name. For example, <option>-mmcu=atmega8</option> defines the
built-in macro <code>__AVR_ATmega8__</code>, <option>-mmcu=attiny261a</option> defines
<code>__AVR_ATtiny261A__</code>, etc.
</para>
<para>The built-in macros&textrsquo; names follow
the scheme <code>__AVR_<var>Device</var>__</code> where <var>Device</var> is
the device name as from the AVR user manual. The difference between
<var>Device</var> in the built-in macro and <var>device</var> in
<option>-mmcu=<var>device</var></option> is that the latter is always lowercase.
</para>
<para>If <var>device</var> is not a device but only a core architecture like
<samp>avr51</samp>, this macro is not defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_DEVICE_NAME__</itemformat></item>
</tableterm><tableitem><para>Setting <option>-mmcu=<var>device</var></option> defines this built-in macro to
the device&textrsquo;s name. For example, with <option>-mmcu=atmega8</option> the macro
is defined to <code>atmega8</code>.
</para>
<para>If <var>device</var> is not a device but only a core architecture like
<samp>avr51</samp>, this macro is not defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_XMEGA__</itemformat></item>
</tableterm><tableitem><para>The device / architecture belongs to the XMEGA family of devices.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_HAVE_ELPM__</itemformat></item>
</tableterm><tableitem><para>The device has the the <code>ELPM</code> instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_HAVE_ELPMX__</itemformat></item>
</tableterm><tableitem><para>The device has the <code>ELPM R<var>n</var>,Z</code> and <code>ELPM
R<var>n</var>,Z+</code> instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_HAVE_MOVW__</itemformat></item>
</tableterm><tableitem><para>The device has the <code>MOVW</code> instruction to perform 16-bit
register-register moves.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_HAVE_LPMX__</itemformat></item>
</tableterm><tableitem><para>The device has the <code>LPM R<var>n</var>,Z</code> and
<code>LPM R<var>n</var>,Z+</code> instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_HAVE_MUL__</itemformat></item>
</tableterm><tableitem><para>The device has a hardware multiplier. 
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_HAVE_JMP_CALL__</itemformat></item>
</tableterm><tableitem><para>The device has the <code>JMP</code> and <code>CALL</code> instructions.
This is the case for devices with at least 16&nbsp;KiB of program
memory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_HAVE_EIJMP_EICALL__</itemformat></item>
<itemx spaces=" "><itemformat command="code">__AVR_3_BYTE_PC__</itemformat></itemx>
</tableterm><tableitem><para>The device has the <code>EIJMP</code> and <code>EICALL</code> instructions.
This is the case for devices with more than 128&nbsp;KiB of program memory.
This also means that the program counter
(PC) is 3&nbsp;bytes wide.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_2_BYTE_PC__</itemformat></item>
</tableterm><tableitem><para>The program counter (PC) is 2&nbsp;bytes wide. This is the case for devices
with up to 128&nbsp;KiB of program memory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_HAVE_8BIT_SP__</itemformat></item>
<itemx spaces=" "><itemformat command="code">__AVR_HAVE_16BIT_SP__</itemformat></itemx>
</tableterm><tableitem><para>The stack pointer (SP) register is treated as 8-bit respectively
16-bit register by the compiler.
The definition of these macros is affected by <option>-mtiny-stack</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_HAVE_SPH__</itemformat></item>
<itemx spaces=" "><itemformat command="code">__AVR_SP8__</itemformat></itemx>
</tableterm><tableitem><para>The device has the SPH (high part of stack pointer) special function
register or has an 8-bit stack pointer, respectively.
The definition of these macros is affected by <option>-mmcu=</option> and
in the cases of <option>-mmcu=avr2</option> and <option>-mmcu=avr25</option> also
by <option>-msp8</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_HAVE_RAMPD__</itemformat></item>
<itemx spaces=" "><itemformat command="code">__AVR_HAVE_RAMPX__</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">__AVR_HAVE_RAMPY__</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">__AVR_HAVE_RAMPZ__</itemformat></itemx>
</tableterm><tableitem><para>The device has the <code>RAMPD</code>, <code>RAMPX</code>, <code>RAMPY</code>,
<code>RAMPZ</code> special function register, respectively.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__NO_INTERRUPTS__</itemformat></item>
</tableterm><tableitem><para>This macro reflects the <option>-mno-interrupts</option> command-line option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_ERRATA_SKIP__</itemformat></item>
<itemx spaces=" "><itemformat command="code">__AVR_ERRATA_SKIP_JMP_CALL__</itemformat></itemx>
</tableterm><tableitem><para>Some AVR devices (AT90S8515, ATmega103) must not skip 32-bit
instructions because of a hardware erratum.  Skip instructions are
<code>SBRS</code>, <code>SBRC</code>, <code>SBIS</code>, <code>SBIC</code> and <code>CPSE</code>.
The second macro is only defined if <code>__AVR_HAVE_JMP_CALL__</code> is also
set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_ISA_RMW__</itemformat></item>
</tableterm><tableitem><para>The device has Read-Modify-Write instructions (XCH, LAC, LAS and LAT).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__AVR_SFR_OFFSET__=<var>offset</var></itemformat></item>
</tableterm><tableitem><para>Instructions that can address I/O special function registers directly
like <code>IN</code>, <code>OUT</code>, <code>SBI</code>, etc.&noeos; may use a different
address as if addressed by an instruction to access RAM like <code>LD</code>
or <code>STS</code>. This offset depends on the device architecture and has
to be subtracted from the RAM address in order to get the
respective I/O&nbsp;address.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__WITH_AVRLIBC__</itemformat></item>
</tableterm><tableitem><para>The compiler is configured to be used together with AVR-Libc.
See the <option>--with-avrlibc</option> configure option.
</para>
</tableitem></tableentry></table>

</subsubsection>
</subsection>
<node name="Blackfin-Options" spaces=" "><nodename>Blackfin Options</nodename><nodenext automatic="on">C6X Options</nodenext><nodeprev automatic="on">AVR Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>Blackfin Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="176">Blackfin Options</indexterm></cindex>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>cpu</var><r>[</r>-<var>sirevision</var><r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1275" incode="1">mcpu=</indexterm></indexcommand>
<para>Specifies the name of the target Blackfin processor.  Currently, <var>cpu</var>
can be one of <samp>bf512</samp>, <samp>bf514</samp>, <samp>bf516</samp>, <samp>bf518</samp>,
<samp>bf522</samp>, <samp>bf523</samp>, <samp>bf524</samp>, <samp>bf525</samp>, <samp>bf526</samp>,
<samp>bf527</samp>, <samp>bf531</samp>, <samp>bf532</samp>, <samp>bf533</samp>,
<samp>bf534</samp>, <samp>bf536</samp>, <samp>bf537</samp>, <samp>bf538</samp>, <samp>bf539</samp>,
<samp>bf542</samp>, <samp>bf544</samp>, <samp>bf547</samp>, <samp>bf548</samp>, <samp>bf549</samp>,
<samp>bf542m</samp>, <samp>bf544m</samp>, <samp>bf547m</samp>, <samp>bf548m</samp>, <samp>bf549m</samp>,
<samp>bf561</samp>, <samp>bf592</samp>.
</para>
<para>The optional <var>sirevision</var> specifies the silicon revision of the target
Blackfin processor.  Any workarounds available for the targeted silicon revision
are enabled.  If <var>sirevision</var> is <samp>none</samp>, no workarounds are enabled.
If <var>sirevision</var> is <samp>any</samp>, all workarounds for the targeted processor
are enabled.  The <code>__SILICON_REVISION__</code> macro is defined to two
hexadecimal digits representing the major and minor numbers in the silicon
revision.  If <var>sirevision</var> is <samp>none</samp>, the <code>__SILICON_REVISION__</code>
is not defined.  If <var>sirevision</var> is <samp>any</samp>, the
<code>__SILICON_REVISION__</code> is defined to be <code>0xffff</code>.
If this optional <var>sirevision</var> is not used, GCC assumes the latest known
silicon revision of the targeted Blackfin processor.
</para>
<para>GCC defines a preprocessor macro for the specified <var>cpu</var>.
For the <samp>bfin-elf</samp> toolchain, this option causes the hardware BSP
provided by libgloss to be linked in if <option>-msim</option> is not given.
</para>
<para>Without this option, <samp>bf532</samp> is used as the processor by default.
</para>
<para>Note that support for <samp>bf561</samp> is incomplete.  For <samp>bf561</samp>,
only the preprocessor macro is defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1276" incode="1">msim</indexterm></indexcommand>
<para>Specifies that the program will be run on the simulator.  This causes
the simulator BSP provided by libgloss to be linked in.  This option
has effect only for <samp>bfin-elf</samp> toolchain.
Certain other options, such as <option>-mid-shared-library</option> and
<option>-mfdpic</option>, imply <option>-msim</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-momit-leaf-frame-pointer</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1277" incode="1">momit-leaf-frame-pointer</indexterm></indexcommand>
<para>Don&textrsquo;t keep the frame pointer in a register for leaf functions.  This
avoids the instructions to save, set up and restore frame pointers and
makes an extra register available in leaf functions.  The option
<option>-fomit-frame-pointer</option> removes the frame pointer for all functions,
which might make debugging harder.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mspecld-anomaly</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1278" incode="1">mspecld-anomaly</indexterm></indexcommand>
<para>When enabled, the compiler ensures that the generated code does not
contain speculative loads after jump instructions. If this option is used,
<code>__WORKAROUND_SPECULATIVE_LOADS</code> is defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-specld-anomaly</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1279" incode="1">mno-specld-anomaly</indexterm></indexcommand>
<para>Don&textrsquo;t generate extra code to prevent speculative loads from occurring.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcsync-anomaly</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1280" incode="1">mcsync-anomaly</indexterm></indexcommand>
<para>When enabled, the compiler ensures that the generated code does not
contain CSYNC or SSYNC instructions too soon after conditional branches.
If this option is used, <code>__WORKAROUND_SPECULATIVE_SYNCS</code> is defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-csync-anomaly</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1281" incode="1">mno-csync-anomaly</indexterm></indexcommand>
<para>Don&textrsquo;t generate extra code to prevent CSYNC or SSYNC instructions from
occurring too soon after a conditional branch.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlow-64k</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1282" incode="1">mlow-64k</indexterm></indexcommand>
<para>When enabled, the compiler is free to take advantage of the knowledge that
the entire program fits into the low 64k of memory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-low-64k</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1283" incode="1">mno-low-64k</indexterm></indexcommand>
<para>Assume that the program is arbitrarily large.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstack-check-l1</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1284" incode="1">mstack-check-l1</indexterm></indexcommand>
<para>Do stack checking using information placed into L1 scratchpad memory by the
uClinux kernel.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mid-shared-library</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1285" incode="1">mid-shared-library</indexterm></indexcommand>
<para>Generate code that supports shared libraries via the library ID method.
This allows for execute in place and shared libraries in an environment
without virtual memory management.  This option implies <option>-fPIC</option>.
With a <samp>bfin-elf</samp> target, this option implies <option>-msim</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-id-shared-library</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1286" incode="1">mno-id-shared-library</indexterm></indexcommand>
<para>Generate code that doesn&textrsquo;t assume ID-based shared libraries are being used.
This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mleaf-id-shared-library</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1287" incode="1">mleaf-id-shared-library</indexterm></indexcommand>
<para>Generate code that supports shared libraries via the library ID method,
but assumes that this library or executable won&textrsquo;t link against any other
ID shared libraries.  That allows the compiler to use faster code for jumps
and calls.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-leaf-id-shared-library</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1288" incode="1">mno-leaf-id-shared-library</indexterm></indexcommand>
<para>Do not assume that the code being compiled won&textrsquo;t link against any ID shared
libraries.  Slower code is generated for jump and call insns.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mshared-library-id=n</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1289" incode="1">mshared-library-id</indexterm></indexcommand>
<para>Specifies the identification number of the ID-based shared library being
compiled.  Specifying a value of 0 generates more compact code; specifying
other values forces the allocation of that number to the current
library but is no more space- or time-efficient than omitting this option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msep-data</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1290" incode="1">msep-data</indexterm></indexcommand>
<para>Generate code that allows the data segment to be located in a different
area of memory from the text segment.  This allows for execute in place in
an environment without virtual memory management by eliminating relocations
against the text section.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-sep-data</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1291" incode="1">mno-sep-data</indexterm></indexcommand>
<para>Generate code that assumes that the data segment follows the text segment.
This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong-calls</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-long-calls</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1292" incode="1">mlong-calls</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1293" incode="1">mno-long-calls</indexterm></indexcommand>
<para>Tells the compiler to perform function calls by first loading the
address of the function into a register and then performing a subroutine
call on this register.  This switch is needed if the target function
lies outside of the 24-bit addressing range of the offset-based
version of subroutine call instruction.
</para>
<para>This feature is not enabled by default.  Specifying
<option>-mno-long-calls</option> restores the default behavior.  Note these
switches have no effect on how the compiler generates code to handle
function calls via function pointers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfast-fp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1294" incode="1">mfast-fp</indexterm></indexcommand>
<para>Link with the fast floating-point library. This library relaxes some of
the IEEE floating-point standard&textrsquo;s rules for checking inputs against
Not-a-Number (NAN), in the interest of performance.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minline-plt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1295" incode="1">minline-plt</indexterm></indexcommand>
<para>Enable inlining of PLT entries in function calls to functions that are
not known to bind locally.  It has no effect without <option>-mfdpic</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmulticore</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1296" incode="1">mmulticore</indexterm></indexcommand>
<para>Build a standalone application for multicore Blackfin processors. 
This option causes proper start files and link scripts supporting 
multicore to be used, and defines the macro <code>__BFIN_MULTICORE</code>. 
It can only be used with <option>-mcpu=bf561<r>[</r>-<var>sirevision</var><r>]</r></option>. 
</para>
<para>This option can be used with <option>-mcorea</option> or <option>-mcoreb</option>, which
selects the one-application-per-core programming model.  Without
<option>-mcorea</option> or <option>-mcoreb</option>, the single-application/dual-core
programming model is used. In this model, the main function of Core B
should be named as <code>coreb_main</code>.
</para>
<para>If this option is not used, the single-core application programming
model is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcorea</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1297" incode="1">mcorea</indexterm></indexcommand>
<para>Build a standalone application for Core A of BF561 when using
the one-application-per-core programming model. Proper start files
and link scripts are used to support Core A, and the macro
<code>__BFIN_COREA</code> is defined.
This option can only be used in conjunction with <option>-mmulticore</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcoreb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1298" incode="1">mcoreb</indexterm></indexcommand>
<para>Build a standalone application for Core B of BF561 when using
the one-application-per-core programming model. Proper start files
and link scripts are used to support Core B, and the macro
<code>__BFIN_COREB</code> is defined. When this option is used, <code>coreb_main</code>
should be used instead of <code>main</code>. 
This option can only be used in conjunction with <option>-mmulticore</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdram</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1299" incode="1">msdram</indexterm></indexcommand>
<para>Build a standalone application for SDRAM. Proper start files and
link scripts are used to put the application into SDRAM, and the macro
<code>__BFIN_SDRAM</code> is defined.
The loader should initialize SDRAM before loading the application.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-micplb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1300" incode="1">micplb</indexterm></indexcommand>
<para>Assume that ICPLBs are enabled at run time.  This has an effect on certain
anomaly workarounds.  For Linux targets, the default is to assume ICPLBs
are enabled; for standalone applications the default is off.
</para></tableitem></tableentry></table>

</subsection>
<node name="C6X-Options" spaces=" "><nodename>C6X Options</nodename><nodenext automatic="on">CRIS Options</nodenext><nodeprev automatic="on">Blackfin Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>C6X Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="177">C6X Options</indexterm></cindex>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-march=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1301" incode="1">march</indexterm></indexcommand>
<para>This specifies the name of the target architecture.  GCC uses this
name to determine what kind of instructions it can emit when generating
assembly code.  Permissible names are: <samp>c62x</samp>,
<samp>c64x</samp>, <samp>c64x+</samp>, <samp>c67x</samp>, <samp>c67x+</samp>, <samp>c674x</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbig-endian</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1302" incode="1">mbig-endian</indexterm></indexcommand>
<para>Generate code for a big-endian target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlittle-endian</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1303" incode="1">mlittle-endian</indexterm></indexcommand>
<para>Generate code for a little-endian target.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1304" incode="1">msim</indexterm></indexcommand>
<para>Choose startup files and linker script suitable for the simulator.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdata=default</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1305" incode="1">msdata=default</indexterm></indexcommand>
<para>Put small global and static data in the <code>.neardata</code> section,
which is pointed to by register <code>B14</code>.  Put small uninitialized
global and static data in the <code>.bss</code> section, which is adjacent
to the <code>.neardata</code> section.  Put small read-only data into the
<code>.rodata</code> section.  The corresponding sections used for large
pieces of data are <code>.fardata</code>, <code>.far</code> and <code>.const</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdata=all</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1306" incode="1">msdata=all</indexterm></indexcommand>
<para>Put all data, not just small objects, into the sections reserved for
small data, and use addressing relative to the <code>B14</code> register to
access them.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdata=none</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1307" incode="1">msdata=none</indexterm></indexcommand>
<para>Make no use of the sections reserved for small data, and use absolute
addresses to access all data.  Put all initialized global and static
data in the <code>.fardata</code> section, and all uninitialized data in the
<code>.far</code> section.  Put all constant data into the <code>.const</code>
section.
</para></tableitem></tableentry></table>

</subsection>
<node name="CRIS-Options" spaces=" "><nodename>CRIS Options</nodename><nodenext automatic="on">CR16 Options</nodenext><nodeprev automatic="on">C6X Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>CRIS Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="178">CRIS Options</indexterm></cindex>

<para>These options are defined specifically for the CRIS ports.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-march=<var>architecture-type</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-mcpu=<var>architecture-type</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1308" incode="1">march</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1309" incode="1">mcpu</indexterm></indexcommand>
<para>Generate code for the specified architecture.  The choices for
<var>architecture-type</var> are <samp>v3</samp>, <samp>v8</samp> and <samp>v10</samp> for
respectively ETRAX<w> </w>4, ETRAX<w> </w>100, and ETRAX<w> </w>100<w> </w>LX&eosperiod;
Default is <samp>v0</samp> except for cris-axis-linux-gnu, where the default is
<samp>v10</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>architecture-type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1310" incode="1">mtune</indexterm></indexcommand>
<para>Tune to <var>architecture-type</var> everything applicable about the generated
code, except for the ABI and the set of available instructions.  The
choices for <var>architecture-type</var> are the same as for
<option>-march=<var>architecture-type</var></option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmax-stack-frame=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1311" incode="1">mmax-stack-frame</indexterm></indexcommand>
<para>Warn when the stack frame of a function exceeds <var>n</var> bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-metrax4</itemformat></item>
<itemx spaces=" "><itemformat command="code">-metrax100</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1312" incode="1">metrax4</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1313" incode="1">metrax100</indexterm></indexcommand>
<para>The options <option>-metrax4</option> and <option>-metrax100</option> are synonyms for
<option>-march=v3</option> and <option>-march=v8</option> respectively.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmul-bug-workaround</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-mul-bug-workaround</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1314" incode="1">mmul-bug-workaround</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1315" incode="1">mno-mul-bug-workaround</indexterm></indexcommand>
<para>Work around a bug in the <code>muls</code> and <code>mulu</code> instructions for CPU
models where it applies.  This option is active by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpdebug</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1316" incode="1">mpdebug</indexterm></indexcommand>
<para>Enable CRIS-specific verbose debug-related information in the assembly
code.  This option also has the effect of turning off the <samp>#NO_APP</samp>
formatted-code indicator to the assembler at the beginning of the
assembly file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcc-init</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1317" incode="1">mcc-init</indexterm></indexcommand>
<para>Do not use condition-code results from previous instruction; always emit
compare and test instructions before use of condition codes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-side-effects</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1318" incode="1">mno-side-effects</indexterm></indexcommand>
<para>Do not emit instructions with side effects in addressing modes other than
post-increment.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstack-align</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-stack-align</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mdata-align</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-data-align</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mconst-align</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-const-align</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1319" incode="1">mstack-align</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1320" incode="1">mno-stack-align</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1321" incode="1">mdata-align</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1322" incode="1">mno-data-align</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1323" incode="1">mconst-align</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1324" incode="1">mno-const-align</indexterm></indexcommand>
<para>These options (<samp>no-</samp> options) arrange (eliminate arrangements) for the
stack frame, individual data and constants to be aligned for the maximum
single data access size for the chosen CPU model.  The default is to
arrange for 32-bit alignment.  ABI details such as structure layout are
not affected by these options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m32-bit</itemformat></item>
<itemx spaces=" "><itemformat command="code">-m16-bit</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-m8-bit</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1325" incode="1">m32-bit</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1326" incode="1">m16-bit</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1327" incode="1">m8-bit</indexterm></indexcommand>
<para>Similar to the stack- data- and const-align options above, these options
arrange for stack frame, writable data and constants to all be 32-bit,
16-bit or 8-bit aligned.  The default is 32-bit alignment.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-prologue-epilogue</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mprologue-epilogue</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1328" incode="1">mno-prologue-epilogue</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1329" incode="1">mprologue-epilogue</indexterm></indexcommand>
<para>With <option>-mno-prologue-epilogue</option>, the normal function prologue and
epilogue which set up the stack frame are omitted and no return
instructions or return sequences are generated in the code.  Use this
option only together with visual inspection of the compiled code: no
warnings or errors are generated when call-saved registers must be saved,
or storage for local variables needs to be allocated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-gotplt</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mgotplt</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1330" incode="1">mno-gotplt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1331" incode="1">mgotplt</indexterm></indexcommand>
<para>With <option>-fpic</option> and <option>-fPIC</option>, don&textrsquo;t generate (do generate)
instruction sequences that load addresses for functions from the PLT part
of the GOT rather than (traditional on other architectures) calls to the
PLT&eosperiod;  The default is <option>-mgotplt</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-melf</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1332" incode="1">melf</indexterm></indexcommand>
<para>Legacy no-op option only recognized with the cris-axis-elf and
cris-axis-linux-gnu targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlinux</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1333" incode="1">mlinux</indexterm></indexcommand>
<para>Legacy no-op option only recognized with the cris-axis-linux-gnu target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-sim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1334" incode="1">sim</indexterm></indexcommand>
<para>This option, recognized for the cris-axis-elf, arranges
to link with input-output functions from a simulator library.  Code,
initialized data and zero-initialized data are allocated consecutively.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-sim2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1335" incode="1">sim2</indexterm></indexcommand>
<para>Like <option>-sim</option>, but pass linker options to locate initialized data at
0x40000000 and zero-initialized data at 0x80000000.
</para></tableitem></tableentry></table>

</subsection>
<node name="CR16-Options" spaces=" "><nodename>CR16 Options</nodename><nodenext automatic="on">Darwin Options</nodenext><nodeprev automatic="on">CRIS Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>CR16 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="179">CR16 Options</indexterm></cindex>

<para>These options are defined specifically for the CR16 ports.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmac</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1336" incode="1">mmac</indexterm></indexcommand>
<para>Enable the use of multiply-accumulate instructions. Disabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcr16cplus</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mcr16c</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1337" incode="1">mcr16cplus</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1338" incode="1">mcr16c</indexterm></indexcommand>
<para>Generate code for CR16C or CR16C+ architecture. CR16C+ architecture 
is default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1339" incode="1">msim</indexterm></indexcommand>
<para>Links the library libsim.a which is in compatible with simulator. Applicable
to ELF compiler only.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mint32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1340" incode="1">mint32</indexterm></indexcommand>
<para>Choose integer type as 32-bit wide.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbit-ops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1341" incode="1">mbit-ops</indexterm></indexcommand>
<para>Generates <code>sbit</code>/<code>cbit</code> instructions for bit manipulations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdata-model=<var>model</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1342" incode="1">mdata-model</indexterm></indexcommand>
<para>Choose a data model. The choices for <var>model</var> are <samp>near</samp>,
<samp>far</samp> or <samp>medium</samp>. <samp>medium</samp> is default.
However, <samp>far</samp> is not valid with <option>-mcr16c</option>, as the
CR16C architecture does not support the far data model.
</para></tableitem></tableentry></table>

</subsection>
<node name="Darwin-Options" spaces=" "><nodename>Darwin Options</nodename><nodenext automatic="on">DEC Alpha Options</nodenext><nodeprev automatic="on">CR16 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>Darwin Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="180">Darwin options</indexterm></cindex>

<para>These options are defined for all architectures running the Darwin operating
system.
</para>
<para>FSF GCC on Darwin does not create &textldquo;fat&textrdquo; object files; it creates
an object file for the single architecture that GCC was built to
target.  Apple&textrsquo;s GCC on Darwin does create &textldquo;fat&textrdquo; files if multiple
<option>-arch</option> options are used; it does so by running the compiler or
linker multiple times and joining the results together with
<file>lipo</file>.
</para>
<para>The subtype of the file created (like <samp>ppc7400</samp> or <samp>ppc970</samp> or
<samp>i686</samp>) is determined by the flags that specify the ISA
that GCC is targeting, like <option>-mcpu</option> or <option>-march</option>.  The
<option>-force_cpusubtype_ALL</option> option can be used to override this.
</para>
<para>The Darwin tools vary in their behavior when presented with an ISA
mismatch.  The assembler, <file>as</file>, only permits instructions to
be used that are valid for the subtype of the file it is generating,
so you cannot put 64-bit instructions in a <samp>ppc750</samp> object file.
The linker for shared libraries, <file>/usr/bin/libtool</file>, fails
and prints an error if asked to create a shared library with a less
restrictive subtype than its input files (for instance, trying to put
a <samp>ppc970</samp> object file in a <samp>ppc7400</samp> library).  The linker
for executables, <command>ld</command>, quietly gives the executable the most
restrictive subtype of any of its input files.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-F<var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1343" incode="1">F</indexterm></indexcommand>
<para>Add the framework directory <var>dir</var> to the head of the list of
directories to be searched for header files.  These directories are
interleaved with those specified by <option>-I</option> options and are
scanned in a left-to-right order.
</para>
<para>A framework directory is a directory with frameworks in it.  A
framework is a directory with a <file>Headers</file> and/or
<file>PrivateHeaders</file> directory contained directly in it that ends
in <file>.framework</file>.  The name of a framework is the name of this
directory excluding the <file>.framework</file>.  Headers associated with
the framework are found in one of those two directories, with
<file>Headers</file> being searched first.  A subframework is a framework
directory that is in a framework&textrsquo;s <file>Frameworks</file> directory.
Includes of subframework headers can only appear in a header of a
framework that contains the subframework, or in a sibling subframework
header.  Two subframeworks are siblings if they occur in the same
framework.  A subframework should not have the same name as a
framework; a warning is issued if this is violated.  Currently a
subframework cannot have subframeworks; in the future, the mechanism
may be extended to support this.  The standard frameworks can be found
in <file>/System/Library/Frameworks</file> and
<file>/Library/Frameworks</file>.  An example include looks like
<code>#include &lt;Framework/header.h&gt;</code>, where <file>Framework</file> denotes
the name of the framework and <file>header.h</file> is found in the
<file>PrivateHeaders</file> or <file>Headers</file> directory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-iframework<var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1344" incode="1">iframework</indexterm></indexcommand>
<para>Like <option>-F</option> except the directory is a treated as a system
directory.  The main difference between this <option>-iframework</option> and
<option>-F</option> is that with <option>-iframework</option> the compiler does not
warn about constructs contained within header files found via
<var>dir</var>.  This option is valid only for the C family of languages.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gused</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1345" incode="1">gused</indexterm></indexcommand>
<para>Emit debugging information for symbols that are used.  For stabs
debugging format, this enables <option>-feliminate-unused-debug-symbols</option>.
This is by default ON&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-gfull</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1346" incode="1">gfull</indexterm></indexcommand>
<para>Emit debugging information for all symbols and types.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmacosx-version-min=<var>version</var></itemformat></item>
</tableterm><tableitem><para>The earliest version of MacOS X that this executable will run on
is <var>version</var>.  Typical values of <var>version</var> include <code>10.1</code>,
<code>10.2</code>, and <code>10.3.9</code>.
</para>
<para>If the compiler was built to use the system&textrsquo;s headers by default,
then the default for this option is the system version on which the
compiler is running, otherwise the default is to make choices that
are compatible with as many systems and code bases as possible.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mkernel</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1347" incode="1">mkernel</indexterm></indexcommand>
<para>Enable kernel development mode.  The <option>-mkernel</option> option sets
<option>-static</option>, <option>-fno-common</option>, <option>-fno-use-cxa-atexit</option>,
<option>-fno-exceptions</option>, <option>-fno-non-call-exceptions</option>,
<option>-fapple-kext</option>, <option>-fno-weak</option> and <option>-fno-rtti</option> where
applicable.  This mode also sets <option>-mno-altivec</option>,
<option>-msoft-float</option>, <option>-fno-builtin</option> and
<option>-mlong-branch</option> for PowerPC targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mone-byte-bool</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1348" incode="1">mone-byte-bool</indexterm></indexcommand>
<para>Override the defaults for <code>bool</code> so that <code>sizeof(bool)==1</code>.
By default <code>sizeof(bool)</code> is <code>4</code> when compiling for
Darwin/PowerPC and <code>1</code> when compiling for Darwin/x86, so this
option has no effect on x86.
</para>
<para><strong>Warning:</strong> The <option>-mone-byte-bool</option> switch causes GCC
to generate code that is not binary compatible with code generated
without that switch.  Using this switch may require recompiling all
other modules in a program, including system libraries.  Use this
switch to conform to a non-default data model.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-and-continue</itemformat></item>
<itemx spaces=" "><itemformat command="code">-ffix-and-continue</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-findirect-data</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1349" incode="1">mfix-and-continue</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1350" incode="1">ffix-and-continue</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1351" incode="1">findirect-data</indexterm></indexcommand>
<para>Generate code suitable for fast turnaround development, such as to
allow GDB to dynamically load <file>.o</file> files into already-running
programs.  <option>-findirect-data</option> and <option>-ffix-and-continue</option>
are provided for backwards compatibility.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-all_load</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1352" incode="1">all_load</indexterm></indexcommand>
<para>Loads all members of static archive libraries.
See man ld(1) for more information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-arch_errors_fatal</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1353" incode="1">arch_errors_fatal</indexterm></indexcommand>
<para>Cause the errors having to do with files that have the wrong architecture
to be fatal.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-bind_at_load</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1354" incode="1">bind_at_load</indexterm></indexcommand>
<para>Causes the output file to be marked such that the dynamic linker will
bind all undefined references when the file is loaded or launched.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-bundle</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1355" incode="1">bundle</indexterm></indexcommand>
<para>Produce a Mach-o bundle format file.
See man ld(1) for more information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-bundle_loader <var>executable</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1356" incode="1">bundle_loader</indexterm></indexcommand>
<para>This option specifies the <var>executable</var> that will load the build
output file being linked.  See man ld(1) for more information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-dynamiclib</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1357" incode="1">dynamiclib</indexterm></indexcommand>
<para>When passed this option, GCC produces a dynamic library instead of
an executable when linking, using the Darwin <file>libtool</file> command.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-force_cpusubtype_ALL</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1358" incode="1">force_cpusubtype_ALL</indexterm></indexcommand>
<para>This causes GCC&textrsquo;s output file to have the <samp>ALL</samp> subtype, instead of
one controlled by the <option>-mcpu</option> or <option>-march</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-allowable_client  <var>client_name</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-client_name</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-compatibility_version</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-current_version</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-dead_strip</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-dependency-file</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-dylib_file</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-dylinker_install_name</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-dynamic</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-exported_symbols_list</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-filelist</itemformat></itemx>
<need value="800" line=" 800"></need>
<itemx spaces=" "><itemformat command="code">-flat_namespace</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-force_flat_namespace</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-headerpad_max_install_names</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-image_base</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-init</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-install_name</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-keep_private_externs</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-multi_module</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-multiply_defined</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-multiply_defined_unused</itemformat></itemx>
<need value="800" line=" 800"></need>
<itemx spaces=" "><itemformat command="code">-noall_load</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-no_dead_strip_inits_and_terms</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-nofixprebinding</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-nomultidefs</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-noprebind</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-noseglinkedit</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-pagezero_size</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-prebind</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-prebind_all_twolevel_modules</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-private_bundle</itemformat></itemx>
<need value="800" line=" 800"></need>
<itemx spaces=" "><itemformat command="code">-read_only_relocs</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-sectalign</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-sectobjectsymbols</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-whyload</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-seg1addr</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-sectcreate</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-sectobjectsymbols</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-sectorder</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-segaddr</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-segs_read_only_addr</itemformat></itemx>
<need value="800" line=" 800"></need>
<itemx spaces=" "><itemformat command="code">-segs_read_write_addr</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-seg_addr_table</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-seg_addr_table_filename</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-seglinkedit</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-segprot</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-segs_read_only_addr</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-segs_read_write_addr</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-single_module</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-static</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-sub_library</itemformat></itemx>
<need value="800" line=" 800"></need>
<itemx spaces=" "><itemformat command="code">-sub_umbrella</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-twolevel_namespace</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-umbrella</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-undefined</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-unexported_symbols_list</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-weak_reference_mismatches</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-whatsloaded</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1359" incode="1">allowable_client</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1360" incode="1">client_name</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1361" incode="1">compatibility_version</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1362" incode="1">current_version</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1363" incode="1">dead_strip</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1364" incode="1">dependency-file</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1365" incode="1">dylib_file</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1366" incode="1">dylinker_install_name</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1367" incode="1">dynamic</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1368" incode="1">exported_symbols_list</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1369" incode="1">filelist</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1370" incode="1">flat_namespace</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1371" incode="1">force_flat_namespace</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1372" incode="1">headerpad_max_install_names</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1373" incode="1">image_base</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1374" incode="1">init</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1375" incode="1">install_name</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1376" incode="1">keep_private_externs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1377" incode="1">multi_module</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1378" incode="1">multiply_defined</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1379" incode="1">multiply_defined_unused</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1380" incode="1">noall_load</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1381" incode="1">no_dead_strip_inits_and_terms</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1382" incode="1">nofixprebinding</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1383" incode="1">nomultidefs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1384" incode="1">noprebind</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1385" incode="1">noseglinkedit</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1386" incode="1">pagezero_size</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1387" incode="1">prebind</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1388" incode="1">prebind_all_twolevel_modules</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1389" incode="1">private_bundle</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1390" incode="1">read_only_relocs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1391" incode="1">sectalign</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1392" incode="1">sectobjectsymbols</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1393" incode="1">whyload</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1394" incode="1">seg1addr</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1395" incode="1">sectcreate</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1396" incode="1">sectobjectsymbols</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1397" incode="1">sectorder</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1398" incode="1">segaddr</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1399" incode="1">segs_read_only_addr</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1400" incode="1">segs_read_write_addr</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1401" incode="1">seg_addr_table</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1402" incode="1">seg_addr_table_filename</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1403" incode="1">seglinkedit</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1404" incode="1">segprot</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1405" incode="1">segs_read_only_addr</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1406" incode="1">segs_read_write_addr</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1407" incode="1">single_module</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1408" incode="1">static</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1409" incode="1">sub_library</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1410" incode="1">sub_umbrella</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1411" incode="1">twolevel_namespace</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1412" incode="1">umbrella</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1413" incode="1">undefined</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1414" incode="1">unexported_symbols_list</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1415" incode="1">weak_reference_mismatches</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1416" incode="1">whatsloaded</indexterm></indexcommand>
<para>These options are passed to the Darwin linker.  The Darwin linker man page
describes them in detail.
</para></tableitem></tableentry></table>

</subsection>
<node name="DEC-Alpha-Options" spaces=" "><nodename>DEC Alpha Options</nodename><nodenext automatic="on">FR30 Options</nodenext><nodeprev automatic="on">Darwin Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>DEC Alpha Options</sectiontitle>

<para>These <samp>-m</samp> options are defined for the DEC Alpha implementations:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-soft-float</itemformat></item>
<itemx spaces=" "><itemformat command="code">-msoft-float</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1417" incode="1">mno-soft-float</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1418" incode="1">msoft-float</indexterm></indexcommand>
<para>Use (do not use) the hardware floating-point instructions for
floating-point operations.  When <option>-msoft-float</option> is specified,
functions in <file>libgcc.a</file> are used to perform floating-point
operations.  Unless they are replaced by routines that emulate the
floating-point operations, or compiled in such a way as to call such
emulations routines, these routines issue floating-point
operations.   If you are compiling for an Alpha without floating-point
operations, you must ensure that the library is built so as not to call
them.
</para>
<para>Note that Alpha implementations without floating-point operations are
required to have floating-point registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfp-reg</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fp-regs</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1419" incode="1">mfp-reg</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1420" incode="1">mno-fp-regs</indexterm></indexcommand>
<para>Generate code that uses (does not use) the floating-point register set.
<option>-mno-fp-regs</option> implies <option>-msoft-float</option>.  If the floating-point
register set is not used, floating-point operands are passed in integer
registers as if they were integers and floating-point results are passed
in <code>$0</code> instead of <code>$f0</code>.  This is a non-standard calling sequence,
so any function with a floating-point argument or return value called by code
compiled with <option>-mno-fp-regs</option> must also be compiled with that
option.
</para>
<para>A typical use of this option is building a kernel that does not use,
and hence need not save and restore, any floating-point registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mieee</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1421" incode="1">mieee</indexterm></indexcommand>
<para>The Alpha architecture implements floating-point hardware optimized for
maximum performance.  It is mostly compliant with the IEEE floating-point
standard.  However, for full compliance, software assistance is
required.  This option generates code fully IEEE-compliant code
<emph>except</emph> that the <var>inexact-flag</var> is not maintained (see below).
If this option is turned on, the preprocessor macro <code>_IEEE_FP</code> is
defined during compilation.  The resulting code is less efficient but is
able to correctly support denormalized numbers and exceptional IEEE
values such as not-a-number and plus/minus infinity.  Other Alpha
compilers call this option <option>-ieee_with_no_inexact</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mieee-with-inexact</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1422" incode="1">mieee-with-inexact</indexterm></indexcommand>
<para>This is like <option>-mieee</option> except the generated code also maintains
the IEEE <var>inexact-flag</var>.  Turning on this option causes the
generated code to implement fully-compliant IEEE math.  In addition to
<code>_IEEE_FP</code>, <code>_IEEE_FP_EXACT</code> is defined as a preprocessor
macro.  On some Alpha implementations the resulting code may execute
significantly slower than the code generated by default.  Since there is
very little code that depends on the <var>inexact-flag</var>, you should
normally not specify this option.  Other Alpha compilers call this
option <option>-ieee_with_inexact</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfp-trap-mode=<var>trap-mode</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1423" incode="1">mfp-trap-mode</indexterm></indexcommand>
<para>This option controls what floating-point related traps are enabled.
Other Alpha compilers call this option <option>-fptm <var>trap-mode</var></option>.
The trap mode can be set to one of four values:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">n</itemformat></item>
</tableterm><tableitem><para>This is the default (normal) setting.  The only traps that are enabled
are the ones that cannot be disabled in software (e.g., division by zero
trap).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">u</itemformat></item>
</tableterm><tableitem><para>In addition to the traps enabled by <samp>n</samp>, underflow traps are enabled
as well.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">su</itemformat></item>
</tableterm><tableitem><para>Like <samp>u</samp>, but the instructions are marked to be safe for software
completion (see Alpha architecture manual for details).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sui</itemformat></item>
</tableterm><tableitem><para>Like <samp>su</samp>, but inexact traps are enabled as well.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfp-rounding-mode=<var>rounding-mode</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1424" incode="1">mfp-rounding-mode</indexterm></indexcommand>
<para>Selects the IEEE rounding mode.  Other Alpha compilers call this option
<option>-fprm <var>rounding-mode</var></option>.  The <var>rounding-mode</var> can be one
of:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">n</itemformat></item>
</tableterm><tableitem><para>Normal IEEE rounding mode.  Floating-point numbers are rounded towards
the nearest machine number or towards the even machine number in case
of a tie.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">m</itemformat></item>
</tableterm><tableitem><para>Round towards minus infinity.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c</itemformat></item>
</tableterm><tableitem><para>Chopped rounding mode.  Floating-point numbers are rounded towards zero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">d</itemformat></item>
</tableterm><tableitem><para>Dynamic rounding mode.  A field in the floating-point control register
(<var>fpcr</var>, see Alpha architecture reference manual) controls the
rounding mode in effect.  The C library initializes this register for
rounding towards plus infinity.  Thus, unless your program modifies the
<var>fpcr</var>, <samp>d</samp> corresponds to round towards plus infinity.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtrap-precision=<var>trap-precision</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1425" incode="1">mtrap-precision</indexterm></indexcommand>
<para>In the Alpha architecture, floating-point traps are imprecise.  This
means without software assistance it is impossible to recover from a
floating trap and program execution normally needs to be terminated.
GCC can generate code that can assist operating system trap handlers
in determining the exact location that caused a floating-point trap.
Depending on the requirements of an application, different levels of
precisions can be selected:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">p</itemformat></item>
</tableterm><tableitem><para>Program precision.  This option is the default and means a trap handler
can only identify which program caused a floating-point exception.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">f</itemformat></item>
</tableterm><tableitem><para>Function precision.  The trap handler can determine the function that
caused a floating-point exception.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">i</itemformat></item>
</tableterm><tableitem><para>Instruction precision.  The trap handler can determine the exact
instruction that caused a floating-point exception.
</para></tableitem></tableentry></table>

<para>Other Alpha compilers provide the equivalent options called
<option>-scope_safe</option> and <option>-resumption_safe</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mieee-conformant</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1426" incode="1">mieee-conformant</indexterm></indexcommand>
<para>This option marks the generated code as IEEE conformant.  You must not
use this option unless you also specify <option>-mtrap-precision=i</option> and either
<option>-mfp-trap-mode=su</option> or <option>-mfp-trap-mode=sui</option>.  Its only effect
is to emit the line <samp>.eflag 48</samp> in the function prologue of the
generated assembly file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbuild-constants</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1427" incode="1">mbuild-constants</indexterm></indexcommand>
<para>Normally GCC examines a 32- or 64-bit integer constant to
see if it can construct it from smaller constants in two or three
instructions.  If it cannot, it outputs the constant as a literal and
generates code to load it from the data segment at run time.
</para>
<para>Use this option to require GCC to construct <emph>all</emph> integer constants
using code, even if it takes more instructions (the maximum is six).
</para>
<para>You typically use this option to build a shared library dynamic
loader.  Itself a shared library, it must relocate itself in memory
before it can find the variables and constants in its own data segment.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbwx</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-bwx</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mcix</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-cix</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mfix</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-fix</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mmax</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-max</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1428" incode="1">mbwx</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1429" incode="1">mno-bwx</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1430" incode="1">mcix</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1431" incode="1">mno-cix</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1432" incode="1">mfix</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1433" incode="1">mno-fix</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1434" incode="1">mmax</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1435" incode="1">mno-max</indexterm></indexcommand>
<para>Indicate whether GCC should generate code to use the optional BWX,
CIX, FIX and MAX instruction sets.  The default is to use the instruction
sets supported by the CPU type specified via <option>-mcpu=</option> option or that
of the CPU on which GCC was built if none is specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfloat-vax</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mfloat-ieee</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1436" incode="1">mfloat-vax</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1437" incode="1">mfloat-ieee</indexterm></indexcommand>
<para>Generate code that uses (does not use) VAX F and G floating-point
arithmetic instead of IEEE single and double precision.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mexplicit-relocs</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-explicit-relocs</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1438" incode="1">mexplicit-relocs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1439" incode="1">mno-explicit-relocs</indexterm></indexcommand>
<para>Older Alpha assemblers provided no way to generate symbol relocations
except via assembler macros.  Use of these macros does not allow
optimal instruction scheduling.  GNU binutils as of version 2.12
supports a new syntax that allows the compiler to explicitly mark
which relocations should apply to which instructions.  This option
is mostly useful for debugging, as GCC detects the capabilities of
the assembler when it is built and sets the default accordingly.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msmall-data</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mlarge-data</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1440" incode="1">msmall-data</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1441" incode="1">mlarge-data</indexterm></indexcommand>
<para>When <option>-mexplicit-relocs</option> is in effect, static data is
accessed via <dfn>gp-relative</dfn> relocations.  When <option>-msmall-data</option>
is used, objects 8 bytes long or smaller are placed in a <dfn>small data area</dfn>
(the <code>.sdata</code> and <code>.sbss</code> sections) and are accessed via
16-bit relocations off of the <code>$gp</code> register.  This limits the
size of the small data area to 64KB, but allows the variables to be
directly accessed via a single instruction.
</para>
<para>The default is <option>-mlarge-data</option>.  With this option the data area
is limited to just below 2GB&eosperiod;  Programs that require more than 2GB of
data must use <code>malloc</code> or <code>mmap</code> to allocate the data in the
heap instead of in the program&textrsquo;s data segment.
</para>
<para>When generating code for shared libraries, <option>-fpic</option> implies
<option>-msmall-data</option> and <option>-fPIC</option> implies <option>-mlarge-data</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msmall-text</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mlarge-text</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1442" incode="1">msmall-text</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1443" incode="1">mlarge-text</indexterm></indexcommand>
<para>When <option>-msmall-text</option> is used, the compiler assumes that the
code of the entire program (or shared library) fits in 4MB, and is
thus reachable with a branch instruction.  When <option>-msmall-data</option>
is used, the compiler can assume that all local symbols share the
same <code>$gp</code> value, and thus reduce the number of instructions
required for a function call from 4 to 1.
</para>
<para>The default is <option>-mlarge-text</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>cpu_type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1444" incode="1">mcpu</indexterm></indexcommand>
<para>Set the instruction set and instruction scheduling parameters for
machine type <var>cpu_type</var>.  You can specify either the <samp>EV</samp>
style name or the corresponding chip number.  GCC supports scheduling
parameters for the EV4, EV5 and EV6 family of processors and
chooses the default values for the instruction set from the processor
you specify.  If you do not specify a processor type, GCC defaults
to the processor on which the compiler was built.
</para>
<para>Supported values for <var>cpu_type</var> are
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">ev4</itemformat></item>
<itemx spaces=" "><itemformat command="samp">ev45</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">21064</itemformat></itemx>
</tableterm><tableitem><para>Schedules as an EV4 and has no instruction set extensions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ev5</itemformat></item>
<itemx spaces=" "><itemformat command="samp">21164</itemformat></itemx>
</tableterm><tableitem><para>Schedules as an EV5 and has no instruction set extensions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ev56</itemformat></item>
<itemx spaces=" "><itemformat command="samp">21164a</itemformat></itemx>
</tableterm><tableitem><para>Schedules as an EV5 and supports the BWX extension.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">pca56</itemformat></item>
<itemx spaces=" "><itemformat command="samp">21164pc</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">21164PC</itemformat></itemx>
</tableterm><tableitem><para>Schedules as an EV5 and supports the BWX and MAX extensions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ev6</itemformat></item>
<itemx spaces=" "><itemformat command="samp">21264</itemformat></itemx>
</tableterm><tableitem><para>Schedules as an EV6 and supports the BWX, FIX, and MAX extensions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ev67</itemformat></item>
<itemx spaces=" "><itemformat command="samp">21264a</itemformat></itemx>
</tableterm><tableitem><para>Schedules as an EV6 and supports the BWX, CIX, FIX, and MAX extensions.
</para></tableitem></tableentry></table>

<para>Native toolchains also support the value <samp>native</samp>,
which selects the best architecture option for the host processor.
<option>-mcpu=native</option> has no effect if GCC does not recognize
the processor.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>cpu_type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1445" incode="1">mtune</indexterm></indexcommand>
<para>Set only the instruction scheduling parameters for machine type
<var>cpu_type</var>.  The instruction set is not changed.
</para>
<para>Native toolchains also support the value <samp>native</samp>,
which selects the best architecture option for the host processor.
<option>-mtune=native</option> has no effect if GCC does not recognize
the processor.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmemory-latency=<var>time</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1446" incode="1">mmemory-latency</indexterm></indexcommand>
<para>Sets the latency the scheduler should assume for typical memory
references as seen by the application.  This number is highly
dependent on the memory access patterns used by the application
and the size of the external cache on the machine.
</para>
<para>Valid options for <var>time</var> are
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>number</var></itemformat></item>
</tableterm><tableitem><para>A decimal number representing clock cycles.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">L1</itemformat></item>
<itemx spaces=" "><itemformat command="samp">L2</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">L3</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">main</itemformat></itemx>
</tableterm><tableitem><para>The compiler contains estimates of the number of clock cycles for
&textldquo;typical&textrdquo; EV4 &amp; EV5 hardware for the Level 1, 2 &amp; 3 caches
(also called Dcache, Scache, and Bcache), as well as to main memory.
Note that L3 is only valid for EV5.
</para>
</tableitem></tableentry></table>
</tableitem></tableentry></table>

</subsection>
<node name="FR30-Options" spaces=" "><nodename>FR30 Options</nodename><nodenext automatic="on">FRV Options</nodenext><nodeprev automatic="on">DEC Alpha Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>FR30 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="181">FR30 Options</indexterm></cindex>

<para>These options are defined specifically for the FR30 port.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-msmall-model</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1447" incode="1">msmall-model</indexterm></indexcommand>
<para>Use the small address space model.  This can produce smaller code, but
it does assume that all symbolic values and addresses fit into a
20-bit range.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-lsim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1448" incode="1">mno-lsim</indexterm></indexcommand>
<para>Assume that runtime support has been provided and so there is no need
to include the simulator library (<file>libsim.a</file>) on the linker
command line.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="FRV-Options" spaces=" "><nodename>FRV Options</nodename><nodenext automatic="on">GNU/Linux Options</nodenext><nodeprev automatic="on">FR30 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>FRV Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="182">FRV Options</indexterm></cindex>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mgpr-32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1449" incode="1">mgpr-32</indexterm></indexcommand>

<para>Only use the first 32 general-purpose registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgpr-64</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1450" incode="1">mgpr-64</indexterm></indexcommand>

<para>Use all 64 general-purpose registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfpr-32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1451" incode="1">mfpr-32</indexterm></indexcommand>

<para>Use only the first 32 floating-point registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfpr-64</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1452" incode="1">mfpr-64</indexterm></indexcommand>

<para>Use all 64 floating-point registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mhard-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1453" incode="1">mhard-float</indexterm></indexcommand>

<para>Use hardware instructions for floating-point operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msoft-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1454" incode="1">msoft-float</indexterm></indexcommand>

<para>Use library routines for floating-point operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-malloc-cc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1455" incode="1">malloc-cc</indexterm></indexcommand>

<para>Dynamically allocate condition code registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfixed-cc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1456" incode="1">mfixed-cc</indexterm></indexcommand>

<para>Do not try to dynamically allocate condition code registers, only
use <code>icc0</code> and <code>fcc0</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdword</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1457" incode="1">mdword</indexterm></indexcommand>

<para>Change ABI to use double word insns.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-dword</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1458" incode="1">mno-dword</indexterm></indexcommand>

<para>Do not use double word instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdouble</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1459" incode="1">mdouble</indexterm></indexcommand>

<para>Use floating-point double instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-double</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1460" incode="1">mno-double</indexterm></indexcommand>

<para>Do not use floating-point double instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmedia</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1461" incode="1">mmedia</indexterm></indexcommand>

<para>Use media instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-media</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1462" incode="1">mno-media</indexterm></indexcommand>

<para>Do not use media instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmuladd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1463" incode="1">mmuladd</indexterm></indexcommand>

<para>Use multiply and add/subtract instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-muladd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1464" incode="1">mno-muladd</indexterm></indexcommand>

<para>Do not use multiply and add/subtract instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfdpic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1465" incode="1">mfdpic</indexterm></indexcommand>

<para>Select the FDPIC ABI, which uses function descriptors to represent
pointers to functions.  Without any PIC/PIE-related options, it
implies <option>-fPIE</option>.  With <option>-fpic</option> or <option>-fpie</option>, it
assumes GOT entries and small data are within a 12-bit range from the
GOT base address; with <option>-fPIC</option> or <option>-fPIE</option>, GOT offsets
are computed with 32 bits.
With a <samp>bfin-elf</samp> target, this option implies <option>-msim</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minline-plt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1466" incode="1">minline-plt</indexterm></indexcommand>

<para>Enable inlining of PLT entries in function calls to functions that are
not known to bind locally.  It has no effect without <option>-mfdpic</option>.
It&textrsquo;s enabled by default if optimizing for speed and compiling for
shared libraries (i.e., <option>-fPIC</option> or <option>-fpic</option>), or when an
optimization option such as <option>-O3</option> or above is present in the
command line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mTLS</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1467" incode="1">mTLS</indexterm></indexcommand>

<para>Assume a large TLS segment when generating thread-local code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1468" incode="1">mtls</indexterm></indexcommand>

<para>Do not assume a large TLS segment when generating thread-local code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgprel-ro</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1469" incode="1">mgprel-ro</indexterm></indexcommand>

<para>Enable the use of <code>GPREL</code> relocations in the FDPIC ABI for data
that is known to be in read-only sections.  It&textrsquo;s enabled by default,
except for <option>-fpic</option> or <option>-fpie</option>: even though it may help
make the global offset table smaller, it trades 1 instruction for 4.
With <option>-fPIC</option> or <option>-fPIE</option>, it trades 3 instructions for 4,
one of which may be shared by multiple symbols, and it avoids the need
for a GOT entry for the referenced symbol, so it&textrsquo;s more likely to be a
win.  If it is not, <option>-mno-gprel-ro</option> can be used to disable it.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-multilib-library-pic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1470" incode="1">multilib-library-pic</indexterm></indexcommand>

<para>Link with the (library, not FD) pic libraries.  It&textrsquo;s implied by
<option>-mlibrary-pic</option>, as well as by <option>-fPIC</option> and
<option>-fpic</option> without <option>-mfdpic</option>.  You should never have to use
it explicitly.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlinked-fp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1471" incode="1">mlinked-fp</indexterm></indexcommand>

<para>Follow the EABI requirement of always creating a frame pointer whenever
a stack frame is allocated.  This option is enabled by default and can
be disabled with <option>-mno-linked-fp</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong-calls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1472" incode="1">mlong-calls</indexterm></indexcommand>

<para>Use indirect addressing to call functions outside the current
compilation unit.  This allows the functions to be placed anywhere
within the 32-bit address space.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-malign-labels</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1473" incode="1">malign-labels</indexterm></indexcommand>

<para>Try to align labels to an 8-byte boundary by inserting NOPs into the
previous packet.  This option only has an effect when VLIW packing
is enabled.  It doesn&textrsquo;t create new packets; it merely adds NOPs to
existing ones.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlibrary-pic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1474" incode="1">mlibrary-pic</indexterm></indexcommand>

<para>Generate position-independent EABI code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-macc-4</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1475" incode="1">macc-4</indexterm></indexcommand>

<para>Use only the first four media accumulator registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-macc-8</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1476" incode="1">macc-8</indexterm></indexcommand>

<para>Use all eight media accumulator registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpack</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1477" incode="1">mpack</indexterm></indexcommand>

<para>Pack VLIW instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-pack</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1478" incode="1">mno-pack</indexterm></indexcommand>

<para>Do not pack VLIW instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-eflags</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1479" incode="1">mno-eflags</indexterm></indexcommand>

<para>Do not mark ABI switches in e_flags.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcond-move</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1480" incode="1">mcond-move</indexterm></indexcommand>

<para>Enable the use of conditional-move instructions (default).
</para>
<para>This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-cond-move</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1481" incode="1">mno-cond-move</indexterm></indexcommand>

<para>Disable the use of conditional-move instructions.
</para>
<para>This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mscc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1482" incode="1">mscc</indexterm></indexcommand>

<para>Enable the use of conditional set instructions (default).
</para>
<para>This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-scc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1483" incode="1">mno-scc</indexterm></indexcommand>

<para>Disable the use of conditional set instructions.
</para>
<para>This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcond-exec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1484" incode="1">mcond-exec</indexterm></indexcommand>

<para>Enable the use of conditional execution (default).
</para>
<para>This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-cond-exec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1485" incode="1">mno-cond-exec</indexterm></indexcommand>

<para>Disable the use of conditional execution.
</para>
<para>This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvliw-branch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1486" incode="1">mvliw-branch</indexterm></indexcommand>

<para>Run a pass to pack branches into VLIW instructions (default).
</para>
<para>This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-vliw-branch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1487" incode="1">mno-vliw-branch</indexterm></indexcommand>

<para>Do not run a pass to pack branches into VLIW instructions.
</para>
<para>This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmulti-cond-exec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1488" incode="1">mmulti-cond-exec</indexterm></indexcommand>

<para>Enable optimization of <code>&amp;&amp;</code> and <code>||</code> in conditional execution
(default).
</para>
<para>This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-multi-cond-exec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1489" incode="1">mno-multi-cond-exec</indexterm></indexcommand>

<para>Disable optimization of <code>&amp;&amp;</code> and <code>||</code> in conditional execution.
</para>
<para>This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnested-cond-exec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1490" incode="1">mnested-cond-exec</indexterm></indexcommand>

<para>Enable nested conditional execution optimizations (default).
</para>
<para>This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-nested-cond-exec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1491" incode="1">mno-nested-cond-exec</indexterm></indexcommand>

<para>Disable nested conditional execution optimizations.
</para>
<para>This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-moptimize-membar</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1492" incode="1">moptimize-membar</indexterm></indexcommand>

<para>This switch removes redundant <code>membar</code> instructions from the
compiler-generated code.  It is enabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-optimize-membar</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1493" incode="1">mno-optimize-membar</indexterm></indexcommand>

<para>This switch disables the automatic removal of redundant <code>membar</code>
instructions from the generated code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtomcat-stats</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1494" incode="1">mtomcat-stats</indexterm></indexcommand>

<para>Cause gas to print out tomcat statistics.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>cpu</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1495" incode="1">mcpu</indexterm></indexcommand>

<para>Select the processor type for which to generate code.  Possible values are
<samp>frv</samp>, <samp>fr550</samp>, <samp>tomcat</samp>, <samp>fr500</samp>, <samp>fr450</samp>,
<samp>fr405</samp>, <samp>fr400</samp>, <samp>fr300</samp> and <samp>simple</samp>.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="GNU_002fLinux-Options" spaces=" "><nodename>GNU/Linux Options</nodename><nodenext automatic="on">H8/300 Options</nodenext><nodeprev automatic="on">FRV Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>GNU/Linux Options</sectiontitle>

<para>These <samp>-m</samp> options are defined for GNU/Linux targets:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mglibc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1496" incode="1">mglibc</indexterm></indexcommand>
<para>Use the GNU C library.  This is the default except
on <samp>*-*-linux-*uclibc*</samp>, <samp>*-*-linux-*musl*</samp> and
<samp>*-*-linux-*android*</samp> targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-muclibc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1497" incode="1">muclibc</indexterm></indexcommand>
<para>Use uClibc C library.  This is the default on
<samp>*-*-linux-*uclibc*</samp> targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmusl</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1498" incode="1">mmusl</indexterm></indexcommand>
<para>Use the musl C library.  This is the default on
<samp>*-*-linux-*musl*</samp> targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbionic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1499" incode="1">mbionic</indexterm></indexcommand>
<para>Use Bionic C library.  This is the default on
<samp>*-*-linux-*android*</samp> targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mandroid</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1500" incode="1">mandroid</indexterm></indexcommand>
<para>Compile code compatible with Android platform.  This is the default on
<samp>*-*-linux-*android*</samp> targets.
</para>
<para>When compiling, this option enables <option>-mbionic</option>, <option>-fPIC</option>,
<option>-fno-exceptions</option> and <option>-fno-rtti</option> by default.  When linking,
this option makes the GCC driver pass Android-specific options to the linker.
Finally, this option causes the preprocessor macro <code>__ANDROID__</code>
to be defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-tno-android-cc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1501" incode="1">tno-android-cc</indexterm></indexcommand>
<para>Disable compilation effects of <option>-mandroid</option>, i.e., do not enable
<option>-mbionic</option>, <option>-fPIC</option>, <option>-fno-exceptions</option> and
<option>-fno-rtti</option> by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-tno-android-ld</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1502" incode="1">tno-android-ld</indexterm></indexcommand>
<para>Disable linking effects of <option>-mandroid</option>, i.e., pass standard Linux
linking options to the linker.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="H8_002f300-Options" spaces=" "><nodename>H8/300 Options</nodename><nodenext automatic="on">HPPA Options</nodenext><nodeprev automatic="on">GNU/Linux Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>H8/300 Options</sectiontitle>

<para>These <samp>-m</samp> options are defined for the H8/300 implementations:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mrelax</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1503" incode="1">mrelax</indexterm></indexcommand>
<para>Shorten some address references at link time, when possible; uses the
linker option <option>-relax</option>.  <xref label="H8_002f300" manual="ld"><xrefnodename>H8/300</xrefnodename><xrefprinteddesc spaces=" "><code>ld</code> and the H8/300</xrefprinteddesc><xrefinfofile spaces="\n">ld</xrefinfofile><xrefprintedname spaces=" ">Using ld</xrefprintedname></xref>, for a fuller description.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mh</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1504" incode="1">mh</indexterm></indexcommand>
<para>Generate code for the H8/300H&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ms</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1505" incode="1">ms</indexterm></indexcommand>
<para>Generate code for the H8S&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mn</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1506" incode="1">mn</indexterm></indexcommand>
<para>Generate code for the H8S and H8/300H in the normal mode.  This switch
must be used either with <option>-mh</option> or <option>-ms</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ms2600</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1507" incode="1">ms2600</indexterm></indexcommand>
<para>Generate code for the H8S/2600.  This switch must be used with <option>-ms</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mexr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1508" incode="1">mexr</indexterm></indexcommand>
<para>Extended registers are stored on stack before execution of function
with monitor attribute. Default option is <option>-mexr</option>.
This option is valid only for H8S targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-exr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1509" incode="1">mno-exr</indexterm></indexcommand>
<para>Extended registers are not stored on stack before execution of function 
with monitor attribute. Default option is <option>-mno-exr</option>. 
This option is valid only for H8S targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mint32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1510" incode="1">mint32</indexterm></indexcommand>
<para>Make <code>int</code> data 32 bits by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-malign-300</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1511" incode="1">malign-300</indexterm></indexcommand>
<para>On the H8/300H and H8S, use the same alignment rules as for the H8/300.
The default for the H8/300H and H8S is to align longs and floats on
4-byte boundaries.
<option>-malign-300</option> causes them to be aligned on 2-byte boundaries.
This option has no effect on the H8/300.
</para></tableitem></tableentry></table>

</subsection>
<node name="HPPA-Options" spaces=" "><nodename>HPPA Options</nodename><nodenext automatic="on">IA-64 Options</nodenext><nodeprev automatic="on">H8/300 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>HPPA Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="183">HPPA Options</indexterm></cindex>

<para>These <samp>-m</samp> options are defined for the HPPA family of computers:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-march=<var>architecture-type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1512" incode="1">march</indexterm></indexcommand>
<para>Generate code for the specified architecture.  The choices for
<var>architecture-type</var> are <samp>1.0</samp> for PA 1.0, <samp>1.1</samp> for PA
1.1, and <samp>2.0</samp> for PA 2.0 processors.  Refer to
<file>/usr/lib/sched.models</file> on an HP-UX system to determine the proper
architecture option for your machine.  Code compiled for lower numbered
architectures runs on higher numbered architectures, but not the
other way around.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpa-risc-1-0</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mpa-risc-1-1</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mpa-risc-2-0</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1513" incode="1">mpa-risc-1-0</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1514" incode="1">mpa-risc-1-1</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1515" incode="1">mpa-risc-2-0</indexterm></indexcommand>
<para>Synonyms for <option>-march=1.0</option>, <option>-march=1.1</option>, and <option>-march=2.0</option> respectively.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mjump-in-delay</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1516" incode="1">mjump-in-delay</indexterm></indexcommand>
<para>This option is ignored and provided for compatibility purposes only.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdisable-fpregs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1517" incode="1">mdisable-fpregs</indexterm></indexcommand>
<para>Prevent floating-point registers from being used in any manner.  This is
necessary for compiling kernels that perform lazy context switching of
floating-point registers.  If you use this option and attempt to perform
floating-point operations, the compiler aborts.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdisable-indexing</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1518" incode="1">mdisable-indexing</indexterm></indexcommand>
<para>Prevent the compiler from using indexing address modes.  This avoids some
rather obscure problems when compiling MIG generated code under MACH&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-space-regs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1519" incode="1">mno-space-regs</indexterm></indexcommand>
<para>Generate code that assumes the target has no space registers.  This allows
GCC to generate faster indirect calls and use unscaled index address modes.
</para>
<para>Such code is suitable for level 0 PA systems and kernels.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfast-indirect-calls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1520" incode="1">mfast-indirect-calls</indexterm></indexcommand>
<para>Generate code that assumes calls never cross space boundaries.  This
allows GCC to emit code that performs faster indirect calls.
</para>
<para>This option does not work in the presence of shared libraries or nested
functions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfixed-range=<var>register-range</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1521" incode="1">mfixed-range</indexterm></indexcommand>
<para>Generate code treating the given register range as fixed registers.
A fixed register is one that the register allocator cannot use.  This is
useful when compiling kernel code.  A register range is specified as
two registers separated by a dash.  Multiple register ranges can be
specified separated by a comma.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong-load-store</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1522" incode="1">mlong-load-store</indexterm></indexcommand>
<para>Generate 3-instruction load and store sequences as sometimes required by
the HP-UX 10 linker.  This is equivalent to the <samp>+k</samp> option to
the HP compilers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mportable-runtime</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1523" incode="1">mportable-runtime</indexterm></indexcommand>
<para>Use the portable calling conventions proposed by HP for ELF systems.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgas</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1524" incode="1">mgas</indexterm></indexcommand>
<para>Enable the use of assembler directives only GAS understands.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mschedule=<var>cpu-type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1525" incode="1">mschedule</indexterm></indexcommand>
<para>Schedule code according to the constraints for the machine type
<var>cpu-type</var>.  The choices for <var>cpu-type</var> are <samp>700</samp>
<samp>7100</samp>, <samp>7100LC</samp>, <samp>7200</samp>, <samp>7300</samp> and <samp>8000</samp>.  Refer
to <file>/usr/lib/sched.models</file> on an HP-UX system to determine the
proper scheduling option for your machine.  The default scheduling is
<samp>8000</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlinker-opt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1526" incode="1">mlinker-opt</indexterm></indexcommand>
<para>Enable the optimization pass in the HP-UX linker.  Note this makes symbolic
debugging impossible.  It also triggers a bug in the HP-UX 8 and HP-UX 9
linkers in which they give bogus error messages when linking some programs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msoft-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1527" incode="1">msoft-float</indexterm></indexcommand>
<para>Generate output containing library calls for floating point.
<strong>Warning:</strong> the requisite libraries are not available for all HPPA
targets.  Normally the facilities of the machine&textrsquo;s usual C compiler are
used, but this cannot be done directly in cross-compilation.  You must make
your own arrangements to provide suitable library functions for
cross-compilation.
</para>
<para><option>-msoft-float</option> changes the calling convention in the output file;
therefore, it is only useful if you compile <emph>all</emph> of a program with
this option.  In particular, you need to compile <file>libgcc.a</file>, the
library that comes with GCC, with <option>-msoft-float</option> in order for
this to work.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msio</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1528" incode="1">msio</indexterm></indexcommand>
<para>Generate the predefine, <code>_SIO</code>, for server IO&eosperiod;  The default is
<option>-mwsio</option>.  This generates the predefines, <code>__hp9000s700</code>,
<code>__hp9000s700__</code> and <code>_WSIO</code>, for workstation IO&eosperiod;  These
options are available under HP-UX and HI-UX&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgnu-ld</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1529" incode="1">mgnu-ld</indexterm></indexcommand>
<para>Use options specific to GNU <command>ld</command>.
This passes <option>-shared</option> to <command>ld</command> when
building a shared library.  It is the default when GCC is configured,
explicitly or implicitly, with the GNU linker.  This option does not
affect which <command>ld</command> is called; it only changes what parameters
are passed to that <command>ld</command>.
The <command>ld</command> that is called is determined by the
<option>--with-ld</option> configure option, GCC&textrsquo;s program search path, and
finally by the user&textrsquo;s <env>PATH</env>.  The linker used by GCC can be printed
using <samp>which `gcc -print-prog-name=ld`</samp>.  This option is only available
on the 64-bit HP-UX GCC, i.e.&noeos; configured with <samp>hppa*64*-*-hpux*</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mhp-ld</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1530" incode="1">mhp-ld</indexterm></indexcommand>
<para>Use options specific to HP <command>ld</command>.
This passes <option>-b</option> to <command>ld</command> when building
a shared library and passes <option>+Accept TypeMismatch</option> to <command>ld</command> on all
links.  It is the default when GCC is configured, explicitly or
implicitly, with the HP linker.  This option does not affect
which <command>ld</command> is called; it only changes what parameters are passed to that
<command>ld</command>.
The <command>ld</command> that is called is determined by the <option>--with-ld</option>
configure option, GCC&textrsquo;s program search path, and finally by the user&textrsquo;s
<env>PATH</env>.  The linker used by GCC can be printed using <samp>which
`gcc -print-prog-name=ld`</samp>.  This option is only available on the 64-bit
HP-UX GCC, i.e.&noeos; configured with <samp>hppa*64*-*-hpux*</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong-calls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1531" incode="1">mno-long-calls</indexterm></indexcommand>
<para>Generate code that uses long call sequences.  This ensures that a call
is always able to reach linker generated stubs.  The default is to generate
long calls only when the distance from the call site to the beginning
of the function or translation unit, as the case may be, exceeds a
predefined limit set by the branch type being used.  The limits for
normal calls are 7,600,000 and 240,000 bytes, respectively for the
PA 2.0 and PA 1.X architectures.  Sibcalls are always limited at
240,000 bytes.
</para>
<para>Distances are measured from the beginning of functions when using the
<option>-ffunction-sections</option> option, or when using the <option>-mgas</option>
and <option>-mno-portable-runtime</option> options together under HP-UX with
the SOM linker.
</para>
<para>It is normally not desirable to use this option as it degrades
performance.  However, it may be useful in large applications,
particularly when partial linking is used to build the application.
</para>
<para>The types of long calls used depends on the capabilities of the
assembler and linker, and the type of code being generated.  The
impact on systems that support long absolute calls, and long pic
symbol-difference or pc-relative calls should be relatively small.
However, an indirect call is used on 32-bit ELF systems in pic code
and it is quite long.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-munix=<var>unix-std</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1532" incode="1">march</indexterm></indexcommand>
<para>Generate compiler predefines and select a startfile for the specified
UNIX standard.  The choices for <var>unix-std</var> are <samp>93</samp>, <samp>95</samp>
and <samp>98</samp>.  <samp>93</samp> is supported on all HP-UX versions.  <samp>95</samp>
is available on HP-UX 10.10 and later.  <samp>98</samp> is available on HP-UX
11.11 and later.  The default values are <samp>93</samp> for HP-UX 10.00,
<samp>95</samp> for HP-UX 10.10 though to 11.00, and <samp>98</samp> for HP-UX 11.11
and later.
</para>
<para><option>-munix=93</option> provides the same predefines as GCC 3.3 and 3.4.
<option>-munix=95</option> provides additional predefines for <code>XOPEN_UNIX</code>
and <code>_XOPEN_SOURCE_EXTENDED</code>, and the startfile <file>unix95.o</file>.
<option>-munix=98</option> provides additional predefines for <code>_XOPEN_UNIX</code>,
<code>_XOPEN_SOURCE_EXTENDED</code>, <code>_INCLUDE__STDC_A1_SOURCE</code> and
<code>_INCLUDE_XOPEN_SOURCE_500</code>, and the startfile <file>unix98.o</file>.
</para>
<para>It is <emph>important</emph> to note that this option changes the interfaces
for various library routines.  It also affects the operational behavior
of the C library.  Thus, <emph>extreme</emph> care is needed in using this
option.
</para>
<para>Library code that is intended to operate with more than one UNIX
standard must test, set and restore the variable <code>__xpg4_extended_mask</code>
as appropriate.  Most GNU software doesn&textrsquo;t provide this capability.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-nolibdld</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1533" incode="1">nolibdld</indexterm></indexcommand>
<para>Suppress the generation of link options to search libdld.sl when the
<option>-static</option> option is specified on HP-UX 10 and later.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-static</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1534" incode="1">static</indexterm></indexcommand>
<para>The HP-UX implementation of setlocale in libc has a dependency on
libdld.sl.  There isn&textrsquo;t an archive version of libdld.sl.  Thus,
when the <option>-static</option> option is specified, special link options
are needed to resolve this dependency.
</para>
<para>On HP-UX 10 and later, the GCC driver adds the necessary options to
link with libdld.sl when the <option>-static</option> option is specified.
This causes the resulting binary to be dynamic.  On the 64-bit port,
the linkers generate dynamic binaries by default in any case.  The
<option>-nolibdld</option> option can be used to prevent the GCC driver from
adding these link options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-threads</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1535" incode="1">threads</indexterm></indexcommand>
<para>Add support for multithreading with the <dfn>dce thread</dfn> library
under HP-UX&eosperiod;  This option sets flags for both the preprocessor and
linker.
</para></tableitem></tableentry></table>

</subsection>
<node name="IA_002d64-Options" spaces=" "><nodename>IA-64 Options</nodename><nodenext automatic="on">LM32 Options</nodenext><nodeprev automatic="on">HPPA Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>IA-64 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="184">IA-64 Options</indexterm></cindex>

<para>These are the <samp>-m</samp> options defined for the Intel IA-64 architecture.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mbig-endian</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1536" incode="1">mbig-endian</indexterm></indexcommand>
<para>Generate code for a big-endian target.  This is the default for HP-UX&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlittle-endian</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1537" incode="1">mlittle-endian</indexterm></indexcommand>
<para>Generate code for a little-endian target.  This is the default for AIX5
and GNU/Linux.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgnu-as</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-gnu-as</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1538" incode="1">mgnu-as</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1539" incode="1">mno-gnu-as</indexterm></indexcommand>
<para>Generate (or don&textrsquo;t) code for the GNU assembler.  This is the default.
<!-- c Also, this is the default if the configure option @option{-with-gnu-as} -->
<!-- c is used. -->
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgnu-ld</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-gnu-ld</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1540" incode="1">mgnu-ld</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1541" incode="1">mno-gnu-ld</indexterm></indexcommand>
<para>Generate (or don&textrsquo;t) code for the GNU linker.  This is the default.
<!-- c Also, this is the default if the configure option @option{-with-gnu-ld} -->
<!-- c is used. -->
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-pic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1542" incode="1">mno-pic</indexterm></indexcommand>
<para>Generate code that does not use a global pointer register.  The result
is not position independent code, and violates the IA-64 ABI&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvolatile-asm-stop</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-volatile-asm-stop</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1543" incode="1">mvolatile-asm-stop</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1544" incode="1">mno-volatile-asm-stop</indexterm></indexcommand>
<para>Generate (or don&textrsquo;t) a stop bit immediately before and after volatile asm
statements.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mregister-names</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-register-names</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1545" incode="1">mregister-names</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1546" incode="1">mno-register-names</indexterm></indexcommand>
<para>Generate (or don&textrsquo;t) <samp>in</samp>, <samp>loc</samp>, and <samp>out</samp> register names for
the stacked registers.  This may make assembler output more readable.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-sdata</itemformat></item>
<itemx spaces=" "><itemformat command="code">-msdata</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1547" incode="1">mno-sdata</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1548" incode="1">msdata</indexterm></indexcommand>
<para>Disable (or enable) optimizations that use the small data section.  This may
be useful for working around optimizer bugs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mconstant-gp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1549" incode="1">mconstant-gp</indexterm></indexcommand>
<para>Generate code that uses a single constant global pointer value.  This is
useful when compiling kernel code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mauto-pic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1550" incode="1">mauto-pic</indexterm></indexcommand>
<para>Generate code that is self-relocatable.  This implies <option>-mconstant-gp</option>.
This is useful when compiling firmware code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minline-float-divide-min-latency</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1551" incode="1">minline-float-divide-min-latency</indexterm></indexcommand>
<para>Generate code for inline divides of floating-point values
using the minimum latency algorithm.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minline-float-divide-max-throughput</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1552" incode="1">minline-float-divide-max-throughput</indexterm></indexcommand>
<para>Generate code for inline divides of floating-point values
using the maximum throughput algorithm.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-inline-float-divide</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1553" incode="1">mno-inline-float-divide</indexterm></indexcommand>
<para>Do not generate inline code for divides of floating-point values.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minline-int-divide-min-latency</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1554" incode="1">minline-int-divide-min-latency</indexterm></indexcommand>
<para>Generate code for inline divides of integer values
using the minimum latency algorithm.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minline-int-divide-max-throughput</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1555" incode="1">minline-int-divide-max-throughput</indexterm></indexcommand>
<para>Generate code for inline divides of integer values
using the maximum throughput algorithm.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-inline-int-divide</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1556" incode="1">mno-inline-int-divide</indexterm></indexcommand>
<para>Do not generate inline code for divides of integer values.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minline-sqrt-min-latency</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1557" incode="1">minline-sqrt-min-latency</indexterm></indexcommand>
<para>Generate code for inline square roots
using the minimum latency algorithm.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minline-sqrt-max-throughput</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1558" incode="1">minline-sqrt-max-throughput</indexterm></indexcommand>
<para>Generate code for inline square roots
using the maximum throughput algorithm.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-inline-sqrt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1559" incode="1">mno-inline-sqrt</indexterm></indexcommand>
<para>Do not generate inline code for <code>sqrt</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfused-madd</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fused-madd</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1560" incode="1">mfused-madd</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1561" incode="1">mno-fused-madd</indexterm></indexcommand>
<para>Do (don&textrsquo;t) generate code that uses the fused multiply/add or multiply/subtract
instructions.  The default is to use these instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-dwarf2-asm</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mdwarf2-asm</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1562" incode="1">mno-dwarf2-asm</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1563" incode="1">mdwarf2-asm</indexterm></indexcommand>
<para>Don&textrsquo;t (or do) generate assembler code for the DWARF 2 line number debugging
info.  This may be useful when not using the GNU assembler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mearly-stop-bits</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-early-stop-bits</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1564" incode="1">mearly-stop-bits</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1565" incode="1">mno-early-stop-bits</indexterm></indexcommand>
<para>Allow stop bits to be placed earlier than immediately preceding the
instruction that triggered the stop bit.  This can improve instruction
scheduling, but does not always do so.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfixed-range=<var>register-range</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1566" incode="1">mfixed-range</indexterm></indexcommand>
<para>Generate code treating the given register range as fixed registers.
A fixed register is one that the register allocator cannot use.  This is
useful when compiling kernel code.  A register range is specified as
two registers separated by a dash.  Multiple register ranges can be
specified separated by a comma.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtls-size=<var>tls-size</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1567" incode="1">mtls-size</indexterm></indexcommand>
<para>Specify bit size of immediate TLS offsets.  Valid values are 14, 22, and
64.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>cpu-type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1568" incode="1">mtune</indexterm></indexcommand>
<para>Tune the instruction scheduling for a particular CPU, Valid values are
<samp>itanium</samp>, <samp>itanium1</samp>, <samp>merced</samp>, <samp>itanium2</samp>,
and <samp>mckinley</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-milp32</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mlp64</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1569" incode="1">milp32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1570" incode="1">mlp64</indexterm></indexcommand>
<para>Generate code for a 32-bit or 64-bit environment.
The 32-bit environment sets int, long and pointer to 32 bits.
The 64-bit environment sets int to 32 bits and long and pointer
to 64 bits.  These are HP-UX specific flags.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-sched-br-data-spec</itemformat></item>
<itemx spaces=" "><itemformat command="code">-msched-br-data-spec</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1571" incode="1">mno-sched-br-data-spec</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1572" incode="1">msched-br-data-spec</indexterm></indexcommand>
<para>(Dis/En)able data speculative scheduling before reload.
This results in generation of <code>ld.a</code> instructions and
the corresponding check instructions (<code>ld.c</code> / <code>chk.a</code>).
The default is &textrsquo;disable&textrsquo;.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msched-ar-data-spec</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-sched-ar-data-spec</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1573" incode="1">msched-ar-data-spec</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1574" incode="1">mno-sched-ar-data-spec</indexterm></indexcommand>
<para>(En/Dis)able data speculative scheduling after reload.
This results in generation of <code>ld.a</code> instructions and
the corresponding check instructions (<code>ld.c</code> / <code>chk.a</code>).
The default is &textrsquo;enable&textrsquo;.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-sched-control-spec</itemformat></item>
<itemx spaces=" "><itemformat command="code">-msched-control-spec</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1575" incode="1">mno-sched-control-spec</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1576" incode="1">msched-control-spec</indexterm></indexcommand>
<para>(Dis/En)able control speculative scheduling.  This feature is
available only during region scheduling (i.e.&noeos; before reload).
This results in generation of the <code>ld.s</code> instructions and
the corresponding check instructions <code>chk.s</code>.
The default is &textrsquo;disable&textrsquo;.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msched-br-in-data-spec</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-sched-br-in-data-spec</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1577" incode="1">msched-br-in-data-spec</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1578" incode="1">mno-sched-br-in-data-spec</indexterm></indexcommand>
<para>(En/Dis)able speculative scheduling of the instructions that
are dependent on the data speculative loads before reload.
This is effective only with <option>-msched-br-data-spec</option> enabled.
The default is &textrsquo;enable&textrsquo;.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msched-ar-in-data-spec</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-sched-ar-in-data-spec</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1579" incode="1">msched-ar-in-data-spec</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1580" incode="1">mno-sched-ar-in-data-spec</indexterm></indexcommand>
<para>(En/Dis)able speculative scheduling of the instructions that
are dependent on the data speculative loads after reload.
This is effective only with <option>-msched-ar-data-spec</option> enabled.
The default is &textrsquo;enable&textrsquo;.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msched-in-control-spec</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-sched-in-control-spec</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1581" incode="1">msched-in-control-spec</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1582" incode="1">mno-sched-in-control-spec</indexterm></indexcommand>
<para>(En/Dis)able speculative scheduling of the instructions that
are dependent on the control speculative loads.
This is effective only with <option>-msched-control-spec</option> enabled.
The default is &textrsquo;enable&textrsquo;.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-sched-prefer-non-data-spec-insns</itemformat></item>
<itemx spaces=" "><itemformat command="code">-msched-prefer-non-data-spec-insns</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1583" incode="1">mno-sched-prefer-non-data-spec-insns</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1584" incode="1">msched-prefer-non-data-spec-insns</indexterm></indexcommand>
<para>If enabled, data-speculative instructions are chosen for schedule
only if there are no other choices at the moment.  This makes
the use of the data speculation much more conservative.
The default is &textrsquo;disable&textrsquo;.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-sched-prefer-non-control-spec-insns</itemformat></item>
<itemx spaces=" "><itemformat command="code">-msched-prefer-non-control-spec-insns</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1585" incode="1">mno-sched-prefer-non-control-spec-insns</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1586" incode="1">msched-prefer-non-control-spec-insns</indexterm></indexcommand>
<para>If enabled, control-speculative instructions are chosen for schedule
only if there are no other choices at the moment.  This makes
the use of the control speculation much more conservative.
The default is &textrsquo;disable&textrsquo;.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-sched-count-spec-in-critical-path</itemformat></item>
<itemx spaces=" "><itemformat command="code">-msched-count-spec-in-critical-path</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1587" incode="1">mno-sched-count-spec-in-critical-path</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1588" incode="1">msched-count-spec-in-critical-path</indexterm></indexcommand>
<para>If enabled, speculative dependencies are considered during
computation of the instructions priorities.  This makes the use of the
speculation a bit more conservative.
The default is &textrsquo;disable&textrsquo;.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msched-spec-ldc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1589" incode="1">msched-spec-ldc</indexterm></indexcommand>
<para>Use a simple data speculation check.  This option is on by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msched-control-spec-ldc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1590" incode="1">msched-spec-ldc</indexterm></indexcommand>
<para>Use a simple check for control speculation.  This option is on by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msched-stop-bits-after-every-cycle</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1591" incode="1">msched-stop-bits-after-every-cycle</indexterm></indexcommand>
<para>Place a stop bit after every cycle when scheduling.  This option is on
by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msched-fp-mem-deps-zero-cost</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1592" incode="1">msched-fp-mem-deps-zero-cost</indexterm></indexcommand>
<para>Assume that floating-point stores and loads are not likely to cause a conflict
when placed into the same instruction group.  This option is disabled by
default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msel-sched-dont-check-control-spec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1593" incode="1">msel-sched-dont-check-control-spec</indexterm></indexcommand>
<para>Generate checks for control speculation in selective scheduling.
This flag is disabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msched-max-memory-insns=<var>max-insns</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1594" incode="1">msched-max-memory-insns</indexterm></indexcommand>
<para>Limit on the number of memory insns per instruction group, giving lower
priority to subsequent memory insns attempting to schedule in the same
instruction group. Frequently useful to prevent cache bank conflicts.
The default value is 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msched-max-memory-insns-hard-limit</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1595" incode="1">msched-max-memory-insns-hard-limit</indexterm></indexcommand>
<para>Makes the limit specified by <option>msched-max-memory-insns</option> a hard limit,
disallowing more than that number in an instruction group.
Otherwise, the limit is &textldquo;soft&textrdquo;, meaning that non-memory operations
are preferred when the limit is reached, but memory operations may still
be scheduled.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="LM32-Options" spaces=" "><nodename>LM32 Options</nodename><nodenext automatic="on">M32C Options</nodenext><nodeprev automatic="on">IA-64 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>LM32 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="185">LM32 options</indexterm></cindex>

<para>These <option>-m</option> options are defined for the LatticeMico32 architecture:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mbarrel-shift-enabled</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1596" incode="1">mbarrel-shift-enabled</indexterm></indexcommand>
<para>Enable barrel-shift instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdivide-enabled</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1597" incode="1">mdivide-enabled</indexterm></indexcommand>
<para>Enable divide and modulus instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmultiply-enabled</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1598" incode="1">multiply-enabled</indexterm></indexcommand>
<para>Enable multiply instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msign-extend-enabled</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1599" incode="1">msign-extend-enabled</indexterm></indexcommand>
<para>Enable sign extend instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-muser-enabled</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1600" incode="1">muser-enabled</indexterm></indexcommand>
<para>Enable user-defined instructions.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="M32C-Options" spaces=" "><nodename>M32C Options</nodename><nodenext automatic="on">M32R/D Options</nodenext><nodeprev automatic="on">LM32 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>M32C Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="186">M32C options</indexterm></cindex>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1601" incode="1">mcpu=</indexterm></indexcommand>
<para>Select the CPU for which code is generated.  <var>name</var> may be one of
<samp>r8c</samp> for the R8C/Tiny series, <samp>m16c</samp> for the M16C (up to
/60) series, <samp>m32cm</samp> for the M16C/80 series, or <samp>m32c</samp> for
the M32C/80 series.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1602" incode="1">msim</indexterm></indexcommand>
<para>Specifies that the program will be run on the simulator.  This causes
an alternate runtime library to be linked in which supports, for
example, file I/O&eosperiod;  You must not use this option when generating
programs that will run on real hardware; you must provide your own
runtime library for whatever I/O functions are needed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-memregs=<var>number</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1603" incode="1">memregs=</indexterm></indexcommand>
<para>Specifies the number of memory-based pseudo-registers GCC uses
during code generation.  These pseudo-registers are used like real
registers, so there is a tradeoff between GCC&textrsquo;s ability to fit the
code into available registers, and the performance penalty of using
memory instead of registers.  Note that all modules in a program must
be compiled with the same value for this option.  Because of that, you
must not use this option with GCC&textrsquo;s default runtime libraries.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="M32R_002fD-Options" spaces=" "><nodename>M32R/D Options</nodename><nodenext automatic="on">M680x0 Options</nodenext><nodeprev automatic="on">M32C Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>M32R/D Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="187">M32R/D options</indexterm></cindex>

<para>These <option>-m</option> options are defined for Renesas M32R/D architectures:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-m32r2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1604" incode="1">m32r2</indexterm></indexcommand>
<para>Generate code for the M32R/2&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m32rx</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1605" incode="1">m32rx</indexterm></indexcommand>
<para>Generate code for the M32R/X&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m32r</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1606" incode="1">m32r</indexterm></indexcommand>
<para>Generate code for the M32R&eosperiod;  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmodel=small</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1607" incode="1">mmodel=small</indexterm></indexcommand>
<para>Assume all objects live in the lower 16MB of memory (so that their addresses
can be loaded with the <code>ld24</code> instruction), and assume all subroutines
are reachable with the <code>bl</code> instruction.
This is the default.
</para>
<para>The addressability of a particular object can be set with the
<code>model</code> attribute.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmodel=medium</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1608" incode="1">mmodel=medium</indexterm></indexcommand>
<para>Assume objects may be anywhere in the 32-bit address space (the compiler
generates <code>seth/add3</code> instructions to load their addresses), and
assume all subroutines are reachable with the <code>bl</code> instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmodel=large</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1609" incode="1">mmodel=large</indexterm></indexcommand>
<para>Assume objects may be anywhere in the 32-bit address space (the compiler
generates <code>seth/add3</code> instructions to load their addresses), and
assume subroutines may not be reachable with the <code>bl</code> instruction
(the compiler generates the much slower <code>seth/add3/jl</code>
instruction sequence).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdata=none</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1610" incode="1">msdata=none</indexterm></indexcommand>
<para>Disable use of the small data area.  Variables are put into
one of <code>.data</code>, <code>.bss</code>, or <code>.rodata</code> (unless the
<code>section</code> attribute has been specified).
This is the default.
</para>
<para>The small data area consists of sections <code>.sdata</code> and <code>.sbss</code>.
Objects may be explicitly put in the small data area with the
<code>section</code> attribute using one of these sections.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdata=sdata</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1611" incode="1">msdata=sdata</indexterm></indexcommand>
<para>Put small global and static data in the small data area, but do not
generate special code to reference them.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdata=use</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1612" incode="1">msdata=use</indexterm></indexcommand>
<para>Put small global and static data in the small data area, and generate
special instructions to reference them.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-G <var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1613" incode="1">G</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="188">smaller data references</indexterm></cindex>
<para>Put global and static objects less than or equal to <var>num</var> bytes
into the small data or BSS sections instead of the normal data or BSS
sections.  The default value of <var>num</var> is 8.
The <option>-msdata</option> option must be set to one of <samp>sdata</samp> or <samp>use</samp>
for this option to have any effect.
</para>
<para>All modules should be compiled with the same <option>-G <var>num</var></option> value.
Compiling with different values of <var>num</var> may or may not work; if it
doesn&textrsquo;t the linker gives an error message&textmdash;incorrect code is not
generated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdebug</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1614" incode="1">mdebug</indexterm></indexcommand>
<para>Makes the M32R-specific code in the compiler display some statistics
that might help in debugging programs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-malign-loops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1615" incode="1">malign-loops</indexterm></indexcommand>
<para>Align all loops to a 32-byte boundary.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-align-loops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1616" incode="1">mno-align-loops</indexterm></indexcommand>
<para>Do not enforce a 32-byte alignment for loops.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-missue-rate=<var>number</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1617" incode="1">missue-rate=<var>number</var></indexterm></indexcommand>
<para>Issue <var>number</var> instructions per cycle.  <var>number</var> can only be 1
or 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbranch-cost=<var>number</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1618" incode="1">mbranch-cost=<var>number</var></indexterm></indexcommand>
<para><var>number</var> can only be 1 or 2.  If it is 1 then branches are
preferred over conditional code, if it is 2, then the opposite applies.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mflush-trap=<var>number</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1619" incode="1">mflush-trap=<var>number</var></indexterm></indexcommand>
<para>Specifies the trap number to use to flush the cache.  The default is
12.  Valid numbers are between 0 and 15 inclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-flush-trap</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1620" incode="1">mno-flush-trap</indexterm></indexcommand>
<para>Specifies that the cache cannot be flushed by using a trap.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mflush-func=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1621" incode="1">mflush-func=<var>name</var></indexterm></indexcommand>
<para>Specifies the name of the operating system function to call to flush
the cache.  The default is <samp>_flush_cache</samp>, but a function call
is only used if a trap is not available.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-flush-func</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1622" incode="1">mno-flush-func</indexterm></indexcommand>
<para>Indicates that there is no OS function for flushing the cache.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="M680x0-Options" spaces=" "><nodename>M680x0 Options</nodename><nodenext automatic="on">MCore Options</nodenext><nodeprev automatic="on">M32R/D Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>M680x0 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="189">M680x0 options</indexterm></cindex>

<para>These are the <samp>-m</samp> options defined for M680x0 and ColdFire processors.
The default settings depend on which architecture was selected when
the compiler was configured; the defaults for the most common choices
are given below.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-march=<var>arch</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1623" incode="1">march</indexterm></indexcommand>
<para>Generate code for a specific M680x0 or ColdFire instruction set
architecture.  Permissible values of <var>arch</var> for M680x0
architectures are: <samp>68000</samp>, <samp>68010</samp>, <samp>68020</samp>,
<samp>68030</samp>, <samp>68040</samp>, <samp>68060</samp> and <samp>cpu32</samp>.  ColdFire
architectures are selected according to Freescale&textrsquo;s ISA classification
and the permissible values are: <samp>isaa</samp>, <samp>isaaplus</samp>,
<samp>isab</samp> and <samp>isac</samp>.
</para>
<para>GCC defines a macro <code>__mcf<var>arch</var>__</code> whenever it is generating
code for a ColdFire target.  The <var>arch</var> in this macro is one of the
<option>-march</option> arguments given above.
</para>
<para>When used together, <option>-march</option> and <option>-mtune</option> select code
that runs on a family of similar processors but that is optimized
for a particular microarchitecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>cpu</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1624" incode="1">mcpu</indexterm></indexcommand>
<para>Generate code for a specific M680x0 or ColdFire processor.
The M680x0 <var>cpu</var>s are: <samp>68000</samp>, <samp>68010</samp>, <samp>68020</samp>,
<samp>68030</samp>, <samp>68040</samp>, <samp>68060</samp>, <samp>68302</samp>, <samp>68332</samp>
and <samp>cpu32</samp>.  The ColdFire <var>cpu</var>s are given by the table
below, which also classifies the CPUs into families:
</para>
<multitable spaces=" " endspaces=" "><columnfractions line=" 0.20 0.80"><columnfraction value="0.20"></columnfraction><columnfraction value="0.80"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para><strong>Family</strong> </para></entry><entry command="tab" spaces=" "><para><strong><samp>-mcpu</samp> arguments</strong>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>51</samp> </para></entry><entry command="tab" spaces=" "><para><samp>51</samp> <samp>51ac</samp> <samp>51ag</samp> <samp>51cn</samp> <samp>51em</samp> <samp>51je</samp> <samp>51jf</samp> <samp>51jg</samp> <samp>51jm</samp> <samp>51mm</samp> <samp>51qe</samp> <samp>51qm</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5206</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5202</samp> <samp>5204</samp> <samp>5206</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5206e</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5206e</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5208</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5207</samp> <samp>5208</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5211a</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5210a</samp> <samp>5211a</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5213</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5211</samp> <samp>5212</samp> <samp>5213</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5216</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5214</samp> <samp>5216</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>52235</samp> </para></entry><entry command="tab" spaces=" "><para><samp>52230</samp> <samp>52231</samp> <samp>52232</samp> <samp>52233</samp> <samp>52234</samp> <samp>52235</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5225</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5224</samp> <samp>5225</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>52259</samp> </para></entry><entry command="tab" spaces=" "><para><samp>52252</samp> <samp>52254</samp> <samp>52255</samp> <samp>52256</samp> <samp>52258</samp> <samp>52259</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5235</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5232</samp> <samp>5233</samp> <samp>5234</samp> <samp>5235</samp> <samp>523x</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5249</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5249</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5250</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5250</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5271</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5270</samp> <samp>5271</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5272</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5272</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5275</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5274</samp> <samp>5275</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5282</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5280</samp> <samp>5281</samp> <samp>5282</samp> <samp>528x</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>53017</samp> </para></entry><entry command="tab" spaces=" "><para><samp>53011</samp> <samp>53012</samp> <samp>53013</samp> <samp>53014</samp> <samp>53015</samp> <samp>53016</samp> <samp>53017</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5307</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5307</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5329</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5327</samp> <samp>5328</samp> <samp>5329</samp> <samp>532x</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5373</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5372</samp> <samp>5373</samp> <samp>537x</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5407</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5407</samp>
</para></entry></row><row><entry command="item" spaces=" "><para><samp>5475</samp> </para></entry><entry command="tab" spaces=" "><para><samp>5470</samp> <samp>5471</samp> <samp>5472</samp> <samp>5473</samp> <samp>5474</samp> <samp>5475</samp> <samp>547x</samp> <samp>5480</samp> <samp>5481</samp> <samp>5482</samp> <samp>5483</samp> <samp>5484</samp> <samp>5485</samp>
</para></entry></row></tbody></multitable>

<para><option>-mcpu=<var>cpu</var></option> overrides <option>-march=<var>arch</var></option> if
<var>arch</var> is compatible with <var>cpu</var>.  Other combinations of
<option>-mcpu</option> and <option>-march</option> are rejected.
</para>
<para>GCC defines the macro <code>__mcf_cpu_<var>cpu</var></code> when ColdFire target
<var>cpu</var> is selected.  It also defines <code>__mcf_family_<var>family</var></code>,
where the value of <var>family</var> is given by the table above.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>tune</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1625" incode="1">mtune</indexterm></indexcommand>
<para>Tune the code for a particular microarchitecture within the
constraints set by <option>-march</option> and <option>-mcpu</option>.
The M680x0 microarchitectures are: <samp>68000</samp>, <samp>68010</samp>,
<samp>68020</samp>, <samp>68030</samp>, <samp>68040</samp>, <samp>68060</samp>
and <samp>cpu32</samp>.  The ColdFire microarchitectures
are: <samp>cfv1</samp>, <samp>cfv2</samp>, <samp>cfv3</samp>, <samp>cfv4</samp> and <samp>cfv4e</samp>.
</para>
<para>You can also use <option>-mtune=68020-40</option> for code that needs
to run relatively well on 68020, 68030 and 68040 targets.
<option>-mtune=68020-60</option> is similar but includes 68060 targets
as well.  These two options select the same tuning decisions as
<option>-m68020-40</option> and <option>-m68020-60</option> respectively.
</para>
<para>GCC defines the macros <code>__mc<var>arch</var></code> and <code>__mc<var>arch</var>__</code>
when tuning for 680x0 architecture <var>arch</var>.  It also defines
<code>mc<var>arch</var></code> unless either <option>-ansi</option> or a non-GNU <option>-std</option>
option is used.  If GCC is tuning for a range of architectures,
as selected by <option>-mtune=68020-40</option> or <option>-mtune=68020-60</option>,
it defines the macros for every architecture in the range.
</para>
<para>GCC also defines the macro <code>__m<var>uarch</var>__</code> when tuning for
ColdFire microarchitecture <var>uarch</var>, where <var>uarch</var> is one
of the arguments given above.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m68000</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mc68000</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1626" incode="1">m68000</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1627" incode="1">mc68000</indexterm></indexcommand>
<para>Generate output for a 68000.  This is the default
when the compiler is configured for 68000-based systems.
It is equivalent to <option>-march=68000</option>.
</para>
<para>Use this option for microcontrollers with a 68000 or EC000 core,
including the 68008, 68302, 68306, 68307, 68322, 68328 and 68356.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m68010</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1628" incode="1">m68010</indexterm></indexcommand>
<para>Generate output for a 68010.  This is the default
when the compiler is configured for 68010-based systems.
It is equivalent to <option>-march=68010</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m68020</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mc68020</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1629" incode="1">m68020</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1630" incode="1">mc68020</indexterm></indexcommand>
<para>Generate output for a 68020.  This is the default
when the compiler is configured for 68020-based systems.
It is equivalent to <option>-march=68020</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m68030</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1631" incode="1">m68030</indexterm></indexcommand>
<para>Generate output for a 68030.  This is the default when the compiler is
configured for 68030-based systems.  It is equivalent to
<option>-march=68030</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m68040</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1632" incode="1">m68040</indexterm></indexcommand>
<para>Generate output for a 68040.  This is the default when the compiler is
configured for 68040-based systems.  It is equivalent to
<option>-march=68040</option>.
</para>
<para>This option inhibits the use of 68881/68882 instructions that have to be
emulated by software on the 68040.  Use this option if your 68040 does not
have code to emulate those instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m68060</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1633" incode="1">m68060</indexterm></indexcommand>
<para>Generate output for a 68060.  This is the default when the compiler is
configured for 68060-based systems.  It is equivalent to
<option>-march=68060</option>.
</para>
<para>This option inhibits the use of 68020 and 68881/68882 instructions that
have to be emulated by software on the 68060.  Use this option if your 68060
does not have code to emulate those instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1634" incode="1">mcpu32</indexterm></indexcommand>
<para>Generate output for a CPU32.  This is the default
when the compiler is configured for CPU32-based systems.
It is equivalent to <option>-march=cpu32</option>.
</para>
<para>Use this option for microcontrollers with a
CPU32 or CPU32+ core, including the 68330, 68331, 68332, 68333, 68334,
68336, 68340, 68341, 68349 and 68360.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m5200</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1635" incode="1">m5200</indexterm></indexcommand>
<para>Generate output for a 520X ColdFire CPU&eosperiod;  This is the default
when the compiler is configured for 520X-based systems.
It is equivalent to <option>-mcpu=5206</option>, and is now deprecated
in favor of that option.
</para>
<para>Use this option for microcontroller with a 5200 core, including
the MCF5202, MCF5203, MCF5204 and MCF5206.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m5206e</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1636" incode="1">m5206e</indexterm></indexcommand>
<para>Generate output for a 5206e ColdFire CPU&eosperiod;  The option is now
deprecated in favor of the equivalent <option>-mcpu=5206e</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m528x</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1637" incode="1">m528x</indexterm></indexcommand>
<para>Generate output for a member of the ColdFire 528X family.
The option is now deprecated in favor of the equivalent
<option>-mcpu=528x</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m5307</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1638" incode="1">m5307</indexterm></indexcommand>
<para>Generate output for a ColdFire 5307 CPU&eosperiod;  The option is now deprecated
in favor of the equivalent <option>-mcpu=5307</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m5407</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1639" incode="1">m5407</indexterm></indexcommand>
<para>Generate output for a ColdFire 5407 CPU&eosperiod;  The option is now deprecated
in favor of the equivalent <option>-mcpu=5407</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcfv4e</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1640" incode="1">mcfv4e</indexterm></indexcommand>
<para>Generate output for a ColdFire V4e family CPU (e.g.&noeos; 547x/548x).
This includes use of hardware floating-point instructions.
The option is equivalent to <option>-mcpu=547x</option>, and is now
deprecated in favor of that option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m68020-40</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1641" incode="1">m68020-40</indexterm></indexcommand>
<para>Generate output for a 68040, without using any of the new instructions.
This results in code that can run relatively efficiently on either a
68020/68881 or a 68030 or a 68040.  The generated code does use the
68881 instructions that are emulated on the 68040.
</para>
<para>The option is equivalent to <option>-march=68020</option> <option>-mtune=68020-40</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m68020-60</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1642" incode="1">m68020-60</indexterm></indexcommand>
<para>Generate output for a 68060, without using any of the new instructions.
This results in code that can run relatively efficiently on either a
68020/68881 or a 68030 or a 68040.  The generated code does use the
68881 instructions that are emulated on the 68060.
</para>
<para>The option is equivalent to <option>-march=68020</option> <option>-mtune=68020-60</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mhard-float</itemformat></item>
<itemx spaces=" "><itemformat command="code">-m68881</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1643" incode="1">mhard-float</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1644" incode="1">m68881</indexterm></indexcommand>
<para>Generate floating-point instructions.  This is the default for 68020
and above, and for ColdFire devices that have an FPU&eosperiod;  It defines the
macro <code>__HAVE_68881__</code> on M680x0 targets and <code>__mcffpu__</code>
on ColdFire targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msoft-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1645" incode="1">msoft-float</indexterm></indexcommand>
<para>Do not generate floating-point instructions; use library calls instead.
This is the default for 68000, 68010, and 68832 targets.  It is also
the default for ColdFire devices that have no FPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdiv</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-div</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1646" incode="1">mdiv</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1647" incode="1">mno-div</indexterm></indexcommand>
<para>Generate (do not generate) ColdFire hardware divide and remainder
instructions.  If <option>-march</option> is used without <option>-mcpu</option>,
the default is &textldquo;on&textrdquo; for ColdFire architectures and &textldquo;off&textrdquo; for M680x0
architectures.  Otherwise, the default is taken from the target CPU
(either the default CPU, or the one specified by <option>-mcpu</option>).  For
example, the default is &textldquo;off&textrdquo; for <option>-mcpu=5206</option> and &textldquo;on&textrdquo; for
<option>-mcpu=5206e</option>.
</para>
<para>GCC defines the macro <code>__mcfhwdiv__</code> when this option is enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mshort</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1648" incode="1">mshort</indexterm></indexcommand>
<para>Consider type <code>int</code> to be 16 bits wide, like <code>short int</code>.
Additionally, parameters passed on the stack are also aligned to a
16-bit boundary even on targets whose API mandates promotion to 32-bit.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-short</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1649" incode="1">mno-short</indexterm></indexcommand>
<para>Do not consider type <code>int</code> to be 16 bits wide.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnobitfield</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-bitfield</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1650" incode="1">mnobitfield</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1651" incode="1">mno-bitfield</indexterm></indexcommand>
<para>Do not use the bit-field instructions.  The <option>-m68000</option>, <option>-mcpu32</option>
and <option>-m5200</option> options imply <w><option>-mnobitfield</option></w>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbitfield</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1652" incode="1">mbitfield</indexterm></indexcommand>
<para>Do use the bit-field instructions.  The <option>-m68020</option> option implies
<option>-mbitfield</option>.  This is the default if you use a configuration
designed for a 68020.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrtd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1653" incode="1">mrtd</indexterm></indexcommand>
<para>Use a different function-calling convention, in which functions
that take a fixed number of arguments return with the <code>rtd</code>
instruction, which pops their arguments while returning.  This
saves one instruction in the caller since there is no need to pop
the arguments there.
</para>
<para>This calling convention is incompatible with the one normally
used on Unix, so you cannot use it if you need to call libraries
compiled with the Unix compiler.
</para>
<para>Also, you must provide function prototypes for all functions that
take variable numbers of arguments (including <code>printf</code>);
otherwise incorrect code is generated for calls to those
functions.
</para>
<para>In addition, seriously incorrect code results if you call a
function with too many arguments.  (Normally, extra arguments are
harmlessly ignored.)
</para>
<para>The <code>rtd</code> instruction is supported by the 68010, 68020, 68030,
68040, 68060 and CPU32 processors, but not by the 68000 or 5200.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-rtd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1654" incode="1">mno-rtd</indexterm></indexcommand>
<para>Do not use the calling conventions selected by <option>-mrtd</option>.
This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-malign-int</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-align-int</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1655" incode="1">malign-int</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1656" incode="1">mno-align-int</indexterm></indexcommand>
<para>Control whether GCC aligns <code>int</code>, <code>long</code>, <code>long long</code>,
<code>float</code>, <code>double</code>, and <code>long double</code> variables on a 32-bit
boundary (<option>-malign-int</option>) or a 16-bit boundary (<option>-mno-align-int</option>).
Aligning variables on 32-bit boundaries produces code that runs somewhat
faster on processors with 32-bit busses at the expense of more memory.
</para>
<para><strong>Warning:</strong> if you use the <option>-malign-int</option> switch, GCC
aligns structures containing the above types differently than
most published application binary interface specifications for the m68k.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpcrel</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1657" incode="1">mpcrel</indexterm></indexcommand>
<para>Use the pc-relative addressing mode of the 68000 directly, instead of
using a global offset table.  At present, this option implies <option>-fpic</option>,
allowing at most a 16-bit offset for pc-relative addressing.  <option>-fPIC</option> is
not presently supported with <option>-mpcrel</option>, though this could be supported for
68020 and higher processors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-strict-align</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mstrict-align</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1658" incode="1">mno-strict-align</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1659" incode="1">mstrict-align</indexterm></indexcommand>
<para>Do not (do) assume that unaligned memory references are handled by
the system.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msep-data</itemformat></item>
</tableterm><tableitem><para>Generate code that allows the data segment to be located in a different
area of memory from the text segment.  This allows for execute-in-place in
an environment without virtual memory management.  This option implies
<option>-fPIC</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-sep-data</itemformat></item>
</tableterm><tableitem><para>Generate code that assumes that the data segment follows the text segment.
This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mid-shared-library</itemformat></item>
</tableterm><tableitem><para>Generate code that supports shared libraries via the library ID method.
This allows for execute-in-place and shared libraries in an environment
without virtual memory management.  This option implies <option>-fPIC</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-id-shared-library</itemformat></item>
</tableterm><tableitem><para>Generate code that doesn&textrsquo;t assume ID-based shared libraries are being used.
This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mshared-library-id=n</itemformat></item>
</tableterm><tableitem><para>Specifies the identification number of the ID-based shared library being
compiled.  Specifying a value of 0 generates more compact code; specifying
other values forces the allocation of that number to the current
library, but is no more space- or time-efficient than omitting this option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxgot</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-xgot</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1660" incode="1">mxgot</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1661" incode="1">mno-xgot</indexterm></indexcommand>
<para>When generating position-independent code for ColdFire, generate code
that works if the GOT has more than 8192 entries.  This code is
larger and slower than code generated without this option.  On M680x0
processors, this option is not needed; <option>-fPIC</option> suffices.
</para>
<para>GCC normally uses a single instruction to load values from the GOT&eosperiod;
While this is relatively efficient, it only works if the GOT
is smaller than about 64k.  Anything larger causes the linker
to report an error such as:
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="190">relocation truncated to fit (ColdFire)</indexterm></cindex>
<smallexample endspaces=" ">
<pre xml:space="preserve">relocation truncated to fit: R_68K_GOT16O foobar
</pre></smallexample>

<para>If this happens, you should recompile your code with <option>-mxgot</option>.
It should then work with very large GOTs.  However, code generated with
<option>-mxgot</option> is less efficient, since it takes 4 instructions to fetch
the value of a global symbol.
</para>
<para>Note that some linkers, including newer versions of the GNU linker,
can create multiple GOTs and sort GOT entries.  If you have such a linker,
you should only need to use <option>-mxgot</option> when compiling a single
object file that accesses more than 8192 GOT entries.  Very few do.
</para>
<para>These options have no effect unless GCC is generating
position-independent code.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="MCore-Options" spaces=" "><nodename>MCore Options</nodename><nodenext automatic="on">MeP Options</nodenext><nodeprev automatic="on">M680x0 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>MCore Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="191">MCore options</indexterm></cindex>

<para>These are the <samp>-m</samp> options defined for the Motorola M*Core
processors.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-mhardlit</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-hardlit</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1662" incode="1">mhardlit</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1663" incode="1">mno-hardlit</indexterm></indexcommand>
<para>Inline constants into the code stream if it can be done in two
instructions or less.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdiv</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-div</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1664" incode="1">mdiv</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1665" incode="1">mno-div</indexterm></indexcommand>
<para>Use the divide instruction.  (Enabled by default).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrelax-immediate</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-relax-immediate</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1666" incode="1">mrelax-immediate</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1667" incode="1">mno-relax-immediate</indexterm></indexcommand>
<para>Allow arbitrary-sized immediates in bit operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mwide-bitfields</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-wide-bitfields</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1668" incode="1">mwide-bitfields</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1669" incode="1">mno-wide-bitfields</indexterm></indexcommand>
<para>Always treat bit-fields as <code>int</code>-sized.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4byte-functions</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-4byte-functions</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1670" incode="1">m4byte-functions</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1671" incode="1">mno-4byte-functions</indexterm></indexcommand>
<para>Force all functions to be aligned to a 4-byte boundary.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcallgraph-data</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-callgraph-data</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1672" incode="1">mcallgraph-data</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1673" incode="1">mno-callgraph-data</indexterm></indexcommand>
<para>Emit callgraph information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mslow-bytes</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-slow-bytes</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1674" incode="1">mslow-bytes</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1675" incode="1">mno-slow-bytes</indexterm></indexcommand>
<para>Prefer word access when reading byte quantities.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlittle-endian</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mbig-endian</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1676" incode="1">mlittle-endian</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1677" incode="1">mbig-endian</indexterm></indexcommand>
<para>Generate code for a little-endian target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m210</itemformat></item>
<itemx spaces=" "><itemformat command="code">-m340</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1678" incode="1">m210</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1679" incode="1">m340</indexterm></indexcommand>
<para>Generate code for the 210 processor.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-lsim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1680" incode="1">mno-lsim</indexterm></indexcommand>
<para>Assume that runtime support has been provided and so omit the
simulator library (<file>libsim.a)</file> from the linker command line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstack-increment=<var>size</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1681" incode="1">mstack-increment</indexterm></indexcommand>
<para>Set the maximum amount for a single stack increment operation.  Large
values can increase the speed of programs that contain functions
that need a large amount of stack space, but they can also trigger a
segmentation fault if the stack is extended too much.  The default
value is 0x1000.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="MeP-Options" spaces=" "><nodename>MeP Options</nodename><nodenext automatic="on">MicroBlaze Options</nodenext><nodeprev automatic="on">MCore Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>MeP Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="192">MeP options</indexterm></cindex>

<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabsdiff</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1682" incode="1">mabsdiff</indexterm></indexcommand>
<para>Enables the <code>abs</code> instruction, which is the absolute difference
between two registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mall-opts</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1683" incode="1">mall-opts</indexterm></indexcommand>
<para>Enables all the optional instructions&textmdash;average, multiply, divide, bit
operations, leading zero, absolute difference, min/max, clip, and
saturation.
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-maverage</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1684" incode="1">maverage</indexterm></indexcommand>
<para>Enables the <code>ave</code> instruction, which computes the average of two
registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbased=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1685" incode="1">mbased=</indexterm></indexcommand>
<para>Variables of size <var>n</var> bytes or smaller are placed in the
<code>.based</code> section by default.  Based variables use the <code>$tp</code>
register as a base register, and there is a 128-byte limit to the
<code>.based</code> section.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbitops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1686" incode="1">mbitops</indexterm></indexcommand>
<para>Enables the bit operation instructions&textmdash;bit test (<code>btstm</code>), set
(<code>bsetm</code>), clear (<code>bclrm</code>), invert (<code>bnotm</code>), and
test-and-set (<code>tas</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mc=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1687" incode="1">mc=</indexterm></indexcommand>
<para>Selects which section constant data is placed in.  <var>name</var> may
be <samp>tiny</samp>, <samp>near</samp>, or <samp>far</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mclip</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1688" incode="1">mclip</indexterm></indexcommand>
<para>Enables the <code>clip</code> instruction.  Note that <option>-mclip</option> is not
useful unless you also provide <option>-mminmax</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mconfig=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1689" incode="1">mconfig=</indexterm></indexcommand>
<para>Selects one of the built-in core configurations.  Each MeP chip has
one or more modules in it; each module has a core CPU and a variety of
coprocessors, optional instructions, and peripherals.  The
<code>MeP-Integrator</code> tool, not part of GCC, provides these
configurations through this option; using this option is the same as
using all the corresponding command-line options.  The default
configuration is <samp>default</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1690" incode="1">mcop</indexterm></indexcommand>
<para>Enables the coprocessor instructions.  By default, this is a 32-bit
coprocessor.  Note that the coprocessor is normally enabled via the
<option>-mconfig=</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcop32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1691" incode="1">mcop32</indexterm></indexcommand>
<para>Enables the 32-bit coprocessor&textrsquo;s instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcop64</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1692" incode="1">mcop64</indexterm></indexcommand>
<para>Enables the 64-bit coprocessor&textrsquo;s instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mivc2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1693" incode="1">mivc2</indexterm></indexcommand>
<para>Enables IVC2 scheduling.  IVC2 is a 64-bit VLIW coprocessor.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1694" incode="1">mdc</indexterm></indexcommand>
<para>Causes constant variables to be placed in the <code>.near</code> section.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdiv</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1695" incode="1">mdiv</indexterm></indexcommand>
<para>Enables the <code>div</code> and <code>divu</code> instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-meb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1696" incode="1">meb</indexterm></indexcommand>
<para>Generate big-endian code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mel</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1697" incode="1">mel</indexterm></indexcommand>
<para>Generate little-endian code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mio-volatile</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1698" incode="1">mio-volatile</indexterm></indexcommand>
<para>Tells the compiler that any variable marked with the <code>io</code>
attribute is to be considered volatile.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ml</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1699" incode="1">ml</indexterm></indexcommand>
<para>Causes variables to be assigned to the <code>.far</code> section by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mleadz</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1700" incode="1">mleadz</indexterm></indexcommand>
<para>Enables the <code>leadz</code> (leading zero) instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mm</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1701" incode="1">mm</indexterm></indexcommand>
<para>Causes variables to be assigned to the <code>.near</code> section by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mminmax</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1702" incode="1">mminmax</indexterm></indexcommand>
<para>Enables the <code>min</code> and <code>max</code> instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmult</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1703" incode="1">mmult</indexterm></indexcommand>
<para>Enables the multiplication and multiply-accumulate instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-opts</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1704" incode="1">mno-opts</indexterm></indexcommand>
<para>Disables all the optional instructions enabled by <option>-mall-opts</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrepeat</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1705" incode="1">mrepeat</indexterm></indexcommand>
<para>Enables the <code>repeat</code> and <code>erepeat</code> instructions, used for
low-overhead looping.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ms</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1706" incode="1">ms</indexterm></indexcommand>
<para>Causes all variables to default to the <code>.tiny</code> section.  Note
that there is a 65536-byte limit to this section.  Accesses to these
variables use the <code>%gp</code> base register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msatur</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1707" incode="1">msatur</indexterm></indexcommand>
<para>Enables the saturation instructions.  Note that the compiler does not
currently generate these itself, but this option is included for
compatibility with other tools, like <code>as</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdram</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1708" incode="1">msdram</indexterm></indexcommand>
<para>Link the SDRAM-based runtime instead of the default ROM-based runtime.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1709" incode="1">msim</indexterm></indexcommand>
<para>Link the simulator run-time libraries.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msimnovec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1710" incode="1">msimnovec</indexterm></indexcommand>
<para>Link the simulator runtime libraries, excluding built-in support
for reset and exception vectors and tables.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtf</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1711" incode="1">mtf</indexterm></indexcommand>
<para>Causes all functions to default to the <code>.far</code> section.  Without
this option, functions default to the <code>.near</code> section.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtiny=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1712" incode="1">mtiny=</indexterm></indexcommand>
<para>Variables that are <var>n</var> bytes or smaller are allocated to the
<code>.tiny</code> section.  These variables use the <code>$gp</code> base
register.  The default for this option is 4, but note that there&textrsquo;s a
65536-byte limit to the <code>.tiny</code> section.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="MicroBlaze-Options" spaces=" "><nodename>MicroBlaze Options</nodename><nodenext automatic="on">MIPS Options</nodenext><nodeprev automatic="on">MeP Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>MicroBlaze Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="193">MicroBlaze Options</indexterm></cindex>

<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-msoft-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1713" incode="1">msoft-float</indexterm></indexcommand>
<para>Use software emulation for floating point (default).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mhard-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1714" incode="1">mhard-float</indexterm></indexcommand>
<para>Use hardware floating-point instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmemcpy</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1715" incode="1">mmemcpy</indexterm></indexcommand>
<para>Do not optimize block moves, use <code>memcpy</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-clearbss</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1716" incode="1">mno-clearbss</indexterm></indexcommand>
<para>This option is deprecated.  Use <option>-fno-zero-initialized-in-bss</option> instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>cpu-type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1717" incode="1">mcpu=</indexterm></indexcommand>
<para>Use features of, and schedule code for, the given CPU.
Supported values are in the format <samp>v<var>X</var>.<var>YY</var>.<var>Z</var></samp>,
where <var>X</var> is a major version, <var>YY</var> is the minor version, and
<var>Z</var> is compatibility code.  Example values are <samp>v3.00.a</samp>,
<samp>v4.00.b</samp>, <samp>v5.00.a</samp>, <samp>v5.00.b</samp>, <samp>v5.00.b</samp>, <samp>v6.00.a</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxl-soft-mul</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1718" incode="1">mxl-soft-mul</indexterm></indexcommand>
<para>Use software multiply emulation (default).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxl-soft-div</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1719" incode="1">mxl-soft-div</indexterm></indexcommand>
<para>Use software emulation for divides (default).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxl-barrel-shift</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1720" incode="1">mxl-barrel-shift</indexterm></indexcommand>
<para>Use the hardware barrel shifter.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxl-pattern-compare</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1721" incode="1">mxl-pattern-compare</indexterm></indexcommand>
<para>Use pattern compare instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msmall-divides</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1722" incode="1">msmall-divides</indexterm></indexcommand>
<para>Use table lookup optimization for small signed integer divisions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxl-stack-check</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1723" incode="1">mxl-stack-check</indexterm></indexcommand>
<para>This option is deprecated.  Use <option>-fstack-check</option> instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxl-gp-opt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1724" incode="1">mxl-gp-opt</indexterm></indexcommand>
<para>Use GP-relative <code>.sdata</code>/<code>.sbss</code> sections.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxl-multiply-high</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1725" incode="1">mxl-multiply-high</indexterm></indexcommand>
<para>Use multiply high instructions for high part of 32x32 multiply.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxl-float-convert</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1726" incode="1">mxl-float-convert</indexterm></indexcommand>
<para>Use hardware floating-point conversion instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxl-float-sqrt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1727" incode="1">mxl-float-sqrt</indexterm></indexcommand>
<para>Use hardware floating-point square root instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbig-endian</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1728" incode="1">mbig-endian</indexterm></indexcommand>
<para>Generate code for a big-endian target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlittle-endian</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1729" incode="1">mlittle-endian</indexterm></indexcommand>
<para>Generate code for a little-endian target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxl-reorder</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1730" incode="1">mxl-reorder</indexterm></indexcommand>
<para>Use reorder instructions (swap and byte reversed load/store).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxl-mode-<var>app-model</var></itemformat></item>
</tableterm><tableitem><para>Select application model <var>app-model</var>.  Valid models are
</para><table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">executable</itemformat></item>
</tableterm><tableitem><para>normal executable (default), uses startup code <file>crt0.o</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">xmdstub</itemformat></item>
</tableterm><tableitem><para>for use with Xilinx Microprocessor Debugger (XMD) based
software intrusive debug agent called xmdstub. This uses startup file
<file>crt1.o</file> and sets the start address of the program to 0x800.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">bootstrap</itemformat></item>
</tableterm><tableitem><para>for applications that are loaded using a bootloader.
This model uses startup file <file>crt2.o</file> which does not contain a processor
reset vector handler. This is suitable for transferring control on a
processor reset to the bootloader rather than the application.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">novectors</itemformat></item>
</tableterm><tableitem><para>for applications that do not require any of the
MicroBlaze vectors. This option may be useful for applications running
within a monitoring application. This model uses <file>crt3.o</file> as a startup file.
</para></tableitem></tableentry></table>

<para>Option <option>-xl-mode-<var>app-model</var></option> is a deprecated alias for
<option>-mxl-mode-<var>app-model</var></option>.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="MIPS-Options" spaces=" "><nodename>MIPS Options</nodename><nodenext automatic="on">MMIX Options</nodenext><nodeprev automatic="on">MicroBlaze Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>MIPS Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="194">MIPS options</indexterm></cindex>

<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-EB</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1731" incode="1">EB</indexterm></indexcommand>
<para>Generate big-endian code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-EL</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1732" incode="1">EL</indexterm></indexcommand>
<para>Generate little-endian code.  This is the default for <samp>mips*el-*-*</samp>
configurations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-march=<var>arch</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1733" incode="1">march</indexterm></indexcommand>
<para>Generate code that runs on <var>arch</var>, which can be the name of a
generic MIPS ISA, or the name of a particular processor.
The ISA names are:
<samp>mips1</samp>, <samp>mips2</samp>, <samp>mips3</samp>, <samp>mips4</samp>,
<samp>mips32</samp>, <samp>mips32r2</samp>, <samp>mips32r3</samp>, <samp>mips32r5</samp>,
<samp>mips32r6</samp>, <samp>mips64</samp>, <samp>mips64r2</samp>, <samp>mips64r3</samp>,
<samp>mips64r5</samp> and <samp>mips64r6</samp>.
The processor names are:
<samp>4kc</samp>, <samp>4km</samp>, <samp>4kp</samp>, <samp>4ksc</samp>,
<samp>4kec</samp>, <samp>4kem</samp>, <samp>4kep</samp>, <samp>4ksd</samp>,
<samp>5kc</samp>, <samp>5kf</samp>,
<samp>20kc</samp>,
<samp>24kc</samp>, <samp>24kf2_1</samp>, <samp>24kf1_1</samp>,
<samp>24kec</samp>, <samp>24kef2_1</samp>, <samp>24kef1_1</samp>,
<samp>34kc</samp>, <samp>34kf2_1</samp>, <samp>34kf1_1</samp>, <samp>34kn</samp>,
<samp>74kc</samp>, <samp>74kf2_1</samp>, <samp>74kf1_1</samp>, <samp>74kf3_2</samp>,
<samp>1004kc</samp>, <samp>1004kf2_1</samp>, <samp>1004kf1_1</samp>,
<samp>loongson2e</samp>, <samp>loongson2f</samp>, <samp>loongson3a</samp>,
<samp>m4k</samp>,
<samp>m14k</samp>, <samp>m14kc</samp>, <samp>m14ke</samp>, <samp>m14kec</samp>,
<samp>octeon</samp>, <samp>octeon+</samp>, <samp>octeon2</samp>, <samp>octeon3</samp>,
<samp>orion</samp>,
<samp>p5600</samp>,
<samp>r2000</samp>, <samp>r3000</samp>, <samp>r3900</samp>, <samp>r4000</samp>, <samp>r4400</samp>,
<samp>r4600</samp>, <samp>r4650</samp>, <samp>r4700</samp>, <samp>r6000</samp>, <samp>r8000</samp>,
<samp>rm7000</samp>, <samp>rm9000</samp>,
<samp>r10000</samp>, <samp>r12000</samp>, <samp>r14000</samp>, <samp>r16000</samp>,
<samp>sb1</samp>,
<samp>sr71000</samp>,
<samp>vr4100</samp>, <samp>vr4111</samp>, <samp>vr4120</samp>, <samp>vr4130</samp>, <samp>vr4300</samp>,
<samp>vr5000</samp>, <samp>vr5400</samp>, <samp>vr5500</samp>,
<samp>xlr</samp> and <samp>xlp</samp>.
The special value <samp>from-abi</samp> selects the
most compatible architecture for the selected ABI (that is,
<samp>mips1</samp> for 32-bit ABIs and <samp>mips3</samp> for 64-bit ABIs)&eosperiod;
</para>
<para>The native Linux/GNU toolchain also supports the value <samp>native</samp>,
which selects the best architecture option for the host processor.
<option>-march=native</option> has no effect if GCC does not recognize
the processor.
</para>
<para>In processor names, a final <samp>000</samp> can be abbreviated as <samp>k</samp>
(for example, <option>-march=r2k</option>).  Prefixes are optional, and
<samp>vr</samp> may be written <samp>r</samp>.
</para>
<para>Names of the form <samp><var>n</var>f2_1</samp> refer to processors with
FPUs clocked at half the rate of the core, names of the form
<samp><var>n</var>f1_1</samp> refer to processors with FPUs clocked at the same
rate as the core, and names of the form <samp><var>n</var>f3_2</samp> refer to
processors with FPUs clocked a ratio of 3:2 with respect to the core.
For compatibility reasons, <samp><var>n</var>f</samp> is accepted as a synonym
for <samp><var>n</var>f2_1</samp> while <samp><var>n</var>x</samp> and <samp><var>b</var>fx</samp> are
accepted as synonyms for <samp><var>n</var>f1_1</samp>.
</para>
<para>GCC defines two macros based on the value of this option.  The first
is <code>_MIPS_ARCH</code>, which gives the name of target architecture, as
a string.  The second has the form <code>_MIPS_ARCH_<var>foo</var></code>,
where <var>foo</var> is the capitalized value of <code>_MIPS_ARCH</code>&eosperiod;
For example, <option>-march=r2000</option> sets <code>_MIPS_ARCH</code>
to <code>&quot;r2000&quot;</code> and defines the macro <code>_MIPS_ARCH_R2000</code>.
</para>
<para>Note that the <code>_MIPS_ARCH</code> macro uses the processor names given
above.  In other words, it has the full prefix and does not
abbreviate <samp>000</samp> as <samp>k</samp>.  In the case of <samp>from-abi</samp>,
the macro names the resolved architecture (either <code>&quot;mips1&quot;</code> or
<code>&quot;mips3&quot;</code>).  It names the default architecture when no
<option>-march</option> option is given.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>arch</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1734" incode="1">mtune</indexterm></indexcommand>
<para>Optimize for <var>arch</var>.  Among other things, this option controls
the way instructions are scheduled, and the perceived cost of arithmetic
operations.  The list of <var>arch</var> values is the same as for
<option>-march</option>.
</para>
<para>When this option is not used, GCC optimizes for the processor
specified by <option>-march</option>.  By using <option>-march</option> and
<option>-mtune</option> together, it is possible to generate code that
runs on a family of processors, but optimize the code for one
particular member of that family.
</para>
<para><option>-mtune</option> defines the macros <code>_MIPS_TUNE</code> and
<code>_MIPS_TUNE_<var>foo</var></code>, which work in the same way as the
<option>-march</option> ones described above.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips1</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1735" incode="1">mips1</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips1</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1736" incode="1">mips2</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips2</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips3</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1737" incode="1">mips3</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips4</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1738" incode="1">mips4</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips4</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1739" incode="1">mips32</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips32</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips32r3</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1740" incode="1">mips32r3</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips32r3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips32r5</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1741" incode="1">mips32r5</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips32r5</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips32r6</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1742" incode="1">mips32r6</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips32r6</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips64</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1743" incode="1">mips64</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips64</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips64r2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1744" incode="1">mips64r2</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips64r2</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips64r3</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1745" incode="1">mips64r3</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips64r3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips64r5</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1746" incode="1">mips64r5</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips64r5</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips64r6</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1747" incode="1">mips64r6</indexterm></indexcommand>
<para>Equivalent to <option>-march=mips64r6</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips16</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-mips16</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1748" incode="1">mips16</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1749" incode="1">mno-mips16</indexterm></indexcommand>
<para>Generate (do not generate) MIPS16 code.  If GCC is targeting a
MIPS32 or MIPS64 architecture, it makes use of the MIPS16e ASE&eosperiod;
</para>
<para>MIPS16 code generation can also be controlled on a per-function basis
by means of <code>mips16</code> and <code>nomips16</code> attributes.
<xref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></xref>, for more information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mflip-mips16</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1750" incode="1">mflip-mips16</indexterm></indexcommand>
<para>Generate MIPS16 code on alternating functions.  This option is provided
for regression testing of mixed MIPS16/non-MIPS16 code generation, and is
not intended for ordinary use in compiling user code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minterlink-compressed</itemformat></item>
</tableterm></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-interlink-compressed</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1751" incode="1">minterlink-compressed</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1752" incode="1">mno-interlink-compressed</indexterm></indexcommand>
<para>Require (do not require) that code using the standard (uncompressed) MIPS ISA
be link-compatible with MIPS16 and microMIPS code, and vice versa.
</para>
<para>For example, code using the standard ISA encoding cannot jump directly
to MIPS16 or microMIPS code; it must either use a call or an indirect jump.
<option>-minterlink-compressed</option> therefore disables direct jumps unless GCC
knows that the target of the jump is not compressed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minterlink-mips16</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-interlink-mips16</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1753" incode="1">minterlink-mips16</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1754" incode="1">mno-interlink-mips16</indexterm></indexcommand>
<para>Aliases of <option>-minterlink-compressed</option> and
<option>-mno-interlink-compressed</option>.  These options predate the microMIPS ASE
and are retained for backwards compatibility.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabi=32</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mabi=o64</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mabi=n32</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mabi=64</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mabi=eabi</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1755" incode="1">mabi=32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1756" incode="1">mabi=o64</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1757" incode="1">mabi=n32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1758" incode="1">mabi=64</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1759" incode="1">mabi=eabi</indexterm></indexcommand>
<para>Generate code for the given ABI&eosperiod;
</para>
<para>Note that the EABI has a 32-bit and a 64-bit variant.  GCC normally
generates 64-bit code when you select a 64-bit architecture, but you
can use <option>-mgp32</option> to get 32-bit code instead.
</para>
<para>For information about the O64 ABI, see
<uref><urefurl>http://gcc.gnu.org/&slashbreak;projects/&slashbreak;mipso64-abi.html</urefurl></uref>.
</para>
<para>GCC supports a variant of the o32 ABI in which floating-point registers
are 64 rather than 32 bits wide.  You can select this combination with
<option>-mabi=32</option> <option>-mfp64</option>.  This ABI relies on the <code>mthc1</code>
and <code>mfhc1</code> instructions and is therefore only supported for
MIPS32R2, MIPS32R3 and MIPS32R5 processors.
</para>
<para>The register assignments for arguments and return values remain the
same, but each scalar value is passed in a single 64-bit register
rather than a pair of 32-bit registers.  For example, scalar
floating-point values are returned in <samp>$f0</samp> only, not a
<samp>$f0</samp>/<samp>$f1</samp> pair.  The set of call-saved registers also
remains the same in that the even-numbered double-precision registers
are saved.
</para>
<para>Two additional variants of the o32 ABI are supported to enable
a transition from 32-bit to 64-bit registers.  These are FPXX
(<option>-mfpxx</option>) and FP64A (<option>-mfp64</option> <option>-mno-odd-spreg</option>).
The FPXX extension mandates that all code must execute correctly
when run using 32-bit or 64-bit registers.  The code can be interlinked
with either FP32 or FP64, but not both.
The FP64A extension is similar to the FP64 extension but forbids the
use of odd-numbered single-precision registers.  This can be used
in conjunction with the <code>FRE</code> mode of FPUs in MIPS32R5
processors and allows both FP32 and FP64A code to interlink and
run in the same process without changing FPU modes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabicalls</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-abicalls</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1760" incode="1">mabicalls</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1761" incode="1">mno-abicalls</indexterm></indexcommand>
<para>Generate (do not generate) code that is suitable for SVR4-style
dynamic objects.  <option>-mabicalls</option> is the default for SVR4-based
systems.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mshared</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-shared</itemformat></itemx>
</tableterm><tableitem><para>Generate (do not generate) code that is fully position-independent,
and that can therefore be linked into shared libraries.  This option
only affects <option>-mabicalls</option>.
</para>
<para>All <option>-mabicalls</option> code has traditionally been position-independent,
regardless of options like <option>-fPIC</option> and <option>-fpic</option>.  However,
as an extension, the GNU toolchain allows executables to use absolute
accesses for locally-binding symbols.  It can also use shorter GP
initialization sequences and generate direct calls to locally-defined
functions.  This mode is selected by <option>-mno-shared</option>.
</para>
<para><option>-mno-shared</option> depends on binutils 2.16 or higher and generates
objects that can only be linked by the GNU linker.  However, the option
does not affect the ABI of the final executable; it only affects the ABI
of relocatable objects.  Using <option>-mno-shared</option> generally makes
executables both smaller and quicker.
</para>
<para><option>-mshared</option> is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mplt</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-plt</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1762" incode="1">mplt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1763" incode="1">mno-plt</indexterm></indexcommand>
<para>Assume (do not assume) that the static and dynamic linkers
support PLTs and copy relocations.  This option only affects
<option>-mno-shared -mabicalls</option>.  For the n64 ABI, this option
has no effect without <option>-msym32</option>.
</para>
<para>You can make <option>-mplt</option> the default by configuring
GCC with <option>--with-mips-plt</option>.  The default is
<option>-mno-plt</option> otherwise.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxgot</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-xgot</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1764" incode="1">mxgot</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1765" incode="1">mno-xgot</indexterm></indexcommand>
<para>Lift (do not lift) the usual restrictions on the size of the global
offset table.
</para>
<para>GCC normally uses a single instruction to load values from the GOT&eosperiod;
While this is relatively efficient, it only works if the GOT
is smaller than about 64k.  Anything larger causes the linker
to report an error such as:
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="195">relocation truncated to fit (MIPS)</indexterm></cindex>
<smallexample endspaces=" ">
<pre xml:space="preserve">relocation truncated to fit: R_MIPS_GOT16 foobar
</pre></smallexample>

<para>If this happens, you should recompile your code with <option>-mxgot</option>.
This works with very large GOTs, although the code is also
less efficient, since it takes three instructions to fetch the
value of a global symbol.
</para>
<para>Note that some linkers can create multiple GOTs.  If you have such a
linker, you should only need to use <option>-mxgot</option> when a single object
file accesses more than 64k&textrsquo;s worth of GOT entries.  Very few do.
</para>
<para>These options have no effect unless GCC is generating position
independent code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgp32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1766" incode="1">mgp32</indexterm></indexcommand>
<para>Assume that general-purpose registers are 32 bits wide.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgp64</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1767" incode="1">mgp64</indexterm></indexcommand>
<para>Assume that general-purpose registers are 64 bits wide.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfp32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1768" incode="1">mfp32</indexterm></indexcommand>
<para>Assume that floating-point registers are 32 bits wide.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfp64</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1769" incode="1">mfp64</indexterm></indexcommand>
<para>Assume that floating-point registers are 64 bits wide.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfpxx</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1770" incode="1">mfpxx</indexterm></indexcommand>
<para>Do not assume the width of floating-point registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mhard-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1771" incode="1">mhard-float</indexterm></indexcommand>
<para>Use floating-point coprocessor instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msoft-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1772" incode="1">msoft-float</indexterm></indexcommand>
<para>Do not use floating-point coprocessor instructions.  Implement
floating-point calculations using library calls instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1773" incode="1">mno-float</indexterm></indexcommand>
<para>Equivalent to <option>-msoft-float</option>, but additionally asserts that the
program being compiled does not perform any floating-point operations.
This option is presently supported only by some bare-metal MIPS
configurations, where it may select a special set of libraries
that lack all floating-point support (including, for example, the
floating-point <code>printf</code> formats).  
If code compiled with <option>-mno-float</option> accidentally contains
floating-point operations, it is likely to suffer a link-time
or run-time failure.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msingle-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1774" incode="1">msingle-float</indexterm></indexcommand>
<para>Assume that the floating-point coprocessor only supports single-precision
operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdouble-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1775" incode="1">mdouble-float</indexterm></indexcommand>
<para>Assume that the floating-point coprocessor supports double-precision
operations.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-modd-spreg</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-odd-spreg</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1776" incode="1">modd-spreg</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1777" incode="1">mno-odd-spreg</indexterm></indexcommand>
<para>Enable the use of odd-numbered single-precision floating-point registers
for the o32 ABI.  This is the default for processors that are known to
support these registers.  When using the o32 FPXX ABI, <option>-mno-odd-spreg</option>
is set by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabs=2008</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mabs=legacy</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1778" incode="1">mabs=2008</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1779" incode="1">mabs=legacy</indexterm></indexcommand>
<para>These options control the treatment of the special not-a-number (NaN)
IEEE 754 floating-point data with the <code>abs.<i>fmt</i></code> and
<code>neg.<i>fmt</i></code> machine instructions.
</para>
<para>By default or when <option>-mabs=legacy</option> is used the legacy
treatment is selected.  In this case these instructions are considered
arithmetic and avoided where correct operation is required and the
input operand might be a NaN.  A longer sequence of instructions that
manipulate the sign bit of floating-point datum manually is used
instead unless the <option>-ffinite-math-only</option> option has also been
specified.
</para>
<para>The <option>-mabs=2008</option> option selects the IEEE 754-2008 treatment.  In
this case these instructions are considered non-arithmetic and therefore
operating correctly in all cases, including in particular where the
input operand is a NaN.  These instructions are therefore always used
for the respective operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnan=2008</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mnan=legacy</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1780" incode="1">mnan=2008</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1781" incode="1">mnan=legacy</indexterm></indexcommand>
<para>These options control the encoding of the special not-a-number (NaN)
IEEE 754 floating-point data.
</para>
<para>The <option>-mnan=legacy</option> option selects the legacy encoding.  In this
case quiet NaNs (qNaNs) are denoted by the first bit of their trailing
significand field being 0, whereas signalling NaNs (sNaNs) are denoted
by the first bit of their trailing significand field being 1.
</para>
<para>The <option>-mnan=2008</option> option selects the IEEE 754-2008 encoding.  In
this case qNaNs are denoted by the first bit of their trailing
significand field being 1, whereas sNaNs are denoted by the first bit of
their trailing significand field being 0.
</para>
<para>The default is <option>-mnan=legacy</option> unless GCC has been configured with
<option>--with-nan=2008</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mllsc</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-llsc</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1782" incode="1">mllsc</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1783" incode="1">mno-llsc</indexterm></indexcommand>
<para>Use (do not use) <samp>ll</samp>, <samp>sc</samp>, and <samp>sync</samp> instructions to
implement atomic memory built-in functions.  When neither option is
specified, GCC uses the instructions if the target architecture
supports them.
</para>
<para><option>-mllsc</option> is useful if the runtime environment can emulate the
instructions and <option>-mno-llsc</option> can be useful when compiling for
nonstandard ISAs.  You can make either option the default by
configuring GCC with <option>--with-llsc</option> and <option>--without-llsc</option>
respectively.  <option>--with-llsc</option> is the default for some
configurations; see the installation documentation for details.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdsp</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-dsp</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1784" incode="1">mdsp</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1785" incode="1">mno-dsp</indexterm></indexcommand>
<para>Use (do not use) revision 1 of the MIPS DSP ASE&eosperiod;
<xref label="MIPS-DSP-Built_002din-Functions"><xrefnodename>MIPS DSP Built-in Functions</xrefnodename></xref>.  This option defines the
preprocessor macro <code>__mips_dsp</code>.  It also defines
<code>__mips_dsp_rev</code> to 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdspr2</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-dspr2</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1786" incode="1">mdspr2</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1787" incode="1">mno-dspr2</indexterm></indexcommand>
<para>Use (do not use) revision 2 of the MIPS DSP ASE&eosperiod;
<xref label="MIPS-DSP-Built_002din-Functions"><xrefnodename>MIPS DSP Built-in Functions</xrefnodename></xref>.  This option defines the
preprocessor macros <code>__mips_dsp</code> and <code>__mips_dspr2</code>.
It also defines <code>__mips_dsp_rev</code> to 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msmartmips</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-smartmips</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1788" incode="1">msmartmips</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1789" incode="1">mno-smartmips</indexterm></indexcommand>
<para>Use (do not use) the MIPS SmartMIPS ASE.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpaired-single</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-paired-single</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1790" incode="1">mpaired-single</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1791" incode="1">mno-paired-single</indexterm></indexcommand>
<para>Use (do not use) paired-single floating-point instructions.
<xref label="MIPS-Paired_002dSingle-Support"><xrefnodename>MIPS Paired-Single Support</xrefnodename></xref>.  This option requires
hardware floating-point support to be enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdmx</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-mdmx</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1792" incode="1">mdmx</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1793" incode="1">mno-mdmx</indexterm></indexcommand>
<para>Use (do not use) MIPS Digital Media Extension instructions.
This option can only be used when generating 64-bit code and requires
hardware floating-point support to be enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mips3d</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-mips3d</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1794" incode="1">mips3d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1795" incode="1">mno-mips3d</indexterm></indexcommand>
<para>Use (do not use) the MIPS-3D ASE&eosperiod;  <xref label="MIPS_002d3D-Built_002din-Functions"><xrefnodename>MIPS-3D Built-in Functions</xrefnodename></xref>.
The option <option>-mips3d</option> implies <option>-mpaired-single</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmicromips</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-micromips</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1796" incode="1">mmicromips</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1797" incode="1">mno-mmicromips</indexterm></indexcommand>
<para>Generate (do not generate) microMIPS code.
</para>
<para>MicroMIPS code generation can also be controlled on a per-function basis
by means of <code>micromips</code> and <code>nomicromips</code> attributes.
<xref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></xref>, for more information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmt</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-mt</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1798" incode="1">mmt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1799" incode="1">mno-mt</indexterm></indexcommand>
<para>Use (do not use) MT Multithreading instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmcu</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-mcu</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1800" incode="1">mmcu</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1801" incode="1">mno-mcu</indexterm></indexcommand>
<para>Use (do not use) the MIPS MCU ASE instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-meva</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-eva</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1802" incode="1">meva</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1803" incode="1">mno-eva</indexterm></indexcommand>
<para>Use (do not use) the MIPS Enhanced Virtual Addressing instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvirt</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-virt</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1804" incode="1">mvirt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1805" incode="1">mno-virt</indexterm></indexcommand>
<para>Use (do not use) the MIPS Virtualization Application Specific instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxpa</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-xpa</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1806" incode="1">mxpa</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1807" incode="1">mno-xpa</indexterm></indexcommand>
<para>Use (do not use) the MIPS eXtended Physical Address (XPA) instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong64</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1808" incode="1">mlong64</indexterm></indexcommand>
<para>Force <code>long</code> types to be 64 bits wide.  See <option>-mlong32</option> for
an explanation of the default and the way that the pointer size is
determined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1809" incode="1">mlong32</indexterm></indexcommand>
<para>Force <code>long</code>, <code>int</code>, and pointer types to be 32 bits wide.
</para>
<para>The default size of <code>int</code>s, <code>long</code>s and pointers depends on
the ABI&eosperiod;  All the supported ABIs use 32-bit <code>int</code>s.  The n64 ABI
uses 64-bit <code>long</code>s, as does the 64-bit EABI; the others use
32-bit <code>long</code>s.  Pointers are the same size as <code>long</code>s,
or the same size as integer registers, whichever is smaller.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msym32</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-sym32</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1810" incode="1">msym32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1811" incode="1">mno-sym32</indexterm></indexcommand>
<para>Assume (do not assume) that all symbols have 32-bit values, regardless
of the selected ABI&eosperiod;  This option is useful in combination with
<option>-mabi=64</option> and <option>-mno-abicalls</option> because it allows GCC
to generate shorter and faster references to symbolic addresses.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-G <var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1812" incode="1">G</indexterm></indexcommand>
<para>Put definitions of externally-visible data in a small data section
if that data is no bigger than <var>num</var> bytes.  GCC can then generate
more efficient accesses to the data; see <option>-mgpopt</option> for details.
</para>
<para>The default <option>-G</option> option depends on the configuration.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlocal-sdata</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-local-sdata</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1813" incode="1">mlocal-sdata</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1814" incode="1">mno-local-sdata</indexterm></indexcommand>
<para>Extend (do not extend) the <option>-G</option> behavior to local data too,
such as to static variables in C&eosperiod;  <option>-mlocal-sdata</option> is the
default for all configurations.
</para>
<para>If the linker complains that an application is using too much small data,
you might want to try rebuilding the less performance-critical parts with
<option>-mno-local-sdata</option>.  You might also want to build large
libraries with <option>-mno-local-sdata</option>, so that the libraries leave
more room for the main program.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mextern-sdata</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-extern-sdata</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1815" incode="1">mextern-sdata</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1816" incode="1">mno-extern-sdata</indexterm></indexcommand>
<para>Assume (do not assume) that externally-defined data is in
a small data section if the size of that data is within the <option>-G</option> limit.
<option>-mextern-sdata</option> is the default for all configurations.
</para>
<para>If you compile a module <var>Mod</var> with <option>-mextern-sdata</option> <option>-G
<var>num</var></option> <option>-mgpopt</option>, and <var>Mod</var> references a variable <var>Var</var>
that is no bigger than <var>num</var> bytes, you must make sure that <var>Var</var>
is placed in a small data section.  If <var>Var</var> is defined by another
module, you must either compile that module with a high-enough
<option>-G</option> setting or attach a <code>section</code> attribute to <var>Var</var>&textrsquo;s
definition.  If <var>Var</var> is common, you must link the application
with a high-enough <option>-G</option> setting.
</para>
<para>The easiest way of satisfying these restrictions is to compile
and link every module with the same <option>-G</option> option.  However,
you may wish to build a library that supports several different
small data limits.  You can do this by compiling the library with
the highest supported <option>-G</option> setting and additionally using
<option>-mno-extern-sdata</option> to stop the library from making assumptions
about externally-defined data.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgpopt</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-gpopt</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1817" incode="1">mgpopt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1818" incode="1">mno-gpopt</indexterm></indexcommand>
<para>Use (do not use) GP-relative accesses for symbols that are known to be
in a small data section; see <option>-G</option>, <option>-mlocal-sdata</option> and
<option>-mextern-sdata</option>.  <option>-mgpopt</option> is the default for all
configurations.
</para>
<para><option>-mno-gpopt</option> is useful for cases where the <code>$gp</code> register
might not hold the value of <code>_gp</code>.  For example, if the code is
part of a library that might be used in a boot monitor, programs that
call boot monitor routines pass an unknown value in <code>$gp</code>.
(In such situations, the boot monitor itself is usually compiled
with <option>-G0</option>.)
</para>
<para><option>-mno-gpopt</option> implies <option>-mno-local-sdata</option> and
<option>-mno-extern-sdata</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-membedded-data</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-embedded-data</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1819" incode="1">membedded-data</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1820" incode="1">mno-embedded-data</indexterm></indexcommand>
<para>Allocate variables to the read-only data section first if possible, then
next in the small data section if possible, otherwise in data.  This gives
slightly slower code than the default, but reduces the amount of RAM required
when executing, and thus may be preferred for some embedded systems.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-muninit-const-in-rodata</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-uninit-const-in-rodata</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1821" incode="1">muninit-const-in-rodata</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1822" incode="1">mno-uninit-const-in-rodata</indexterm></indexcommand>
<para>Put uninitialized <code>const</code> variables in the read-only data section.
This option is only meaningful in conjunction with <option>-membedded-data</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcode-readable=<var>setting</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1823" incode="1">mcode-readable</indexterm></indexcommand>
<para>Specify whether GCC may generate code that reads from executable sections.
There are three possible settings:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mcode-readable=yes</itemformat></item>
</tableterm><tableitem><para>Instructions may freely access executable sections.  This is the
default setting.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcode-readable=pcrel</itemformat></item>
</tableterm><tableitem><para>MIPS16 PC-relative load instructions can access executable sections,
but other instructions must not do so.  This option is useful on 4KSc
and 4KSd processors when the code TLBs have the Read Inhibit bit set.
It is also useful on processors that can be configured to have a dual
instruction/data SRAM interface and that, like the M4K, automatically
redirect PC-relative loads to the instruction RAM.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcode-readable=no</itemformat></item>
</tableterm><tableitem><para>Instructions must not access executable sections.  This option can be
useful on targets that are configured to have a dual instruction/data
SRAM interface but that (unlike the M4K) do not automatically redirect
PC-relative loads to the instruction RAM.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msplit-addresses</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-split-addresses</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1824" incode="1">msplit-addresses</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1825" incode="1">mno-split-addresses</indexterm></indexcommand>
<para>Enable (disable) use of the <code>%hi()</code> and <code>%lo()</code> assembler
relocation operators.  This option has been superseded by
<option>-mexplicit-relocs</option> but is retained for backwards compatibility.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mexplicit-relocs</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-explicit-relocs</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1826" incode="1">mexplicit-relocs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1827" incode="1">mno-explicit-relocs</indexterm></indexcommand>
<para>Use (do not use) assembler relocation operators when dealing with symbolic
addresses.  The alternative, selected by <option>-mno-explicit-relocs</option>,
is to use assembler macros instead.
</para>
<para><option>-mexplicit-relocs</option> is the default if GCC was configured
to use an assembler that supports relocation operators.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcheck-zero-division</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-check-zero-division</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1828" incode="1">mcheck-zero-division</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1829" incode="1">mno-check-zero-division</indexterm></indexcommand>
<para>Trap (do not trap) on integer division by zero.
</para>
<para>The default is <option>-mcheck-zero-division</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdivide-traps</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mdivide-breaks</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1830" incode="1">mdivide-traps</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1831" incode="1">mdivide-breaks</indexterm></indexcommand>
<para>MIPS systems check for division by zero by generating either a
conditional trap or a break instruction.  Using traps results in
smaller code, but is only supported on MIPS II and later.  Also, some
versions of the Linux kernel have a bug that prevents trap from
generating the proper signal (<code>SIGFPE</code>).  Use <option>-mdivide-traps</option> to
allow conditional traps on architectures that support them and
<option>-mdivide-breaks</option> to force the use of breaks.
</para>
<para>The default is usually <option>-mdivide-traps</option>, but this can be
overridden at configure time using <option>--with-divide=breaks</option>.
Divide-by-zero checks can be completely disabled using
<option>-mno-check-zero-division</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmemcpy</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-memcpy</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1832" incode="1">mmemcpy</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1833" incode="1">mno-memcpy</indexterm></indexcommand>
<para>Force (do not force) the use of <code>memcpy</code> for non-trivial block
moves.  The default is <option>-mno-memcpy</option>, which allows GCC to inline
most constant-sized copies.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong-calls</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-long-calls</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1834" incode="1">mlong-calls</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1835" incode="1">mno-long-calls</indexterm></indexcommand>
<para>Disable (do not disable) use of the <code>jal</code> instruction.  Calling
functions using <code>jal</code> is more efficient but requires the caller
and callee to be in the same 256 megabyte segment.
</para>
<para>This option has no effect on abicalls code.  The default is
<option>-mno-long-calls</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmad</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-mad</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1836" incode="1">mmad</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1837" incode="1">mno-mad</indexterm></indexcommand>
<para>Enable (disable) use of the <code>mad</code>, <code>madu</code> and <code>mul</code>
instructions, as provided by the R4650 ISA&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mimadd</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-imadd</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1838" incode="1">mimadd</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1839" incode="1">mno-imadd</indexterm></indexcommand>
<para>Enable (disable) use of the <code>madd</code> and <code>msub</code> integer
instructions.  The default is <option>-mimadd</option> on architectures
that support <code>madd</code> and <code>msub</code> except for the 74k 
architecture where it was found to generate slower code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfused-madd</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fused-madd</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1840" incode="1">mfused-madd</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1841" incode="1">mno-fused-madd</indexterm></indexcommand>
<para>Enable (disable) use of the floating-point multiply-accumulate
instructions, when they are available.  The default is
<option>-mfused-madd</option>.
</para>
<para>On the R8000 CPU when multiply-accumulate instructions are used,
the intermediate product is calculated to infinite precision
and is not subject to the FCSR Flush to Zero bit.  This may be
undesirable in some circumstances.  On other processors the result
is numerically identical to the equivalent computation using
separate multiply, add, subtract and negate instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-nocpp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1842" incode="1">nocpp</indexterm></indexcommand>
<para>Tell the MIPS assembler to not run its preprocessor over user
assembler files (with a <samp>.s</samp> suffix) when assembling them.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-24k</itemformat></item>
</tableterm></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-fix-24k</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1843" incode="1">mfix-24k</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1844" incode="1">mno-fix-24k</indexterm></indexcommand>
<para>Work around the 24K E48 (lost data on stores during refill) errata.
The workarounds are implemented by the assembler rather than by GCC&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-r4000</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fix-r4000</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1845" incode="1">mfix-r4000</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1846" incode="1">mno-fix-r4000</indexterm></indexcommand>
<para>Work around certain R4000 CPU errata:
</para><itemize commandarg="minus" spaces=" " endspaces=" "><itemprepend><formattingcommand command="minus"/></itemprepend>
<listitem><prepend>&minus;</prepend>
<para>A double-word or a variable shift may give an incorrect result if executed
immediately after starting an integer division.
</para></listitem><listitem><prepend>&minus;</prepend>
<para>A double-word or a variable shift may give an incorrect result if executed
while an integer multiplication is in progress.
</para></listitem><listitem><prepend>&minus;</prepend>
<para>An integer division may give an incorrect result if started in a delay slot
of a taken branch or a jump.
</para></listitem></itemize>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-r4400</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fix-r4400</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1847" incode="1">mfix-r4400</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1848" incode="1">mno-fix-r4400</indexterm></indexcommand>
<para>Work around certain R4400 CPU errata:
</para><itemize commandarg="minus" spaces=" " endspaces=" "><itemprepend><formattingcommand command="minus"/></itemprepend>
<listitem><prepend>&minus;</prepend>
<para>A double-word or a variable shift may give an incorrect result if executed
immediately after starting an integer division.
</para></listitem></itemize>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-r10000</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fix-r10000</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1849" incode="1">mfix-r10000</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1850" incode="1">mno-fix-r10000</indexterm></indexcommand>
<para>Work around certain R10000 errata:
</para><itemize commandarg="minus" spaces=" " endspaces=" "><itemprepend><formattingcommand command="minus"/></itemprepend>
<listitem><prepend>&minus;</prepend>
<para><code>ll</code>/<code>sc</code> sequences may not behave atomically on revisions
prior to 3.0.  They may deadlock on revisions 2.6 and earlier.
</para></listitem></itemize>

<para>This option can only be used if the target architecture supports
branch-likely instructions.  <option>-mfix-r10000</option> is the default when
<option>-march=r10000</option> is used; <option>-mno-fix-r10000</option> is the default
otherwise.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-rm7000</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fix-rm7000</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1851" incode="1">mfix-rm7000</indexterm></indexcommand>
<para>Work around the RM7000 <code>dmult</code>/<code>dmultu</code> errata.  The
workarounds are implemented by the assembler rather than by GCC&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-vr4120</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fix-vr4120</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1852" incode="1">mfix-vr4120</indexterm></indexcommand>
<para>Work around certain VR4120 errata:
</para><itemize commandarg="minus" spaces=" " endspaces=" "><itemprepend><formattingcommand command="minus"/></itemprepend>
<listitem><prepend>&minus;</prepend>
<para><code>dmultu</code> does not always produce the correct result.
</para></listitem><listitem><prepend>&minus;</prepend>
<para><code>div</code> and <code>ddiv</code> do not always produce the correct result if one
of the operands is negative.
</para></listitem></itemize>
<para>The workarounds for the division errata rely on special functions in
<file>libgcc.a</file>.  At present, these functions are only provided by
the <code>mips64vr*-elf</code> configurations.
</para>
<para>Other VR4120 errata require a NOP to be inserted between certain pairs of
instructions.  These errata are handled by the assembler, not by GCC itself.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-vr4130</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1853" incode="1">mfix-vr4130</indexterm></indexcommand>
<para>Work around the VR4130 <code>mflo</code>/<code>mfhi</code> errata.  The
workarounds are implemented by the assembler rather than by GCC,
although GCC avoids using <code>mflo</code> and <code>mfhi</code> if the
VR4130 <code>macc</code>, <code>macchi</code>, <code>dmacc</code> and <code>dmacchi</code>
instructions are available instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-sb1</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fix-sb1</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1854" incode="1">mfix-sb1</indexterm></indexcommand>
<para>Work around certain SB-1 CPU core errata.
(This flag currently works around the SB-1 revision 2
&textldquo;F1&textrdquo; and &textldquo;F2&textrdquo; floating-point errata.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mr10k-cache-barrier=<var>setting</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1855" incode="1">mr10k-cache-barrier</indexterm></indexcommand>
<para>Specify whether GCC should insert cache barriers to avoid the
side-effects of speculation on R10K processors.
</para>
<para>In common with many processors, the R10K tries to predict the outcome
of a conditional branch and speculatively executes instructions from
the &textldquo;taken&textrdquo; branch.  It later aborts these instructions if the
predicted outcome is wrong.  However, on the R10K, even aborted
instructions can have side effects.
</para>
<para>This problem only affects kernel stores and, depending on the system,
kernel loads.  As an example, a speculatively-executed store may load
the target memory into cache and mark the cache line as dirty, even if
the store itself is later aborted.  If a DMA operation writes to the
same area of memory before the &textldquo;dirty&textrdquo; line is flushed, the cached
data overwrites the DMA-ed data.  See the R10K processor manual
for a full description, including other potential problems.
</para>
<para>One workaround is to insert cache barrier instructions before every memory
access that might be speculatively executed and that might have side
effects even if aborted.  <option>-mr10k-cache-barrier=<var>setting</var></option>
controls GCC&textrsquo;s implementation of this workaround.  It assumes that
aborted accesses to any byte in the following regions does not have
side effects:
</para>
<enumerate first="1" endspaces=" ">
<listitem>
<para>the memory occupied by the current function&textrsquo;s stack frame;
</para>
</listitem><listitem>
<para>the memory occupied by an incoming stack argument;
</para>
</listitem><listitem>
<para>the memory occupied by an object with a link-time-constant address.
</para></listitem></enumerate>

<para>It is the kernel&textrsquo;s responsibility to ensure that speculative
accesses to these regions are indeed safe.
</para>
<para>If the input program contains a function declaration such as:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void foo (void);
</pre></smallexample>

<para>then the implementation of <code>foo</code> must allow <code>j foo</code> and
<code>jal foo</code> to be executed speculatively.  GCC honors this
restriction for functions it compiles itself.  It expects non-GCC
functions (such as hand-written assembly code) to do the same.
</para>
<para>The option has three forms:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mr10k-cache-barrier=load-store</itemformat></item>
</tableterm><tableitem><para>Insert a cache barrier before a load or store that might be
speculatively executed and that might have side effects even
if aborted.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mr10k-cache-barrier=store</itemformat></item>
</tableterm><tableitem><para>Insert a cache barrier before a store that might be speculatively
executed and that might have side effects even if aborted.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mr10k-cache-barrier=none</itemformat></item>
</tableterm><tableitem><para>Disable the insertion of cache barriers.  This is the default setting.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mflush-func=<var>func</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-flush-func</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1856" incode="1">mflush-func</indexterm></indexcommand>
<para>Specifies the function to call to flush the I and D caches, or to not
call any such function.  If called, the function must take the same
arguments as the common <code>_flush_func</code>, that is, the address of the
memory range for which the cache is being flushed, the size of the
memory range, and the number 3 (to flush both caches).  The default
depends on the target GCC was configured for, but commonly is either
<code>_flush_func</code> or <code>__cpu_flush</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">mbranch-cost=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1857" incode="1">mbranch-cost</indexterm></indexcommand>
<para>Set the cost of branches to roughly <var>num</var> &textldquo;simple&textrdquo; instructions.
This cost is only a heuristic and is not guaranteed to produce
consistent results across releases.  A zero cost redundantly selects
the default, which is based on the <option>-mtune</option> setting.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbranch-likely</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-branch-likely</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1858" incode="1">mbranch-likely</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1859" incode="1">mno-branch-likely</indexterm></indexcommand>
<para>Enable or disable use of Branch Likely instructions, regardless of the
default for the selected architecture.  By default, Branch Likely
instructions may be generated if they are supported by the selected
architecture.  An exception is for the MIPS32 and MIPS64 architectures
and processors that implement those architectures; for those, Branch
Likely instructions are not be generated by default because the MIPS32
and MIPS64 architectures specifically deprecate their use.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfp-exceptions</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fp-exceptions</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1860" incode="1">mfp-exceptions</indexterm></indexcommand>
<para>Specifies whether FP exceptions are enabled.  This affects how
FP instructions are scheduled for some processors.
The default is that FP exceptions are
enabled.
</para>
<para>For instance, on the SB-1, if FP exceptions are disabled, and we are emitting
64-bit code, then we can use both FP pipes.  Otherwise, we can only use one
FP pipe.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvr4130-align</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-vr4130-align</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1861" incode="1">mvr4130-align</indexterm></indexcommand>
<para>The VR4130 pipeline is two-way superscalar, but can only issue two
instructions together if the first one is 8-byte aligned.  When this
option is enabled, GCC aligns pairs of instructions that it
thinks should execute in parallel.
</para>
<para>This option only has an effect when optimizing for the VR4130.
It normally makes code faster, but at the expense of making it bigger.
It is enabled by default at optimization level <option>-O3</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msynci</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-synci</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1862" incode="1">msynci</indexterm></indexcommand>
<para>Enable (disable) generation of <code>synci</code> instructions on
architectures that support it.  The <code>synci</code> instructions (if
enabled) are generated when <code>__builtin___clear_cache</code> is
compiled.
</para>
<para>This option defaults to <option>-mno-synci</option>, but the default can be
overridden by configuring GCC with <option>--with-synci</option>.
</para>
<para>When compiling code for single processor systems, it is generally safe
to use <code>synci</code>.  However, on many multi-core (SMP) systems, it
does not invalidate the instruction caches on all cores and may lead
to undefined behavior.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrelax-pic-calls</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-relax-pic-calls</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1863" incode="1">mrelax-pic-calls</indexterm></indexcommand>
<para>Try to turn PIC calls that are normally dispatched via register
<code>$25</code> into direct calls.  This is only possible if the linker can
resolve the destination at link-time and if the destination is within
range for a direct call.
</para>
<para><option>-mrelax-pic-calls</option> is the default if GCC was configured to use
an assembler and a linker that support the <code>.reloc</code> assembly
directive and <option>-mexplicit-relocs</option> is in effect.  With
<option>-mno-explicit-relocs</option>, this optimization can be performed by the
assembler and the linker alone without help from the compiler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmcount-ra-address</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-mcount-ra-address</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1864" incode="1">mmcount-ra-address</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1865" incode="1">mno-mcount-ra-address</indexterm></indexcommand>
<para>Emit (do not emit) code that allows <code>_mcount</code> to modify the
calling function&textrsquo;s return address.  When enabled, this option extends
the usual <code>_mcount</code> interface with a new <var>ra-address</var>
parameter, which has type <code>intptr_t *</code> and is passed in register
<code>$12</code>.  <code>_mcount</code> can then modify the return address by
doing both of the following:
</para><itemize commandarg="bullet" endspaces=" ">
<listitem><prepend>&bullet;</prepend>
<para>Returning the new address in register <code>$31</code>.
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>Storing the new address in <code>*<var>ra-address</var></code>,
if <var>ra-address</var> is nonnull.
</para></listitem></itemize>

<para>The default is <option>-mno-mcount-ra-address</option>.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="MMIX-Options" spaces=" "><nodename>MMIX Options</nodename><nodenext automatic="on">MN10300 Options</nodenext><nodeprev automatic="on">MIPS Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>MMIX Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="196">MMIX Options</indexterm></cindex>

<para>These options are defined for the MMIX:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mlibfuncs</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-libfuncs</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1866" incode="1">mlibfuncs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1867" incode="1">mno-libfuncs</indexterm></indexcommand>
<para>Specify that intrinsic library functions are being compiled, passing all
values in registers, no matter the size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mepsilon</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-epsilon</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1868" incode="1">mepsilon</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1869" incode="1">mno-epsilon</indexterm></indexcommand>
<para>Generate floating-point comparison instructions that compare with respect
to the <code>rE</code> epsilon register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabi=mmixware</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mabi=gnu</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1870" incode="1">mabi=mmixware</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1871" incode="1">mabi=gnu</indexterm></indexcommand>
<para>Generate code that passes function parameters and return values that (in
the called function) are seen as registers <code>$0</code> and up, as opposed to
the GNU ABI which uses global registers <code>$231</code> and up.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mzero-extend</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-zero-extend</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1872" incode="1">mzero-extend</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1873" incode="1">mno-zero-extend</indexterm></indexcommand>
<para>When reading data from memory in sizes shorter than 64 bits, use (do not
use) zero-extending load instructions by default, rather than
sign-extending ones.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mknuthdiv</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-knuthdiv</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1874" incode="1">mknuthdiv</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1875" incode="1">mno-knuthdiv</indexterm></indexcommand>
<para>Make the result of a division yielding a remainder have the same sign as
the divisor.  With the default, <option>-mno-knuthdiv</option>, the sign of the
remainder follows the sign of the dividend.  Both methods are
arithmetically valid, the latter being almost exclusively used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtoplevel-symbols</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-toplevel-symbols</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1876" incode="1">mtoplevel-symbols</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1877" incode="1">mno-toplevel-symbols</indexterm></indexcommand>
<para>Prepend (do not prepend) a <samp>:</samp> to all global symbols, so the assembly
code can be used with the <code>PREFIX</code> assembly directive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-melf</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1878" incode="1">melf</indexterm></indexcommand>
<para>Generate an executable in the ELF format, rather than the default
<samp>mmo</samp> format used by the <command>mmix</command> simulator.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbranch-predict</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-branch-predict</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1879" incode="1">mbranch-predict</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1880" incode="1">mno-branch-predict</indexterm></indexcommand>
<para>Use (do not use) the probable-branch instructions, when static branch
prediction indicates a probable branch.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbase-addresses</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-base-addresses</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1881" incode="1">mbase-addresses</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1882" incode="1">mno-base-addresses</indexterm></indexcommand>
<para>Generate (do not generate) code that uses <emph>base addresses</emph>.  Using a
base address automatically generates a request (handled by the assembler
and the linker) for a constant to be set up in a global register.  The
register is used for one or more base address requests within the range 0
to 255 from the value held in the register.  The generally leads to short
and fast code, but the number of different data items that can be
addressed is limited.  This means that a program that uses lots of static
data may require <option>-mno-base-addresses</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msingle-exit</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-single-exit</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1883" incode="1">msingle-exit</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1884" incode="1">mno-single-exit</indexterm></indexcommand>
<para>Force (do not force) generated code to have a single exit point in each
function.
</para></tableitem></tableentry></table>

</subsection>
<node name="MN10300-Options" spaces=" "><nodename>MN10300 Options</nodename><nodenext automatic="on">Moxie Options</nodenext><nodeprev automatic="on">MMIX Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>MN10300 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="197">MN10300 options</indexterm></cindex>

<para>These <option>-m</option> options are defined for Matsushita MN10300 architectures:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mmult-bug</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1885" incode="1">mmult-bug</indexterm></indexcommand>
<para>Generate code to avoid bugs in the multiply instructions for the MN10300
processors.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-mult-bug</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1886" incode="1">mno-mult-bug</indexterm></indexcommand>
<para>Do not generate code to avoid bugs in the multiply instructions for the
MN10300 processors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mam33</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1887" incode="1">mam33</indexterm></indexcommand>
<para>Generate code using features specific to the AM33 processor.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-am33</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1888" incode="1">mno-am33</indexterm></indexcommand>
<para>Do not generate code using features specific to the AM33 processor.  This
is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mam33-2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1889" incode="1">mam33-2</indexterm></indexcommand>
<para>Generate code using features specific to the AM33/2.0 processor.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mam34</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1890" incode="1">mam34</indexterm></indexcommand>
<para>Generate code using features specific to the AM34 processor.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>cpu-type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1891" incode="1">mtune</indexterm></indexcommand>
<para>Use the timing characteristics of the indicated CPU type when
scheduling instructions.  This does not change the targeted processor
type.  The CPU type must be one of <samp>mn10300</samp>, <samp>am33</samp>,
<samp>am33-2</samp> or <samp>am34</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mreturn-pointer-on-d0</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1892" incode="1">mreturn-pointer-on-d0</indexterm></indexcommand>
<para>When generating a function that returns a pointer, return the pointer
in both <code>a0</code> and <code>d0</code>.  Otherwise, the pointer is returned
only in <code>a0</code>, and attempts to call such functions without a prototype
result in errors.  Note that this option is on by default; use
<option>-mno-return-pointer-on-d0</option> to disable it.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-crt0</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1893" incode="1">mno-crt0</indexterm></indexcommand>
<para>Do not link in the C run-time initialization object file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrelax</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1894" incode="1">mrelax</indexterm></indexcommand>
<para>Indicate to the linker that it should perform a relaxation optimization pass
to shorten branches, calls and absolute memory addresses.  This option only
has an effect when used on the command line for the final link step.
</para>
<para>This option makes symbolic debugging impossible.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mliw</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1895" incode="1">mliw</indexterm></indexcommand>
<para>Allow the compiler to generate <emph>Long Instruction Word</emph>
instructions if the target is the <samp>AM33</samp> or later.  This is the
default.  This option defines the preprocessor macro <code>__LIW__</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnoliw</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1896" incode="1">mnoliw</indexterm></indexcommand>
<para>Do not allow the compiler to generate <emph>Long Instruction Word</emph>
instructions.  This option defines the preprocessor macro
<code>__NO_LIW__</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msetlb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1897" incode="1">msetlb</indexterm></indexcommand>
<para>Allow the compiler to generate the <emph>SETLB</emph> and <emph>Lcc</emph>
instructions if the target is the <samp>AM33</samp> or later.  This is the
default.  This option defines the preprocessor macro <code>__SETLB__</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnosetlb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1898" incode="1">mnosetlb</indexterm></indexcommand>
<para>Do not allow the compiler to generate <emph>SETLB</emph> or <emph>Lcc</emph>
instructions.  This option defines the preprocessor macro
<code>__NO_SETLB__</code>.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="Moxie-Options" spaces=" "><nodename>Moxie Options</nodename><nodenext automatic="on">MSP430 Options</nodenext><nodeprev automatic="on">MN10300 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>Moxie Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="198">Moxie Options</indexterm></cindex>

<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-meb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1899" incode="1">meb</indexterm></indexcommand>
<para>Generate big-endian code.  This is the default for <samp>moxie-*-*</samp>
configurations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mel</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1900" incode="1">mel</indexterm></indexcommand>
<para>Generate little-endian code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmul.x</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1901" incode="1">mmul.x</indexterm></indexcommand>
<para>Generate mul.x and umul.x instructions.  This is the default for
<samp>moxiebox-*-*</samp> configurations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-crt0</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1902" incode="1">mno-crt0</indexterm></indexcommand>
<para>Do not link in the C run-time initialization object file.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="MSP430-Options" spaces=" "><nodename>MSP430 Options</nodename><nodenext automatic="on">NDS32 Options</nodenext><nodeprev automatic="on">Moxie Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>MSP430 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="199">MSP430 Options</indexterm></cindex>

<para>These options are defined for the MSP430:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-masm-hex</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1903" incode="1">masm-hex</indexterm></indexcommand>
<para>Force assembly output to always use hex constants.  Normally such
constants are signed decimals, but this option is available for
testsuite and/or aesthetic purposes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmcu=</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1904" incode="1">mmcu=</indexterm></indexcommand>
<para>Select the MCU to target.  This is used to create a C preprocessor
symbol based upon the MCU name, converted to upper case and pre- and
post-fixed with <samp>__</samp>.  This in turn is used by the
<file>msp430.h</file> header file to select an MCU-specific supplementary
header file.
</para>
<para>The option also sets the ISA to use.  If the MCU name is one that is
known to only support the 430 ISA then that is selected, otherwise the
430X ISA is selected.  A generic MCU name of <samp>msp430</samp> can also be
used to select the 430 ISA.  Similarly the generic <samp>msp430x</samp> MCU
name selects the 430X ISA.
</para>
<para>In addition an MCU-specific linker script is added to the linker
command line.  The script&textrsquo;s name is the name of the MCU with
<file>.ld</file> appended.  Thus specifying <option>-mmcu=xxx</option> on the <command>gcc</command>
command line defines the C preprocessor symbol <code>__XXX__</code> and
cause the linker to search for a script called <file>xxx.ld</file>.
</para>
<para>This option is also passed on to the assembler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1905" incode="1">mcpu=</indexterm></indexcommand>
<para>Specifies the ISA to use.  Accepted values are <samp>msp430</samp>,
<samp>msp430x</samp> and <samp>msp430xv2</samp>.  This option is deprecated.  The
<option>-mmcu=</option> option should be used to select the ISA.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1906" incode="1">msim</indexterm></indexcommand>
<para>Link to the simulator runtime libraries and linker script.  Overrides
any scripts that would be selected by the <option>-mmcu=</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlarge</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1907" incode="1">mlarge</indexterm></indexcommand>
<para>Use large-model addressing (20-bit pointers, 32-bit <code>size_t</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msmall</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1908" incode="1">msmall</indexterm></indexcommand>
<para>Use small-model addressing (16-bit pointers, 16-bit <code>size_t</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrelax</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1909" incode="1">mrelax</indexterm></indexcommand>
<para>This option is passed to the assembler and linker, and allows the
linker to perform certain optimizations that cannot be done until
the final link.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">mhwmult=</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1910" incode="1">mhwmult=</indexterm></indexcommand>
<para>Describes the type of hardware multiply supported by the target.
Accepted values are <samp>none</samp> for no hardware multiply, <samp>16bit</samp>
for the original 16-bit-only multiply supported by early MCUs.
<samp>32bit</samp> for the 16/32-bit multiply supported by later MCUs and
<samp>f5series</samp> for the 16/32-bit multiply supported by F5-series MCUs.
A value of <samp>auto</samp> can also be given.  This tells GCC to deduce
the hardware multiply support based upon the MCU name provided by the
<option>-mmcu</option> option.  If no <option>-mmcu</option> option is specified then
<samp>32bit</samp> hardware multiply support is assumed.  <samp>auto</samp> is the
default setting.
</para>
<para>Hardware multiplies are normally performed by calling a library
routine.  This saves space in the generated code.  When compiling at
<option>-O3</option> or higher however the hardware multiplier is invoked
inline.  This makes for bigger, but faster code.
</para>
<para>The hardware multiply routines disable interrupts whilst running and
restore the previous interrupt state when they finish.  This makes
them safe to use inside interrupt handlers as well as in normal code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minrt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1911" incode="1">minrt</indexterm></indexcommand>
<para>Enable the use of a minimum runtime environment - no static
initializers or constructors.  This is intended for memory-constrained
devices.  The compiler includes special symbols in some objects
that tell the linker and runtime which code fragments are required.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcode-region=</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mdata-region=</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1912" incode="1">mcode-region</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1913" incode="1">mdata-region</indexterm></indexcommand>
<para>These options tell the compiler where to place functions and data that
do not have one of the <code>lower</code>, <code>upper</code>, <code>either</code> or
<code>section</code> attributes.  Possible values are <code>lower</code>,
<code>upper</code>, <code>either</code> or <code>any</code>.  The first three behave
like the corresponding attribute.  The fourth possible value -
<code>any</code> - is the default.  It leaves placement entirely up to the
linker script and how it assigns the standard sections (.text, .data
etc) to the memory regions.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="NDS32-Options" spaces=" "><nodename>NDS32 Options</nodename><nodenext automatic="on">Nios II Options</nodenext><nodeprev automatic="on">MSP430 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>NDS32 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="200">NDS32 Options</indexterm></cindex>

<para>These options are defined for NDS32 implementations:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbig-endian</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1914" incode="1">mbig-endian</indexterm></indexcommand>
<para>Generate code in big-endian mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlittle-endian</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1915" incode="1">mlittle-endian</indexterm></indexcommand>
<para>Generate code in little-endian mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mreduced-regs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1916" incode="1">mreduced-regs</indexterm></indexcommand>
<para>Use reduced-set registers for register allocation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfull-regs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1917" incode="1">mfull-regs</indexterm></indexcommand>
<para>Use full-set registers for register allocation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmov</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1918" incode="1">mcmov</indexterm></indexcommand>
<para>Generate conditional move instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-cmov</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1919" incode="1">mno-cmov</indexterm></indexcommand>
<para>Do not generate conditional move instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mperf-ext</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1920" incode="1">mperf-ext</indexterm></indexcommand>
<para>Generate performance extension instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-perf-ext</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1921" incode="1">mno-perf-ext</indexterm></indexcommand>
<para>Do not generate performance extension instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mv3push</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1922" incode="1">mv3push</indexterm></indexcommand>
<para>Generate v3 push25/pop25 instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-v3push</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1923" incode="1">mno-v3push</indexterm></indexcommand>
<para>Do not generate v3 push25/pop25 instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m16-bit</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1924" incode="1">m16-bit</indexterm></indexcommand>
<para>Generate 16-bit instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-16-bit</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1925" incode="1">mno-16-bit</indexterm></indexcommand>
<para>Do not generate 16-bit instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-misr-vector-size=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1926" incode="1">misr-vector-size</indexterm></indexcommand>
<para>Specify the size of each interrupt vector, which must be 4 or 16.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcache-block-size=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1927" incode="1">mcache-block-size</indexterm></indexcommand>
<para>Specify the size of each cache block,
which must be a power of 2 between 4 and 512.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-march=<var>arch</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1928" incode="1">march</indexterm></indexcommand>
<para>Specify the name of the target architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=<var>code-model</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1929" incode="1">mcmodel</indexterm></indexcommand>
<para>Set the code model to one of
</para><table commandarg="asis" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>small</samp></itemformat></item>
</tableterm><tableitem><para>All the data and read-only data segments must be within 512KB addressing space.
The text segment must be within 16MB addressing space.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>medium</samp></itemformat></item>
</tableterm><tableitem><para>The data segment must be within 512KB while the read-only data segment can be
within 4GB addressing space.  The text segment should be still within 16MB
addressing space.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>large</samp></itemformat></item>
</tableterm><tableitem><para>All the text and data segments can be within 4GB addressing space.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mctor-dtor</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1930" incode="1">mctor-dtor</indexterm></indexcommand>
<para>Enable constructor/destructor feature.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrelax</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1931" incode="1">mrelax</indexterm></indexcommand>
<para>Guide linker to relax instructions.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="Nios-II-Options" spaces=" "><nodename>Nios II Options</nodename><nodenext automatic="on">Nvidia PTX Options</nodenext><nodeprev automatic="on">NDS32 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>Nios II Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="201">Nios II options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="202">Altera Nios II options</indexterm></cindex>

<para>These are the options defined for the Altera Nios II processor.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-G <var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1932" incode="1">G</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="203">smaller data references</indexterm></cindex>
<para>Put global and static objects less than or equal to <var>num</var> bytes
into the small data or BSS sections instead of the normal data or BSS
sections.  The default value of <var>num</var> is 8.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgpopt=<var>option</var></itemformat></item>
</tableterm></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgpopt</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-gpopt</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1933" incode="1">mgpopt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1934" incode="1">mno-gpopt</indexterm></indexcommand>
<para>Generate (do not generate) GP-relative accesses.  The following 
<var>option</var> names are recognized:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">none</itemformat></item>
</tableterm><tableitem><para>Do not generate GP-relative accesses.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">local</itemformat></item>
</tableterm><tableitem><para>Generate GP-relative accesses for small data objects that are not 
external or weak.  Also use GP-relative addressing for objects that
have been explicitly placed in a small data section via a <code>section</code>
attribute.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">global</itemformat></item>
</tableterm><tableitem><para>As for <samp>local</samp>, but also generate GP-relative accesses for
small data objects that are external or weak.  If you use this option,
you must ensure that all parts of your program (including libraries) are
compiled with the same <option>-G</option> setting.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">data</itemformat></item>
</tableterm><tableitem><para>Generate GP-relative accesses for all data objects in the program.  If you
use this option, the entire data and BSS segments
of your program must fit in 64K of memory and you must use an appropriate
linker script to allocate them within the addressible range of the
global pointer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">all</itemformat></item>
</tableterm><tableitem><para>Generate GP-relative addresses for function pointers as well as data
pointers.  If you use this option, the entire text, data, and BSS segments
of your program must fit in 64K of memory and you must use an appropriate
linker script to allocate them within the addressible range of the
global pointer.
</para>
</tableitem></tableentry></table>

<para><option>-mgpopt</option> is equivalent to <option>-mgpopt=local</option>, and
<option>-mno-gpopt</option> is equivalent to <option>-mgpopt=none</option>.
</para>
<para>The default is <option>-mgpopt</option> except when <option>-fpic</option> or
<option>-fPIC</option> is specified to generate position-independent code.
Note that the Nios II ABI does not permit GP-relative accesses from
shared libraries.
</para>
<para>You may need to specify <option>-mno-gpopt</option> explicitly when building
programs that include large amounts of small data, including large
GOT data sections.  In this case, the 16-bit offset for GP-relative
addressing may not be large enough to allow access to the entire 
small data section.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mel</itemformat></item>
<itemx spaces=" "><itemformat command="code">-meb</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1935" incode="1">mel</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1936" incode="1">meb</indexterm></indexcommand>
<para>Generate little-endian (default) or big-endian (experimental) code,
respectively.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbypass-cache</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-bypass-cache</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1937" incode="1">mno-bypass-cache</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1938" incode="1">mbypass-cache</indexterm></indexcommand>
<para>Force all load and store instructions to always bypass cache by 
using I/O variants of the instructions. The default is not to
bypass the cache.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-cache-volatile </itemformat></item>
<itemx spaces=" "><itemformat command="code">-mcache-volatile       </itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1939" incode="1">mcache-volatile</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1940" incode="1">mno-cache-volatile</indexterm></indexcommand>
<para>Volatile memory access bypass the cache using the I/O variants of 
the load and store instructions. The default is not to bypass the cache.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-fast-sw-div</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mfast-sw-div</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1941" incode="1">mno-fast-sw-div</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1942" incode="1">mfast-sw-div</indexterm></indexcommand>
<para>Do not use table-based fast divide for small numbers. The default 
is to use the fast divide at <option>-O3</option> and above.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-hw-mul</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mhw-mul</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-hw-mulx</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mhw-mulx</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-hw-div</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mhw-div</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1943" incode="1">mno-hw-mul</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1944" incode="1">mhw-mul</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1945" incode="1">mno-hw-mulx</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1946" incode="1">mhw-mulx</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1947" incode="1">mno-hw-div</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1948" incode="1">mhw-div</indexterm></indexcommand>
<para>Enable or disable emitting <code>mul</code>, <code>mulx</code> and <code>div</code> family of 
instructions by the compiler. The default is to emit <code>mul</code>
and not emit <code>div</code> and <code>mulx</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcustom-<var>insn</var>=<var>N</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-custom-<var>insn</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1949" incode="1">mcustom-<var>insn</var></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1950" incode="1">mno-custom-<var>insn</var></indexterm></indexcommand>
<para>Each <option>-mcustom-<var>insn</var>=<var>N</var></option> option enables use of a
custom instruction with encoding <var>N</var> when generating code that uses 
<var>insn</var>.  For example, <option>-mcustom-fadds=253</option> generates custom
instruction 253 for single-precision floating-point add operations instead
of the default behavior of using a library call.
</para>
<para>The following values of <var>insn</var> are supported.  Except as otherwise
noted, floating-point operations are expected to be implemented with
normal IEEE 754 semantics and correspond directly to the C operators or the
equivalent GCC built-in functions (<pxref label="Other-Builtins"><xrefnodename>Other Builtins</xrefnodename></pxref>).
</para>
<para>Single-precision floating point:
</para><table commandarg="asis" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fadds</samp>, <samp>fsubs</samp>, <samp>fdivs</samp>, <samp>fmuls</samp></itemformat></item>
</tableterm><tableitem><para>Binary arithmetic operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fnegs</samp></itemformat></item>
</tableterm><tableitem><para>Unary negation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fabss</samp></itemformat></item>
</tableterm><tableitem><para>Unary absolute value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fcmpeqs</samp>, <samp>fcmpges</samp>, <samp>fcmpgts</samp>, <samp>fcmples</samp>, <samp>fcmplts</samp>, <samp>fcmpnes</samp></itemformat></item>
</tableterm><tableitem><para>Comparison operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fmins</samp>, <samp>fmaxs</samp></itemformat></item>
</tableterm><tableitem><para>Floating-point minimum and maximum.  These instructions are only
generated if <option>-ffinite-math-only</option> is specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fsqrts</samp></itemformat></item>
</tableterm><tableitem><para>Unary square root operation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fcoss</samp>, <samp>fsins</samp>, <samp>ftans</samp>, <samp>fatans</samp>, <samp>fexps</samp>, <samp>flogs</samp></itemformat></item>
</tableterm><tableitem><para>Floating-point trigonometric and exponential functions.  These instructions
are only generated if <option>-funsafe-math-optimizations</option> is also specified.
</para>
</tableitem></tableentry></table>

<para>Double-precision floating point:
</para><table commandarg="asis" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>faddd</samp>, <samp>fsubd</samp>, <samp>fdivd</samp>, <samp>fmuld</samp></itemformat></item>
</tableterm><tableitem><para>Binary arithmetic operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fnegd</samp></itemformat></item>
</tableterm><tableitem><para>Unary negation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fabsd</samp></itemformat></item>
</tableterm><tableitem><para>Unary absolute value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fcmpeqd</samp>, <samp>fcmpged</samp>, <samp>fcmpgtd</samp>, <samp>fcmpled</samp>, <samp>fcmpltd</samp>, <samp>fcmpned</samp></itemformat></item>
</tableterm><tableitem><para>Comparison operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fmind</samp>, <samp>fmaxd</samp></itemformat></item>
</tableterm><tableitem><para>Double-precision minimum and maximum.  These instructions are only
generated if <option>-ffinite-math-only</option> is specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fsqrtd</samp></itemformat></item>
</tableterm><tableitem><para>Unary square root operation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fcosd</samp>, <samp>fsind</samp>, <samp>ftand</samp>, <samp>fatand</samp>, <samp>fexpd</samp>, <samp>flogd</samp></itemformat></item>
</tableterm><tableitem><para>Double-precision trigonometric and exponential functions.  These instructions
are only generated if <option>-funsafe-math-optimizations</option> is also specified.
</para>
</tableitem></tableentry></table>

<para>Conversions:
</para><table commandarg="asis" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fextsd</samp></itemformat></item>
</tableterm><tableitem><para>Conversion from single precision to double precision.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>ftruncds</samp></itemformat></item>
</tableterm><tableitem><para>Conversion from double precision to single precision.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fixsi</samp>, <samp>fixsu</samp>, <samp>fixdi</samp>, <samp>fixdu</samp></itemformat></item>
</tableterm><tableitem><para>Conversion from floating point to signed or unsigned integer types, with
truncation towards zero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>round</samp></itemformat></item>
</tableterm><tableitem><para>Conversion from single-precision floating point to signed integer,
rounding to the nearest integer and ties away from zero.
This corresponds to the <code>__builtin_lroundf</code> function when
<option>-fno-math-errno</option> is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>floatis</samp>, <samp>floatus</samp>, <samp>floatid</samp>, <samp>floatud</samp></itemformat></item>
</tableterm><tableitem><para>Conversion from signed or unsigned integer types to floating-point types.
</para>
</tableitem></tableentry></table>

<para>In addition, all of the following transfer instructions for internal
registers X and Y must be provided to use any of the double-precision
floating-point instructions.  Custom instructions taking two
double-precision source operands expect the first operand in the
64-bit register X.  The other operand (or only operand of a unary
operation) is given to the custom arithmetic instruction with the
least significant half in source register <var>src1</var> and the most
significant half in <var>src2</var>.  A custom instruction that returns a
double-precision result returns the most significant 32 bits in the
destination register and the other half in 32-bit register Y.  
GCC automatically generates the necessary code sequences to write
register X and/or read register Y when double-precision floating-point
instructions are used.
</para>
<table commandarg="asis" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fwrx</samp></itemformat></item>
</tableterm><tableitem><para>Write <var>src1</var> into the least significant half of X and <var>src2</var> into
the most significant half of X.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>fwry</samp></itemformat></item>
</tableterm><tableitem><para>Write <var>src1</var> into Y.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>frdxhi</samp>, <samp>frdxlo</samp></itemformat></item>
</tableterm><tableitem><para>Read the most or least (respectively) significant half of X and store it in
<var>dest</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>frdy</samp></itemformat></item>
</tableterm><tableitem><para>Read the value of Y and store it into <var>dest</var>.
</para></tableitem></tableentry></table>

<para>Note that you can gain more local control over generation of Nios II custom
instructions by using the <code>target(&quot;custom-<var>insn</var>=<var>N</var>&quot;)</code>
and <code>target(&quot;no-custom-<var>insn</var>&quot;)</code> function attributes
(<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>)
or pragmas (<pxref label="Function-Specific-Option-Pragmas"><xrefnodename>Function Specific Option Pragmas</xrefnodename></pxref>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcustom-fpu-cfg=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1951" incode="1">mcustom-fpu-cfg</indexterm></indexcommand>

<para>This option enables a predefined, named set of custom instruction encodings
(see <option>-mcustom-<var>insn</var></option> above).  
Currently, the following sets are defined:
</para>
<para><option>-mcustom-fpu-cfg=60-1</option> is equivalent to:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mcustom-fmuls=252 
-mcustom-fadds=253 
-mcustom-fsubs=254 
-fsingle-precision-constant
</pre></smallexample>

<para><option>-mcustom-fpu-cfg=60-2</option> is equivalent to:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mcustom-fmuls=252 
-mcustom-fadds=253 
-mcustom-fsubs=254 
-mcustom-fdivs=255 
-fsingle-precision-constant
</pre></smallexample>

<para><option>-mcustom-fpu-cfg=72-3</option> is equivalent to:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">-mcustom-floatus=243 
-mcustom-fixsi=244 
-mcustom-floatis=245 
-mcustom-fcmpgts=246 
-mcustom-fcmples=249 
-mcustom-fcmpeqs=250 
-mcustom-fcmpnes=251 
-mcustom-fmuls=252 
-mcustom-fadds=253 
-mcustom-fsubs=254 
-mcustom-fdivs=255 
-fsingle-precision-constant
</pre></smallexample>

<para>Custom instruction assignments given by individual
<option>-mcustom-<var>insn</var>=</option> options override those given by
<option>-mcustom-fpu-cfg=</option>, regardless of the
order of the options on the command line.
</para>
<para>Note that you can gain more local control over selection of a FPU
configuration by using the <code>target(&quot;custom-fpu-cfg=<var>name</var>&quot;)</code>
function attribute (<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>)
or pragma (<pxref label="Function-Specific-Option-Pragmas"><xrefnodename>Function Specific Option Pragmas</xrefnodename></pxref>).
</para>
</tableitem></tableentry></table>

<para>These additional <samp>-m</samp> options are available for the Altera Nios II
ELF (bare-metal) target:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-mhal</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1952" incode="1">mhal</indexterm></indexcommand>
<para>Link with HAL BSP.  This suppresses linking with the GCC-provided C runtime
startup and termination code, and is typically used in conjunction with
<option>-msys-crt0=</option> to specify the location of the alternate startup code
provided by the HAL BSP.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msmallc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1953" incode="1">msmallc</indexterm></indexcommand>
<para>Link with a limited version of the C library, <option>-lsmallc</option>, rather than
Newlib.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msys-crt0=<var>startfile</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1954" incode="1">msys-crt0</indexterm></indexcommand>
<para><var>startfile</var> is the file name of the startfile (crt0) to use 
when linking.  This option is only useful in conjunction with <option>-mhal</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msys-lib=<var>systemlib</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1955" incode="1">msys-lib</indexterm></indexcommand>
<para><var>systemlib</var> is the library name of the library that provides
low-level system calls required by the C library,
e.g. <code>read</code> and <code>write</code>.
This option is typically used to link with a library provided by a HAL BSP.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="Nvidia-PTX-Options" spaces=" "><nodename>Nvidia PTX Options</nodename><nodenext automatic="on">PDP-11 Options</nodenext><nodeprev automatic="on">Nios II Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>Nvidia PTX Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="204">Nvidia PTX options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="205">nvptx options</indexterm></cindex>

<para>These options are defined for Nvidia PTX:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-m32</itemformat></item>
<itemx spaces=" "><itemformat command="code">-m64</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1956" incode="1">m32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1957" incode="1">m64</indexterm></indexcommand>
<para>Generate code for 32-bit or 64-bit ABI.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmainkernel</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1958" incode="1">mmainkernel</indexterm></indexcommand>
<para>Link in code for a __main kernel.  This is for stand-alone instead of
offloading execution.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="PDP_002d11-Options" spaces=" "><nodename>PDP-11 Options</nodename><nodenext automatic="on">picoChip Options</nodenext><nodeprev automatic="on">Nvidia PTX Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>PDP-11 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="206">PDP-11 Options</indexterm></cindex>

<para>These options are defined for the PDP-11:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mfpu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1959" incode="1">mfpu</indexterm></indexcommand>
<para>Use hardware FPP floating point.  This is the default.  (FIS floating
point on the PDP-11/40 is not supported.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msoft-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1960" incode="1">msoft-float</indexterm></indexcommand>
<para>Do not use hardware floating point.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mac0</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1961" incode="1">mac0</indexterm></indexcommand>
<para>Return floating-point results in ac0 (fr0 in Unix assembler syntax).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-ac0</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1962" incode="1">mno-ac0</indexterm></indexcommand>
<para>Return floating-point results in memory.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m40</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1963" incode="1">m40</indexterm></indexcommand>
<para>Generate code for a PDP-11/40.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m45</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1964" incode="1">m45</indexterm></indexcommand>
<para>Generate code for a PDP-11/45.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m10</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1965" incode="1">m10</indexterm></indexcommand>
<para>Generate code for a PDP-11/10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbcopy-builtin</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1966" incode="1">mbcopy-builtin</indexterm></indexcommand>
<para>Use inline <code>movmemhi</code> patterns for copying memory.  This is the
default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbcopy</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1967" incode="1">mbcopy</indexterm></indexcommand>
<para>Do not use inline <code>movmemhi</code> patterns for copying memory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mint16</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-int32</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1968" incode="1">mint16</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1969" incode="1">mno-int32</indexterm></indexcommand>
<para>Use 16-bit <code>int</code>.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mint32</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-int16</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1970" incode="1">mint32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1971" incode="1">mno-int16</indexterm></indexcommand>
<para>Use 32-bit <code>int</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfloat64</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-float32</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1972" incode="1">mfloat64</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1973" incode="1">mno-float32</indexterm></indexcommand>
<para>Use 64-bit <code>float</code>.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfloat32</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-float64</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1974" incode="1">mfloat32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1975" incode="1">mno-float64</indexterm></indexcommand>
<para>Use 32-bit <code>float</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabshi</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1976" incode="1">mabshi</indexterm></indexcommand>
<para>Use <code>abshi2</code> pattern.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-abshi</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1977" incode="1">mno-abshi</indexterm></indexcommand>
<para>Do not use <code>abshi2</code> pattern.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbranch-expensive</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1978" incode="1">mbranch-expensive</indexterm></indexcommand>
<para>Pretend that branches are expensive.  This is for experimenting with
code generation only.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbranch-cheap</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1979" incode="1">mbranch-cheap</indexterm></indexcommand>
<para>Do not pretend that branches are expensive.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-munix-asm</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1980" incode="1">munix-asm</indexterm></indexcommand>
<para>Use Unix assembler syntax.  This is the default when configured for
<samp>pdp11-*-bsd</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdec-asm</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1981" incode="1">mdec-asm</indexterm></indexcommand>
<para>Use DEC assembler syntax.  This is the default when configured for any
PDP-11 target other than <samp>pdp11-*-bsd</samp>.
</para></tableitem></tableentry></table>

</subsection>
<node name="picoChip-Options" spaces=" "><nodename>picoChip Options</nodename><nodenext automatic="on">PowerPC Options</nodenext><nodeprev automatic="on">PDP-11 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>picoChip Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="207">picoChip options</indexterm></cindex>

<para>These <samp>-m</samp> options are defined for picoChip implementations:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-mae=<var>ae_type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1982" incode="1">mcpu</indexterm></indexcommand>
<para>Set the instruction set, register set, and instruction scheduling
parameters for array element type <var>ae_type</var>.  Supported values
for <var>ae_type</var> are <samp>ANY</samp>, <samp>MUL</samp>, and <samp>MAC</samp>.
</para>
<para><option>-mae=ANY</option> selects a completely generic AE type.  Code
generated with this option runs on any of the other AE types.  The
code is not as efficient as it would be if compiled for a specific
AE type, and some types of operation (e.g., multiplication) do not
work properly on all types of AE.
</para>
<para><option>-mae=MUL</option> selects a MUL AE type.  This is the most useful AE type
for compiled code, and is the default.
</para>
<para><option>-mae=MAC</option> selects a DSP-style MAC AE.  Code compiled with this
option may suffer from poor performance of byte (char) manipulation,
since the DSP AE does not provide hardware support for byte load/stores.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msymbol-as-address</itemformat></item>
</tableterm><tableitem><para>Enable the compiler to directly use a symbol name as an address in a
load/store instruction, without first loading it into a
register.  Typically, the use of this option generates larger
programs, which run faster than when the option isn&textrsquo;t used.  However, the
results vary from program to program, so it is left as a user option,
rather than being permanently enabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-inefficient-warnings</itemformat></item>
</tableterm><tableitem><para>Disables warnings about the generation of inefficient code.  These
warnings can be generated, for example, when compiling code that
performs byte-level memory operations on the MAC AE type.  The MAC AE has
no hardware support for byte-level memory operations, so all byte
load/stores must be synthesized from word load/store operations.  This is
inefficient and a warning is generated to indicate
that you should rewrite the code to avoid byte operations, or to target
an AE type that has the necessary hardware support.  This option disables
these warnings.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="PowerPC-Options" spaces=" "><nodename>PowerPC Options</nodename><nodenext automatic="on">RL78 Options</nodenext><nodeprev automatic="on">picoChip Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>PowerPC Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="208">PowerPC options</indexterm></cindex>

<para>These are listed under <xref label="RS_002f6000-and-PowerPC-Options"><xrefnodename>RS/6000 and PowerPC Options</xrefnodename></xref>.
</para>
</subsection>
<node name="RL78-Options" spaces=" "><nodename>RL78 Options</nodename><nodenext automatic="on">RS/6000 and PowerPC Options</nodenext><nodeprev automatic="on">PowerPC Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>RL78 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="209">RL78 Options</indexterm></cindex>

<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-msim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1983" incode="1">msim</indexterm></indexcommand>
<para>Links in additional target libraries to support operation within a
simulator.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmul=none</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mmul=g10</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mmul=g13</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mmul=g14</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mmul=rl78</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1984" incode="1">mmul</indexterm></indexcommand>
<para>Specifies the type of hardware multiplication and division support to
be used.  The simplest is <code>none</code>, which uses software for both
multiplication and division.  This is the default.  The <code>g13</code>
value is for the hardware multiply/divide peripheral found on the
RL78/G13 (S2 core) targets.  The <code>g14</code> value selects the use of
the multiplication and division instructions supported by the RL78/G14
(S3 core) parts.  The value <code>rl78</code> is an alias for <code>g14</code> and
the value <code>mg10</code> is an alias for <code>none</code>.
</para>
<para>In addition a C preprocessor macro is defined, based upon the setting
of this option.  Possible values are: <code>__RL78_MUL_NONE__</code>,
<code>__RL78_MUL_G13__</code> or <code>__RL78_MUL_G14__</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=g10</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mcpu=g13</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mcpu=g14</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mcpu=rl78</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1985" incode="1">mcpu</indexterm></indexcommand>
<para>Specifies the RL78 core to target.  The default is the G14 core, also
known as an S3 core or just RL78.  The G13 or S2 core does not have
multiply or divide instructions, instead it uses a hardware peripheral
for these operations.  The G10 or S1 core does not have register
banks, so it uses a different calling convention.
</para>
<para>If this option is set it also selects the type of hardware multiply
support to use, unless this is overridden by an explicit
<option>-mmul=none</option> option on the command line.  Thus specifying
<option>-mcpu=g13</option> enables the use of the G13 hardware multiply
peripheral and specifying <option>-mcpu=g10</option> disables the use of
hardware multipications altogether.
</para>
<para>Note, although the RL78/G14 core is the default target, specifying
<option>-mcpu=g14</option> or <option>-mcpu=rl78</option> on the command line does
change the behaviour of the toolchain since it also enables G14
hardware multiply support.  If these options are not specified on the
command line then software multiplication routines will be used even
though the code targets the RL78 core.  This is for backwards
compatibility with older toolchains which did not have hardware
multiply and divide support.
</para>
<para>In addition a C preprocessor macro is defined, based upon the setting
of this option.  Possible values are: <code>__RL78_G10__</code>,
<code>__RL78_G13__</code> or <code>__RL78_G14__</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mg10</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mg13</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mg14</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mrl78</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1986" incode="1">mg10</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1987" incode="1">mg13</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1988" incode="1">mg14</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1989" incode="1">mrl78</indexterm></indexcommand>
<para>These are aliases for the corresponding <option>-mcpu=</option> option.  They
are provided for backwards compatibility.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mallregs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1990" incode="1">mallregs</indexterm></indexcommand>
<para>Allow the compiler to use all of the available registers.  By default
registers <code>r24..r31</code> are reserved for use in interrupt handlers.
With this option enabled these registers can be used in ordinary
functions as well.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m64bit-doubles</itemformat></item>
<itemx spaces=" "><itemformat command="code">-m32bit-doubles</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1991" incode="1">m64bit-doubles</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1992" incode="1">m32bit-doubles</indexterm></indexcommand>
<para>Make the <code>double</code> data type be 64 bits (<option>-m64bit-doubles</option>)
or 32 bits (<option>-m32bit-doubles</option>) in size.  The default is
<option>-m32bit-doubles</option>.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="RS_002f6000-and-PowerPC-Options" spaces=" "><nodename>RS/6000 and PowerPC Options</nodename><nodenext automatic="on">RX Options</nodenext><nodeprev automatic="on">RL78 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>IBM RS/6000 and PowerPC Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="210">RS/6000 and PowerPC Options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="211">IBM RS/6000 and PowerPC Options</indexterm></cindex>

<para>These <samp>-m</samp> options are defined for the IBM RS/6000 and PowerPC:
</para><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mpowerpc-gpopt</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-powerpc-gpopt</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mpowerpc-gfxopt</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-powerpc-gfxopt</itemformat></itemx>
<need value="800" line=" 800"></need>
<itemx spaces=" "><itemformat command="code">-mpowerpc64</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-powerpc64</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mmfcrf</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-mfcrf</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mpopcntb</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-popcntb</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mpopcntd</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-popcntd</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mfprnd</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-fprnd</itemformat></itemx>
<need value="800" line=" 800"></need>
<itemx spaces=" "><itemformat command="code">-mcmpb</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-cmpb</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mmfpgpr</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-mfpgpr</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mhard-dfp</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-hard-dfp</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1993" incode="1">mpowerpc-gpopt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1994" incode="1">mno-powerpc-gpopt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1995" incode="1">mpowerpc-gfxopt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1996" incode="1">mno-powerpc-gfxopt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1997" incode="1">mpowerpc64</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1998" incode="1">mno-powerpc64</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="1999" incode="1">mmfcrf</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2000" incode="1">mno-mfcrf</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2001" incode="1">mpopcntb</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2002" incode="1">mno-popcntb</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2003" incode="1">mpopcntd</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2004" incode="1">mno-popcntd</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2005" incode="1">mfprnd</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2006" incode="1">mno-fprnd</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2007" incode="1">mcmpb</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2008" incode="1">mno-cmpb</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2009" incode="1">mmfpgpr</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2010" incode="1">mno-mfpgpr</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2011" incode="1">mhard-dfp</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2012" incode="1">mno-hard-dfp</indexterm></indexcommand>
<para>You use these options to specify which instructions are available on the
processor you are using.  The default value of these options is
determined when configuring GCC&eosperiod;  Specifying the
<option>-mcpu=<var>cpu_type</var></option> overrides the specification of these
options.  We recommend you use the <option>-mcpu=<var>cpu_type</var></option> option
rather than the options listed above.
</para>
<para>Specifying <option>-mpowerpc-gpopt</option> allows
GCC to use the optional PowerPC architecture instructions in the
General Purpose group, including floating-point square root.  Specifying
<option>-mpowerpc-gfxopt</option> allows GCC to
use the optional PowerPC architecture instructions in the Graphics
group, including floating-point select.
</para>
<para>The <option>-mmfcrf</option> option allows GCC to generate the move from
condition register field instruction implemented on the POWER4
processor and other processors that support the PowerPC V2.01
architecture.
The <option>-mpopcntb</option> option allows GCC to generate the popcount and
double-precision FP reciprocal estimate instruction implemented on the
POWER5 processor and other processors that support the PowerPC V2.02
architecture.
The <option>-mpopcntd</option> option allows GCC to generate the popcount
instruction implemented on the POWER7 processor and other processors
that support the PowerPC V2.06 architecture.
The <option>-mfprnd</option> option allows GCC to generate the FP round to
integer instructions implemented on the POWER5+ processor and other
processors that support the PowerPC V2.03 architecture.
The <option>-mcmpb</option> option allows GCC to generate the compare bytes
instruction implemented on the POWER6 processor and other processors
that support the PowerPC V2.05 architecture.
The <option>-mmfpgpr</option> option allows GCC to generate the FP move to/from
general-purpose register instructions implemented on the POWER6X
processor and other processors that support the extended PowerPC V2.05
architecture.
The <option>-mhard-dfp</option> option allows GCC to generate the decimal
floating-point instructions implemented on some POWER processors.
</para>
<para>The <option>-mpowerpc64</option> option allows GCC to generate the additional
64-bit instructions that are found in the full PowerPC64 architecture
and to treat GPRs as 64-bit, doubleword quantities.  GCC defaults to
<option>-mno-powerpc64</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>cpu_type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2013" incode="1">mcpu</indexterm></indexcommand>
<para>Set architecture type, register usage, and
instruction scheduling parameters for machine type <var>cpu_type</var>.
Supported values for <var>cpu_type</var> are <samp>401</samp>, <samp>403</samp>,
<samp>405</samp>, <samp>405fp</samp>, <samp>440</samp>, <samp>440fp</samp>, <samp>464</samp>, <samp>464fp</samp>,
<samp>476</samp>, <samp>476fp</samp>, <samp>505</samp>, <samp>601</samp>, <samp>602</samp>, <samp>603</samp>,
<samp>603e</samp>, <samp>604</samp>, <samp>604e</samp>, <samp>620</samp>, <samp>630</samp>, <samp>740</samp>,
<samp>7400</samp>, <samp>7450</samp>, <samp>750</samp>, <samp>801</samp>, <samp>821</samp>, <samp>823</samp>,
<samp>860</samp>, <samp>970</samp>, <samp>8540</samp>, <samp>a2</samp>, <samp>e300c2</samp>,
<samp>e300c3</samp>, <samp>e500mc</samp>, <samp>e500mc64</samp>, <samp>e5500</samp>,
<samp>e6500</samp>, <samp>ec603e</samp>, <samp>G3</samp>, <samp>G4</samp>, <samp>G5</samp>,
<samp>titan</samp>, <samp>power3</samp>, <samp>power4</samp>, <samp>power5</samp>, <samp>power5+</samp>,
<samp>power6</samp>, <samp>power6x</samp>, <samp>power7</samp>, <samp>power8</samp>, <samp>powerpc</samp>,
<samp>powerpc64</samp>, <samp>powerpc64le</samp>, and <samp>rs64</samp>.
</para>
<para><option>-mcpu=powerpc</option>, <option>-mcpu=powerpc64</option>, and
<option>-mcpu=powerpc64le</option> specify pure 32-bit PowerPC (either
endian), 64-bit big endian PowerPC and 64-bit little endian PowerPC
architecture machine types, with an appropriate, generic processor
model assumed for scheduling purposes.
</para>
<para>The other options specify a specific processor.  Code generated under
those options runs best on that processor, and may not run at all on
others.
</para>
<para>The <option>-mcpu</option> options automatically enable or disable the
following options:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">-maltivec  -mfprnd  -mhard-float  -mmfcrf  -mmultiple 
-mpopcntb -mpopcntd  -mpowerpc64 
-mpowerpc-gpopt  -mpowerpc-gfxopt  -msingle-float -mdouble-float 
-msimple-fpu -mstring  -mmulhw  -mdlmzb  -mmfpgpr -mvsx 
-mcrypto -mdirect-move -mpower8-fusion -mpower8-vector 
-mquad-memory -mquad-memory-atomic
</pre></smallexample>

<para>The particular options set for any particular CPU varies between
compiler versions, depending on what setting seems to produce optimal
code for that CPU; it doesn&textrsquo;t necessarily reflect the actual hardware&textrsquo;s
capabilities.  If you wish to set an individual option to a particular
value, you may specify it after the <option>-mcpu</option> option, like
<option>-mcpu=970 -mno-altivec</option>.
</para>
<para>On AIX, the <option>-maltivec</option> and <option>-mpowerpc64</option> options are
not enabled or disabled by the <option>-mcpu</option> option at present because
AIX does not have full support for these options.  You may still
enable or disable them individually if you&textrsquo;re sure it&textrsquo;ll work in your
environment.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>cpu_type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2014" incode="1">mtune</indexterm></indexcommand>
<para>Set the instruction scheduling parameters for machine type
<var>cpu_type</var>, but do not set the architecture type or register usage,
as <option>-mcpu=<var>cpu_type</var></option> does.  The same
values for <var>cpu_type</var> are used for <option>-mtune</option> as for
<option>-mcpu</option>.  If both are specified, the code generated uses the
architecture and registers set by <option>-mcpu</option>, but the
scheduling parameters set by <option>-mtune</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=small</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2015" incode="1">mcmodel=small</indexterm></indexcommand>
<para>Generate PowerPC64 code for the small model: The TOC is limited to
64k.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=medium</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2016" incode="1">mcmodel=medium</indexterm></indexcommand>
<para>Generate PowerPC64 code for the medium model: The TOC and other static
data may be up to a total of 4G in size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=large</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2017" incode="1">mcmodel=large</indexterm></indexcommand>
<para>Generate PowerPC64 code for the large model: The TOC may be up to 4G
in size.  Other data and code is only limited by the 64-bit address
space.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-maltivec</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-altivec</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2018" incode="1">maltivec</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2019" incode="1">mno-altivec</indexterm></indexcommand>
<para>Generate code that uses (does not use) AltiVec instructions, and also
enable the use of built-in functions that allow more direct access to
the AltiVec instruction set.  You may also need to set
<option>-mabi=altivec</option> to adjust the current ABI with AltiVec ABI
enhancements.
</para>
<para>When <option>-maltivec</option> is used, rather than <option>-maltivec=le</option> or
<option>-maltivec=be</option>, the element order for Altivec intrinsics such
as <code>vec_splat</code>, <code>vec_extract</code>, and <code>vec_insert</code> 
match array element order corresponding to the endianness of the
target.  That is, element zero identifies the leftmost element in a
vector register when targeting a big-endian platform, and identifies
the rightmost element in a vector register when targeting a
little-endian platform.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-maltivec=be</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2020" incode="1">maltivec=be</indexterm></indexcommand>
<para>Generate Altivec instructions using big-endian element order,
regardless of whether the target is big- or little-endian.  This is
the default when targeting a big-endian platform.
</para>
<para>The element order is used to interpret element numbers in Altivec
intrinsics such as <code>vec_splat</code>, <code>vec_extract</code>, and
<code>vec_insert</code>.  By default, these match array element order
corresponding to the endianness for the target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-maltivec=le</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2021" incode="1">maltivec=le</indexterm></indexcommand>
<para>Generate Altivec instructions using little-endian element order,
regardless of whether the target is big- or little-endian.  This is
the default when targeting a little-endian platform.  This option is
currently ignored when targeting a big-endian platform.
</para>
<para>The element order is used to interpret element numbers in Altivec
intrinsics such as <code>vec_splat</code>, <code>vec_extract</code>, and
<code>vec_insert</code>.  By default, these match array element order
corresponding to the endianness for the target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvrsave</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-vrsave</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2022" incode="1">mvrsave</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2023" incode="1">mno-vrsave</indexterm></indexcommand>
<para>Generate VRSAVE instructions when generating AltiVec code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgen-cell-microcode</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2024" incode="1">mgen-cell-microcode</indexterm></indexcommand>
<para>Generate Cell microcode instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mwarn-cell-microcode</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2025" incode="1">mwarn-cell-microcode</indexterm></indexcommand>
<para>Warn when a Cell microcode instruction is emitted.  An example
of a Cell microcode instruction is a variable shift.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msecure-plt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2026" incode="1">msecure-plt</indexterm></indexcommand>
<para>Generate code that allows <command>ld</command> and <command>ld.so</command>
to build executables and shared
libraries with non-executable <code>.plt</code> and <code>.got</code> sections.
This is a PowerPC
32-bit SYSV ABI option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbss-plt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2027" incode="1">mbss-plt</indexterm></indexcommand>
<para>Generate code that uses a BSS <code>.plt</code> section that <command>ld.so</command>
fills in, and
requires <code>.plt</code> and <code>.got</code>
sections that are both writable and executable.
This is a PowerPC 32-bit SYSV ABI option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-misel</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-isel</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2028" incode="1">misel</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2029" incode="1">mno-isel</indexterm></indexcommand>
<para>This switch enables or disables the generation of ISEL instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-misel=<var>yes/no</var></itemformat></item>
</tableterm><tableitem><para>This switch has been deprecated.  Use <option>-misel</option> and
<option>-mno-isel</option> instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mspe</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-spe</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2030" incode="1">mspe</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2031" incode="1">mno-spe</indexterm></indexcommand>
<para>This switch enables or disables the generation of SPE simd
instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpaired</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-paired</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2032" incode="1">mpaired</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2033" incode="1">mno-paired</indexterm></indexcommand>
<para>This switch enables or disables the generation of PAIRED simd
instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mspe=<var>yes/no</var></itemformat></item>
</tableterm><tableitem><para>This option has been deprecated.  Use <option>-mspe</option> and
<option>-mno-spe</option> instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvsx</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-vsx</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2034" incode="1">mvsx</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2035" incode="1">mno-vsx</indexterm></indexcommand>
<para>Generate code that uses (does not use) vector/scalar (VSX)
instructions, and also enable the use of built-in functions that allow
more direct access to the VSX instruction set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcrypto</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-crypto</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2036" incode="1">mcrypto</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2037" incode="1">mno-crypto</indexterm></indexcommand>
<para>Enable the use (disable) of the built-in functions that allow direct
access to the cryptographic instructions that were added in version
2.07 of the PowerPC ISA.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdirect-move</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-direct-move</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2038" incode="1">mdirect-move</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2039" incode="1">mno-direct-move</indexterm></indexcommand>
<para>Generate code that uses (does not use) the instructions to move data
between the general purpose registers and the vector/scalar (VSX)
registers that were added in version 2.07 of the PowerPC ISA.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpower8-fusion</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-power8-fusion</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2040" incode="1">mpower8-fusion</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2041" incode="1">mno-power8-fusion</indexterm></indexcommand>
<para>Generate code that keeps (does not keeps) some integer operations
adjacent so that the instructions can be fused together on power8 and
later processors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpower8-vector</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-power8-vector</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2042" incode="1">mpower8-vector</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2043" incode="1">mno-power8-vector</indexterm></indexcommand>
<para>Generate code that uses (does not use) the vector and scalar
instructions that were added in version 2.07 of the PowerPC ISA.  Also
enable the use of built-in functions that allow more direct access to
the vector instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mquad-memory</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-quad-memory</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2044" incode="1">mquad-memory</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2045" incode="1">mno-quad-memory</indexterm></indexcommand>
<para>Generate code that uses (does not use) the non-atomic quad word memory
instructions.  The <option>-mquad-memory</option> option requires use of
64-bit mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mquad-memory-atomic</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-quad-memory-atomic</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2046" incode="1">mquad-memory-atomic</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2047" incode="1">mno-quad-memory-atomic</indexterm></indexcommand>
<para>Generate code that uses (does not use) the atomic quad word memory
instructions.  The <option>-mquad-memory-atomic</option> option requires use of
64-bit mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mupper-regs-df</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-upper-regs-df</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2048" incode="1">mupper-regs-df</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2049" incode="1">mno-upper-regs-df</indexterm></indexcommand>
<para>Generate code that uses (does not use) the scalar double precision
instructions that target all 64 registers in the vector/scalar
floating point register set that were added in version 2.06 of the
PowerPC ISA.  <option>-mupper-regs-df</option> is turned on by default if you
use any of the <option>-mcpu=power7</option>, <option>-mcpu=power8</option>, or
<option>-mvsx</option> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mupper-regs-sf</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-upper-regs-sf</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2050" incode="1">mupper-regs-sf</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2051" incode="1">mno-upper-regs-sf</indexterm></indexcommand>
<para>Generate code that uses (does not use) the scalar single precision
instructions that target all 64 registers in the vector/scalar
floating point register set that were added in version 2.07 of the
PowerPC ISA.  <option>-mupper-regs-sf</option> is turned on by default if you
use either of the <option>-mcpu=power8</option> or <option>-mpower8-vector</option>
options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mupper-regs</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-upper-regs</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2052" incode="1">mupper-regs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2053" incode="1">mno-upper-regs</indexterm></indexcommand>
<para>Generate code that uses (does not use) the scalar
instructions that target all 64 registers in the vector/scalar
floating point register set, depending on the model of the machine.
</para>
<para>If the <option>-mno-upper-regs</option> option is used, it turns off both
<option>-mupper-regs-sf</option> and <option>-mupper-regs-df</option> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfloat-gprs=<var>yes/single/double/no</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-mfloat-gprs</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2054" incode="1">mfloat-gprs</indexterm></indexcommand>
<para>This switch enables or disables the generation of floating-point
operations on the general-purpose registers for architectures that
support it.
</para>
<para>The argument <samp>yes</samp> or <samp>single</samp> enables the use of
single-precision floating-point operations.
</para>
<para>The argument <samp>double</samp> enables the use of single and
double-precision floating-point operations.
</para>
<para>The argument <samp>no</samp> disables floating-point operations on the
general-purpose registers.
</para>
<para>This option is currently only available on the MPC854x.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m32</itemformat></item>
<itemx spaces=" "><itemformat command="code">-m64</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2055" incode="1">m32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2056" incode="1">m64</indexterm></indexcommand>
<para>Generate code for 32-bit or 64-bit environments of Darwin and SVR4
targets (including GNU/Linux).  The 32-bit environment sets int, long
and pointer to 32 bits and generates code that runs on any PowerPC
variant.  The 64-bit environment sets int to 32 bits and long and
pointer to 64 bits, and generates code for PowerPC64, as for
<option>-mpowerpc64</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfull-toc</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fp-in-toc</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mno-sum-in-toc</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mminimal-toc</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2057" incode="1">mfull-toc</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2058" incode="1">mno-fp-in-toc</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2059" incode="1">mno-sum-in-toc</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2060" incode="1">mminimal-toc</indexterm></indexcommand>
<para>Modify generation of the TOC (Table Of Contents), which is created for
every executable file.  The <option>-mfull-toc</option> option is selected by
default.  In that case, GCC allocates at least one TOC entry for
each unique non-automatic variable reference in your program.  GCC
also places floating-point constants in the TOC&eosperiod;  However, only
16,384 entries are available in the TOC&eosperiod;
</para>
<para>If you receive a linker error message that saying you have overflowed
the available TOC space, you can reduce the amount of TOC space used
with the <option>-mno-fp-in-toc</option> and <option>-mno-sum-in-toc</option> options.
<option>-mno-fp-in-toc</option> prevents GCC from putting floating-point
constants in the TOC and <option>-mno-sum-in-toc</option> forces GCC to
generate code to calculate the sum of an address and a constant at
run time instead of putting that sum into the TOC&eosperiod;  You may specify one
or both of these options.  Each causes GCC to produce very slightly
slower and larger code at the expense of conserving TOC space.
</para>
<para>If you still run out of space in the TOC even when you specify both of
these options, specify <option>-mminimal-toc</option> instead.  This option causes
GCC to make only one TOC entry for every file.  When you specify this
option, GCC produces code that is slower and larger but which
uses extremely little TOC space.  You may wish to use this option
only on files that contain less frequently-executed code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-maix64</itemformat></item>
<itemx spaces=" "><itemformat command="code">-maix32</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2061" incode="1">maix64</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2062" incode="1">maix32</indexterm></indexcommand>
<para>Enable 64-bit AIX ABI and calling convention: 64-bit pointers, 64-bit
<code>long</code> type, and the infrastructure needed to support them.
Specifying <option>-maix64</option> implies <option>-mpowerpc64</option>,
while <option>-maix32</option> disables the 64-bit ABI and
implies <option>-mno-powerpc64</option>.  GCC defaults to <option>-maix32</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxl-compat</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-xl-compat</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2063" incode="1">mxl-compat</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2064" incode="1">mno-xl-compat</indexterm></indexcommand>
<para>Produce code that conforms more closely to IBM XL compiler semantics
when using AIX-compatible ABI&eosperiod;  Pass floating-point arguments to
prototyped functions beyond the register save area (RSA) on the stack
in addition to argument FPRs.  Do not assume that most significant
double in 128-bit long double value is properly rounded when comparing
values and converting to double.  Use XL symbol names for long double
support routines.
</para>
<para>The AIX calling convention was extended but not initially documented to
handle an obscure K&amp;R C case of calling a function that takes the
address of its arguments with fewer arguments than declared.  IBM XL
compilers access floating-point arguments that do not fit in the
RSA from the stack when a subroutine is compiled without
optimization.  Because always storing floating-point arguments on the
stack is inefficient and rarely needed, this option is not enabled by
default and only is necessary when calling subroutines compiled by IBM
XL compilers without optimization.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpe</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2065" incode="1">mpe</indexterm></indexcommand>
<para>Support <dfn>IBM RS/6000 SP</dfn> <dfn>Parallel Environment</dfn> (PE)&eosperiod;  Link an
application written to use message passing with special startup code to
enable the application to run.  The system must have PE installed in the
standard location (<file>/usr/lpp/ppe.poe/</file>), or the <file>specs</file> file
must be overridden with the <option>-specs=</option> option to specify the
appropriate directory location.  The Parallel Environment does not
support threads, so the <option>-mpe</option> option and the <option>-pthread</option>
option are incompatible.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-malign-natural</itemformat></item>
<itemx spaces=" "><itemformat command="code">-malign-power</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2066" incode="1">malign-natural</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2067" incode="1">malign-power</indexterm></indexcommand>
<para>On AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option
<option>-malign-natural</option> overrides the ABI-defined alignment of larger
types, such as floating-point doubles, on their natural size-based boundary.
The option <option>-malign-power</option> instructs GCC to follow the ABI-specified
alignment rules.  GCC defaults to the standard alignment defined in the ABI&eosperiod;
</para>
<para>On 64-bit Darwin, natural alignment is the default, and <option>-malign-power</option>
is not supported.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msoft-float</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mhard-float</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2068" incode="1">msoft-float</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2069" incode="1">mhard-float</indexterm></indexcommand>
<para>Generate code that does not use (uses) the floating-point register set.
Software floating-point emulation is provided if you use the
<option>-msoft-float</option> option, and pass the option to GCC when linking.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msingle-float</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mdouble-float</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2070" incode="1">msingle-float</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2071" incode="1">mdouble-float</indexterm></indexcommand>
<para>Generate code for single- or double-precision floating-point operations.
<option>-mdouble-float</option> implies <option>-msingle-float</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msimple-fpu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2072" incode="1">msimple-fpu</indexterm></indexcommand>
<para>Do not generate <code>sqrt</code> and <code>div</code> instructions for hardware
floating-point unit.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfpu=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2073" incode="1">mfpu</indexterm></indexcommand>
<para>Specify type of floating-point unit.  Valid values for <var>name</var> are
<samp>sp_lite</samp> (equivalent to <option>-msingle-float -msimple-fpu</option>),
<samp>dp_lite</samp> (equivalent to <option>-mdouble-float -msimple-fpu</option>),
<samp>sp_full</samp> (equivalent to <option>-msingle-float</option>),
and <samp>dp_full</samp> (equivalent to <option>-mdouble-float</option>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mxilinx-fpu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2074" incode="1">mxilinx-fpu</indexterm></indexcommand>
<para>Perform optimizations for the floating-point unit on Xilinx PPC 405/440.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmultiple</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-multiple</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2075" incode="1">mmultiple</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2076" incode="1">mno-multiple</indexterm></indexcommand>
<para>Generate code that uses (does not use) the load multiple word
instructions and the store multiple word instructions.  These
instructions are generated by default on POWER systems, and not
generated on PowerPC systems.  Do not use <option>-mmultiple</option> on little-endian
PowerPC systems, since those instructions do not work when the
processor is in little-endian mode.  The exceptions are PPC740 and
PPC750 which permit these instructions in little-endian mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstring</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-string</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2077" incode="1">mstring</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2078" incode="1">mno-string</indexterm></indexcommand>
<para>Generate code that uses (does not use) the load string instructions
and the store string word instructions to save multiple registers and
do small block moves.  These instructions are generated by default on
POWER systems, and not generated on PowerPC systems.  Do not use
<option>-mstring</option> on little-endian PowerPC systems, since those
instructions do not work when the processor is in little-endian mode.
The exceptions are PPC740 and PPC750 which permit these instructions
in little-endian mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mupdate</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-update</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2079" incode="1">mupdate</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2080" incode="1">mno-update</indexterm></indexcommand>
<para>Generate code that uses (does not use) the load or store instructions
that update the base register to the address of the calculated memory
location.  These instructions are generated by default.  If you use
<option>-mno-update</option>, there is a small window between the time that the
stack pointer is updated and the address of the previous frame is
stored, which means code that walks the stack frame across interrupts or
signals may get corrupted data.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mavoid-indexed-addresses</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-avoid-indexed-addresses</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2081" incode="1">mavoid-indexed-addresses</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2082" incode="1">mno-avoid-indexed-addresses</indexterm></indexcommand>
<para>Generate code that tries to avoid (not avoid) the use of indexed load
or store instructions. These instructions can incur a performance
penalty on Power6 processors in certain situations, such as when
stepping through large arrays that cross a 16M boundary.  This option
is enabled by default when targeting Power6 and disabled otherwise.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfused-madd</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fused-madd</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2083" incode="1">mfused-madd</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2084" incode="1">mno-fused-madd</indexterm></indexcommand>
<para>Generate code that uses (does not use) the floating-point multiply and
accumulate instructions.  These instructions are generated by default
if hardware floating point is used.  The machine-dependent
<option>-mfused-madd</option> option is now mapped to the machine-independent
<option>-ffp-contract=fast</option> option, and <option>-mno-fused-madd</option> is
mapped to <option>-ffp-contract=off</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmulhw</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-mulhw</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2085" incode="1">mmulhw</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2086" incode="1">mno-mulhw</indexterm></indexcommand>
<para>Generate code that uses (does not use) the half-word multiply and
multiply-accumulate instructions on the IBM 405, 440, 464 and 476 processors.
These instructions are generated by default when targeting those
processors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdlmzb</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-dlmzb</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2087" incode="1">mdlmzb</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2088" incode="1">mno-dlmzb</indexterm></indexcommand>
<para>Generate code that uses (does not use) the string-search <samp>dlmzb</samp>
instruction on the IBM 405, 440, 464 and 476 processors.  This instruction is
generated by default when targeting those processors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-bit-align</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mbit-align</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2089" incode="1">mno-bit-align</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2090" incode="1">mbit-align</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems do not (do) force structures
and unions that contain bit-fields to be aligned to the base type of the
bit-field.
</para>
<para>For example, by default a structure containing nothing but 8
<code>unsigned</code> bit-fields of length 1 is aligned to a 4-byte
boundary and has a size of 4 bytes.  By using <option>-mno-bit-align</option>,
the structure is aligned to a 1-byte boundary and is 1 byte in
size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-strict-align</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mstrict-align</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2091" incode="1">mno-strict-align</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2092" incode="1">mstrict-align</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems do not (do) assume that
unaligned memory references are handled by the system.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrelocatable</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-relocatable</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2093" incode="1">mrelocatable</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2094" incode="1">mno-relocatable</indexterm></indexcommand>
<para>Generate code that allows (does not allow) a static executable to be
relocated to a different address at run time.  A simple embedded
PowerPC system loader should relocate the entire contents of
<code>.got2</code> and 4-byte locations listed in the <code>.fixup</code> section,
a table of 32-bit addresses generated by this option.  For this to
work, all objects linked together must be compiled with
<option>-mrelocatable</option> or <option>-mrelocatable-lib</option>.
<option>-mrelocatable</option> code aligns the stack to an 8-byte boundary.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrelocatable-lib</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-relocatable-lib</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2095" incode="1">mrelocatable-lib</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2096" incode="1">mno-relocatable-lib</indexterm></indexcommand>
<para>Like <option>-mrelocatable</option>, <option>-mrelocatable-lib</option> generates a
<code>.fixup</code> section to allow static executables to be relocated at
run time, but <option>-mrelocatable-lib</option> does not use the smaller stack
alignment of <option>-mrelocatable</option>.  Objects compiled with
<option>-mrelocatable-lib</option> may be linked with objects compiled with
any combination of the <option>-mrelocatable</option> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-toc</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mtoc</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2097" incode="1">mno-toc</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2098" incode="1">mtoc</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems do not (do) assume that
register 2 contains a pointer to a global area pointing to the addresses
used in the program.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlittle</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mlittle-endian</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2099" incode="1">mlittle</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2100" incode="1">mlittle-endian</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems compile code for the
processor in little-endian mode.  The <option>-mlittle-endian</option> option is
the same as <option>-mlittle</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbig</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mbig-endian</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2101" incode="1">mbig</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2102" incode="1">mbig-endian</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems compile code for the
processor in big-endian mode.  The <option>-mbig-endian</option> option is
the same as <option>-mbig</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdynamic-no-pic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2103" incode="1">mdynamic-no-pic</indexterm></indexcommand>
<para>On Darwin and Mac OS X systems, compile code so that it is not
relocatable, but that its external references are relocatable.  The
resulting code is suitable for applications, but not shared
libraries.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msingle-pic-base</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2104" incode="1">msingle-pic-base</indexterm></indexcommand>
<para>Treat the register used for PIC addressing as read-only, rather than
loading it in the prologue for each function.  The runtime system is
responsible for initializing this register with an appropriate value
before execution begins.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mprioritize-restricted-insns=<var>priority</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2105" incode="1">mprioritize-restricted-insns</indexterm></indexcommand>
<para>This option controls the priority that is assigned to
dispatch-slot restricted instructions during the second scheduling
pass.  The argument <var>priority</var> takes the value <samp>0</samp>, <samp>1</samp>,
or <samp>2</samp> to assign no, highest, or second-highest (respectively) 
priority to dispatch-slot restricted
instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msched-costly-dep=<var>dependence_type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2106" incode="1">msched-costly-dep</indexterm></indexcommand>
<para>This option controls which dependences are considered costly
by the target during instruction scheduling.  The argument
<var>dependence_type</var> takes one of the following values:
</para>
<table commandarg="asis" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>no</samp></itemformat></item>
</tableterm><tableitem><para>No dependence is costly.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>all</samp></itemformat></item>
</tableterm><tableitem><para>All dependences are costly.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>true_store_to_load</samp></itemformat></item>
</tableterm><tableitem><para>A true dependence from store to load is costly.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>store_to_load</samp></itemformat></item>
</tableterm><tableitem><para>Any dependence from store to load is costly.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><var>number</var></itemformat></item>
</tableterm><tableitem><para>Any dependence for which the latency is greater than or equal to 
<var>number</var> is costly.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minsert-sched-nops=<var>scheme</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2107" incode="1">minsert-sched-nops</indexterm></indexcommand>
<para>This option controls which NOP insertion scheme is used during
the second scheduling pass.  The argument <var>scheme</var> takes one of the
following values:
</para>
<table commandarg="asis" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>no</samp></itemformat></item>
</tableterm><tableitem><para>Don&textrsquo;t insert NOPs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>pad</samp></itemformat></item>
</tableterm><tableitem><para>Pad with NOPs any dispatch group that has vacant issue slots,
according to the scheduler&textrsquo;s grouping.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>regroup_exact</samp></itemformat></item>
</tableterm><tableitem><para>Insert NOPs to force costly dependent insns into
separate groups.  Insert exactly as many NOPs as needed to force an insn
to a new group, according to the estimated processor grouping.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><var>number</var></itemformat></item>
</tableterm><tableitem><para>Insert NOPs to force costly dependent insns into
separate groups.  Insert <var>number</var> NOPs to force an insn to a new group.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcall-sysv</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2108" incode="1">mcall-sysv</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems compile code using calling
conventions that adhere to the March 1995 draft of the System V
Application Binary Interface, PowerPC processor supplement.  This is the
default unless you configured GCC using <samp>powerpc-*-eabiaix</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcall-sysv-eabi</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mcall-eabi</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2109" incode="1">mcall-sysv-eabi</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2110" incode="1">mcall-eabi</indexterm></indexcommand>
<para>Specify both <option>-mcall-sysv</option> and <option>-meabi</option> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcall-sysv-noeabi</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2111" incode="1">mcall-sysv-noeabi</indexterm></indexcommand>
<para>Specify both <option>-mcall-sysv</option> and <option>-mno-eabi</option> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcall-aixdesc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2112" incode="1">m</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems compile code for the AIX
operating system.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcall-linux</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2113" incode="1">mcall-linux</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems compile code for the
Linux-based GNU system.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcall-freebsd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2114" incode="1">mcall-freebsd</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems compile code for the
FreeBSD operating system.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcall-netbsd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2115" incode="1">mcall-netbsd</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems compile code for the
NetBSD operating system.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcall-openbsd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2116" incode="1">mcall-netbsd</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems compile code for the
OpenBSD operating system.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-maix-struct-return</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2117" incode="1">maix-struct-return</indexterm></indexcommand>
<para>Return all structures in memory (as specified by the AIX ABI)&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msvr4-struct-return</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2118" incode="1">msvr4-struct-return</indexterm></indexcommand>
<para>Return structures smaller than 8 bytes in registers (as specified by the
SVR4 ABI)&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabi=<var>abi-type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2119" incode="1">mabi</indexterm></indexcommand>
<para>Extend the current ABI with a particular extension, or remove such extension.
Valid values are <samp>altivec</samp>, <samp>no-altivec</samp>, <samp>spe</samp>,
<samp>no-spe</samp>, <samp>ibmlongdouble</samp>, <samp>ieeelongdouble</samp>,
<samp>elfv1</samp>, <samp>elfv2</samp>&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabi=spe</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2120" incode="1">mabi=spe</indexterm></indexcommand>
<para>Extend the current ABI with SPE ABI extensions.  This does not change
the default ABI, instead it adds the SPE ABI extensions to the current
ABI&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabi=no-spe</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2121" incode="1">mabi=no-spe</indexterm></indexcommand>
<para>Disable Book-E SPE ABI extensions for the current ABI&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabi=ibmlongdouble</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2122" incode="1">mabi=ibmlongdouble</indexterm></indexcommand>
<para>Change the current ABI to use IBM extended-precision long double.
This is a PowerPC 32-bit SYSV ABI option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabi=ieeelongdouble</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2123" incode="1">mabi=ieeelongdouble</indexterm></indexcommand>
<para>Change the current ABI to use IEEE extended-precision long double.
This is a PowerPC 32-bit Linux ABI option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabi=elfv1</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2124" incode="1">mabi=elfv1</indexterm></indexcommand>
<para>Change the current ABI to use the ELFv1 ABI.
This is the default ABI for big-endian PowerPC 64-bit Linux.
Overriding the default ABI requires special system support and is
likely to fail in spectacular ways.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabi=elfv2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2125" incode="1">mabi=elfv2</indexterm></indexcommand>
<para>Change the current ABI to use the ELFv2 ABI.
This is the default ABI for little-endian PowerPC 64-bit Linux.
Overriding the default ABI requires special system support and is
likely to fail in spectacular ways.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mprototype</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-prototype</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2126" incode="1">mprototype</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2127" incode="1">mno-prototype</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems assume that all calls to
variable argument functions are properly prototyped.  Otherwise, the
compiler must insert an instruction before every non-prototyped call to
set or clear bit 6 of the condition code register (<code>CR</code>) to
indicate whether floating-point values are passed in the floating-point
registers in case the function takes variable arguments.  With
<option>-mprototype</option>, only calls to prototyped variable argument functions
set or clear the bit.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2128" incode="1">msim</indexterm></indexcommand>
<para>On embedded PowerPC systems, assume that the startup module is called
<file>sim-crt0.o</file> and that the standard C libraries are <file>libsim.a</file> and
<file>libc.a</file>.  This is the default for <samp>powerpc-*-eabisim</samp>
configurations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmvme</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2129" incode="1">mmvme</indexterm></indexcommand>
<para>On embedded PowerPC systems, assume that the startup module is called
<file>crt0.o</file> and the standard C libraries are <file>libmvme.a</file> and
<file>libc.a</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mads</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2130" incode="1">mads</indexterm></indexcommand>
<para>On embedded PowerPC systems, assume that the startup module is called
<file>crt0.o</file> and the standard C libraries are <file>libads.a</file> and
<file>libc.a</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-myellowknife</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2131" incode="1">myellowknife</indexterm></indexcommand>
<para>On embedded PowerPC systems, assume that the startup module is called
<file>crt0.o</file> and the standard C libraries are <file>libyk.a</file> and
<file>libc.a</file>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvxworks</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2132" incode="1">mvxworks</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems, specify that you are
compiling for a VxWorks system.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-memb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2133" incode="1">memb</indexterm></indexcommand>
<para>On embedded PowerPC systems, set the <code>PPC_EMB</code> bit in the ELF flags
header to indicate that <samp>eabi</samp> extended relocations are used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-meabi</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-eabi</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2134" incode="1">meabi</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2135" incode="1">mno-eabi</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems do (do not) adhere to the
Embedded Applications Binary Interface (EABI), which is a set of
modifications to the System V.4 specifications.  Selecting <option>-meabi</option>
means that the stack is aligned to an 8-byte boundary, a function
<code>__eabi</code> is called from <code>main</code> to set up the EABI
environment, and the <option>-msdata</option> option can use both <code>r2</code> and
<code>r13</code> to point to two separate small data areas.  Selecting
<option>-mno-eabi</option> means that the stack is aligned to a 16-byte boundary,
no EABI initialization function is called from <code>main</code>, and the
<option>-msdata</option> option only uses <code>r13</code> to point to a single
small data area.  The <option>-meabi</option> option is on by default if you
configured GCC using one of the <samp>powerpc*-*-eabi*</samp> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdata=eabi</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2136" incode="1">msdata=eabi</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems, put small initialized
<code>const</code> global and static data in the <code>.sdata2</code> section, which
is pointed to by register <code>r2</code>.  Put small initialized
non-<code>const</code> global and static data in the <code>.sdata</code> section,
which is pointed to by register <code>r13</code>.  Put small uninitialized
global and static data in the <code>.sbss</code> section, which is adjacent to
the <code>.sdata</code> section.  The <option>-msdata=eabi</option> option is
incompatible with the <option>-mrelocatable</option> option.  The
<option>-msdata=eabi</option> option also sets the <option>-memb</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdata=sysv</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2137" incode="1">msdata=sysv</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems, put small global and static
data in the <code>.sdata</code> section, which is pointed to by register
<code>r13</code>.  Put small uninitialized global and static data in the
<code>.sbss</code> section, which is adjacent to the <code>.sdata</code> section.
The <option>-msdata=sysv</option> option is incompatible with the
<option>-mrelocatable</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdata=default</itemformat></item>
<itemx spaces=" "><itemformat command="code">-msdata</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2138" incode="1">msdata=default</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2139" incode="1">msdata</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems, if <option>-meabi</option> is used,
compile code the same as <option>-msdata=eabi</option>, otherwise compile code the
same as <option>-msdata=sysv</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdata=data</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2140" incode="1">msdata=data</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems, put small global
data in the <code>.sdata</code> section.  Put small uninitialized global
data in the <code>.sbss</code> section.  Do not use register <code>r13</code>
to address small data however.  This is the default behavior unless
other <option>-msdata</option> options are used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msdata=none</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-sdata</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2141" incode="1">msdata=none</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2142" incode="1">mno-sdata</indexterm></indexcommand>
<para>On embedded PowerPC systems, put all initialized global and static data
in the <code>.data</code> section, and all uninitialized data in the
<code>.bss</code> section.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mblock-move-inline-limit=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2143" incode="1">mblock-move-inline-limit</indexterm></indexcommand>
<para>Inline all block moves (such as calls to <code>memcpy</code> or structure
copies) less than or equal to <var>num</var> bytes.  The minimum value for
<var>num</var> is 32 bytes on 32-bit targets and 64 bytes on 64-bit
targets.  The default value is target-specific.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-G <var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2144" incode="1">G</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="212">smaller data references (PowerPC)</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="213">.sdata/.sdata2 references (PowerPC)</indexterm></cindex>
<para>On embedded PowerPC systems, put global and static items less than or
equal to <var>num</var> bytes into the small data or BSS sections instead of
the normal data or BSS section.  By default, <var>num</var> is 8.  The
<option>-G <var>num</var></option> switch is also passed to the linker.
All modules should be compiled with the same <option>-G <var>num</var></option> value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mregnames</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-regnames</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2145" incode="1">mregnames</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2146" incode="1">mno-regnames</indexterm></indexcommand>
<para>On System V.4 and embedded PowerPC systems do (do not) emit register
names in the assembly language output using symbolic forms.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlongcall</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-longcall</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2147" incode="1">mlongcall</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2148" incode="1">mno-longcall</indexterm></indexcommand>
<para>By default assume that all calls are far away so that a longer and more
expensive calling sequence is required.  This is required for calls
farther than 32 megabytes (33,554,432 bytes) from the current location.
A short call is generated if the compiler knows
the call cannot be that far away.  This setting can be overridden by
the <code>shortcall</code> function attribute, or by <code>#pragma
longcall(0)</code>.
</para>
<para>Some linkers are capable of detecting out-of-range calls and generating
glue code on the fly.  On these systems, long calls are unnecessary and
generate slower code.  As of this writing, the AIX linker can do this,
as can the GNU linker for PowerPC/64.  It is planned to add this feature
to the GNU linker for 32-bit PowerPC systems as well.
</para>
<para>On Darwin/PPC systems, <code>#pragma longcall</code> generates <code>jbsr
callee, L42</code>, plus a <dfn>branch island</dfn> (glue code).  The two target
addresses represent the callee and the branch island.  The
Darwin/PPC linker prefers the first address and generates a <code>bl
callee</code> if the PPC <code>bl</code> instruction reaches the callee directly;
otherwise, the linker generates <code>bl L42</code> to call the branch
island.  The branch island is appended to the body of the
calling function; it computes the full 32-bit address of the callee
and jumps to it.
</para>
<para>On Mach-O (Darwin) systems, this option directs the compiler emit to
the glue for every direct call, and the Darwin linker decides whether
to use or discard it.
</para>
<para>In the future, GCC may ignore all longcall specifications
when the linker is known to generate glue.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtls-markers</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-tls-markers</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2149" incode="1">mtls-markers</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2150" incode="1">mno-tls-markers</indexterm></indexcommand>
<para>Mark (do not mark) calls to <code>__tls_get_addr</code> with a relocation
specifying the function argument.  The relocation allows the linker to
reliably associate function call with argument setup instructions for
TLS optimization, which in turn allows GCC to better schedule the
sequence.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-pthread</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2151" incode="1">pthread</indexterm></indexcommand>
<para>Adds support for multithreading with the <dfn>pthreads</dfn> library.
This option sets flags for both the preprocessor and linker.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrecip</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-recip</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2152" incode="1">mrecip</indexterm></indexcommand>
<para>This option enables use of the reciprocal estimate and
reciprocal square root estimate instructions with additional
Newton-Raphson steps to increase precision instead of doing a divide or
square root and divide for floating-point arguments.  You should use
the <option>-ffast-math</option> option when using <option>-mrecip</option> (or at
least <option>-funsafe-math-optimizations</option>,
<option>-finite-math-only</option>, <option>-freciprocal-math</option> and
<option>-fno-trapping-math</option>).  Note that while the throughput of the
sequence is generally higher than the throughput of the non-reciprocal
instruction, the precision of the sequence can be decreased by up to 2
ulp (i.e.&noeos; the inverse of 1.0 equals 0.99999994) for reciprocal square
roots.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrecip=<var>opt</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2153" incode="1">mrecip=opt</indexterm></indexcommand>
<para>This option controls which reciprocal estimate instructions
may be used.  <var>opt</var> is a comma-separated list of options, which may
be preceded by a <code>!</code> to invert the option:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">all</itemformat></item>
</tableterm><tableitem><para>Enable all estimate instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">default </itemformat></item>
</tableterm><tableitem><para>Enable the default instructions, equivalent to <option>-mrecip</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">none </itemformat></item>
</tableterm><tableitem><para>Disable all estimate instructions, equivalent to <option>-mno-recip</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">div </itemformat></item>
</tableterm><tableitem><para>Enable the reciprocal approximation instructions for both 
single and double precision.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">divf </itemformat></item>
</tableterm><tableitem><para>Enable the single-precision reciprocal approximation instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">divd </itemformat></item>
</tableterm><tableitem><para>Enable the double-precision reciprocal approximation instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">rsqrt </itemformat></item>
</tableterm><tableitem><para>Enable the reciprocal square root approximation instructions for both
single and double precision.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">rsqrtf </itemformat></item>
</tableterm><tableitem><para>Enable the single-precision reciprocal square root approximation instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">rsqrtd </itemformat></item>
</tableterm><tableitem><para>Enable the double-precision reciprocal square root approximation instructions.
</para>
</tableitem></tableentry></table>

<para>So, for example, <option>-mrecip=all,!rsqrtd</option> enables
all of the reciprocal estimate instructions, except for the
<code>FRSQRTE</code>, <code>XSRSQRTEDP</code>, and <code>XVRSQRTEDP</code> instructions
which handle the double-precision reciprocal square root calculations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrecip-precision</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-recip-precision</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2154" incode="1">mrecip-precision</indexterm></indexcommand>
<para>Assume (do not assume) that the reciprocal estimate instructions
provide higher-precision estimates than is mandated by the PowerPC
ABI.  Selecting <option>-mcpu=power6</option>, <option>-mcpu=power7</option> or
<option>-mcpu=power8</option> automatically selects <option>-mrecip-precision</option>.
The double-precision square root estimate instructions are not generated by
default on low-precision machines, since they do not provide an
estimate that converges after three steps.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mveclibabi=<var>type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2155" incode="1">mveclibabi</indexterm></indexcommand>
<para>Specifies the ABI type to use for vectorizing intrinsics using an
external library.  The only type supported at present is <samp>mass</samp>,
which specifies to use IBM&textrsquo;s Mathematical Acceleration Subsystem
(MASS) libraries for vectorizing intrinsics using external libraries.
GCC currently emits calls to <code>acosd2</code>, <code>acosf4</code>,
<code>acoshd2</code>, <code>acoshf4</code>, <code>asind2</code>, <code>asinf4</code>,
<code>asinhd2</code>, <code>asinhf4</code>, <code>atan2d2</code>, <code>atan2f4</code>,
<code>atand2</code>, <code>atanf4</code>, <code>atanhd2</code>, <code>atanhf4</code>,
<code>cbrtd2</code>, <code>cbrtf4</code>, <code>cosd2</code>, <code>cosf4</code>,
<code>coshd2</code>, <code>coshf4</code>, <code>erfcd2</code>, <code>erfcf4</code>,
<code>erfd2</code>, <code>erff4</code>, <code>exp2d2</code>, <code>exp2f4</code>,
<code>expd2</code>, <code>expf4</code>, <code>expm1d2</code>, <code>expm1f4</code>,
<code>hypotd2</code>, <code>hypotf4</code>, <code>lgammad2</code>, <code>lgammaf4</code>,
<code>log10d2</code>, <code>log10f4</code>, <code>log1pd2</code>, <code>log1pf4</code>,
<code>log2d2</code>, <code>log2f4</code>, <code>logd2</code>, <code>logf4</code>,
<code>powd2</code>, <code>powf4</code>, <code>sind2</code>, <code>sinf4</code>, <code>sinhd2</code>,
<code>sinhf4</code>, <code>sqrtd2</code>, <code>sqrtf4</code>, <code>tand2</code>,
<code>tanf4</code>, <code>tanhd2</code>, and <code>tanhf4</code> when generating code
for power7.  Both <option>-ftree-vectorize</option> and
<option>-funsafe-math-optimizations</option> must also be enabled.  The MASS
libraries must be specified at link time.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfriz</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-friz</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2156" incode="1">mfriz</indexterm></indexcommand>
<para>Generate (do not generate) the <code>friz</code> instruction when the
<option>-funsafe-math-optimizations</option> option is used to optimize
rounding of floating-point values to 64-bit integer and back to floating
point.  The <code>friz</code> instruction does not return the same value if
the floating-point number is too large to fit in an integer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpointers-to-nested-functions</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-pointers-to-nested-functions</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2157" incode="1">mpointers-to-nested-functions</indexterm></indexcommand>
<para>Generate (do not generate) code to load up the static chain register
(<code>r11</code>) when calling through a pointer on AIX and 64-bit Linux
systems where a function pointer points to a 3-word descriptor giving
the function address, TOC value to be loaded in register <code>r2</code>, and
static chain value to be loaded in register <code>r11</code>.  The
<option>-mpointers-to-nested-functions</option> is on by default.  You cannot
call through pointers to nested functions or pointers
to functions compiled in other languages that use the static chain if
you use <option>-mno-pointers-to-nested-functions</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msave-toc-indirect</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-save-toc-indirect</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2158" incode="1">msave-toc-indirect</indexterm></indexcommand>
<para>Generate (do not generate) code to save the TOC value in the reserved
stack location in the function prologue if the function calls through
a pointer on AIX and 64-bit Linux systems.  If the TOC value is not
saved in the prologue, it is saved just before the call through the
pointer.  The <option>-mno-save-toc-indirect</option> option is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcompat-align-parm</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-compat-align-parm</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2159" incode="1">mcompat-align-parm</indexterm></indexcommand>
<para>Generate (do not generate) code to pass structure parameters with a
maximum alignment of 64 bits, for compatibility with older versions
of GCC.
</para>
<para>Older versions of GCC (prior to 4.9.0) incorrectly did not align a
structure parameter on a 128-bit boundary when that structure contained
a member requiring 128-bit alignment.  This is corrected in more
recent versions of GCC.  This option may be used to generate code
that is compatible with functions compiled with older versions of
GCC.
</para>
<para>The <option>-mno-compat-align-parm</option> option is the default.
</para></tableitem></tableentry></table>

</subsection>
<node name="RX-Options" spaces=" "><nodename>RX Options</nodename><nodenext automatic="on">S/390 and zSeries Options</nodenext><nodeprev automatic="on">RS/6000 and PowerPC Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>RX Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="214">RX Options</indexterm></cindex>

<para>These command-line options are defined for RX targets:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-m64bit-doubles</itemformat></item>
<itemx spaces=" "><itemformat command="code">-m32bit-doubles</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2160" incode="1">m64bit-doubles</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2161" incode="1">m32bit-doubles</indexterm></indexcommand>
<para>Make the <code>double</code> data type be 64 bits (<option>-m64bit-doubles</option>)
or 32 bits (<option>-m32bit-doubles</option>) in size.  The default is
<option>-m32bit-doubles</option>.  <emph>Note</emph> RX floating-point hardware only
works on 32-bit values, which is why the default is
<option>-m32bit-doubles</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpu</itemformat></item>
<itemx spaces=" "><itemformat command="code">-nofpu</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2162" incode="1">fpu</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2163" incode="1">nofpu</indexterm></indexcommand>
<para>Enables (<option>-fpu</option>) or disables (<option>-nofpu</option>) the use of RX
floating-point hardware.  The default is enabled for the RX600
series and disabled for the RX200 series.
</para>
<para>Floating-point instructions are only generated for 32-bit floating-point 
values, however, so the FPU hardware is not used for doubles if the
<option>-m64bit-doubles</option> option is used.
</para>
<para><emph>Note</emph> If the <option>-fpu</option> option is enabled then
<option>-funsafe-math-optimizations</option> is also enabled automatically.
This is because the RX FPU instructions are themselves unsafe.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2164" incode="1">mcpu</indexterm></indexcommand>
<para>Selects the type of RX CPU to be targeted.  Currently three types are
supported, the generic <samp>RX600</samp> and <samp>RX200</samp> series hardware and
the specific <samp>RX610</samp> CPU.  The default is <samp>RX600</samp>.
</para>
<para>The only difference between <samp>RX600</samp> and <samp>RX610</samp> is that the
<samp>RX610</samp> does not support the <code>MVTIPL</code> instruction.
</para>
<para>The <samp>RX200</samp> series does not have a hardware floating-point unit
and so <option>-nofpu</option> is enabled by default when this type is
selected.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbig-endian-data</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mlittle-endian-data</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2165" incode="1">mbig-endian-data</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2166" incode="1">mlittle-endian-data</indexterm></indexcommand>
<para>Store data (but not code) in the big-endian format.  The default is
<option>-mlittle-endian-data</option>, i.e.&noeos; to store data in the little-endian
format.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msmall-data-limit=<var>N</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2167" incode="1">msmall-data-limit</indexterm></indexcommand>
<para>Specifies the maximum size in bytes of global and static variables
which can be placed into the small data area.  Using the small data
area can lead to smaller and faster code, but the size of area is
limited and it is up to the programmer to ensure that the area does
not overflow.  Also when the small data area is used one of the RX&textrsquo;s
registers (usually <code>r13</code>) is reserved for use pointing to this
area, so it is no longer available for use by the compiler.  This
could result in slower and/or larger code if variables are pushed onto
the stack instead of being held in this register.
</para>
<para>Note, common variables (variables that have not been initialized) and
constants are not placed into the small data area as they are assigned
to other sections in the output executable.
</para>
<para>The default value is zero, which disables this feature.  Note, this
feature is not enabled by default with higher optimization levels
(<option>-O2</option> etc) because of the potentially detrimental effects of
reserving a register.  It is up to the programmer to experiment and
discover whether this feature is of benefit to their program.  See the
description of the <option>-mpid</option> option for a description of how the
actual register to hold the small data area pointer is chosen.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msim</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-sim</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2168" incode="1">msim</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2169" incode="1">mno-sim</indexterm></indexcommand>
<para>Use the simulator runtime.  The default is to use the libgloss
board-specific runtime.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mas100-syntax</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-as100-syntax</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2170" incode="1">mas100-syntax</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2171" incode="1">mno-as100-syntax</indexterm></indexcommand>
<para>When generating assembler output use a syntax that is compatible with
Renesas&textrsquo;s AS100 assembler.  This syntax can also be handled by the GAS
assembler, but it has some restrictions so it is not generated by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmax-constant-size=<var>N</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2172" incode="1">mmax-constant-size</indexterm></indexcommand>
<para>Specifies the maximum size, in bytes, of a constant that can be used as
an operand in a RX instruction.  Although the RX instruction set does
allow constants of up to 4 bytes in length to be used in instructions,
a longer value equates to a longer instruction.  Thus in some
circumstances it can be beneficial to restrict the size of constants
that are used in instructions.  Constants that are too big are instead
placed into a constant pool and referenced via register indirection.
</para>
<para>The value <var>N</var> can be between 0 and 4.  A value of 0 (the default)
or 4 means that constants of any size are allowed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrelax</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2173" incode="1">mrelax</indexterm></indexcommand>
<para>Enable linker relaxation.  Linker relaxation is a process whereby the
linker attempts to reduce the size of a program by finding shorter
versions of various instructions.  Disabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mint-register=<var>N</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2174" incode="1">mint-register</indexterm></indexcommand>
<para>Specify the number of registers to reserve for fast interrupt handler
functions.  The value <var>N</var> can be between 0 and 4.  A value of 1
means that register <code>r13</code> is reserved for the exclusive use
of fast interrupt handlers.  A value of 2 reserves <code>r13</code> and
<code>r12</code>.  A value of 3 reserves <code>r13</code>, <code>r12</code> and
<code>r11</code>, and a value of 4 reserves <code>r13</code> through <code>r10</code>.
A value of 0, the default, does not reserve any registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msave-acc-in-interrupts</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2175" incode="1">msave-acc-in-interrupts</indexterm></indexcommand>
<para>Specifies that interrupt handler functions should preserve the
accumulator register.  This is only necessary if normal code might use
the accumulator register, for example because it performs 64-bit
multiplications.  The default is to ignore the accumulator as this
makes the interrupt handlers faster.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpid</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-pid</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2176" incode="1">mpid</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2177" incode="1">mno-pid</indexterm></indexcommand>
<para>Enables the generation of position independent data.  When enabled any
access to constant data is done via an offset from a base address
held in a register.  This allows the location of constant data to be
determined at run time without requiring the executable to be
relocated, which is a benefit to embedded applications with tight
memory constraints.  Data that can be modified is not affected by this
option.
</para>
<para>Note, using this feature reserves a register, usually <code>r13</code>, for
the constant data base address.  This can result in slower and/or
larger code, especially in complicated functions.
</para>
<para>The actual register chosen to hold the constant data base address
depends upon whether the <option>-msmall-data-limit</option> and/or the
<option>-mint-register</option> command-line options are enabled.  Starting
with register <code>r13</code> and proceeding downwards, registers are
allocated first to satisfy the requirements of <option>-mint-register</option>,
then <option>-mpid</option> and finally <option>-msmall-data-limit</option>.  Thus it
is possible for the small data area register to be <code>r8</code> if both
<option>-mint-register=4</option> and <option>-mpid</option> are specified on the
command line.
</para>
<para>By default this feature is not enabled.  The default can be restored
via the <option>-mno-pid</option> command-line option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-warn-multiple-fast-interrupts</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mwarn-multiple-fast-interrupts</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2178" incode="1">mno-warn-multiple-fast-interrupts</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2179" incode="1">mwarn-multiple-fast-interrupts</indexterm></indexcommand>
<para>Prevents GCC from issuing a warning message if it finds more than one
fast interrupt handler when it is compiling a file.  The default is to
issue a warning for each extra fast interrupt handler found, as the RX
only supports one such interrupt.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mallow-string-insns</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-allow-string-insns</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2180" incode="1">mallow-string-insns</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2181" incode="1">mno-allow-string-insns</indexterm></indexcommand>
<para>Enables or disables the use of the string manipulation instructions
<code>SMOVF</code>, <code>SCMPU</code>, <code>SMOVB</code>, <code>SMOVU</code>, <code>SUNTIL</code>
<code>SWHILE</code> and also the <code>RMPA</code> instruction.  These
instructions may prefetch data, which is not safe to do if accessing
an I/O register.  (See section 12.2.7 of the RX62N Group User&textrsquo;s Manual
for more information).
</para>
<para>The default is to allow these instructions, but it is not possible for
GCC to reliably detect all circumstances where a string instruction
might be used to access an I/O register, so their use cannot be
disabled automatically.  Instead it is reliant upon the programmer to
use the <option>-mno-allow-string-insns</option> option if their program
accesses I/O space.
</para>
<para>When the instructions are enabled GCC defines the C preprocessor
symbol <code>__RX_ALLOW_STRING_INSNS__</code>, otherwise it defines the
symbol <code>__RX_DISALLOW_STRING_INSNS__</code>.
</para></tableitem></tableentry></table>

<para><emph>Note:</emph> The generic GCC command-line option <option>-ffixed-<var>reg</var></option>
has special significance to the RX port when used with the
<code>interrupt</code> function attribute.  This attribute indicates a
function intended to process fast interrupts.  GCC ensures
that it only uses the registers <code>r10</code>, <code>r11</code>, <code>r12</code>
and/or <code>r13</code> and only provided that the normal use of the
corresponding registers have been restricted via the
<option>-ffixed-<var>reg</var></option> or <option>-mint-register</option> command-line
options.
</para>
</subsection>
<node name="S_002f390-and-zSeries-Options" spaces=" "><nodename>S/390 and zSeries Options</nodename><nodenext automatic="on">Score Options</nodenext><nodeprev automatic="on">RX Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>S/390 and zSeries Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="215">S/390 and zSeries Options</indexterm></cindex>

<para>These are the <samp>-m</samp> options defined for the S/390 and zSeries architecture.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mhard-float</itemformat></item>
<itemx spaces=" "><itemformat command="code">-msoft-float</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2182" incode="1">mhard-float</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2183" incode="1">msoft-float</indexterm></indexcommand>
<para>Use (do not use) the hardware floating-point instructions and registers
for floating-point operations.  When <option>-msoft-float</option> is specified,
functions in <file>libgcc.a</file> are used to perform floating-point
operations.  When <option>-mhard-float</option> is specified, the compiler
generates IEEE floating-point instructions.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mhard-dfp</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-hard-dfp</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2184" incode="1">mhard-dfp</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2185" incode="1">mno-hard-dfp</indexterm></indexcommand>
<para>Use (do not use) the hardware decimal-floating-point instructions for
decimal-floating-point operations.  When <option>-mno-hard-dfp</option> is
specified, functions in <file>libgcc.a</file> are used to perform
decimal-floating-point operations.  When <option>-mhard-dfp</option> is
specified, the compiler generates decimal-floating-point hardware
instructions.  This is the default for <option>-march=z9-ec</option> or higher.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong-double-64</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mlong-double-128</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2186" incode="1">mlong-double-64</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2187" incode="1">mlong-double-128</indexterm></indexcommand>
<para>These switches control the size of <code>long double</code> type. A size
of 64 bits makes the <code>long double</code> type equivalent to the <code>double</code>
type. This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbackchain</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-backchain</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2188" incode="1">mbackchain</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2189" incode="1">mno-backchain</indexterm></indexcommand>
<para>Store (do not store) the address of the caller&textrsquo;s frame as backchain pointer
into the callee&textrsquo;s stack frame.
A backchain may be needed to allow debugging using tools that do not understand
DWARF 2 call frame information.
When <option>-mno-packed-stack</option> is in effect, the backchain pointer is stored
at the bottom of the stack frame; when <option>-mpacked-stack</option> is in effect,
the backchain is placed into the topmost word of the 96/160 byte register
save area.
</para>
<para>In general, code compiled with <option>-mbackchain</option> is call-compatible with
code compiled with <option>-mmo-backchain</option>; however, use of the backchain
for debugging purposes usually requires that the whole binary is built with
<option>-mbackchain</option>.  Note that the combination of <option>-mbackchain</option>,
<option>-mpacked-stack</option> and <option>-mhard-float</option> is not supported.  In order
to build a linux kernel use <option>-msoft-float</option>.
</para>
<para>The default is to not maintain the backchain.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpacked-stack</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-packed-stack</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2190" incode="1">mpacked-stack</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2191" incode="1">mno-packed-stack</indexterm></indexcommand>
<para>Use (do not use) the packed stack layout.  When <option>-mno-packed-stack</option> is
specified, the compiler uses the all fields of the 96/160 byte register save
area only for their default purpose; unused fields still take up stack space.
When <option>-mpacked-stack</option> is specified, register save slots are densely
packed at the top of the register save area; unused space is reused for other
purposes, allowing for more efficient use of the available stack space.
However, when <option>-mbackchain</option> is also in effect, the topmost word of
the save area is always used to store the backchain, and the return address
register is always saved two words below the backchain.
</para>
<para>As long as the stack frame backchain is not used, code generated with
<option>-mpacked-stack</option> is call-compatible with code generated with
<option>-mno-packed-stack</option>.  Note that some non-FSF releases of GCC 2.95 for
S/390 or zSeries generated code that uses the stack frame backchain at run
time, not just for debugging purposes.  Such code is not call-compatible
with code compiled with <option>-mpacked-stack</option>.  Also, note that the
combination of <option>-mbackchain</option>,
<option>-mpacked-stack</option> and <option>-mhard-float</option> is not supported.  In order
to build a linux kernel use <option>-msoft-float</option>.
</para>
<para>The default is to not use the packed stack layout.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msmall-exec</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-small-exec</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2192" incode="1">msmall-exec</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2193" incode="1">mno-small-exec</indexterm></indexcommand>
<para>Generate (or do not generate) code using the <code>bras</code> instruction
to do subroutine calls.
This only works reliably if the total executable size does not
exceed 64k.  The default is to use the <code>basr</code> instruction instead,
which does not have this limitation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m64</itemformat></item>
<itemx spaces=" "><itemformat command="code">-m31</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2194" incode="1">m64</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2195" incode="1">m31</indexterm></indexcommand>
<para>When <option>-m31</option> is specified, generate code compliant to the
GNU/Linux for S/390 ABI&eosperiod;  When <option>-m64</option> is specified, generate
code compliant to the GNU/Linux for zSeries ABI&eosperiod;  This allows GCC in
particular to generate 64-bit instructions.  For the <samp>s390</samp>
targets, the default is <option>-m31</option>, while the <samp>s390x</samp>
targets default to <option>-m64</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mzarch</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mesa</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2196" incode="1">mzarch</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2197" incode="1">mesa</indexterm></indexcommand>
<para>When <option>-mzarch</option> is specified, generate code using the
instructions available on z/Architecture.
When <option>-mesa</option> is specified, generate code using the
instructions available on ESA/390.  Note that <option>-mesa</option> is
not possible with <option>-m64</option>.
When generating code compliant to the GNU/Linux for S/390 ABI,
the default is <option>-mesa</option>.  When generating code compliant
to the GNU/Linux for zSeries ABI, the default is <option>-mzarch</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmvcle</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-mvcle</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2198" incode="1">mmvcle</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2199" incode="1">mno-mvcle</indexterm></indexcommand>
<para>Generate (or do not generate) code using the <code>mvcle</code> instruction
to perform block moves.  When <option>-mno-mvcle</option> is specified,
use a <code>mvc</code> loop instead.  This is the default unless optimizing for
size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdebug</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-debug</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2200" incode="1">mdebug</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2201" incode="1">mno-debug</indexterm></indexcommand>
<para>Print (or do not print) additional debug information when compiling.
The default is to not print debug information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-march=<var>cpu-type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2202" incode="1">march</indexterm></indexcommand>
<para>Generate code that runs on <var>cpu-type</var>, which is the name of a system
representing a certain processor type.  Possible values for
<var>cpu-type</var> are <samp>g5</samp>, <samp>g6</samp>, <samp>z900</samp>, <samp>z990</samp>,
<samp>z9-109</samp>, <samp>z9-ec</samp>, <samp>z10</samp>,  <samp>z196</samp>, and <samp>zEC12</samp>.
When generating code using the instructions available on z/Architecture,
the default is <option>-march=z900</option>.  Otherwise, the default is
<option>-march=g5</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>cpu-type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2203" incode="1">mtune</indexterm></indexcommand>
<para>Tune to <var>cpu-type</var> everything applicable about the generated code,
except for the ABI and the set of available instructions.
The list of <var>cpu-type</var> values is the same as for <option>-march</option>.
The default is the value used for <option>-march</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtpf-trace</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-tpf-trace</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2204" incode="1">mtpf-trace</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2205" incode="1">mno-tpf-trace</indexterm></indexcommand>
<para>Generate code that adds (does not add) in TPF OS specific branches to trace
routines in the operating system.  This option is off by default, even
when compiling for the TPF OS&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfused-madd</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fused-madd</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2206" incode="1">mfused-madd</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2207" incode="1">mno-fused-madd</indexterm></indexcommand>
<para>Generate code that uses (does not use) the floating-point multiply and
accumulate instructions.  These instructions are generated by default if
hardware floating point is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mwarn-framesize=<var>framesize</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2208" incode="1">mwarn-framesize</indexterm></indexcommand>
<para>Emit a warning if the current function exceeds the given frame size.  Because
this is a compile-time check it doesn&textrsquo;t need to be a real problem when the program
runs.  It is intended to identify functions that most probably cause
a stack overflow.  It is useful to be used in an environment with limited stack
size e.g.&noeos; the linux kernel.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mwarn-dynamicstack</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2209" incode="1">mwarn-dynamicstack</indexterm></indexcommand>
<para>Emit a warning if the function calls <code>alloca</code> or uses dynamically-sized
arrays.  This is generally a bad idea with a limited stack size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstack-guard=<var>stack-guard</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-mstack-size=<var>stack-size</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2210" incode="1">mstack-guard</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2211" incode="1">mstack-size</indexterm></indexcommand>
<para>If these options are provided the S/390 back end emits additional instructions in
the function prologue that trigger a trap if the stack size is <var>stack-guard</var>
bytes above the <var>stack-size</var> (remember that the stack on S/390 grows downward).
If the <var>stack-guard</var> option is omitted the smallest power of 2 larger than
the frame size of the compiled function is chosen.
These options are intended to be used to help debugging stack overflow problems.
The additionally emitted code causes only little overhead and hence can also be
used in production-like systems without greater performance degradation.  The given
values have to be exact powers of 2 and <var>stack-size</var> has to be greater than
<var>stack-guard</var> without exceeding 64k.
In order to be efficient the extra code makes the assumption that the stack starts
at an address aligned to the value given by <var>stack-size</var>.
The <var>stack-guard</var> option can only be used in conjunction with <var>stack-size</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mhotpatch=<var>pre-halfwords</var>,<var>post-halfwords</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2212" incode="1">mhotpatch</indexterm></indexcommand>
<para>If the hotpatch option is enabled, a &textldquo;hot-patching&textrdquo; function
prologue is generated for all functions in the compilation unit.
The funtion label is prepended with the given number of two-byte
NOP instructions (<var>pre-halfwords</var>, maximum 1000000).  After
the label, 2 * <var>post-halfwords</var> bytes are appended, using the
largest NOP like instructions the architecture allows (maximum
1000000).
</para>
<para>If both arguments are zero, hotpatching is disabled.
</para>
<para>This option can be overridden for individual functions with the
<code>hotpatch</code> attribute.
</para></tableitem></tableentry></table>

</subsection>
<node name="Score-Options" spaces=" "><nodename>Score Options</nodename><nodenext automatic="on">SH Options</nodenext><nodeprev automatic="on">S/390 and zSeries Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>Score Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="216">Score Options</indexterm></cindex>

<para>These options are defined for Score implementations:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-meb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2213" incode="1">meb</indexterm></indexcommand>
<para>Compile code for big-endian mode.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mel</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2214" incode="1">mel</indexterm></indexcommand>
<para>Compile code for little-endian mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnhwloop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2215" incode="1">mnhwloop</indexterm></indexcommand>
<para>Disable generation of <code>bcnz</code> instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-muls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2216" incode="1">muls</indexterm></indexcommand>
<para>Enable generation of unaligned load and store instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmac</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2217" incode="1">mmac</indexterm></indexcommand>
<para>Enable the use of multiply-accumulate instructions. Disabled by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mscore5</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2218" incode="1">mscore5</indexterm></indexcommand>
<para>Specify the SCORE5 as the target architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mscore5u</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2219" incode="1">mscore5u</indexterm></indexcommand>
<para>Specify the SCORE5U of the target architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mscore7</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2220" incode="1">mscore7</indexterm></indexcommand>
<para>Specify the SCORE7 as the target architecture. This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mscore7d</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2221" incode="1">mscore7d</indexterm></indexcommand>
<para>Specify the SCORE7D as the target architecture.
</para></tableitem></tableentry></table>

</subsection>
<node name="SH-Options" spaces=" "><nodename>SH Options</nodename><nodenext automatic="on">Solaris 2 Options</nodenext><nodeprev automatic="on">Score Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>SH Options</sectiontitle>

<para>These <samp>-m</samp> options are defined for the SH implementations:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-m1</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2222" incode="1">m1</indexterm></indexcommand>
<para>Generate code for the SH1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2223" incode="1">m2</indexterm></indexcommand>
<para>Generate code for the SH2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m2e</itemformat></item>
</tableterm><tableitem><para>Generate code for the SH2e.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m2a-nofpu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2224" incode="1">m2a-nofpu</indexterm></indexcommand>
<para>Generate code for the SH2a without FPU, or for a SH2a-FPU in such a way
that the floating-point unit is not used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m2a-single-only</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2225" incode="1">m2a-single-only</indexterm></indexcommand>
<para>Generate code for the SH2a-FPU, in such a way that no double-precision
floating-point operations are used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m2a-single</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2226" incode="1">m2a-single</indexterm></indexcommand>
<para>Generate code for the SH2a-FPU assuming the floating-point unit is in
single-precision mode by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m2a</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2227" incode="1">m2a</indexterm></indexcommand>
<para>Generate code for the SH2a-FPU assuming the floating-point unit is in
double-precision mode by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m3</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2228" incode="1">m3</indexterm></indexcommand>
<para>Generate code for the SH3.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m3e</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2229" incode="1">m3e</indexterm></indexcommand>
<para>Generate code for the SH3e.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-nofpu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2230" incode="1">m4-nofpu</indexterm></indexcommand>
<para>Generate code for the SH4 without a floating-point unit.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-single-only</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2231" incode="1">m4-single-only</indexterm></indexcommand>
<para>Generate code for the SH4 with a floating-point unit that only
supports single-precision arithmetic.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-single</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2232" incode="1">m4-single</indexterm></indexcommand>
<para>Generate code for the SH4 assuming the floating-point unit is in
single-precision mode by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2233" incode="1">m4</indexterm></indexcommand>
<para>Generate code for the SH4.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-100</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2234" incode="1">m4-100</indexterm></indexcommand>
<para>Generate code for SH4-100.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-100-nofpu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2235" incode="1">m4-100-nofpu</indexterm></indexcommand>
<para>Generate code for SH4-100 in such a way that the
floating-point unit is not used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-100-single</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2236" incode="1">m4-100-single</indexterm></indexcommand>
<para>Generate code for SH4-100 assuming the floating-point unit is in
single-precision mode by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-100-single-only</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2237" incode="1">m4-100-single-only</indexterm></indexcommand>
<para>Generate code for SH4-100 in such a way that no double-precision
floating-point operations are used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-200</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2238" incode="1">m4-200</indexterm></indexcommand>
<para>Generate code for SH4-200.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-200-nofpu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2239" incode="1">m4-200-nofpu</indexterm></indexcommand>
<para>Generate code for SH4-200 without in such a way that the
floating-point unit is not used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-200-single</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2240" incode="1">m4-200-single</indexterm></indexcommand>
<para>Generate code for SH4-200 assuming the floating-point unit is in
single-precision mode by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-200-single-only</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2241" incode="1">m4-200-single-only</indexterm></indexcommand>
<para>Generate code for SH4-200 in such a way that no double-precision
floating-point operations are used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-300</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2242" incode="1">m4-300</indexterm></indexcommand>
<para>Generate code for SH4-300.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-300-nofpu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2243" incode="1">m4-300-nofpu</indexterm></indexcommand>
<para>Generate code for SH4-300 without in such a way that the
floating-point unit is not used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-300-single</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2244" incode="1">m4-300-single</indexterm></indexcommand>
<para>Generate code for SH4-300 in such a way that no double-precision
floating-point operations are used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-300-single-only</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2245" incode="1">m4-300-single-only</indexterm></indexcommand>
<para>Generate code for SH4-300 in such a way that no double-precision
floating-point operations are used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-340</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2246" incode="1">m4-340</indexterm></indexcommand>
<para>Generate code for SH4-340 (no MMU, no FPU).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4-500</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2247" incode="1">m4-500</indexterm></indexcommand>
<para>Generate code for SH4-500 (no FPU).  Passes <option>-isa=sh4-nofpu</option> to the
assembler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4a-nofpu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2248" incode="1">m4a-nofpu</indexterm></indexcommand>
<para>Generate code for the SH4al-dsp, or for a SH4a in such a way that the
floating-point unit is not used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4a-single-only</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2249" incode="1">m4a-single-only</indexterm></indexcommand>
<para>Generate code for the SH4a, in such a way that no double-precision
floating-point operations are used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4a-single</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2250" incode="1">m4a-single</indexterm></indexcommand>
<para>Generate code for the SH4a assuming the floating-point unit is in
single-precision mode by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4a</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2251" incode="1">m4a</indexterm></indexcommand>
<para>Generate code for the SH4a.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m4al</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2252" incode="1">m4al</indexterm></indexcommand>
<para>Same as <option>-m4a-nofpu</option>, except that it implicitly passes
<option>-dsp</option> to the assembler.  GCC doesn&textrsquo;t generate any DSP
instructions at the moment.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m5-32media</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2253" incode="1">m5-32media</indexterm></indexcommand>
<para>Generate 32-bit code for SHmedia.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m5-32media-nofpu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2254" incode="1">m5-32media-nofpu</indexterm></indexcommand>
<para>Generate 32-bit code for SHmedia in such a way that the
floating-point unit is not used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m5-64media</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2255" incode="1">m5-64media</indexterm></indexcommand>
<para>Generate 64-bit code for SHmedia.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m5-64media-nofpu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2256" incode="1">m5-64media-nofpu</indexterm></indexcommand>
<para>Generate 64-bit code for SHmedia in such a way that the
floating-point unit is not used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m5-compact</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2257" incode="1">m5-compact</indexterm></indexcommand>
<para>Generate code for SHcompact.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m5-compact-nofpu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2258" incode="1">m5-compact-nofpu</indexterm></indexcommand>
<para>Generate code for SHcompact in such a way that the
floating-point unit is not used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2259" incode="1">mb</indexterm></indexcommand>
<para>Compile code for the processor in big-endian mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ml</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2260" incode="1">ml</indexterm></indexcommand>
<para>Compile code for the processor in little-endian mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdalign</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2261" incode="1">mdalign</indexterm></indexcommand>
<para>Align doubles at 64-bit boundaries.  Note that this changes the calling
conventions, and thus some functions from the standard C library do
not work unless you recompile it first with <option>-mdalign</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrelax</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2262" incode="1">mrelax</indexterm></indexcommand>
<para>Shorten some address references at link time, when possible; uses the
linker option <option>-relax</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbigtable</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2263" incode="1">mbigtable</indexterm></indexcommand>
<para>Use 32-bit offsets in <code>switch</code> tables.  The default is to use
16-bit offsets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbitops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2264" incode="1">mbitops</indexterm></indexcommand>
<para>Enable the use of bit manipulation instructions on SH2A.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfmovd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2265" incode="1">mfmovd</indexterm></indexcommand>
<para>Enable the use of the instruction <code>fmovd</code>.  Check <option>-mdalign</option> for
alignment constraints.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrenesas</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2266" incode="1">mrenesas</indexterm></indexcommand>
<para>Comply with the calling conventions defined by Renesas.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-renesas</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2267" incode="1">mno-renesas</indexterm></indexcommand>
<para>Comply with the calling conventions defined for GCC before the Renesas
conventions were available.  This option is the default for all
targets of the SH toolchain.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnomacsave</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2268" incode="1">mnomacsave</indexterm></indexcommand>
<para>Mark the <code>MAC</code> register as call-clobbered, even if
<option>-mrenesas</option> is given.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mieee</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-ieee</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2269" incode="1">mieee</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2270" incode="1">mno-ieee</indexterm></indexcommand>
<para>Control the IEEE compliance of floating-point comparisons, which affects the
handling of cases where the result of a comparison is unordered.  By default
<option>-mieee</option> is implicitly enabled.  If <option>-ffinite-math-only</option> is
enabled <option>-mno-ieee</option> is implicitly set, which results in faster
floating-point greater-equal and less-equal comparisons.  The implcit settings
can be overridden by specifying either <option>-mieee</option> or <option>-mno-ieee</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minline-ic_invalidate</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2271" incode="1">minline-ic_invalidate</indexterm></indexcommand>
<para>Inline code to invalidate instruction cache entries after setting up
nested function trampolines.
This option has no effect if <option>-musermode</option> is in effect and the selected
code generation option (e.g. <option>-m4</option>) does not allow the use of the <code>icbi</code>
instruction.
If the selected code generation option does not allow the use of the <code>icbi</code>
instruction, and <option>-musermode</option> is not in effect, the inlined code
manipulates the instruction cache address array directly with an associative
write.  This not only requires privileged mode at run time, but it also
fails if the cache line had been mapped via the TLB and has become unmapped.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-misize</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2272" incode="1">misize</indexterm></indexcommand>
<para>Dump instruction size and location in the assembly code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpadstruct</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2273" incode="1">mpadstruct</indexterm></indexcommand>
<para>This option is deprecated.  It pads structures to multiple of 4 bytes,
which is incompatible with the SH ABI&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-matomic-model=<var>model</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2274" incode="1">matomic-model=<var>model</var></indexterm></indexcommand>
<para>Sets the model of atomic operations and additional parameters as a comma
separated list.  For details on the atomic built-in functions see
<ref label="_005f_005fatomic-Builtins"><xrefnodename>__atomic Builtins</xrefnodename></ref>.  The following models and parameters are supported:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">none</itemformat></item>
</tableterm><tableitem><para>Disable compiler generated atomic sequences and emit library calls for atomic
operations.  This is the default if the target is not <code>sh*-*-linux*</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">soft-gusa</itemformat></item>
</tableterm><tableitem><para>Generate GNU/Linux compatible gUSA software atomic sequences for the atomic
built-in functions.  The generated atomic sequences require additional support
from the interrupt/exception handling code of the system and are only suitable
for SH3* and SH4* single-core systems.  This option is enabled by default when
the target is <code>sh*-*-linux*</code> and SH3* or SH4*.  When the target is SH4A,
this option also partially utilizes the hardware atomic instructions
<code>movli.l</code> and <code>movco.l</code> to create more efficient code, unless
<samp>strict</samp> is specified.  
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">soft-tcb</itemformat></item>
</tableterm><tableitem><para>Generate software atomic sequences that use a variable in the thread control
block.  This is a variation of the gUSA sequences which can also be used on
SH1* and SH2* targets.  The generated atomic sequences require additional
support from the interrupt/exception handling code of the system and are only
suitable for single-core systems.  When using this model, the <samp>gbr-offset=</samp>
parameter has to be specified as well.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">soft-imask</itemformat></item>
</tableterm><tableitem><para>Generate software atomic sequences that temporarily disable interrupts by
setting <code>SR.IMASK = 1111</code>.  This model works only when the program runs
in privileged mode and is only suitable for single-core systems.  Additional
support from the interrupt/exception handling code of the system is not
required.  This model is enabled by default when the target is
<code>sh*-*-linux*</code> and SH1* or SH2*.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">hard-llcs</itemformat></item>
</tableterm><tableitem><para>Generate hardware atomic sequences using the <code>movli.l</code> and <code>movco.l</code>
instructions only.  This is only available on SH4A and is suitable for
multi-core systems.  Since the hardware instructions support only 32 bit atomic
variables access to 8 or 16 bit variables is emulated with 32 bit accesses.
Code compiled with this option is also compatible with other software
atomic model interrupt/exception handling systems if executed on an SH4A
system.  Additional support from the interrupt/exception handling code of the
system is not required for this model.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">gbr-offset=</itemformat></item>
</tableterm><tableitem><para>This parameter specifies the offset in bytes of the variable in the thread
control block structure that should be used by the generated atomic sequences
when the <samp>soft-tcb</samp> model has been selected.  For other models this
parameter is ignored.  The specified value must be an integer multiple of four
and in the range 0-1020.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">strict</itemformat></item>
</tableterm><tableitem><para>This parameter prevents mixed usage of multiple atomic models, even if they
are compatible, and makes the compiler generate atomic sequences of the
specified model only.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtas</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2275" incode="1">mtas</indexterm></indexcommand>
<para>Generate the <code>tas.b</code> opcode for <code>__atomic_test_and_set</code>.
Notice that depending on the particular hardware and software configuration
this can degrade overall performance due to the operand cache line flushes
that are implied by the <code>tas.b</code> instruction.  On multi-core SH4A
processors the <code>tas.b</code> instruction must be used with caution since it
can result in data corruption for certain cache configurations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mprefergot</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2276" incode="1">mprefergot</indexterm></indexcommand>
<para>When generating position-independent code, emit function calls using
the Global Offset Table instead of the Procedure Linkage Table.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-musermode</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-usermode</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2277" incode="1">musermode</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2278" incode="1">mno-usermode</indexterm></indexcommand>
<para>Don&textrsquo;t allow (allow) the compiler generating privileged mode code.  Specifying
<option>-musermode</option> also implies <option>-mno-inline-ic_invalidate</option> if the
inlined code would not work in user mode.  <option>-musermode</option> is the default
when the target is <code>sh*-*-linux*</code>.  If the target is SH1* or SH2*
<option>-musermode</option> has no effect, since there is no user mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-multcost=<var>number</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2279" incode="1">multcost=<var>number</var></indexterm></indexcommand>
<para>Set the cost to assume for a multiply insn.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdiv=<var>strategy</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2280" incode="1">mdiv=<var>strategy</var></indexterm></indexcommand>
<para>Set the division strategy to be used for integer division operations.
For SHmedia <var>strategy</var> can be one of: 
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">fp </itemformat></item>
</tableterm><tableitem><para>Performs the operation in floating point.  This has a very high latency,
but needs only a few instructions, so it might be a good choice if
your code has enough easily-exploitable ILP to allow the compiler to
schedule the floating-point instructions together with other instructions.
Division by zero causes a floating-point exception.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">inv</itemformat></item>
</tableterm><tableitem><para>Uses integer operations to calculate the inverse of the divisor,
and then multiplies the dividend with the inverse.  This strategy allows
CSE and hoisting of the inverse calculation.  Division by zero calculates
an unspecified result, but does not trap.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">inv:minlat</itemformat></item>
</tableterm><tableitem><para>A variant of <samp>inv</samp> where, if no CSE or hoisting opportunities
have been found, or if the entire operation has been hoisted to the same
place, the last stages of the inverse calculation are intertwined with the
final multiply to reduce the overall latency, at the expense of using a few
more instructions, and thus offering fewer scheduling opportunities with
other code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">call</itemformat></item>
</tableterm><tableitem><para>Calls a library function that usually implements the <samp>inv:minlat</samp>
strategy.
This gives high code density for <code>m5-*media-nofpu</code> compilations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">call2</itemformat></item>
</tableterm><tableitem><para>Uses a different entry point of the same library function, where it
assumes that a pointer to a lookup table has already been set up, which
exposes the pointer load to CSE and code hoisting optimizations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">inv:call</itemformat></item>
<itemx spaces=" "><itemformat command="samp">inv:call2</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">inv:fp</itemformat></itemx>
</tableterm><tableitem><para>Use the <samp>inv</samp> algorithm for initial
code generation, but if the code stays unoptimized, revert to the <samp>call</samp>,
<samp>call2</samp>, or <samp>fp</samp> strategies, respectively.  Note that the
potentially-trapping side effect of division by zero is carried by a
separate instruction, so it is possible that all the integer instructions
are hoisted out, but the marker for the side effect stays where it is.
A recombination to floating-point operations or a call is not possible
in that case.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">inv20u</itemformat></item>
<itemx spaces=" "><itemformat command="samp">inv20l</itemformat></itemx>
</tableterm><tableitem><para>Variants of the <samp>inv:minlat</samp> strategy.  In the case
that the inverse calculation is not separated from the multiply, they speed
up division where the dividend fits into 20 bits (plus sign where applicable)
by inserting a test to skip a number of operations in this case; this test
slows down the case of larger dividends.  <samp>inv20u</samp> assumes the case of a such
a small dividend to be unlikely, and <samp>inv20l</samp> assumes it to be likely.
</para>
</tableitem></tableentry></table>

<para>For targets other than SHmedia <var>strategy</var> can be one of:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">call-div1</itemformat></item>
</tableterm><tableitem><para>Calls a library function that uses the single-step division instruction
<code>div1</code> to perform the operation.  Division by zero calculates an
unspecified result and does not trap.  This is the default except for SH4,
SH2A and SHcompact.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">call-fp</itemformat></item>
</tableterm><tableitem><para>Calls a library function that performs the operation in double precision
floating point.  Division by zero causes a floating-point exception.  This is
the default for SHcompact with FPU.  Specifying this for targets that do not
have a double precision FPU defaults to <code>call-div1</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">call-table</itemformat></item>
</tableterm><tableitem><para>Calls a library function that uses a lookup table for small divisors and
the <code>div1</code> instruction with case distinction for larger divisors.  Division
by zero calculates an unspecified result and does not trap.  This is the default
for SH4.  Specifying this for targets that do not have dynamic shift
instructions defaults to <code>call-div1</code>.
</para>
</tableitem></tableentry></table>

<para>When a division strategy has not been specified the default strategy is
selected based on the current target.  For SH2A the default strategy is to
use the <code>divs</code> and <code>divu</code> instructions instead of library function
calls.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-maccumulate-outgoing-args</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2281" incode="1">maccumulate-outgoing-args</indexterm></indexcommand>
<para>Reserve space once for outgoing arguments in the function prologue rather
than around each call.  Generally beneficial for performance and size.  Also
needed for unwinding to avoid changing the stack frame around conditional code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdivsi3_libfunc=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2282" incode="1">mdivsi3_libfunc=<var>name</var></indexterm></indexcommand>
<para>Set the name of the library function used for 32-bit signed division to
<var>name</var>.
This only affects the name used in the <samp>call</samp> and <samp>inv:call</samp>
division strategies, and the compiler still expects the same
sets of input/output/clobbered registers as if this option were not present.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfixed-range=<var>register-range</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2283" incode="1">mfixed-range</indexterm></indexcommand>
<para>Generate code treating the given register range as fixed registers.
A fixed register is one that the register allocator can not use.  This is
useful when compiling kernel code.  A register range is specified as
two registers separated by a dash.  Multiple register ranges can be
specified separated by a comma.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mindexed-addressing</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2284" incode="1">mindexed-addressing</indexterm></indexcommand>
<para>Enable the use of the indexed addressing mode for SHmedia32/SHcompact.
This is only safe if the hardware and/or OS implement 32-bit wrap-around
semantics for the indexed addressing mode.  The architecture allows the
implementation of processors with 64-bit MMU, which the OS could use to
get 32-bit addressing, but since no current hardware implementation supports
this or any other way to make the indexed addressing mode safe to use in
the 32-bit ABI, the default is <option>-mno-indexed-addressing</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgettrcost=<var>number</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2285" incode="1">mgettrcost=<var>number</var></indexterm></indexcommand>
<para>Set the cost assumed for the <code>gettr</code> instruction to <var>number</var>.
The default is 2 if <option>-mpt-fixed</option> is in effect, 100 otherwise.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpt-fixed</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2286" incode="1">mpt-fixed</indexterm></indexcommand>
<para>Assume <code>pt*</code> instructions won&textrsquo;t trap.  This generally generates
better-scheduled code, but is unsafe on current hardware.
The current architecture
definition says that <code>ptabs</code> and <code>ptrel</code> trap when the target 
anded with 3 is 3.
This has the unintentional effect of making it unsafe to schedule these
instructions before a branch, or hoist them out of a loop.  For example,
<code>__do_global_ctors</code>, a part of <file>libgcc</file>
that runs constructors at program
startup, calls functions in a list which is delimited by &minus;1.  With the
<option>-mpt-fixed</option> option, the <code>ptabs</code> is done before testing against &minus;1.
That means that all the constructors run a bit more quickly, but when
the loop comes to the end of the list, the program crashes because <code>ptabs</code>
loads &minus;1 into a target register.  
</para>
<para>Since this option is unsafe for any
hardware implementing the current architecture specification, the default
is <option>-mno-pt-fixed</option>.  Unless specified explicitly with 
<option>-mgettrcost</option>, <option>-mno-pt-fixed</option> also implies <option>-mgettrcost=100</option>;
this deters register allocation from using target registers for storing
ordinary integers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minvalid-symbols</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2287" incode="1">minvalid-symbols</indexterm></indexcommand>
<para>Assume symbols might be invalid.  Ordinary function symbols generated by
the compiler are always valid to load with
<code>movi</code>/<code>shori</code>/<code>ptabs</code> or
<code>movi</code>/<code>shori</code>/<code>ptrel</code>,
but with assembler and/or linker tricks it is possible
to generate symbols that cause <code>ptabs</code> or <code>ptrel</code> to trap.
This option is only meaningful when <option>-mno-pt-fixed</option> is in effect.
It prevents cross-basic-block CSE, hoisting and most scheduling
of symbol loads.  The default is <option>-mno-invalid-symbols</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbranch-cost=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2288" incode="1">mbranch-cost=<var>num</var></indexterm></indexcommand>
<para>Assume <var>num</var> to be the cost for a branch instruction.  Higher numbers
make the compiler try to generate more branch-free code if possible.  
If not specified the value is selected depending on the processor type that
is being compiled for.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mzdcbranch</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-zdcbranch</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2289" incode="1">mzdcbranch</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2290" incode="1">mno-zdcbranch</indexterm></indexcommand>
<para>Assume (do not assume) that zero displacement conditional branch instructions
<code>bt</code> and <code>bf</code> are fast.  If <option>-mzdcbranch</option> is specified, the
compiler prefers zero displacement branch code sequences.  This is
enabled by default when generating code for SH4 and SH4A.  It can be explicitly
disabled by specifying <option>-mno-zdcbranch</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcbranch-force-delay-slot</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2291" incode="1">mcbranch-force-delay-slot</indexterm></indexcommand>
<para>Force the usage of delay slots for conditional branches, which stuffs the delay
slot with a <code>nop</code> if a suitable instruction can&textrsquo;t be found.  By default
this option is disabled.  It can be enabled to work around hardware bugs as
found in the original SH7055.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfused-madd</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fused-madd</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2292" incode="1">mfused-madd</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2293" incode="1">mno-fused-madd</indexterm></indexcommand>
<para>Generate code that uses (does not use) the floating-point multiply and
accumulate instructions.  These instructions are generated by default
if hardware floating point is used.  The machine-dependent
<option>-mfused-madd</option> option is now mapped to the machine-independent
<option>-ffp-contract=fast</option> option, and <option>-mno-fused-madd</option> is
mapped to <option>-ffp-contract=off</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfsca</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fsca</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2294" incode="1">mfsca</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2295" incode="1">mno-fsca</indexterm></indexcommand>
<para>Allow or disallow the compiler to emit the <code>fsca</code> instruction for sine
and cosine approximations.  The option <option>-mfsca</option> must be used in
combination with <option>-funsafe-math-optimizations</option>.  It is enabled by default
when generating code for SH4A.  Using <option>-mno-fsca</option> disables sine and cosine
approximations even if <option>-funsafe-math-optimizations</option> is in effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfsrra</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fsrra</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2296" incode="1">mfsrra</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2297" incode="1">mno-fsrra</indexterm></indexcommand>
<para>Allow or disallow the compiler to emit the <code>fsrra</code> instruction for
reciprocal square root approximations.  The option <option>-mfsrra</option> must be used
in combination with <option>-funsafe-math-optimizations</option> and
<option>-ffinite-math-only</option>.  It is enabled by default when generating code for
SH4A.  Using <option>-mno-fsrra</option> disables reciprocal square root approximations
even if <option>-funsafe-math-optimizations</option> and <option>-ffinite-math-only</option> are
in effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpretend-cmove</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2298" incode="1">mpretend-cmove</indexterm></indexcommand>
<para>Prefer zero-displacement conditional branches for conditional move instruction
patterns.  This can result in faster code on the SH4 processor.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="Solaris-2-Options" spaces=" "><nodename>Solaris 2 Options</nodename><nodenext automatic="on">SPARC Options</nodenext><nodeprev automatic="on">SH Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>Solaris 2 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="217">Solaris 2 options</indexterm></cindex>

<para>These <samp>-m</samp> options are supported on Solaris 2:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mclear-hwcap</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2299" incode="1">mclear-hwcap</indexterm></indexcommand>
<para><option>-mclear-hwcap</option> tells the compiler to remove the hardware
capabilities generated by the Solaris assembler.  This is only necessary
when object files use ISA extensions not supported by the current
machine, but check at runtime whether or not to use them.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mimpure-text</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2300" incode="1">mimpure-text</indexterm></indexcommand>
<para><option>-mimpure-text</option>, used in addition to <option>-shared</option>, tells
the compiler to not pass <option>-z text</option> to the linker when linking a
shared object.  Using this option, you can link position-dependent
code into a shared object.
</para>
<para><option>-mimpure-text</option> suppresses the &textldquo;relocations remain against
allocatable but non-writable sections&textrdquo; linker error message.
However, the necessary relocations trigger copy-on-write, and the
shared object is not actually shared across processes.  Instead of
using <option>-mimpure-text</option>, you should compile all source code with
<option>-fpic</option> or <option>-fPIC</option>.
</para>
</tableitem></tableentry></table>

<para>These switches are supported in addition to the above on Solaris 2:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-pthreads</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2301" incode="1">pthreads</indexterm></indexcommand>
<para>Add support for multithreading using the POSIX threads library.  This
option sets flags for both the preprocessor and linker.  This option does
not affect the thread safety of object code produced  by the compiler or
that of libraries supplied with it.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-pthread</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2302" incode="1">pthread</indexterm></indexcommand>
<para>This is a synonym for <option>-pthreads</option>.
</para></tableitem></tableentry></table>

</subsection>
<node name="SPARC-Options" spaces=" "><nodename>SPARC Options</nodename><nodenext automatic="on">SPU Options</nodenext><nodeprev automatic="on">Solaris 2 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>SPARC Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="218">SPARC options</indexterm></cindex>

<para>These <samp>-m</samp> options are supported on the SPARC:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-app-regs</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mapp-regs</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2303" incode="1">mno-app-regs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2304" incode="1">mapp-regs</indexterm></indexcommand>
<para>Specify <option>-mapp-regs</option> to generate output using the global registers
2 through 4, which the SPARC SVR4 ABI reserves for applications.  Like the
global register 1, each global register 2 through 4 is then treated as an
allocable register that is clobbered by function calls.  This is the default.
</para>
<para>To be fully SVR4 ABI-compliant at the cost of some performance loss,
specify <option>-mno-app-regs</option>.  You should compile libraries and system
software with this option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mflat</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-flat</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2305" incode="1">mflat</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2306" incode="1">mno-flat</indexterm></indexcommand>
<para>With <option>-mflat</option>, the compiler does not generate save/restore instructions
and uses a &textldquo;flat&textrdquo; or single register window model.  This model is compatible
with the regular register window model.  The local registers and the input
registers (0&textndash;5) are still treated as &textldquo;call-saved&textrdquo; registers and are
saved on the stack as needed.
</para>
<para>With <option>-mno-flat</option> (the default), the compiler generates save/restore
instructions (except for leaf functions).  This is the normal operating mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfpu</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mhard-float</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2307" incode="1">mfpu</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2308" incode="1">mhard-float</indexterm></indexcommand>
<para>Generate output containing floating-point instructions.  This is the
default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-fpu</itemformat></item>
<itemx spaces=" "><itemformat command="code">-msoft-float</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2309" incode="1">mno-fpu</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2310" incode="1">msoft-float</indexterm></indexcommand>
<para>Generate output containing library calls for floating point.
<strong>Warning:</strong> the requisite libraries are not available for all SPARC
targets.  Normally the facilities of the machine&textrsquo;s usual C compiler are
used, but this cannot be done directly in cross-compilation.  You must make
your own arrangements to provide suitable library functions for
cross-compilation.  The embedded targets <samp>sparc-*-aout</samp> and
<samp>sparclite-*-*</samp> do provide software floating-point support.
</para>
<para><option>-msoft-float</option> changes the calling convention in the output file;
therefore, it is only useful if you compile <emph>all</emph> of a program with
this option.  In particular, you need to compile <file>libgcc.a</file>, the
library that comes with GCC, with <option>-msoft-float</option> in order for
this to work.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mhard-quad-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2311" incode="1">mhard-quad-float</indexterm></indexcommand>
<para>Generate output containing quad-word (long double) floating-point
instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msoft-quad-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2312" incode="1">msoft-quad-float</indexterm></indexcommand>
<para>Generate output containing library calls for quad-word (long double)
floating-point instructions.  The functions called are those specified
in the SPARC ABI&eosperiod;  This is the default.
</para>
<para>As of this writing, there are no SPARC implementations that have hardware
support for the quad-word floating-point instructions.  They all invoke
a trap handler for one of these instructions, and then the trap handler
emulates the effect of the instruction.  Because of the trap handler overhead,
this is much slower than calling the ABI library routines.  Thus the
<option>-msoft-quad-float</option> option is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-unaligned-doubles</itemformat></item>
<itemx spaces=" "><itemformat command="code">-munaligned-doubles</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2313" incode="1">mno-unaligned-doubles</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2314" incode="1">munaligned-doubles</indexterm></indexcommand>
<para>Assume that doubles have 8-byte alignment.  This is the default.
</para>
<para>With <option>-munaligned-doubles</option>, GCC assumes that doubles have 8-byte
alignment only if they are contained in another type, or if they have an
absolute address.  Otherwise, it assumes they have 4-byte alignment.
Specifying this option avoids some rare compatibility problems with code
generated by other compilers.  It is not the default because it results
in a performance loss, especially for floating-point code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-muser-mode</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-user-mode</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2315" incode="1">muser-mode</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2316" incode="1">mno-user-mode</indexterm></indexcommand>
<para>Do not generate code that can only run in supervisor mode.  This is relevant
only for the <code>casa</code> instruction emitted for the LEON3 processor.  The
default is <option>-mno-user-mode</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-faster-structs</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mfaster-structs</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2317" incode="1">mno-faster-structs</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2318" incode="1">mfaster-structs</indexterm></indexcommand>
<para>With <option>-mfaster-structs</option>, the compiler assumes that structures
should have 8-byte alignment.  This enables the use of pairs of
<code>ldd</code> and <code>std</code> instructions for copies in structure
assignment, in place of twice as many <code>ld</code> and <code>st</code> pairs.
However, the use of this changed alignment directly violates the SPARC
ABI&eosperiod;  Thus, it&textrsquo;s intended only for use on targets where the developer
acknowledges that their resulting code is not directly in line with
the rules of the ABI&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>cpu_type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2319" incode="1">mcpu</indexterm></indexcommand>
<para>Set the instruction set, register set, and instruction scheduling parameters
for machine type <var>cpu_type</var>.  Supported values for <var>cpu_type</var> are
<samp>v7</samp>, <samp>cypress</samp>, <samp>v8</samp>, <samp>supersparc</samp>, <samp>hypersparc</samp>,
<samp>leon</samp>, <samp>leon3</samp>, <samp>leon3v7</samp>, <samp>sparclite</samp>, <samp>f930</samp>,
<samp>f934</samp>, <samp>sparclite86x</samp>, <samp>sparclet</samp>, <samp>tsc701</samp>, <samp>v9</samp>,
<samp>ultrasparc</samp>, <samp>ultrasparc3</samp>, <samp>niagara</samp>, <samp>niagara2</samp>,
<samp>niagara3</samp> and <samp>niagara4</samp>.
</para>
<para>Native Solaris and GNU/Linux toolchains also support the value <samp>native</samp>,
which selects the best architecture option for the host processor.
<option>-mcpu=native</option> has no effect if GCC does not recognize
the processor.
</para>
<para>Default instruction scheduling parameters are used for values that select
an architecture and not an implementation.  These are <samp>v7</samp>, <samp>v8</samp>,
<samp>sparclite</samp>, <samp>sparclet</samp>, <samp>v9</samp>.
</para>
<para>Here is a list of each supported architecture and their supported
implementations.
</para>
<table commandarg="asis" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="asis">v7</itemformat></item>
</tableterm><tableitem><para>cypress, leon3v7
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">v8</itemformat></item>
</tableterm><tableitem><para>supersparc, hypersparc, leon, leon3
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">sparclite</itemformat></item>
</tableterm><tableitem><para>f930, f934, sparclite86x
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">sparclet</itemformat></item>
</tableterm><tableitem><para>tsc701
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">v9</itemformat></item>
</tableterm><tableitem><para>ultrasparc, ultrasparc3, niagara, niagara2, niagara3, niagara4
</para></tableitem></tableentry></table>

<para>By default (unless configured otherwise), GCC generates code for the V7
variant of the SPARC architecture.  With <option>-mcpu=cypress</option>, the compiler
additionally optimizes it for the Cypress CY7C602 chip, as used in the
SPARCStation/SPARCServer 3xx series.  This is also appropriate for the older
SPARCStation 1, 2, IPX etc.
</para>
<para>With <option>-mcpu=v8</option>, GCC generates code for the V8 variant of the SPARC
architecture.  The only difference from V7 code is that the compiler emits
the integer multiply and integer divide instructions which exist in SPARC-V8
but not in SPARC-V7.  With <option>-mcpu=supersparc</option>, the compiler additionally
optimizes it for the SuperSPARC chip, as used in the SPARCStation 10, 1000 and
2000 series.
</para>
<para>With <option>-mcpu=sparclite</option>, GCC generates code for the SPARClite variant of
the SPARC architecture.  This adds the integer multiply, integer divide step
and scan (<code>ffs</code>) instructions which exist in SPARClite but not in SPARC-V7.
With <option>-mcpu=f930</option>, the compiler additionally optimizes it for the
Fujitsu MB86930 chip, which is the original SPARClite, with no FPU&eosperiod;  With
<option>-mcpu=f934</option>, the compiler additionally optimizes it for the Fujitsu
MB86934 chip, which is the more recent SPARClite with FPU&eosperiod;
</para>
<para>With <option>-mcpu=sparclet</option>, GCC generates code for the SPARClet variant of
the SPARC architecture.  This adds the integer multiply, multiply/accumulate,
integer divide step and scan (<code>ffs</code>) instructions which exist in SPARClet
but not in SPARC-V7.  With <option>-mcpu=tsc701</option>, the compiler additionally
optimizes it for the TEMIC SPARClet chip.
</para>
<para>With <option>-mcpu=v9</option>, GCC generates code for the V9 variant of the SPARC
architecture.  This adds 64-bit integer and floating-point move instructions,
3 additional floating-point condition code registers and conditional move
instructions.  With <option>-mcpu=ultrasparc</option>, the compiler additionally
optimizes it for the Sun UltraSPARC I/II/IIi chips.  With
<option>-mcpu=ultrasparc3</option>, the compiler additionally optimizes it for the
Sun UltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips.  With
<option>-mcpu=niagara</option>, the compiler additionally optimizes it for
Sun UltraSPARC T1 chips.  With <option>-mcpu=niagara2</option>, the compiler
additionally optimizes it for Sun UltraSPARC T2 chips. With
<option>-mcpu=niagara3</option>, the compiler additionally optimizes it for Sun
UltraSPARC T3 chips.  With <option>-mcpu=niagara4</option>, the compiler
additionally optimizes it for Sun UltraSPARC T4 chips.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>cpu_type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2320" incode="1">mtune</indexterm></indexcommand>
<para>Set the instruction scheduling parameters for machine type
<var>cpu_type</var>, but do not set the instruction set or register set that the
option <option>-mcpu=<var>cpu_type</var></option> does.
</para>
<para>The same values for <option>-mcpu=<var>cpu_type</var></option> can be used for
<option>-mtune=<var>cpu_type</var></option>, but the only useful values are those
that select a particular CPU implementation.  Those are <samp>cypress</samp>,
<samp>supersparc</samp>, <samp>hypersparc</samp>, <samp>leon</samp>, <samp>leon3</samp>,
<samp>leon3v7</samp>, <samp>f930</samp>, <samp>f934</samp>, <samp>sparclite86x</samp>, <samp>tsc701</samp>,
<samp>ultrasparc</samp>, <samp>ultrasparc3</samp>, <samp>niagara</samp>, <samp>niagara2</samp>,
<samp>niagara3</samp> and <samp>niagara4</samp>.  With native Solaris and GNU/Linux
toolchains, <samp>native</samp> can also be used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mv8plus</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-v8plus</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2321" incode="1">mv8plus</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2322" incode="1">mno-v8plus</indexterm></indexcommand>
<para>With <option>-mv8plus</option>, GCC generates code for the SPARC-V8+ ABI&eosperiod;  The
difference from the V8 ABI is that the global and out registers are
considered 64 bits wide.  This is enabled by default on Solaris in 32-bit
mode for all SPARC-V9 processors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvis</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-vis</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2323" incode="1">mvis</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2324" incode="1">mno-vis</indexterm></indexcommand>
<para>With <option>-mvis</option>, GCC generates code that takes advantage of the UltraSPARC
Visual Instruction Set extensions.  The default is <option>-mno-vis</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvis2</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-vis2</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2325" incode="1">mvis2</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2326" incode="1">mno-vis2</indexterm></indexcommand>
<para>With <option>-mvis2</option>, GCC generates code that takes advantage of
version 2.0 of the UltraSPARC Visual Instruction Set extensions.  The
default is <option>-mvis2</option> when targeting a cpu that supports such
instructions, such as UltraSPARC-III and later.  Setting <option>-mvis2</option>
also sets <option>-mvis</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvis3</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-vis3</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2327" incode="1">mvis3</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2328" incode="1">mno-vis3</indexterm></indexcommand>
<para>With <option>-mvis3</option>, GCC generates code that takes advantage of
version 3.0 of the UltraSPARC Visual Instruction Set extensions.  The
default is <option>-mvis3</option> when targeting a cpu that supports such
instructions, such as niagara-3 and later.  Setting <option>-mvis3</option>
also sets <option>-mvis2</option> and <option>-mvis</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcbcond</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-cbcond</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2329" incode="1">mcbcond</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2330" incode="1">mno-cbcond</indexterm></indexcommand>
<para>With <option>-mcbcond</option>, GCC generates code that takes advantage of
compare-and-branch instructions, as defined in the Sparc Architecture 2011.
The default is <option>-mcbcond</option> when targeting a cpu that supports such
instructions, such as niagara-4 and later.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpopc</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-popc</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2331" incode="1">mpopc</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2332" incode="1">mno-popc</indexterm></indexcommand>
<para>With <option>-mpopc</option>, GCC generates code that takes advantage of the UltraSPARC
population count instruction.  The default is <option>-mpopc</option>
when targeting a cpu that supports such instructions, such as Niagara-2 and
later.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfmaf</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fmaf</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2333" incode="1">mfmaf</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2334" incode="1">mno-fmaf</indexterm></indexcommand>
<para>With <option>-mfmaf</option>, GCC generates code that takes advantage of the UltraSPARC
Fused Multiply-Add Floating-point extensions.  The default is <option>-mfmaf</option>
when targeting a cpu that supports such instructions, such as Niagara-3 and
later.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-at697f</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2335" incode="1">mfix-at697f</indexterm></indexcommand>
<para>Enable the documented workaround for the single erratum of the Atmel AT697F
processor (which corresponds to erratum #13 of the AT697E processor).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfix-ut699</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2336" incode="1">mfix-ut699</indexterm></indexcommand>
<para>Enable the documented workarounds for the floating-point errata and the data
cache nullify errata of the UT699 processor.
</para></tableitem></tableentry></table>

<para>These <samp>-m</samp> options are supported in addition to the above
on SPARC-V9 processors in 64-bit environments:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-m32</itemformat></item>
<itemx spaces=" "><itemformat command="code">-m64</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2337" incode="1">m32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2338" incode="1">m64</indexterm></indexcommand>
<para>Generate code for a 32-bit or 64-bit environment.
The 32-bit environment sets int, long and pointer to 32 bits.
The 64-bit environment sets int to 32 bits and long and pointer
to 64 bits.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=<var>which</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2339" incode="1">mcmodel</indexterm></indexcommand>
<para>Set the code model to one of
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">medlow</itemformat></item>
</tableterm><tableitem><para>The Medium/Low code model: 64-bit addresses, programs
must be linked in the low 32 bits of memory.  Programs can be statically
or dynamically linked.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">medmid</itemformat></item>
</tableterm><tableitem><para>The Medium/Middle code model: 64-bit addresses, programs
must be linked in the low 44 bits of memory, the text and data segments must
be less than 2GB in size and the data segment must be located within 2GB of
the text segment.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">medany</itemformat></item>
</tableterm><tableitem><para>The Medium/Anywhere code model: 64-bit addresses, programs
may be linked anywhere in memory, the text and data segments must be less
than 2GB in size and the data segment must be located within 2GB of the
text segment.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">embmedany</itemformat></item>
</tableterm><tableitem><para>The Medium/Anywhere code model for embedded systems:
64-bit addresses, the text and data segments must be less than 2GB in
size, both starting anywhere in memory (determined at link time).  The
global register %g4 points to the base of the data segment.  Programs
are statically linked and PIC is not supported.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmemory-model=<var>mem-model</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2340" incode="1">mmemory-model</indexterm></indexcommand>
<para>Set the memory model in force on the processor to one of
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">default</itemformat></item>
</tableterm><tableitem><para>The default memory model for the processor and operating system.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">rmo</itemformat></item>
</tableterm><tableitem><para>Relaxed Memory Order
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">pso</itemformat></item>
</tableterm><tableitem><para>Partial Store Order
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">tso</itemformat></item>
</tableterm><tableitem><para>Total Store Order
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sc</itemformat></item>
</tableterm><tableitem><para>Sequential Consistency
</para></tableitem></tableentry></table>

<para>These memory models are formally defined in Appendix D of the Sparc V9
architecture manual, as set in the processor&textrsquo;s <code>PSTATE.MM</code> field.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstack-bias</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-stack-bias</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2341" incode="1">mstack-bias</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2342" incode="1">mno-stack-bias</indexterm></indexcommand>
<para>With <option>-mstack-bias</option>, GCC assumes that the stack pointer, and
frame pointer if present, are offset by &minus;2047 which must be added back
when making stack frame references.  This is the default in 64-bit mode.
Otherwise, assume no such offset is present.
</para></tableitem></tableentry></table>

</subsection>
<node name="SPU-Options" spaces=" "><nodename>SPU Options</nodename><nodenext automatic="on">System V Options</nodenext><nodeprev automatic="on">SPARC Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>SPU Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="219">SPU options</indexterm></cindex>

<para>These <samp>-m</samp> options are supported on the SPU:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mwarn-reloc</itemformat></item>
<itemx spaces=" "><itemformat command="code">-merror-reloc</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2343" incode="1">mwarn-reloc</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2344" incode="1">merror-reloc</indexterm></indexcommand>

<para>The loader for SPU does not handle dynamic relocations.  By default, GCC
gives an error when it generates code that requires a dynamic
relocation.  <option>-mno-error-reloc</option> disables the error,
<option>-mwarn-reloc</option> generates a warning instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msafe-dma</itemformat></item>
<itemx spaces=" "><itemformat command="code">-munsafe-dma</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2345" incode="1">msafe-dma</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2346" incode="1">munsafe-dma</indexterm></indexcommand>

<para>Instructions that initiate or test completion of DMA must not be
reordered with respect to loads and stores of the memory that is being
accessed.
With <option>-munsafe-dma</option> you must use the <code>volatile</code> keyword to protect
memory accesses, but that can lead to inefficient code in places where the
memory is known to not change.  Rather than mark the memory as volatile,
you can use <option>-msafe-dma</option> to tell the compiler to treat
the DMA instructions as potentially affecting all memory.  
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbranch-hints</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2347" incode="1">mbranch-hints</indexterm></indexcommand>

<para>By default, GCC generates a branch hint instruction to avoid
pipeline stalls for always-taken or probably-taken branches.  A hint
is not generated closer than 8 instructions away from its branch.
There is little reason to disable them, except for debugging purposes,
or to make an object a little bit smaller.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msmall-mem</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mlarge-mem</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2348" incode="1">msmall-mem</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2349" incode="1">mlarge-mem</indexterm></indexcommand>

<para>By default, GCC generates code assuming that addresses are never larger
than 18 bits.  With <option>-mlarge-mem</option> code is generated that assumes
a full 32-bit address.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstdmain</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2350" incode="1">mstdmain</indexterm></indexcommand>

<para>By default, GCC links against startup code that assumes the SPU-style
main function interface (which has an unconventional parameter list).
With <option>-mstdmain</option>, GCC links your program against startup
code that assumes a C99-style interface to <code>main</code>, including a
local copy of <code>argv</code> strings.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfixed-range=<var>register-range</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2351" incode="1">mfixed-range</indexterm></indexcommand>
<para>Generate code treating the given register range as fixed registers.
A fixed register is one that the register allocator cannot use.  This is
useful when compiling kernel code.  A register range is specified as
two registers separated by a dash.  Multiple register ranges can be
specified separated by a comma.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mea32</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mea64</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2352" incode="1">mea32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2353" incode="1">mea64</indexterm></indexcommand>
<para>Compile code assuming that pointers to the PPU address space accessed
via the <code>__ea</code> named address space qualifier are either 32 or 64
bits wide.  The default is 32 bits.  As this is an ABI-changing option,
all object code in an executable must be compiled with the same setting.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-maddress-space-conversion</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-address-space-conversion</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2354" incode="1">maddress-space-conversion</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2355" incode="1">mno-address-space-conversion</indexterm></indexcommand>
<para>Allow/disallow treating the <code>__ea</code> address space as superset
of the generic address space.  This enables explicit type casts
between <code>__ea</code> and generic pointer as well as implicit
conversions of generic pointers to <code>__ea</code> pointers.  The
default is to allow address space pointer conversions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcache-size=<var>cache-size</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2356" incode="1">mcache-size</indexterm></indexcommand>
<para>This option controls the version of libgcc that the compiler links to an
executable and selects a software-managed cache for accessing variables
in the <code>__ea</code> address space with a particular cache size.  Possible
options for <var>cache-size</var> are <samp>8</samp>, <samp>16</samp>, <samp>32</samp>, <samp>64</samp>
and <samp>128</samp>.  The default cache size is 64KB.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-matomic-updates</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-atomic-updates</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2357" incode="1">matomic-updates</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2358" incode="1">mno-atomic-updates</indexterm></indexcommand>
<para>This option controls the version of libgcc that the compiler links to an
executable and selects whether atomic updates to the software-managed
cache of PPU-side variables are used.  If you use atomic updates, changes
to a PPU variable from SPU code using the <code>__ea</code> named address space
qualifier do not interfere with changes to other PPU variables residing
in the same cache line from PPU code.  If you do not use atomic updates,
such interference may occur; however, writing back cache lines is
more efficient.  The default behavior is to use atomic updates.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdual-nops</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mdual-nops=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2359" incode="1">mdual-nops</indexterm></indexcommand>
<para>By default, GCC inserts nops to increase dual issue when it expects
it to increase performance.  <var>n</var> can be a value from 0 to 10.  A
smaller <var>n</var> inserts fewer nops.  10 is the default, 0 is the
same as <option>-mno-dual-nops</option>.  Disabled with <option>-Os</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mhint-max-nops=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2360" incode="1">mhint-max-nops</indexterm></indexcommand>
<para>Maximum number of nops to insert for a branch hint.  A branch hint must
be at least 8 instructions away from the branch it is affecting.  GCC
inserts up to <var>n</var> nops to enforce this, otherwise it does not
generate the branch hint.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mhint-max-distance=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2361" incode="1">mhint-max-distance</indexterm></indexcommand>
<para>The encoding of the branch hint instruction limits the hint to be within
256 instructions of the branch it is affecting.  By default, GCC makes
sure it is within 125.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msafe-hints</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2362" incode="1">msafe-hints</indexterm></indexcommand>
<para>Work around a hardware bug that causes the SPU to stall indefinitely.
By default, GCC inserts the <code>hbrp</code> instruction to make sure
this stall won&textrsquo;t happen.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="System-V-Options" spaces=" "><nodename>System V Options</nodename><nodenext automatic="on">TILE-Gx Options</nodenext><nodeprev automatic="on">SPU Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>Options for System V</sectiontitle>

<para>These additional options are available on System V Release 4 for
compatibility with other compilers on those systems:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-G</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2363" incode="1">G</indexterm></indexcommand>
<para>Create a shared object.
It is recommended that <option>-symbolic</option> or <option>-shared</option> be used instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Qy</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2364" incode="1">Qy</indexterm></indexcommand>
<para>Identify the versions of each tool used by the compiler, in a
<code>.ident</code> assembler directive in the output.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Qn</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2365" incode="1">Qn</indexterm></indexcommand>
<para>Refrain from adding <code>.ident</code> directives to the output file (this is
the default).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-YP,<var>dirs</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2366" incode="1">YP</indexterm></indexcommand>
<para>Search the directories <var>dirs</var>, and no others, for libraries
specified with <option>-l</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Ym,<var>dir</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2367" incode="1">Ym</indexterm></indexcommand>
<para>Look in the directory <var>dir</var> to find the M4 preprocessor.
The assembler uses this option.
<!-- c This is supposed to go with a -Yd for predefined M4 macro files, but -->
<!-- c the generic assembler that comes with Solaris takes just -Ym. -->
</para></tableitem></tableentry></table>

</subsection>
<node name="TILE_002dGx-Options" spaces=" "><nodename>TILE-Gx Options</nodename><nodenext automatic="on">TILEPro Options</nodenext><nodeprev automatic="on">System V Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>TILE-Gx Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="220">TILE-Gx options</indexterm></cindex>

<para>These <samp>-m</samp> options are supported on the TILE-Gx:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=small</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2368" incode="1">mcmodel=small</indexterm></indexcommand>
<para>Generate code for the small model.  The distance for direct calls is
limited to 500M in either direction.  PC-relative addresses are 32
bits.  Absolute addresses support the full address range.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=large</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2369" incode="1">mcmodel=large</indexterm></indexcommand>
<para>Generate code for the large model.  There is no limitation on call
distance, pc-relative addresses, or absolute addresses.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2370" incode="1">mcpu</indexterm></indexcommand>
<para>Selects the type of CPU to be targeted.  Currently the only supported
type is <samp>tilegx</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m32</itemformat></item>
<itemx spaces=" "><itemformat command="code">-m64</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2371" incode="1">m32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2372" incode="1">m64</indexterm></indexcommand>
<para>Generate code for a 32-bit or 64-bit environment.  The 32-bit
environment sets int, long, and pointer to 32 bits.  The 64-bit
environment sets int to 32 bits and long and pointer to 64 bits.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbig-endian</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mlittle-endian</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2373" incode="1">mbig-endian</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2374" incode="1">mlittle-endian</indexterm></indexcommand>
<para>Generate code in big/little endian mode, respectively.
</para></tableitem></tableentry></table>

</subsection>
<node name="TILEPro-Options" spaces=" "><nodename>TILEPro Options</nodename><nodenext automatic="on">V850 Options</nodenext><nodeprev automatic="on">TILE-Gx Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>TILEPro Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="221">TILEPro options</indexterm></cindex>

<para>These <samp>-m</samp> options are supported on the TILEPro:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2375" incode="1">mcpu</indexterm></indexcommand>
<para>Selects the type of CPU to be targeted.  Currently the only supported
type is <samp>tilepro</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2376" incode="1">m32</indexterm></indexcommand>
<para>Generate code for a 32-bit environment, which sets int, long, and
pointer to 32 bits.  This is the only supported behavior so the flag
is essentially ignored.
</para></tableitem></tableentry></table>

</subsection>
<node name="V850-Options" spaces=" "><nodename>V850 Options</nodename><nodenext automatic="on">VAX Options</nodenext><nodeprev automatic="on">TILEPro Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>V850 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="222">V850 Options</indexterm></cindex>

<para>These <samp>-m</samp> options are defined for V850 implementations:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong-calls</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-long-calls</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2377" incode="1">mlong-calls</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2378" incode="1">mno-long-calls</indexterm></indexcommand>
<para>Treat all calls as being far away (near).  If calls are assumed to be
far away, the compiler always loads the function&textrsquo;s address into a
register, and calls indirect through the pointer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-ep</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mep</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2379" incode="1">mno-ep</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2380" incode="1">mep</indexterm></indexcommand>
<para>Do not optimize (do optimize) basic blocks that use the same index
pointer 4 or more times to copy pointer into the <code>ep</code> register, and
use the shorter <code>sld</code> and <code>sst</code> instructions.  The <option>-mep</option>
option is on by default if you optimize.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-prolog-function</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mprolog-function</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2381" incode="1">mno-prolog-function</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2382" incode="1">mprolog-function</indexterm></indexcommand>
<para>Do not use (do use) external functions to save and restore registers
at the prologue and epilogue of a function.  The external functions
are slower, but use less code space if more than one function saves
the same number of registers.  The <option>-mprolog-function</option> option
is on by default if you optimize.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mspace</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2383" incode="1">mspace</indexterm></indexcommand>
<para>Try to make the code as small as possible.  At present, this just turns
on the <option>-mep</option> and <option>-mprolog-function</option> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtda=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2384" incode="1">mtda</indexterm></indexcommand>
<para>Put static or global variables whose size is <var>n</var> bytes or less into
the tiny data area that register <code>ep</code> points to.  The tiny data
area can hold up to 256 bytes in total (128 bytes for byte references).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msda=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2385" incode="1">msda</indexterm></indexcommand>
<para>Put static or global variables whose size is <var>n</var> bytes or less into
the small data area that register <code>gp</code> points to.  The small data
area can hold up to 64 kilobytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mzda=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2386" incode="1">mzda</indexterm></indexcommand>
<para>Put static or global variables whose size is <var>n</var> bytes or less into
the first 32 kilobytes of memory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mv850</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2387" incode="1">mv850</indexterm></indexcommand>
<para>Specify that the target processor is the V850.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mv850e3v5</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2388" incode="1">mv850e3v5</indexterm></indexcommand>
<para>Specify that the target processor is the V850E3V5.  The preprocessor
constant <code>__v850e3v5__</code> is defined if this option is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mv850e2v4</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2389" incode="1">mv850e2v4</indexterm></indexcommand>
<para>Specify that the target processor is the V850E3V5.  This is an alias for
the <option>-mv850e3v5</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mv850e2v3</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2390" incode="1">mv850e2v3</indexterm></indexcommand>
<para>Specify that the target processor is the V850E2V3.  The preprocessor
constant <code>__v850e2v3__</code> is defined if this option is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mv850e2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2391" incode="1">mv850e2</indexterm></indexcommand>
<para>Specify that the target processor is the V850E2.  The preprocessor
constant <code>__v850e2__</code> is defined if this option is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mv850e1</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2392" incode="1">mv850e1</indexterm></indexcommand>
<para>Specify that the target processor is the V850E1.  The preprocessor
constants <code>__v850e1__</code> and <code>__v850e__</code> are defined if
this option is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mv850es</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2393" incode="1">mv850es</indexterm></indexcommand>
<para>Specify that the target processor is the V850ES.  This is an alias for
the <option>-mv850e1</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mv850e</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2394" incode="1">mv850e</indexterm></indexcommand>
<para>Specify that the target processor is the V850E&eosperiod;  The preprocessor
constant <code>__v850e__</code> is defined if this option is used.
</para>
<para>If neither <option>-mv850</option> nor <option>-mv850e</option> nor <option>-mv850e1</option>
nor <option>-mv850e2</option> nor <option>-mv850e2v3</option> nor <option>-mv850e3v5</option>
are defined then a default target processor is chosen and the
relevant <samp>__v850*__</samp> preprocessor constant is defined.
</para>
<para>The preprocessor constants <code>__v850</code> and <code>__v851__</code> are always
defined, regardless of which processor variant is the target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdisable-callt</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-disable-callt</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2395" incode="1">mdisable-callt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2396" incode="1">mno-disable-callt</indexterm></indexcommand>
<para>This option suppresses generation of the <code>CALLT</code> instruction for the
v850e, v850e1, v850e2, v850e2v3 and v850e3v5 flavors of the v850
architecture.
</para>
<para>This option is enabled by default when the RH850 ABI is
in use (see <option>-mrh850-abi</option>), and disabled by default when the
GCC ABI is in use.  If <code>CALLT</code> instructions are being generated
then the C preprocessor symbol <code>__V850_CALLT__</code> is defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrelax</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-relax</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2397" incode="1">mrelax</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2398" incode="1">mno-relax</indexterm></indexcommand>
<para>Pass on (or do not pass on) the <option>-mrelax</option> command-line option
to the assembler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong-jumps</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-long-jumps</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2399" incode="1">mlong-jumps</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2400" incode="1">mno-long-jumps</indexterm></indexcommand>
<para>Disable (or re-enable) the generation of PC-relative jump instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msoft-float</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mhard-float</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2401" incode="1">msoft-float</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2402" incode="1">mhard-float</indexterm></indexcommand>
<para>Disable (or re-enable) the generation of hardware floating point
instructions.  This option is only significant when the target
architecture is <samp>V850E2V3</samp> or higher.  If hardware floating point
instructions are being generated then the C preprocessor symbol
<code>__FPU_OK__</code> is defined, otherwise the symbol
<code>__NO_FPU__</code> is defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mloop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2403" incode="1">mloop</indexterm></indexcommand>
<para>Enables the use of the e3v5 LOOP instruction.  The use of this
instruction is not enabled by default when the e3v5 architecture is
selected because its use is still experimental.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrh850-abi</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mghs</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2404" incode="1">mrh850-abi</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2405" incode="1">mghs</indexterm></indexcommand>
<para>Enables support for the RH850 version of the V850 ABI.  This is the
default.  With this version of the ABI the following rules apply:
</para>
<itemize commandarg="bullet" endspaces=" ">
<listitem><prepend>&bullet;</prepend>
<para>Integer sized structures and unions are returned via a memory pointer
rather than a register.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Large structures and unions (more than 8 bytes in size) are passed by
value.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Functions are aligned to 16-bit boundaries.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The <option>-m8byte-align</option> command-line option is supported.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The <option>-mdisable-callt</option> command-line option is enabled by
default.  The <option>-mno-disable-callt</option> command-line option is not
supported.
</para></listitem></itemize>

<para>When this version of the ABI is enabled the C preprocessor symbol
<code>__V850_RH850_ABI__</code> is defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgcc-abi</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2406" incode="1">mgcc-abi</indexterm></indexcommand>
<para>Enables support for the old GCC version of the V850 ABI.  With this
version of the ABI the following rules apply:
</para>
<itemize commandarg="bullet" endspaces=" ">
<listitem><prepend>&bullet;</prepend>
<para>Integer sized structures and unions are returned in register <code>r10</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Large structures and unions (more than 8 bytes in size) are passed by
reference.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Functions are aligned to 32-bit boundaries, unless optimizing for
size.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The <option>-m8byte-align</option> command-line option is not supported.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The <option>-mdisable-callt</option> command-line option is supported but not
enabled by default.
</para></listitem></itemize>

<para>When this version of the ABI is enabled the C preprocessor symbol
<code>__V850_GCC_ABI__</code> is defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m8byte-align</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-8byte-align</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2407" incode="1">m8byte-align</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2408" incode="1">mno-8byte-align</indexterm></indexcommand>
<para>Enables support for <code>double</code> and <code>long long</code> types to be
aligned on 8-byte boundaries.  The default is to restrict the
alignment of all objects to at most 4-bytes.  When
<option>-m8byte-align</option> is in effect the C preprocessor symbol
<code>__V850_8BYTE_ALIGN__</code> is defined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mbig-switch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2409" incode="1">mbig-switch</indexterm></indexcommand>
<para>Generate code suitable for big switch tables.  Use this option only if
the assembler/linker complain about out of range branches within a switch
table.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mapp-regs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2410" incode="1">mapp-regs</indexterm></indexcommand>
<para>This option causes r2 and r5 to be used in the code generated by
the compiler.  This setting is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-app-regs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2411" incode="1">mno-app-regs</indexterm></indexcommand>
<para>This option causes r2 and r5 to be treated as fixed registers.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="VAX-Options" spaces=" "><nodename>VAX Options</nodename><nodenext automatic="on">Visium Options</nodenext><nodeprev automatic="on">V850 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>VAX Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="223">VAX options</indexterm></cindex>

<para>These <samp>-m</samp> options are defined for the VAX:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-munix</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2412" incode="1">munix</indexterm></indexcommand>
<para>Do not output certain jump instructions (<code>aobleq</code> and so on)
that the Unix assembler for the VAX cannot handle across long
ranges.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mgnu</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2413" incode="1">mgnu</indexterm></indexcommand>
<para>Do output those jump instructions, on the assumption that the
GNU assembler is being used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mg</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2414" incode="1">mg</indexterm></indexcommand>
<para>Output code for G-format floating-point numbers instead of D-format.
</para></tableitem></tableentry></table>

</subsection>
<node name="Visium-Options" spaces=" "><nodename>Visium Options</nodename><nodenext automatic="on">VMS Options</nodenext><nodeprev automatic="on">VAX Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>Visium Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="224">Visium options</indexterm></cindex>

<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdebug</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2415" incode="1">mdebug</indexterm></indexcommand>
<para>A program which performs file I/O and is destined to run on an MCM target
should be linked with this option.  It causes the libraries libc.a and
libdebug.a to be linked.  The program should be run on the target under
the control of the GDB remote debugging stub.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2416" incode="1">msim</indexterm></indexcommand>
<para>A program which performs file I/O and is destined to run on the simulator
should be linked with option.  This causes libraries libc.a and libsim.a to
be linked.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfpu</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mhard-float</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2417" incode="1">mfpu</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2418" incode="1">mhard-float</indexterm></indexcommand>
<para>Generate code containing floating-point instructions.  This is the
default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-fpu</itemformat></item>
<itemx spaces=" "><itemformat command="code">-msoft-float</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2419" incode="1">mno-fpu</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2420" incode="1">msoft-float</indexterm></indexcommand>
<para>Generate code containing library calls for floating-point.
</para>
<para><option>-msoft-float</option> changes the calling convention in the output file;
therefore, it is only useful if you compile <emph>all</emph> of a program with
this option.  In particular, you need to compile <file>libgcc.a</file>, the
library that comes with GCC, with <option>-msoft-float</option> in order for
this to work.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>cpu_type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2421" incode="1">mcpu</indexterm></indexcommand>
<para>Set the instruction set, register set, and instruction scheduling parameters
for machine type <var>cpu_type</var>.  Supported values for <var>cpu_type</var> are
<samp>mcm</samp>, <samp>gr5</samp> and <samp>gr6</samp>.
</para>
<para><samp>mcm</samp> is a synonym of <samp>gr5</samp> present for backward compatibility.
</para>
<para>By default (unless configured otherwise), GCC generates code for the GR5
variant of the Visium architecture.  
</para>
<para>With <option>-mcpu=gr6</option>, GCC generates code for the GR6 variant of the Visium
architecture.  The only difference from GR5 code is that the compiler will
generate block move instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>cpu_type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2422" incode="1">mtune</indexterm></indexcommand>
<para>Set the instruction scheduling parameters for machine type <var>cpu_type</var>,
but do not set the instruction set or register set that the option
<option>-mcpu=<var>cpu_type</var></option> would.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msv-mode</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2423" incode="1">msv-mode</indexterm></indexcommand>
<para>Generate code for the supervisor mode, where there are no restrictions on
the access to general registers.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-muser-mode</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2424" incode="1">muser-mode</indexterm></indexcommand>
<para>Generate code for the user mode, where the access to some general registers
is forbidden: on the GR5, registers r24 to r31 cannot be accessed in this
mode; on the GR6, only registers r29 to r31 are affected.
</para></tableitem></tableentry></table>

</subsection>
<node name="VMS-Options" spaces=" "><nodename>VMS Options</nodename><nodenext automatic="on">VxWorks Options</nodenext><nodeprev automatic="on">Visium Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>VMS Options</sectiontitle>

<para>These <samp>-m</samp> options are defined for the VMS implementations:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mvms-return-codes</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2425" incode="1">mvms-return-codes</indexterm></indexcommand>
<para>Return VMS condition codes from <code>main</code>. The default is to return POSIX-style
condition (e.g.<spacecmd type="spc"/>error) codes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdebug-main=<var>prefix</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2426" incode="1">mdebug-main=<var>prefix</var></indexterm></indexcommand>
<para>Flag the first routine whose name starts with <var>prefix</var> as the main
routine for the debugger.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmalloc64</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2427" incode="1">mmalloc64</indexterm></indexcommand>
<para>Default to 64-bit memory allocation routines.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpointer-size=<var>size</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2428" incode="1">mpointer-size=<var>size</var></indexterm></indexcommand>
<para>Set the default size of pointers. Possible options for <var>size</var> are
<samp>32</samp> or <samp>short</samp> for 32 bit pointers, <samp>64</samp> or <samp>long</samp>
for 64 bit pointers, and <samp>no</samp> for supporting only 32 bit pointers.
The later option disables <code>pragma pointer_size</code>.
</para></tableitem></tableentry></table>

</subsection>
<node name="VxWorks-Options" spaces=" "><nodename>VxWorks Options</nodename><nodenext automatic="on">x86 Options</nodenext><nodeprev automatic="on">VMS Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>VxWorks Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="225">VxWorks Options</indexterm></cindex>

<para>The options in this section are defined for all VxWorks targets.
Options specific to the target hardware are listed with the other
options for that target.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mrtp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2429" incode="1">mrtp</indexterm></indexcommand>
<para>GCC can generate code for both VxWorks kernels and real time processes
(RTPs).  This option switches from the former to the latter.  It also
defines the preprocessor macro <code>__RTP__</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-non-static</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2430" incode="1">non-static</indexterm></indexcommand>
<para>Link an RTP executable against shared libraries rather than static
libraries.  The options <option>-static</option> and <option>-shared</option> can
also be used for RTPs (<pxref label="Link-Options"><xrefnodename>Link Options</xrefnodename></pxref>); <option>-static</option>
is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Bstatic</itemformat></item>
<itemx spaces=" "><itemformat command="code">-Bdynamic</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2431" incode="1">Bstatic</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2432" incode="1">Bdynamic</indexterm></indexcommand>
<para>These options are passed down to the linker.  They are defined for
compatibility with Diab.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Xbind-lazy</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2433" incode="1">Xbind-lazy</indexterm></indexcommand>
<para>Enable lazy binding of function calls.  This option is equivalent to
<option>-Wl,-z,now</option> and is defined for compatibility with Diab.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-Xbind-now</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2434" incode="1">Xbind-now</indexterm></indexcommand>
<para>Disable lazy binding of function calls.  This option is the default and
is defined for compatibility with Diab.
</para></tableitem></tableentry></table>

</subsection>
<node name="x86-Options" spaces=" "><nodename>x86 Options</nodename><nodenext automatic="on">x86 Windows Options</nodenext><nodeprev automatic="on">VxWorks Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>x86 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="226">x86 Options</indexterm></cindex>

<para>These <samp>-m</samp> options are defined for the x86 family of computers.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">-march=<var>cpu-type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2435" incode="1">march</indexterm></indexcommand>
<para>Generate instructions for the machine type <var>cpu-type</var>.  In contrast to
<option>-mtune=<var>cpu-type</var></option>, which merely tunes the generated code 
for the specified <var>cpu-type</var>, <option>-march=<var>cpu-type</var></option> allows GCC
to generate code that may not run at all on processors other than the one
indicated.  Specifying <option>-march=<var>cpu-type</var></option> implies 
<option>-mtune=<var>cpu-type</var></option>.
</para>
<para>The choices for <var>cpu-type</var> are:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">native</itemformat></item>
</tableterm><tableitem><para>This selects the CPU to generate code for at compilation time by determining
the processor type of the compiling machine.  Using <option>-march=native</option>
enables all instruction subsets supported by the local machine (hence
the result might not run on different machines).  Using <option>-mtune=native</option>
produces code optimized for the local machine under the constraints
of the selected instruction set.  
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">i386</itemformat></item>
</tableterm><tableitem><para>Original Intel i386 CPU&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">i486</itemformat></item>
</tableterm><tableitem><para>Intel i486 CPU&eosperiod;  (No scheduling is implemented for this chip.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">i586</itemformat></item>
<itemx spaces=" "><itemformat command="samp">pentium</itemformat></itemx>
</tableterm><tableitem><para>Intel Pentium CPU with no MMX support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">pentium-mmx</itemformat></item>
</tableterm><tableitem><para>Intel Pentium MMX CPU, based on Pentium core with MMX instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">pentiumpro</itemformat></item>
</tableterm><tableitem><para>Intel Pentium Pro CPU&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">i686</itemformat></item>
</tableterm><tableitem><para>When used with <option>-march</option>, the Pentium Pro
instruction set is used, so the code runs on all i686 family chips.
When used with <option>-mtune</option>, it has the same meaning as <samp>generic</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">pentium2</itemformat></item>
</tableterm><tableitem><para>Intel Pentium II CPU, based on Pentium Pro core with MMX instruction set
support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">pentium3</itemformat></item>
<itemx spaces=" "><itemformat command="samp">pentium3m</itemformat></itemx>
</tableterm><tableitem><para>Intel Pentium III CPU, based on Pentium Pro core with MMX and SSE instruction
set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">pentium-m</itemformat></item>
</tableterm><tableitem><para>Intel Pentium M; low-power version of Intel Pentium III CPU
with MMX, SSE and SSE2 instruction set support.  Used by Centrino notebooks.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">pentium4</itemformat></item>
<itemx spaces=" "><itemformat command="samp">pentium4m</itemformat></itemx>
</tableterm><tableitem><para>Intel Pentium 4 CPU with MMX, SSE and SSE2 instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">prescott</itemformat></item>
</tableterm><tableitem><para>Improved version of Intel Pentium 4 CPU with MMX, SSE, SSE2 and SSE3 instruction
set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">nocona</itemformat></item>
</tableterm><tableitem><para>Improved version of Intel Pentium 4 CPU with 64-bit extensions, MMX, SSE,
SSE2 and SSE3 instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">core2</itemformat></item>
</tableterm><tableitem><para>Intel Core 2 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3 and SSSE3
instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">nehalem</itemformat></item>
</tableterm><tableitem><para>Intel Nehalem CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3,
SSE4.1, SSE4.2 and POPCNT instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">westmere</itemformat></item>
</tableterm><tableitem><para>Intel Westmere CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3,
SSE4.1, SSE4.2, POPCNT, AES and PCLMUL instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sandybridge</itemformat></item>
</tableterm><tableitem><para>Intel Sandy Bridge CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3,
SSE4.1, SSE4.2, POPCNT, AVX, AES and PCLMUL instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ivybridge</itemformat></item>
</tableterm><tableitem><para>Intel Ivy Bridge CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3,
SSE4.1, SSE4.2, POPCNT, AVX, AES, PCLMUL, FSGSBASE, RDRND and F16C
instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">haswell</itemformat></item>
</tableterm><tableitem><para>Intel Haswell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,
SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA,
BMI, BMI2 and F16C instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">broadwell</itemformat></item>
</tableterm><tableitem><para>Intel Broadwell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,
SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA,
BMI, BMI2, F16C, RDSEED, ADCX and PREFETCHW instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">bonnell</itemformat></item>
</tableterm><tableitem><para>Intel Bonnell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3 and SSSE3
instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">silvermont</itemformat></item>
</tableterm><tableitem><para>Intel Silvermont CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,
SSE4.1, SSE4.2, POPCNT, AES, PCLMUL and RDRND instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">knl</itemformat></item>
</tableterm><tableitem><para>Intel Knight&textrsquo;s Landing CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3,
SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA,
BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, AVX512F, AVX512PF, AVX512ER and
AVX512CD instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">k6</itemformat></item>
</tableterm><tableitem><para>AMD K6 CPU with MMX instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">k6-2</itemformat></item>
<itemx spaces=" "><itemformat command="samp">k6-3</itemformat></itemx>
</tableterm><tableitem><para>Improved versions of AMD K6 CPU with MMX and 3DNow!&noeos; instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">athlon</itemformat></item>
<itemx spaces=" "><itemformat command="samp">athlon-tbird</itemformat></itemx>
</tableterm><tableitem><para>AMD Athlon CPU with MMX, 3dNOW!, enhanced 3DNow!&noeos; and SSE prefetch instructions
support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">athlon-4</itemformat></item>
<itemx spaces=" "><itemformat command="samp">athlon-xp</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">athlon-mp</itemformat></itemx>
</tableterm><tableitem><para>Improved AMD Athlon CPU with MMX, 3DNow!, enhanced 3DNow!&noeos; and full SSE
instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">k8</itemformat></item>
<itemx spaces=" "><itemformat command="samp">opteron</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">athlon64</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">athlon-fx</itemformat></itemx>
</tableterm><tableitem><para>Processors based on the AMD K8 core with x86-64 instruction set support,
including the AMD Opteron, Athlon 64, and Athlon 64 FX processors.
(This supersets MMX, SSE, SSE2, 3DNow!, enhanced 3DNow!&noeos; and 64-bit
instruction set extensions.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">k8-sse3</itemformat></item>
<itemx spaces=" "><itemformat command="samp">opteron-sse3</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">athlon64-sse3</itemformat></itemx>
</tableterm><tableitem><para>Improved versions of AMD K8 cores with SSE3 instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">amdfam10</itemformat></item>
<itemx spaces=" "><itemformat command="samp">barcelona</itemformat></itemx>
</tableterm><tableitem><para>CPUs based on AMD Family 10h cores with x86-64 instruction set support.  (This
supersets MMX, SSE, SSE2, SSE3, SSE4A, 3DNow!, enhanced 3DNow!, ABM and 64-bit
instruction set extensions.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">bdver1</itemformat></item>
</tableterm><tableitem><para>CPUs based on AMD Family 15h cores with x86-64 instruction set support.  (This
supersets FMA4, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A,
SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">bdver2</itemformat></item>
</tableterm><tableitem><para>AMD Family 15h core based CPUs with x86-64 instruction set support.  (This
supersets BMI, TBM, F16C, FMA, FMA4, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX,
SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set 
extensions.)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">bdver3</itemformat></item>
</tableterm><tableitem><para>AMD Family 15h core based CPUs with x86-64 instruction set support.  (This
supersets BMI, TBM, F16C, FMA, FMA4, FSGSBASE, AVX, XOP, LWP, AES, 
PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 
64-bit instruction set extensions.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">bdver4</itemformat></item>
</tableterm><tableitem><para>AMD Family 15h core based CPUs with x86-64 instruction set support.  (This
supersets BMI, BMI2, TBM, F16C, FMA, FMA4, FSGSBASE, AVX, AVX2, XOP, LWP, 
AES, PCL_MUL, CX16, MOVBE, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, 
SSE4.2, ABM and 64-bit instruction set extensions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">btver1</itemformat></item>
</tableterm><tableitem><para>CPUs based on AMD Family 14h cores with x86-64 instruction set support.  (This
supersets MMX, SSE, SSE2, SSE3, SSSE3, SSE4A, CX16, ABM and 64-bit
instruction set extensions.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">btver2</itemformat></item>
</tableterm><tableitem><para>CPUs based on AMD Family 16h cores with x86-64 instruction set support. This
includes MOVBE, F16C, BMI, AVX, PCL_MUL, AES, SSE4.2, SSE4.1, CX16, ABM,
SSE4A, SSSE3, SSE3, SSE2, SSE, MMX and 64-bit instruction set extensions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">winchip-c6</itemformat></item>
</tableterm><tableitem><para>IDT WinChip C6 CPU, dealt in same way as i486 with additional MMX instruction
set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">winchip2</itemformat></item>
</tableterm><tableitem><para>IDT WinChip 2 CPU, dealt in same way as i486 with additional MMX and 3DNow!&noeos;
instruction set support.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c3</itemformat></item>
</tableterm><tableitem><para>VIA C3 CPU with MMX and 3DNow!&noeos; instruction set support.  (No scheduling is
implemented for this chip.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c3-2</itemformat></item>
</tableterm><tableitem><para>VIA C3-2 (Nehemiah/C5XL) CPU with MMX and SSE instruction set support.
(No scheduling is
implemented for this chip.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">geode</itemformat></item>
</tableterm><tableitem><para>AMD Geode embedded processor with MMX and 3DNow!&noeos; instruction set support.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune=<var>cpu-type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2436" incode="1">mtune</indexterm></indexcommand>
<para>Tune to <var>cpu-type</var> everything applicable about the generated code, except
for the ABI and the set of available instructions.  
While picking a specific <var>cpu-type</var> schedules things appropriately
for that particular chip, the compiler does not generate any code that
cannot run on the default machine type unless you use a
<option>-march=<var>cpu-type</var></option> option.
For example, if GCC is configured for i686-pc-linux-gnu
then <option>-mtune=pentium4</option> generates code that is tuned for Pentium 4
but still runs on i686 machines.
</para>
<para>The choices for <var>cpu-type</var> are the same as for <option>-march</option>.
In addition, <option>-mtune</option> supports 2 extra choices for <var>cpu-type</var>:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">generic</itemformat></item>
</tableterm><tableitem><para>Produce code optimized for the most common IA32/&slashbreak;AMD64/&slashbreak;EM64T processors.
If you know the CPU on which your code will run, then you should use
the corresponding <option>-mtune</option> or <option>-march</option> option instead of
<option>-mtune=generic</option>.  But, if you do not know exactly what CPU users
of your application will have, then you should use this option.
</para>
<para>As new processors are deployed in the marketplace, the behavior of this
option will change.  Therefore, if you upgrade to a newer version of
GCC, code generation controlled by this option will change to reflect
the processors
that are most common at the time that version of GCC is released.
</para>
<para>There is no <option>-march=generic</option> option because <option>-march</option>
indicates the instruction set the compiler can use, and there is no
generic instruction set applicable to all processors.  In contrast,
<option>-mtune</option> indicates the processor (or, in this case, collection of
processors) for which the code is optimized.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">intel</itemformat></item>
</tableterm><tableitem><para>Produce code optimized for the most current Intel processors, which are
Haswell and Silvermont for this version of GCC.  If you know the CPU
on which your code will run, then you should use the corresponding
<option>-mtune</option> or <option>-march</option> option instead of <option>-mtune=intel</option>.
But, if you want your application performs better on both Haswell and
Silvermont, then you should use this option.
</para>
<para>As new Intel processors are deployed in the marketplace, the behavior of
this option will change.  Therefore, if you upgrade to a newer version of
GCC, code generation controlled by this option will change to reflect
the most current Intel processors at the time that version of GCC is
released.
</para>
<para>There is no <option>-march=intel</option> option because <option>-march</option> indicates
the instruction set the compiler can use, and there is no common
instruction set applicable to all processors.  In contrast,
<option>-mtune</option> indicates the processor (or, in this case, collection of
processors) for which the code is optimized.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcpu=<var>cpu-type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2437" incode="1">mcpu</indexterm></indexcommand>
<para>A deprecated synonym for <option>-mtune</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfpmath=<var>unit</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2438" incode="1">mfpmath</indexterm></indexcommand>
<para>Generate floating-point arithmetic for selected unit <var>unit</var>.  The choices
for <var>unit</var> are:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">387</itemformat></item>
</tableterm><tableitem><para>Use the standard 387 floating-point coprocessor present on the majority of chips and
emulated otherwise.  Code compiled with this option runs almost everywhere.
The temporary results are computed in 80-bit precision instead of the precision
specified by the type, resulting in slightly different results compared to most
of other chips.  See <option>-ffloat-store</option> for more detailed description.
</para>
<para>This is the default choice for x86-32 targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse</itemformat></item>
</tableterm><tableitem><para>Use scalar floating-point instructions present in the SSE instruction set.
This instruction set is supported by Pentium III and newer chips,
and in the AMD line
by Athlon-4, Athlon XP and Athlon MP chips.  The earlier version of the SSE
instruction set supports only single-precision arithmetic, thus the double and
extended-precision arithmetic are still done using 387.  A later version, present
only in Pentium 4 and AMD x86-64 chips, supports double-precision
arithmetic too.
</para>
<para>For the x86-32 compiler, you must use <option>-march=<var>cpu-type</var></option>, <option>-msse</option>
or <option>-msse2</option> switches to enable SSE extensions and make this option
effective.  For the x86-64 compiler, these extensions are enabled by default.
</para>
<para>The resulting code should be considerably faster in the majority of cases and avoid
the numerical instability problems of 387 code, but may break some existing
code that expects temporaries to be 80 bits.
</para>
<para>This is the default choice for the x86-64 compiler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse,387</itemformat></item>
<itemx spaces=" "><itemformat command="samp">sse+387</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">both</itemformat></itemx>
</tableterm><tableitem><para>Attempt to utilize both instruction sets at once.  This effectively doubles the
amount of available registers, and on chips with separate execution units for
387 and SSE the execution resources too.  Use this option with care, as it is
still experimental, because the GCC register allocator does not model separate
functional units well, resulting in unstable performance.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-masm=<var>dialect</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2439" incode="1">masm=<var>dialect</var></indexterm></indexcommand>
<para>Output assembly instructions using selected <var>dialect</var>.  Also affects
which dialect is used for basic <code>asm</code> (<pxref label="Basic-Asm"><xrefnodename>Basic Asm</xrefnodename></pxref>) and
extended <code>asm</code> (<pxref label="Extended-Asm"><xrefnodename>Extended Asm</xrefnodename></pxref>). Supported choices (in dialect
order) are <samp>att</samp> or <samp>intel</samp>. The default is <samp>att</samp>. Darwin does
not support <samp>intel</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mieee-fp</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-ieee-fp</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2440" incode="1">mieee-fp</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2441" incode="1">mno-ieee-fp</indexterm></indexcommand>
<para>Control whether or not the compiler uses IEEE floating-point
comparisons.  These correctly handle the case where the result of a
comparison is unordered.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msoft-float</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2442" incode="1">msoft-float</indexterm></indexcommand>
<para>Generate output containing library calls for floating point.
</para>
<para><strong>Warning:</strong> the requisite libraries are not part of GCC&eosperiod;
Normally the facilities of the machine&textrsquo;s usual C compiler are used, but
this can&textrsquo;t be done directly in cross-compilation.  You must make your
own arrangements to provide suitable library functions for
cross-compilation.
</para>
<para>On machines where a function returns floating-point results in the 80387
register stack, some floating-point opcodes may be emitted even if
<option>-msoft-float</option> is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-fp-ret-in-387</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2443" incode="1">mno-fp-ret-in-387</indexterm></indexcommand>
<para>Do not use the FPU registers for return values of functions.
</para>
<para>The usual calling convention has functions return values of types
<code>float</code> and <code>double</code> in an FPU register, even if there
is no FPU&eosperiod;  The idea is that the operating system should emulate
an FPU&eosperiod;
</para>
<para>The option <option>-mno-fp-ret-in-387</option> causes such values to be returned
in ordinary CPU registers instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-fancy-math-387</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2444" incode="1">mno-fancy-math-387</indexterm></indexcommand>
<para>Some 387 emulators do not support the <code>sin</code>, <code>cos</code> and
<code>sqrt</code> instructions for the 387.  Specify this option to avoid
generating those instructions.  This option is the default on FreeBSD,
OpenBSD and NetBSD&eosperiod;  This option is overridden when <option>-march</option>
indicates that the target CPU always has an FPU and so the
instruction does not need emulation.  These
instructions are not generated unless you also use the
<option>-funsafe-math-optimizations</option> switch.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-malign-double</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-align-double</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2445" incode="1">malign-double</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2446" incode="1">mno-align-double</indexterm></indexcommand>
<para>Control whether GCC aligns <code>double</code>, <code>long double</code>, and
<code>long long</code> variables on a two-word boundary or a one-word
boundary.  Aligning <code>double</code> variables on a two-word boundary
produces code that runs somewhat faster on a Pentium at the
expense of more memory.
</para>
<para>On x86-64, <option>-malign-double</option> is enabled by default.
</para>
<para><strong>Warning:</strong> if you use the <option>-malign-double</option> switch,
structures containing the above types are aligned differently than
the published application binary interface specifications for the x86-32
and are not binary compatible with structures in code compiled
without that switch.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m96bit-long-double</itemformat></item>
<itemx spaces=" "><itemformat command="code">-m128bit-long-double</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2447" incode="1">m96bit-long-double</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2448" incode="1">m128bit-long-double</indexterm></indexcommand>
<para>These switches control the size of <code>long double</code> type.  The x86-32
application binary interface specifies the size to be 96 bits,
so <option>-m96bit-long-double</option> is the default in 32-bit mode.
</para>
<para>Modern architectures (Pentium and newer) prefer <code>long double</code>
to be aligned to an 8- or 16-byte boundary.  In arrays or structures
conforming to the ABI, this is not possible.  So specifying
<option>-m128bit-long-double</option> aligns <code>long double</code>
to a 16-byte boundary by padding the <code>long double</code> with an additional
32-bit zero.
</para>
<para>In the x86-64 compiler, <option>-m128bit-long-double</option> is the default choice as
its ABI specifies that <code>long double</code> is aligned on 16-byte boundary.
</para>
<para>Notice that neither of these options enable any extra precision over the x87
standard of 80 bits for a <code>long double</code>.
</para>
<para><strong>Warning:</strong> if you override the default value for your target ABI, this
changes the size of 
structures and arrays containing <code>long double</code> variables,
as well as modifying the function calling convention for functions taking
<code>long double</code>.  Hence they are not binary-compatible
with code compiled without that switch.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlong-double-64</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mlong-double-80</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mlong-double-128</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2449" incode="1">mlong-double-64</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2450" incode="1">mlong-double-80</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2451" incode="1">mlong-double-128</indexterm></indexcommand>
<para>These switches control the size of <code>long double</code> type. A size
of 64 bits makes the <code>long double</code> type equivalent to the <code>double</code>
type. This is the default for 32-bit Bionic C library.  A size
of 128 bits makes the <code>long double</code> type equivalent to the
<code>__float128</code> type. This is the default for 64-bit Bionic C library.
</para>
<para><strong>Warning:</strong> if you override the default value for your target ABI, this
changes the size of
structures and arrays containing <code>long double</code> variables,
as well as modifying the function calling convention for functions taking
<code>long double</code>.  Hence they are not binary-compatible
with code compiled without that switch.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-malign-data=<var>type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2452" incode="1">malign-data</indexterm></indexcommand>
<para>Control how GCC aligns variables.  Supported values for <var>type</var> are
<samp>compat</samp> uses increased alignment value compatible uses GCC 4.8
and earlier, <samp>abi</samp> uses alignment value as specified by the
psABI, and <samp>cacheline</samp> uses increased alignment value to match
the cache line size.  <samp>compat</samp> is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlarge-data-threshold=<var>threshold</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2453" incode="1">mlarge-data-threshold</indexterm></indexcommand>
<para>When <option>-mcmodel=medium</option> is specified, data objects larger than
<var>threshold</var> are placed in the large data section.  This value must be the
same across all objects linked into the binary, and defaults to 65535.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrtd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2454" incode="1">mrtd</indexterm></indexcommand>
<para>Use a different function-calling convention, in which functions that
take a fixed number of arguments return with the <code>ret <var>num</var></code>
instruction, which pops their arguments while returning.  This saves one
instruction in the caller since there is no need to pop the arguments
there.
</para>
<para>You can specify that an individual function is called with this calling
sequence with the function attribute <code>stdcall</code>.  You can also
override the <option>-mrtd</option> option by using the function attribute
<code>cdecl</code>.  <xref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></xref>.
</para>
<para><strong>Warning:</strong> this calling convention is incompatible with the one
normally used on Unix, so you cannot use it if you need to call
libraries compiled with the Unix compiler.
</para>
<para>Also, you must provide function prototypes for all functions that
take variable numbers of arguments (including <code>printf</code>);
otherwise incorrect code is generated for calls to those
functions.
</para>
<para>In addition, seriously incorrect code results if you call a
function with too many arguments.  (Normally, extra arguments are
harmlessly ignored.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mregparm=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2455" incode="1">mregparm</indexterm></indexcommand>
<para>Control how many registers are used to pass integer arguments.  By
default, no registers are used to pass arguments, and at most 3
registers can be used.  You can control this behavior for a specific
function by using the function attribute <code>regparm</code>.
<xref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></xref>.
</para>
<para><strong>Warning:</strong> if you use this switch, and
<var>num</var> is nonzero, then you must build all modules with the same
value, including any libraries.  This includes the system libraries and
startup modules.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msseregparm</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2456" incode="1">msseregparm</indexterm></indexcommand>
<para>Use SSE register passing conventions for float and double arguments
and return values.  You can control this behavior for a specific
function by using the function attribute <code>sseregparm</code>.
<xref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></xref>.
</para>
<para><strong>Warning:</strong> if you use this switch then you must build all
modules with the same value, including any libraries.  This includes
the system libraries and startup modules.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvect8-ret-in-mem</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2457" incode="1">mvect8-ret-in-mem</indexterm></indexcommand>
<para>Return 8-byte vectors in memory instead of MMX registers.  This is the
default on Solaris&nbsp;8 and 9 and VxWorks to match the ABI of the Sun
Studio compilers until version 12.  Later compiler versions (starting
with Studio 12 Update&nbsp;1) follow the ABI used by other x86 targets, which
is the default on Solaris&nbsp;10 and later.  <emph>Only</emph> use this option if
you need to remain compatible with existing code produced by those
previous compiler versions or older versions of GCC&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpc32</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mpc64</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mpc80</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2458" incode="1">mpc32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2459" incode="1">mpc64</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2460" incode="1">mpc80</indexterm></indexcommand>

<para>Set 80387 floating-point precision to 32, 64 or 80 bits.  When <option>-mpc32</option>
is specified, the significands of results of floating-point operations are
rounded to 24 bits (single precision); <option>-mpc64</option> rounds the
significands of results of floating-point operations to 53 bits (double
precision) and <option>-mpc80</option> rounds the significands of results of
floating-point operations to 64 bits (extended double precision), which is
the default.  When this option is used, floating-point operations in higher
precisions are not available to the programmer without setting the FPU
control word explicitly.
</para>
<para>Setting the rounding of floating-point operations to less than the default
80 bits can speed some programs by 2% or more.  Note that some mathematical
libraries assume that extended-precision (80-bit) floating-point operations
are enabled by default; routines in such libraries could suffer significant
loss of accuracy, typically through so-called &textldquo;catastrophic cancellation&textrdquo;,
when this option is used to set the precision to less than extended precision.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstackrealign</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2461" incode="1">mstackrealign</indexterm></indexcommand>
<para>Realign the stack at entry.  On the x86, the <option>-mstackrealign</option>
option generates an alternate prologue and epilogue that realigns the
run-time stack if necessary.  This supports mixing legacy codes that keep
4-byte stack alignment with modern codes that keep 16-byte stack alignment for
SSE compatibility.  See also the attribute <code>force_align_arg_pointer</code>,
applicable to individual functions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpreferred-stack-boundary=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2462" incode="1">mpreferred-stack-boundary</indexterm></indexcommand>
<para>Attempt to keep the stack boundary aligned to a 2 raised to <var>num</var>
byte boundary.  If <option>-mpreferred-stack-boundary</option> is not specified,
the default is 4 (16 bytes or 128 bits).
</para>
<para><strong>Warning:</strong> When generating code for the x86-64 architecture with
SSE extensions disabled, <option>-mpreferred-stack-boundary=3</option> can be
used to keep the stack boundary aligned to 8 byte boundary.  Since
x86-64 ABI require 16 byte stack alignment, this is ABI incompatible and
intended to be used in controlled environment where stack space is
important limitation.  This option leads to wrong code when functions
compiled with 16 byte stack alignment (such as functions from a standard
library) are called with misaligned stack.  In this case, SSE
instructions may lead to misaligned memory access traps.  In addition,
variable arguments are handled incorrectly for 16 byte aligned
objects (including x87 long double and __int128), leading to wrong
results.  You must build all modules with
<option>-mpreferred-stack-boundary=3</option>, including any libraries.  This
includes the system libraries and startup modules.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mincoming-stack-boundary=<var>num</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2463" incode="1">mincoming-stack-boundary</indexterm></indexcommand>
<para>Assume the incoming stack is aligned to a 2 raised to <var>num</var> byte
boundary.  If <option>-mincoming-stack-boundary</option> is not specified,
the one specified by <option>-mpreferred-stack-boundary</option> is used.
</para>
<para>On Pentium and Pentium Pro, <code>double</code> and <code>long double</code> values
should be aligned to an 8-byte boundary (see <option>-malign-double</option>) or
suffer significant run time performance penalties.  On Pentium III, the
Streaming SIMD Extension (SSE) data type <code>__m128</code> may not work
properly if it is not 16-byte aligned.
</para>
<para>To ensure proper alignment of this values on the stack, the stack boundary
must be as aligned as that required by any value stored on the stack.
Further, every function must be generated such that it keeps the stack
aligned.  Thus calling a function compiled with a higher preferred
stack boundary from a function compiled with a lower preferred stack
boundary most likely misaligns the stack.  It is recommended that
libraries that use callbacks always use the default setting.
</para>
<para>This extra alignment does consume extra stack space, and generally
increases code size.  Code that is sensitive to stack space usage, such
as embedded systems and operating system kernels, may want to reduce the
preferred alignment to <option>-mpreferred-stack-boundary=2</option>.
</para>
<need value="200" line=" 200"></need>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmmx</itemformat></item>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2464" incode="1">mmmx</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-msse</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2465" incode="1">msse</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-msse2</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-msse3</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mssse3</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-msse4</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-msse4a</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-msse4.1</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-msse4.2</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mavx</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2466" incode="1">mavx</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mavx2</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mavx512f</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mavx512pf</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mavx512er</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mavx512cd</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-msha</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2467" incode="1">msha</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-maes</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2468" incode="1">maes</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mpclmul</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2469" incode="1">mpclmul</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mclfushopt</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2470" incode="1">mclfushopt</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mfsgsbase</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2471" incode="1">mfsgsbase</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mrdrnd</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2472" incode="1">mrdrnd</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mf16c</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2473" incode="1">mf16c</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mfma</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2474" incode="1">mfma</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mfma4</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mno-fma4</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mprefetchwt1</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2475" incode="1">mprefetchwt1</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mxop</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2476" incode="1">mxop</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mlwp</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2477" incode="1">mlwp</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-m3dnow</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2478" incode="1">m3dnow</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mpopcnt</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2479" incode="1">mpopcnt</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mabm</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2480" incode="1">mabm</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mbmi</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2481" incode="1">mbmi</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mbmi2</itemformat></itemx>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mlzcnt</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2482" incode="1">mlzcnt</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mfxsr</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2483" incode="1">mfxsr</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mxsave</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2484" incode="1">mxsave</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mxsaveopt</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2485" incode="1">mxsaveopt</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mxsavec</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2486" incode="1">mxsavec</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mxsaves</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2487" incode="1">mxsaves</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mrtm</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2488" incode="1">mrtm</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mtbm</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2489" incode="1">mtbm</indexterm></indexcommand>
<need value="200" line=" 200"></need>
<itemx spaces=" "><itemformat command="code">-mmpx</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2490" incode="1">mmpx</indexterm></indexcommand>
<para>These switches enable the use of instructions in the MMX, SSE,
SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,
SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,
BMI, BMI2, FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, MPX or 3DNow!&noeos;
extended instruction sets.  Each has a corresponding <option>-mno-</option> option
to disable use of these instructions.
</para>
<para>These extensions are also available as built-in functions: see
<ref label="x86-Built_002din-Functions"><xrefnodename>x86 Built-in Functions</xrefnodename></ref>, for details of the functions enabled and
disabled by these switches.
</para>
<para>To generate SSE/SSE2 instructions automatically from floating-point
code (as opposed to 387 instructions), see <option>-mfpmath=sse</option>.
</para>
<para>GCC depresses SSEx instructions when <option>-mavx</option> is used. Instead, it
generates new AVX instructions or AVX equivalence for all SSEx instructions
when needed.
</para>
<para>These options enable GCC to use these extended instructions in
generated code, even without <option>-mfpmath=sse</option>.  Applications that
perform run-time CPU detection must compile separate files for each
supported architecture, using the appropriate flags.  In particular,
the file containing the CPU detection code should be compiled without
these options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdump-tune-features</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2491" incode="1">mdump-tune-features</indexterm></indexcommand>
<para>This option instructs GCC to dump the names of the x86 performance 
tuning features and default settings. The names can be used in 
<option>-mtune-ctrl=<var>feature-list</var></option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtune-ctrl=<var>feature-list</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2492" incode="1">mtune-ctrl=<var>feature-list</var></indexterm></indexcommand>
<para>This option is used to do fine grain control of x86 code generation features.
<var>feature-list</var> is a comma separated list of <var>feature</var> names. See also
<option>-mdump-tune-features</option>. When specified, the <var>feature</var> is turned
on if it is not preceded with <samp>^</samp>, otherwise, it is turned off. 
<option>-mtune-ctrl=<var>feature-list</var></option> is intended to be used by GCC
developers. Using it may lead to code paths not covered by testing and can
potentially result in compiler ICEs or runtime errors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-default</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2493" incode="1">mno-default</indexterm></indexcommand>
<para>This option instructs GCC to turn off all tunable features. See also 
<option>-mtune-ctrl=<var>feature-list</var></option> and <option>-mdump-tune-features</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcld</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2494" incode="1">mcld</indexterm></indexcommand>
<para>This option instructs GCC to emit a <code>cld</code> instruction in the prologue
of functions that use string instructions.  String instructions depend on
the DF flag to select between autoincrement or autodecrement mode.  While the
ABI specifies the DF flag to be cleared on function entry, some operating
systems violate this specification by not clearing the DF flag in their
exception dispatchers.  The exception handler can be invoked with the DF flag
set, which leads to wrong direction mode when string instructions are used.
This option can be enabled by default on 32-bit x86 targets by configuring
GCC with the <option>--enable-cld</option> configure option.  Generation of <code>cld</code>
instructions can be suppressed with the <option>-mno-cld</option> compiler option
in this case.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mvzeroupper</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2495" incode="1">mvzeroupper</indexterm></indexcommand>
<para>This option instructs GCC to emit a <code>vzeroupper</code> instruction
before a transfer of control flow out of the function to minimize
the AVX to SSE transition penalty as well as remove unnecessary <code>zeroupper</code>
intrinsics.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mprefer-avx128</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2496" incode="1">mprefer-avx128</indexterm></indexcommand>
<para>This option instructs GCC to use 128-bit AVX instructions instead of
256-bit AVX instructions in the auto-vectorizer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcx16</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2497" incode="1">mcx16</indexterm></indexcommand>
<para>This option enables GCC to generate <code>CMPXCHG16B</code> instructions.
<code>CMPXCHG16B</code> allows for atomic operations on 128-bit double quadword
(or oword) data types.  
This is useful for high-resolution counters that can be updated
by multiple processors (or cores).  This instruction is generated as part of
atomic built-in functions: see <ref label="_005f_005fsync-Builtins"><xrefnodename>__sync Builtins</xrefnodename></ref> or
<ref label="_005f_005fatomic-Builtins"><xrefnodename>__atomic Builtins</xrefnodename></ref> for details.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msahf</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2498" incode="1">msahf</indexterm></indexcommand>
<para>This option enables generation of <code>SAHF</code> instructions in 64-bit code.
Early Intel Pentium 4 CPUs with Intel 64 support,
prior to the introduction of Pentium 4 G1 step in December 2005,
lacked the <code>LAHF</code> and <code>SAHF</code> instructions
which are supported by AMD64.
These are load and store instructions, respectively, for certain status flags.
In 64-bit mode, the <code>SAHF</code> instruction is used to optimize <code>fmod</code>,
<code>drem</code>, and <code>remainder</code> built-in functions;
see <ref label="Other-Builtins"><xrefnodename>Other Builtins</xrefnodename></ref> for details.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmovbe</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2499" incode="1">mmovbe</indexterm></indexcommand>
<para>This option enables use of the <code>movbe</code> instruction to implement
<code>__builtin_bswap32</code> and <code>__builtin_bswap64</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcrc32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2500" incode="1">mcrc32</indexterm></indexcommand>
<para>This option enables built-in functions <code>__builtin_ia32_crc32qi</code>,
<code>__builtin_ia32_crc32hi</code>, <code>__builtin_ia32_crc32si</code> and
<code>__builtin_ia32_crc32di</code> to generate the <code>crc32</code> machine instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrecip</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2501" incode="1">mrecip</indexterm></indexcommand>
<para>This option enables use of <code>RCPSS</code> and <code>RSQRTSS</code> instructions
(and their vectorized variants <code>RCPPS</code> and <code>RSQRTPS</code>)
with an additional Newton-Raphson step
to increase precision instead of <code>DIVSS</code> and <code>SQRTSS</code>
(and their vectorized
variants) for single-precision floating-point arguments.  These instructions
are generated only when <option>-funsafe-math-optimizations</option> is enabled
together with <option>-finite-math-only</option> and <option>-fno-trapping-math</option>.
Note that while the throughput of the sequence is higher than the throughput
of the non-reciprocal instruction, the precision of the sequence can be
decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994).
</para>
<para>Note that GCC implements <code>1.0f/sqrtf(<var>x</var>)</code> in terms of <code>RSQRTSS</code>
(or <code>RSQRTPS</code>) already with <option>-ffast-math</option> (or the above option
combination), and doesn&textrsquo;t need <option>-mrecip</option>.
</para>
<para>Also note that GCC emits the above sequence with additional Newton-Raphson step
for vectorized single-float division and vectorized <code>sqrtf(<var>x</var>)</code>
already with <option>-ffast-math</option> (or the above option combination), and
doesn&textrsquo;t need <option>-mrecip</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrecip=<var>opt</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2502" incode="1">mrecip=opt</indexterm></indexcommand>
<para>This option controls which reciprocal estimate instructions
may be used.  <var>opt</var> is a comma-separated list of options, which may
be preceded by a <samp>!</samp> to invert the option:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">all</itemformat></item>
</tableterm><tableitem><para>Enable all estimate instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">default</itemformat></item>
</tableterm><tableitem><para>Enable the default instructions, equivalent to <option>-mrecip</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">none</itemformat></item>
</tableterm><tableitem><para>Disable all estimate instructions, equivalent to <option>-mno-recip</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">div</itemformat></item>
</tableterm><tableitem><para>Enable the approximation for scalar division.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">vec-div</itemformat></item>
</tableterm><tableitem><para>Enable the approximation for vectorized division.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sqrt</itemformat></item>
</tableterm><tableitem><para>Enable the approximation for scalar square root.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">vec-sqrt</itemformat></item>
</tableterm><tableitem><para>Enable the approximation for vectorized square root.
</para></tableitem></tableentry></table>

<para>So, for example, <option>-mrecip=all,!sqrt</option> enables
all of the reciprocal approximations, except for square root.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mveclibabi=<var>type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2503" incode="1">mveclibabi</indexterm></indexcommand>
<para>Specifies the ABI type to use for vectorizing intrinsics using an
external library.  Supported values for <var>type</var> are <samp>svml</samp> 
for the Intel short
vector math library and <samp>acml</samp> for the AMD math core library.
To use this option, both <option>-ftree-vectorize</option> and
<option>-funsafe-math-optimizations</option> have to be enabled, and an SVML or ACML 
ABI-compatible library must be specified at link time.
</para>
<para>GCC currently emits calls to <code>vmldExp2</code>,
<code>vmldLn2</code>, <code>vmldLog102</code>, <code>vmldLog102</code>, <code>vmldPow2</code>,
<code>vmldTanh2</code>, <code>vmldTan2</code>, <code>vmldAtan2</code>, <code>vmldAtanh2</code>,
<code>vmldCbrt2</code>, <code>vmldSinh2</code>, <code>vmldSin2</code>, <code>vmldAsinh2</code>,
<code>vmldAsin2</code>, <code>vmldCosh2</code>, <code>vmldCos2</code>, <code>vmldAcosh2</code>,
<code>vmldAcos2</code>, <code>vmlsExp4</code>, <code>vmlsLn4</code>, <code>vmlsLog104</code>,
<code>vmlsLog104</code>, <code>vmlsPow4</code>, <code>vmlsTanh4</code>, <code>vmlsTan4</code>,
<code>vmlsAtan4</code>, <code>vmlsAtanh4</code>, <code>vmlsCbrt4</code>, <code>vmlsSinh4</code>,
<code>vmlsSin4</code>, <code>vmlsAsinh4</code>, <code>vmlsAsin4</code>, <code>vmlsCosh4</code>,
<code>vmlsCos4</code>, <code>vmlsAcosh4</code> and <code>vmlsAcos4</code> for corresponding
function type when <option>-mveclibabi=svml</option> is used, and <code>__vrd2_sin</code>,
<code>__vrd2_cos</code>, <code>__vrd2_exp</code>, <code>__vrd2_log</code>, <code>__vrd2_log2</code>,
<code>__vrd2_log10</code>, <code>__vrs4_sinf</code>, <code>__vrs4_cosf</code>,
<code>__vrs4_expf</code>, <code>__vrs4_logf</code>, <code>__vrs4_log2f</code>,
<code>__vrs4_log10f</code> and <code>__vrs4_powf</code> for the corresponding function type
when <option>-mveclibabi=acml</option> is used.  
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mabi=<var>name</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2504" incode="1">mabi</indexterm></indexcommand>
<para>Generate code for the specified calling convention.  Permissible values
are <samp>sysv</samp> for the ABI used on GNU/Linux and other systems, and
<samp>ms</samp> for the Microsoft ABI.  The default is to use the Microsoft
ABI when targeting Microsoft Windows and the SysV ABI on all other systems.
You can control this behavior for specific functions by
using the function attributes <code>ms_abi</code> and <code>sysv_abi</code>.
<xref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtls-dialect=<var>type</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2505" incode="1">mtls-dialect</indexterm></indexcommand>
<para>Generate code to access thread-local storage using the <samp>gnu</samp> or
<samp>gnu2</samp> conventions.  <samp>gnu</samp> is the conservative default;
<samp>gnu2</samp> is more efficient, but it may add compile- and run-time
requirements that cannot be satisfied on all systems.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpush-args</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-push-args</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2506" incode="1">mpush-args</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2507" incode="1">mno-push-args</indexterm></indexcommand>
<para>Use PUSH operations to store outgoing parameters.  This method is shorter
and usually equally fast as method using SUB/MOV operations and is enabled
by default.  In some cases disabling it may improve performance because of
improved scheduling and reduced dependencies.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-maccumulate-outgoing-args</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2508" incode="1">maccumulate-outgoing-args</indexterm></indexcommand>
<para>If enabled, the maximum amount of space required for outgoing arguments is
computed in the function prologue.  This is faster on most modern CPUs
because of reduced dependencies, improved scheduling and reduced stack usage
when the preferred stack boundary is not equal to 2.  The drawback is a notable
increase in code size.  This switch implies <option>-mno-push-args</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mthreads</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2509" incode="1">mthreads</indexterm></indexcommand>
<para>Support thread-safe exception handling on MinGW.  Programs that rely
on thread-safe exception handling must compile and link all code with the
<option>-mthreads</option> option.  When compiling, <option>-mthreads</option> defines
<option>-D_MT</option>; when linking, it links in a special thread helper library
<option>-lmingwthrd</option> which cleans up per-thread exception-handling data.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-align-stringops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2510" incode="1">mno-align-stringops</indexterm></indexcommand>
<para>Do not align the destination of inlined string operations.  This switch reduces
code size and improves performance in case the destination is already aligned,
but GCC doesn&textrsquo;t know about it.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minline-all-stringops</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2511" incode="1">minline-all-stringops</indexterm></indexcommand>
<para>By default GCC inlines string operations only when the destination is 
known to be aligned to least a 4-byte boundary.  
This enables more inlining and increases code
size, but may improve performance of code that depends on fast
<code>memcpy</code>, <code>strlen</code>,
and <code>memset</code> for short lengths.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-minline-stringops-dynamically</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2512" incode="1">minline-stringops-dynamically</indexterm></indexcommand>
<para>For string operations of unknown size, use run-time checks with
inline code for small blocks and a library call for large blocks.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstringop-strategy=<var>alg</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2513" incode="1">mstringop-strategy=<var>alg</var></indexterm></indexcommand>
<para>Override the internal decision heuristic for the particular algorithm to use
for inlining string operations.  The allowed values for <var>alg</var> are:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">rep_byte</itemformat></item>
<itemx spaces=" "><itemformat command="samp">rep_4byte</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">rep_8byte</itemformat></itemx>
</tableterm><tableitem><para>Expand using i386 <code>rep</code> prefix of the specified size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">byte_loop</itemformat></item>
<itemx spaces=" "><itemformat command="samp">loop</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">unrolled_loop</itemformat></itemx>
</tableterm><tableitem><para>Expand into an inline loop.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">libcall</itemformat></item>
</tableterm><tableitem><para>Always use a library call.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmemcpy-strategy=<var>strategy</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2514" incode="1">mmemcpy-strategy=<var>strategy</var></indexterm></indexcommand>
<para>Override the internal decision heuristic to decide if <code>__builtin_memcpy</code>
should be inlined and what inline algorithm to use when the expected size
of the copy operation is known. <var>strategy</var> 
is a comma-separated list of <var>alg</var>:<var>max_size</var>:<var>dest_align</var> triplets. 
<var>alg</var> is specified in <option>-mstringop-strategy</option>, <var>max_size</var> specifies
the max byte size with which inline algorithm <var>alg</var> is allowed.  For the last
triplet, the <var>max_size</var> must be <code>-1</code>. The <var>max_size</var> of the triplets
in the list must be specified in increasing order.  The minimal byte size for 
<var>alg</var> is <code>0</code> for the first triplet and <code><var>max_size</var> + 1</code> of the 
preceding range.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mmemset-strategy=<var>strategy</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2515" incode="1">mmemset-strategy=<var>strategy</var></indexterm></indexcommand>
<para>The option is similar to <option>-mmemcpy-strategy=</option> except that it is to control
<code>__builtin_memset</code> expansion.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-momit-leaf-frame-pointer</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2516" incode="1">momit-leaf-frame-pointer</indexterm></indexcommand>
<para>Don&textrsquo;t keep the frame pointer in a register for leaf functions.  This
avoids the instructions to save, set up, and restore frame pointers and
makes an extra register available in leaf functions.  The option
<option>-fomit-leaf-frame-pointer</option> removes the frame pointer for leaf functions,
which might make debugging harder.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtls-direct-seg-refs</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-tls-direct-seg-refs</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2517" incode="1">mtls-direct-seg-refs</indexterm></indexcommand>
<para>Controls whether TLS variables may be accessed with offsets from the
TLS segment register (<code>%gs</code> for 32-bit, <code>%fs</code> for 64-bit),
or whether the thread base pointer must be added.  Whether or not this
is valid depends on the operating system, and whether it maps the
segment to cover the entire TLS area.
</para>
<para>For systems that use the GNU C Library, the default is on.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-msse2avx</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-sse2avx</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2518" incode="1">msse2avx</indexterm></indexcommand>
<para>Specify that the assembler should encode SSE instructions with VEX
prefix.  The option <option>-mavx</option> turns this on by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfentry</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fentry</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2519" incode="1">mfentry</indexterm></indexcommand>
<para>If profiling is active (<option>-pg</option>), put the profiling
counter call before the prologue.
Note: On x86 architectures the attribute <code>ms_hook_prologue</code>
isn&textrsquo;t possible at the moment for <option>-mfentry</option> and <option>-pg</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mrecord-mcount</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-record-mcount</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2520" incode="1">mrecord-mcount</indexterm></indexcommand>
<para>If profiling is active (<option>-pg</option>), generate a __mcount_loc section
that contains pointers to each profiling call. This is useful for
automatically patching and out calls.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnop-mcount</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-nop-mcount</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2521" incode="1">mnop-mcount</indexterm></indexcommand>
<para>If profiling is active (<option>-pg</option>), generate the calls to
the profiling functions as nops. This is useful when they
should be patched in later dynamically. This is likely only
useful together with <option>-mrecord-mcount</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mskip-rax-setup</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-skip-rax-setup</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2522" incode="1">mskip-rax-setup</indexterm></indexcommand>
<para>When generating code for the x86-64 architecture with SSE extensions
disabled, <option>-skip-rax-setup</option> can be used to skip setting up RAX
register when there are no variable arguments passed in vector registers.
</para>
<para><strong>Warning:</strong> Since RAX register is used to avoid unnecessarily
saving vector registers on stack when passing variable arguments, the
impacts of this option are callees may waste some stack space,
misbehave or jump to a random location.  GCC 4.4 or newer don&textrsquo;t have
those issues, regardless the RAX register value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m8bit-idiv</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-8bit-idiv</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2523" incode="1">m8bit-idiv</indexterm></indexcommand>
<para>On some processors, like Intel Atom, 8-bit unsigned integer divide is
much faster than 32-bit/64-bit integer divide.  This option generates a
run-time check.  If both dividend and divisor are within range of 0
to 255, 8-bit unsigned integer divide is used instead of
32-bit/64-bit integer divide.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mavx256-split-unaligned-load</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mavx256-split-unaligned-store</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2524" incode="1">mavx256-split-unaligned-load</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2525" incode="1">mavx256-split-unaligned-store</indexterm></indexcommand>
<para>Split 32-byte AVX unaligned load and store.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mstack-protector-guard=<var>guard</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2526" incode="1">mstack-protector-guard=<var>guard</var></indexterm></indexcommand>
<para>Generate stack protection code using canary at <var>guard</var>.  Supported
locations are <samp>global</samp> for global canary or <samp>tls</samp> for per-thread
canary in the TLS block (the default).  This option has effect only when
<option>-fstack-protector</option> or <option>-fstack-protector-all</option> is specified.
</para>
</tableitem></tableentry></table>

<para>These <samp>-m</samp> switches are supported in addition to the above
on x86-64 processors in 64-bit environments.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-m32</itemformat></item>
<itemx spaces=" "><itemformat command="code">-m64</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-mx32</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-m16</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2527" incode="1">m32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2528" incode="1">m64</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2529" incode="1">mx32</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2530" incode="1">m16</indexterm></indexcommand>
<para>Generate code for a 16-bit, 32-bit or 64-bit environment.
The <option>-m32</option> option sets <code>int</code>, <code>long</code>, and pointer types
to 32 bits, and
generates code that runs on any i386 system.
</para>
<para>The <option>-m64</option> option sets <code>int</code> to 32 bits and <code>long</code> and pointer
types to 64 bits, and generates code for the x86-64 architecture.
For Darwin only the <option>-m64</option> option also turns off the <option>-fno-pic</option>
and <option>-mdynamic-no-pic</option> options.
</para>
<para>The <option>-mx32</option> option sets <code>int</code>, <code>long</code>, and pointer types
to 32 bits, and
generates code for the x86-64 architecture.
</para>
<para>The <option>-m16</option> option is the same as <option>-m32</option>, except for that
it outputs the <code>.code16gcc</code> assembly directive at the beginning of
the assembly output so that the binary can run in 16-bit mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mno-red-zone</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2531" incode="1">mno-red-zone</indexterm></indexcommand>
<para>Do not use a so-called &textldquo;red zone&textrdquo; for x86-64 code.  The red zone is mandated
by the x86-64 ABI; it is a 128-byte area beyond the location of the
stack pointer that is not modified by signal or interrupt handlers
and therefore can be used for temporary data without adjusting the stack
pointer.  The flag <option>-mno-red-zone</option> disables this red zone.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=small</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2532" incode="1">mcmodel=small</indexterm></indexcommand>
<para>Generate code for the small code model: the program and its symbols must
be linked in the lower 2 GB of the address space.  Pointers are 64 bits.
Programs can be statically or dynamically linked.  This is the default
code model.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=kernel</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2533" incode="1">mcmodel=kernel</indexterm></indexcommand>
<para>Generate code for the kernel code model.  The kernel runs in the
negative 2 GB of the address space.
This model has to be used for Linux kernel code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=medium</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2534" incode="1">mcmodel=medium</indexterm></indexcommand>
<para>Generate code for the medium model: the program is linked in the lower 2
GB of the address space.  Small symbols are also placed there.  Symbols
with sizes larger than <option>-mlarge-data-threshold</option> are put into
large data or BSS sections and can be located above 2GB.  Programs can
be statically or dynamically linked.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mcmodel=large</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2535" incode="1">mcmodel=large</indexterm></indexcommand>
<para>Generate code for the large model.  This model makes no assumptions
about addresses and sizes of sections.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-maddress-mode=long</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2536" incode="1">maddress-mode=long</indexterm></indexcommand>
<para>Generate code for long address mode.  This is only supported for 64-bit
and x32 environments.  It is the default address mode for 64-bit
environments.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-maddress-mode=short</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2537" incode="1">maddress-mode=short</indexterm></indexcommand>
<para>Generate code for short address mode.  This is only supported for 32-bit
and x32 environments.  It is the default address mode for 32-bit and
x32 environments.
</para></tableitem></tableentry></table>

</subsection>
<node name="x86-Windows-Options" spaces=" "><nodename>x86 Windows Options</nodename><nodenext automatic="on">Xstormy16 Options</nodenext><nodeprev automatic="on">x86 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>x86 Windows Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="227">x86 Windows Options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="228">Windows Options for x86</indexterm></cindex>

<para>These additional options are available for Microsoft Windows targets:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mconsole</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2538" incode="1">mconsole</indexterm></indexcommand>
<para>This option
specifies that a console application is to be generated, by
instructing the linker to set the PE header subsystem type
required for console applications.
This option is available for Cygwin and MinGW targets and is
enabled by default on those targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mdll</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2539" incode="1">mdll</indexterm></indexcommand>
<para>This option is available for Cygwin and MinGW targets.  It
specifies that a DLL&textmdash;a dynamic link library&textmdash;is to be
generated, enabling the selection of the required runtime
startup object and entry point.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mnop-fun-dllimport</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2540" incode="1">mnop-fun-dllimport</indexterm></indexcommand>
<para>This option is available for Cygwin and MinGW targets.  It
specifies that the <code>dllimport</code> attribute should be ignored.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mthread</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2541" incode="1">mthread</indexterm></indexcommand>
<para>This option is available for MinGW targets. It specifies
that MinGW-specific thread support is to be used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-municode</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2542" incode="1">municode</indexterm></indexcommand>
<para>This option is available for MinGW-w64 targets.  It causes
the <code>UNICODE</code> preprocessor macro to be predefined, and
chooses Unicode-capable runtime startup code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mwin32</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2543" incode="1">mwin32</indexterm></indexcommand>
<para>This option is available for Cygwin and MinGW targets.  It
specifies that the typical Microsoft Windows predefined macros are to
be set in the pre-processor, but does not influence the choice
of runtime library/startup code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mwindows</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2544" incode="1">mwindows</indexterm></indexcommand>
<para>This option is available for Cygwin and MinGW targets.  It
specifies that a GUI application is to be generated by
instructing the linker to set the PE header subsystem type
appropriately.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-set-stack-executable</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2545" incode="1">fno-set-stack-executable</indexterm></indexcommand>
<para>This option is available for MinGW targets. It specifies that
the executable flag for the stack used by nested functions isn&textrsquo;t
set. This is necessary for binaries running in kernel mode of
Microsoft Windows, as there the User32 API, which is used to set executable
privileges, isn&textrsquo;t available.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fwritable-relocated-rdata</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2546" incode="1">fno-writable-relocated-rdata</indexterm></indexcommand>
<para>This option is available for MinGW and Cygwin targets.  It specifies
that relocated-data in read-only section is put into .data
section.  This is a necessary for older runtimes not supporting
modification of .rdata sections for pseudo-relocation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mpe-aligned-commons</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2547" incode="1">mpe-aligned-commons</indexterm></indexcommand>
<para>This option is available for Cygwin and MinGW targets.  It
specifies that the GNU extension to the PE file format that
permits the correct alignment of COMMON variables should be
used when generating code.  It is enabled by default if
GCC detects that the target assembler found during configuration
supports the feature.
</para></tableitem></tableentry></table>

<para>See also under <ref label="x86-Options"><xrefnodename>x86 Options</xrefnodename></ref> for standard options.
</para>
</subsection>
<node name="Xstormy16-Options" spaces=" "><nodename>Xstormy16 Options</nodename><nodenext automatic="on">Xtensa Options</nodenext><nodeprev automatic="on">x86 Windows Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>Xstormy16 Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="229">Xstormy16 Options</indexterm></cindex>

<para>These options are defined for Xstormy16:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-msim</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2548" incode="1">msim</indexterm></indexcommand>
<para>Choose startup files and linker script suitable for the simulator.
</para></tableitem></tableentry></table>

</subsection>
<node name="Xtensa-Options" spaces=" "><nodename>Xtensa Options</nodename><nodenext automatic="on">zSeries Options</nodenext><nodeprev automatic="on">Xstormy16 Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>Xtensa Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="230">Xtensa Options</indexterm></cindex>

<para>These options are supported for Xtensa targets:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-mconst16</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-const16</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2549" incode="1">mconst16</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2550" incode="1">mno-const16</indexterm></indexcommand>
<para>Enable or disable use of <code>CONST16</code> instructions for loading
constant values.  The <code>CONST16</code> instruction is currently not a
standard option from Tensilica.  When enabled, <code>CONST16</code>
instructions are always used in place of the standard <code>L32R</code>
instructions.  The use of <code>CONST16</code> is enabled by default only if
the <code>L32R</code> instruction is not available.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mfused-madd</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-fused-madd</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2551" incode="1">mfused-madd</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2552" incode="1">mno-fused-madd</indexterm></indexcommand>
<para>Enable or disable use of fused multiply/add and multiply/subtract
instructions in the floating-point option.  This has no effect if the
floating-point option is not also enabled.  Disabling fused multiply/add
and multiply/subtract instructions forces the compiler to use separate
instructions for the multiply and add/subtract operations.  This may be
desirable in some cases where strict IEEE 754-compliant results are
required: the fused multiply add/subtract instructions do not round the
intermediate result, thereby producing results with <emph>more</emph> bits of
precision than specified by the IEEE standard.  Disabling fused multiply
add/subtract instructions also ensures that the program output is not
sensitive to the compiler&textrsquo;s ability to combine multiply and add/subtract
operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mserialize-volatile</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-serialize-volatile</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2553" incode="1">mserialize-volatile</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2554" incode="1">mno-serialize-volatile</indexterm></indexcommand>
<para>When this option is enabled, GCC inserts <code>MEMW</code> instructions before
<code>volatile</code> memory references to guarantee sequential consistency.
The default is <option>-mserialize-volatile</option>.  Use
<option>-mno-serialize-volatile</option> to omit the <code>MEMW</code> instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mforce-no-pic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2555" incode="1">mforce-no-pic</indexterm></indexcommand>
<para>For targets, like GNU/Linux, where all user-mode Xtensa code must be
position-independent code (PIC), this option disables PIC for compiling
kernel code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtext-section-literals</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-text-section-literals</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2556" incode="1">mtext-section-literals</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2557" incode="1">mno-text-section-literals</indexterm></indexcommand>
<para>These options control the treatment of literal pools.  The default is
<option>-mno-text-section-literals</option>, which places literals in a separate
section in the output file.  This allows the literal pool to be placed
in a data RAM/ROM, and it also allows the linker to combine literal
pools from separate object files to remove redundant literals and
improve code size.  With <option>-mtext-section-literals</option>, the literals
are interspersed in the text section in order to keep them as close as
possible to their references.  This may be necessary for large assembly
files.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mtarget-align</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-target-align</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2558" incode="1">mtarget-align</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2559" incode="1">mno-target-align</indexterm></indexcommand>
<para>When this option is enabled, GCC instructs the assembler to
automatically align instructions to reduce branch penalties at the
expense of some code density.  The assembler attempts to widen density
instructions to align branch targets and the instructions following call
instructions.  If there are not enough preceding safe density
instructions to align a target, no widening is performed.  The
default is <option>-mtarget-align</option>.  These options do not affect the
treatment of auto-aligned instructions like <code>LOOP</code>, which the
assembler always aligns, either by widening density instructions or
by inserting NOP instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-mlongcalls</itemformat></item>
<itemx spaces=" "><itemformat command="code">-mno-longcalls</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2560" incode="1">mlongcalls</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2561" incode="1">mno-longcalls</indexterm></indexcommand>
<para>When this option is enabled, GCC instructs the assembler to translate
direct calls to indirect calls unless it can determine that the target
of a direct call is in the range allowed by the call instruction.  This
translation typically occurs for calls to functions in other source
files.  Specifically, the assembler translates a direct <code>CALL</code>
instruction into an <code>L32R</code> followed by a <code>CALLX</code> instruction.
The default is <option>-mno-longcalls</option>.  This option should be used in
programs where the call target can potentially be out of range.  This
option is implemented in the assembler, not the compiler, so the
assembly code generated by GCC still shows direct call
instructions&textmdash;look at the disassembled object code to see the actual
instructions.  Note that the assembler uses an indirect call for
every cross-file call, not just those that really are out of range.
</para></tableitem></tableentry></table>

</subsection>
<node name="zSeries-Options" spaces=" "><nodename>zSeries Options</nodename><nodeprev automatic="on">Xtensa Options</nodeprev><nodeup automatic="on">Submodel Options</nodeup></node>
<subsection spaces=" "><sectiontitle>zSeries Options</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="231">zSeries options</indexterm></cindex>

<para>These are listed under <xref label="S_002f390-and-zSeries-Options"><xrefnodename>S/390 and zSeries Options</xrefnodename></xref>.
</para>
</subsection>
</section>
<node name="Code-Gen-Options" spaces=" "><nodename>Code Gen Options</nodename><nodenext automatic="on">Environment Variables</nodenext><nodeprev automatic="on">Submodel Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Options for Code Generation Conventions</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="232">code generation conventions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="233">options, code generation</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="234">run-time options</indexterm></cindex>

<para>These machine-independent options control the interface conventions
used in code generation.
</para>
<para>Most of them have both positive and negative forms; the negative form
of <option>-ffoo</option> is <option>-fno-foo</option>.  In the table below, only
one of the forms is listed&textmdash;the one that is not the default.  You
can figure out the other form by either removing <samp>no-</samp> or adding
it.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-fbounds-check</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2562" incode="1">fbounds-check</indexterm></indexcommand>
<para>For front ends that support it, generate additional code to check that
indices used to access arrays are within the declared range.  This is
currently only supported by the Java and Fortran front ends, where
this option defaults to true and false respectively.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstack-reuse=<var>reuse-level</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2563" incode="1">fstack_reuse</indexterm></indexcommand>
<para>This option controls stack space reuse for user declared local/auto variables
and compiler generated temporaries.  <var>reuse_level</var> can be <samp>all</samp>,
<samp>named_vars</samp>, or <samp>none</samp>. <samp>all</samp> enables stack reuse for all
local variables and temporaries, <samp>named_vars</samp> enables the reuse only for
user defined local variables with names, and <samp>none</samp> disables stack reuse
completely. The default value is <samp>all</samp>. The option is needed when the
program extends the lifetime of a scoped local variable or a compiler generated
temporary beyond the end point defined by the language.  When a lifetime of
a variable ends, and if the variable lives in memory, the optimizing compiler
has the freedom to reuse its stack space with other temporaries or scoped
local variables whose live range does not overlap with it. Legacy code extending
local lifetime is likely to break with the stack reuse optimization.
</para>
<para>For example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">   int *p;
   &lbrace;
     int local1;

     p = &amp;local1;
     local1 = 10;
     ....
   &rbrace;
   &lbrace;
      int local2;
      local2 = 20;
      ...
   &rbrace;

   if (*p == 10)  // out of scope use of local1
     &lbrace;

     &rbrace;
</pre></smallexample>

<para>Another example:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">
   struct A
   &lbrace;
       A(int k) : i(k), j(k) &lbrace; &rbrace;
       int i;
       int j;
   &rbrace;;

   A *ap;

   void foo(const A&amp; ar)
   &lbrace;
      ap = &amp;ar;
   &rbrace;

   void bar()
   &lbrace;
      foo(A(10)); // temp object's lifetime ends when foo returns

      &lbrace;
        A a(20);
        ....
      &rbrace;
      ap-&gt;i+= 10;  // ap references out of scope temp whose space
                   // is reused with a. What is the value of ap-&gt;i?
   &rbrace;

</pre></smallexample>

<para>The lifetime of a compiler generated temporary is well defined by the C++
standard. When a lifetime of a temporary ends, and if the temporary lives
in memory, the optimizing compiler has the freedom to reuse its stack
space with other temporaries or scoped local variables whose live range
does not overlap with it. However some of the legacy code relies on
the behavior of older compilers in which temporaries&textrsquo; stack space is
not reused, the aggressive stack reuse can lead to runtime errors. This
option is used to control the temporary stack reuse optimization.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftrapv</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2564" incode="1">ftrapv</indexterm></indexcommand>
<para>This option generates traps for signed overflow on addition, subtraction,
multiplication operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fwrapv</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2565" incode="1">fwrapv</indexterm></indexcommand>
<para>This option instructs the compiler to assume that signed arithmetic
overflow of addition, subtraction and multiplication wraps around
using twos-complement representation.  This flag enables some optimizations
and disables others.  This option is enabled by default for the Java
front end, as required by the Java language specification.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fexceptions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2566" incode="1">fexceptions</indexterm></indexcommand>
<para>Enable exception handling.  Generates extra code needed to propagate
exceptions.  For some targets, this implies GCC generates frame
unwind information for all functions, which can produce significant data
size overhead, although it does not affect execution.  If you do not
specify this option, GCC enables it by default for languages like
C++ that normally require exception handling, and disables it for
languages like C that do not normally require it.  However, you may need
to enable this option when compiling C code that needs to interoperate
properly with exception handlers written in C++.  You may also wish to
disable this option if you are compiling older C++ programs that don&textrsquo;t
use exception handling.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fnon-call-exceptions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2567" incode="1">fnon-call-exceptions</indexterm></indexcommand>
<para>Generate code that allows trapping instructions to throw exceptions.
Note that this requires platform-specific runtime support that does
not exist everywhere.  Moreover, it only allows <emph>trapping</emph>
instructions to throw exceptions, i.e.&noeos; memory references or floating-point
instructions.  It does not allow exceptions to be thrown from
arbitrary signal handlers such as <code>SIGALRM</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fdelete-dead-exceptions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2568" incode="1">fdelete-dead-exceptions</indexterm></indexcommand>
<para>Consider that instructions that may throw exceptions but don&textrsquo;t otherwise
contribute to the execution of the program can be optimized away.
This option is enabled by default for the Ada front end, as permitted by
the Ada language specification.
Optimization passes that cause dead exceptions to be removed are enabled independently at different optimization levels.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-funwind-tables</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2569" incode="1">funwind-tables</indexterm></indexcommand>
<para>Similar to <option>-fexceptions</option>, except that it just generates any needed
static data, but does not affect the generated code in any other way.
You normally do not need to enable this option; instead, a language processor
that needs this handling enables it on your behalf.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fasynchronous-unwind-tables</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2570" incode="1">fasynchronous-unwind-tables</indexterm></indexcommand>
<para>Generate unwind table in DWARF 2 format, if supported by target machine.  The
table is exact at each instruction boundary, so it can be used for stack
unwinding from asynchronous events (such as debugger or garbage collector).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-gnu-unique</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2571" incode="1">fno-gnu-unique</indexterm></indexcommand>
<para>On systems with recent GNU assembler and C library, the C++ compiler
uses the <code>STB_GNU_UNIQUE</code> binding to make sure that definitions
of template static data members and static local variables in inline
functions are unique even in the presence of <code>RTLD_LOCAL</code>; this
is necessary to avoid problems with a library used by two different
<code>RTLD_LOCAL</code> plugins depending on a definition in one of them and
therefore disagreeing with the other one about the binding of the
symbol.  But this causes <code>dlclose</code> to be ignored for affected
DSOs; if your program relies on reinitialization of a DSO via
<code>dlclose</code> and <code>dlopen</code>, you can use
<option>-fno-gnu-unique</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpcc-struct-return</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2572" incode="1">fpcc-struct-return</indexterm></indexcommand>
<para>Return &textldquo;short&textrdquo; <code>struct</code> and <code>union</code> values in memory like
longer ones, rather than in registers.  This convention is less
efficient, but it has the advantage of allowing intercallability between
GCC-compiled files and files compiled with other compilers, particularly
the Portable C Compiler (pcc).
</para>
<para>The precise convention for returning structures in memory depends
on the target configuration macros.
</para>
<para>Short structures and unions are those whose size and alignment match
that of some integer type.
</para>
<para><strong>Warning:</strong> code compiled with the <option>-fpcc-struct-return</option>
switch is not binary compatible with code compiled with the
<option>-freg-struct-return</option> switch.
Use it to conform to a non-default application binary interface.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-freg-struct-return</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2573" incode="1">freg-struct-return</indexterm></indexcommand>
<para>Return <code>struct</code> and <code>union</code> values in registers when possible.
This is more efficient for small structures than
<option>-fpcc-struct-return</option>.
</para>
<para>If you specify neither <option>-fpcc-struct-return</option> nor
<option>-freg-struct-return</option>, GCC defaults to whichever convention is
standard for the target.  If there is no standard convention, GCC
defaults to <option>-fpcc-struct-return</option>, except on targets where GCC is
the principal compiler.  In those cases, we can choose the standard, and
we chose the more efficient register return alternative.
</para>
<para><strong>Warning:</strong> code compiled with the <option>-freg-struct-return</option>
switch is not binary compatible with code compiled with the
<option>-fpcc-struct-return</option> switch.
Use it to conform to a non-default application binary interface.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fshort-enums</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2574" incode="1">fshort-enums</indexterm></indexcommand>
<para>Allocate to an <code>enum</code> type only as many bytes as it needs for the
declared range of possible values.  Specifically, the <code>enum</code> type
is equivalent to the smallest integer type that has enough room.
</para>
<para><strong>Warning:</strong> the <option>-fshort-enums</option> switch causes GCC to generate
code that is not binary compatible with code generated without that switch.
Use it to conform to a non-default application binary interface.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fshort-double</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2575" incode="1">fshort-double</indexterm></indexcommand>
<para>Use the same size for <code>double</code> as for <code>float</code>.
</para>
<para><strong>Warning:</strong> the <option>-fshort-double</option> switch causes GCC to generate
code that is not binary compatible with code generated without that switch.
Use it to conform to a non-default application binary interface.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fshort-wchar</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2576" incode="1">fshort-wchar</indexterm></indexcommand>
<para>Override the underlying type for <code>wchar_t</code> to be <code>short
unsigned int</code> instead of the default for the target.  This option is
useful for building programs to run under WINE&eosperiod;
</para>
<para><strong>Warning:</strong> the <option>-fshort-wchar</option> switch causes GCC to generate
code that is not binary compatible with code generated without that switch.
Use it to conform to a non-default application binary interface.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-common</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2577" incode="1">fno-common</indexterm></indexcommand>
<para>In C code, controls the placement of uninitialized global variables.
Unix C compilers have traditionally permitted multiple definitions of
such variables in different compilation units by placing the variables
in a common block.
This is the behavior specified by <option>-fcommon</option>, and is the default
for GCC on most targets.
On the other hand, this behavior is not required by ISO C, and on some
targets may carry a speed or code size penalty on variable references.
The <option>-fno-common</option> option specifies that the compiler should place
uninitialized global variables in the data section of the object file,
rather than generating them as common blocks.
This has the effect that if the same variable is declared
(without <code>extern</code>) in two different compilations,
you get a multiple-definition error when you link them.
In this case, you must compile with <option>-fcommon</option> instead.
Compiling with <option>-fno-common</option> is useful on targets for which
it provides better performance, or if you wish to verify that the
program will work on other systems that always treat uninitialized
variable declarations this way.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-ident</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2578" incode="1">fno-ident</indexterm></indexcommand>
<para>Ignore the <code>#ident</code> directive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-finhibit-size-directive</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2579" incode="1">finhibit-size-directive</indexterm></indexcommand>
<para>Don&textrsquo;t output a <code>.size</code> assembler directive, or anything else that
would cause trouble if the function is split in the middle, and the
two halves are placed at locations far apart in memory.  This option is
used when compiling <file>crtstuff.c</file>; you should not need to use it
for anything else.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fverbose-asm</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2580" incode="1">fverbose-asm</indexterm></indexcommand>
<para>Put extra commentary information in the generated assembly code to
make it more readable.  This option is generally only of use to those
who actually need to read the generated assembly code (perhaps while
debugging the compiler itself).
</para>
<para><option>-fno-verbose-asm</option>, the default, causes the
extra information to be omitted and is useful when comparing two assembler
files.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-frecord-gcc-switches</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2581" incode="1">frecord-gcc-switches</indexterm></indexcommand>
<para>This switch causes the command line used to invoke the
compiler to be recorded into the object file that is being created.
This switch is only implemented on some targets and the exact format
of the recording is target and binary file format dependent, but it
usually takes the form of a section containing ASCII text.  This
switch is related to the <option>-fverbose-asm</option> switch, but that
switch only records information in the assembler output file as
comments, so it never reaches the object file.
See also <option>-grecord-gcc-switches</option> for another
way of storing compiler options into the object file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2582" incode="1">fpic</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp" number="235">global offset table</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="236">PIC</indexterm></cindex>
<para>Generate position-independent code (PIC) suitable for use in a shared
library, if supported for the target machine.  Such code accesses all
constant addresses through a global offset table (GOT)&eosperiod;  The dynamic
loader resolves the GOT entries when the program starts (the dynamic
loader is not part of GCC; it is part of the operating system).  If
the GOT size for the linked executable exceeds a machine-specific
maximum size, you get an error message from the linker indicating that
<option>-fpic</option> does not work; in that case, recompile with <option>-fPIC</option>
instead.  (These maximums are 8k on the SPARC and 32k
on the m68k and RS/6000.  The x86 has no such limit.)
</para>
<para>Position-independent code requires special support, and therefore works
only on certain machines.  For the x86, GCC supports PIC for System V
but not for the Sun 386i.  Code generated for the IBM RS/6000 is always
position-independent.
</para>
<para>When this flag is set, the macros <code>__pic__</code> and <code>__PIC__</code>
are defined to 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fPIC</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2583" incode="1">fPIC</indexterm></indexcommand>
<para>If supported for the target machine, emit position-independent code,
suitable for dynamic linking and avoiding any limit on the size of the
global offset table.  This option makes a difference on the m68k,
PowerPC and SPARC&eosperiod;
</para>
<para>Position-independent code requires special support, and therefore works
only on certain machines.
</para>
<para>When this flag is set, the macros <code>__pic__</code> and <code>__PIC__</code>
are defined to 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpie</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fPIE</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2584" incode="1">fpie</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2585" incode="1">fPIE</indexterm></indexcommand>
<para>These options are similar to <option>-fpic</option> and <option>-fPIC</option>, but
generated position independent code can be only linked into executables.
Usually these options are used when <option>-pie</option> GCC option is
used during linking.
</para>
<para><option>-fpie</option> and <option>-fPIE</option> both define the macros
<code>__pie__</code> and <code>__PIE__</code>.  The macros have the value 1
for <option>-fpie</option> and 2 for <option>-fPIE</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-plt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2586" incode="1">fno-plt</indexterm></indexcommand>
<para>Do not use PLT for external function calls in position-independent code.
Instead, load callee address at call site from GOT and branch to it.
This leads to more efficient code by eliminating PLT stubs and exposing
GOT load to optimizations.  On architectures such as 32-bit x86 where
PLT stubs expect GOT pointer in a specific register, this gives more
register allocation freedom to the compiler.  Lazy binding requires PLT:
with <option>-fno-plt</option> all external symbols are resolved at load time.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fno-jump-tables</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2587" incode="1">fno-jump-tables</indexterm></indexcommand>
<para>Do not use jump tables for switch statements even where it would be
more efficient than other code generation strategies.  This option is
of use in conjunction with <option>-fpic</option> or <option>-fPIC</option> for
building code that forms part of a dynamic linker and cannot
reference the address of a jump table.  On some targets, jump tables
do not require a GOT and this option is not needed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ffixed-<var>reg</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2588" incode="1">ffixed</indexterm></indexcommand>
<para>Treat the register named <var>reg</var> as a fixed register; generated code
should never refer to it (except perhaps as a stack pointer, frame
pointer or in some other fixed role).
</para>
<para><var>reg</var> must be the name of a register.  The register names accepted
are machine-specific and are defined in the <code>REGISTER_NAMES</code>
macro in the machine description macro file.
</para>
<para>This flag does not have a negative form, because it specifies a
three-way choice.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcall-used-<var>reg</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2589" incode="1">fcall-used</indexterm></indexcommand>
<para>Treat the register named <var>reg</var> as an allocable register that is
clobbered by function calls.  It may be allocated for temporaries or
variables that do not live across a call.  Functions compiled this way
do not save and restore the register <var>reg</var>.
</para>
<para>It is an error to use this flag with the frame pointer or stack pointer.
Use of this flag for other registers that have fixed pervasive roles in
the machine&textrsquo;s execution model produces disastrous results.
</para>
<para>This flag does not have a negative form, because it specifies a
three-way choice.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fcall-saved-<var>reg</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2590" incode="1">fcall-saved</indexterm></indexcommand>
<para>Treat the register named <var>reg</var> as an allocable register saved by
functions.  It may be allocated even for temporaries or variables that
live across a call.  Functions compiled this way save and restore
the register <var>reg</var> if they use it.
</para>
<para>It is an error to use this flag with the frame pointer or stack pointer.
Use of this flag for other registers that have fixed pervasive roles in
the machine&textrsquo;s execution model produces disastrous results.
</para>
<para>A different sort of disaster results from the use of this flag for
a register in which function values may be returned.
</para>
<para>This flag does not have a negative form, because it specifies a
three-way choice.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fpack-struct[=<var>n</var>]</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2591" incode="1">fpack-struct</indexterm></indexcommand>
<para>Without a value specified, pack all structure members together without
holes.  When a value is specified (which must be a small power of two), pack
structure members according to this value, representing the maximum
alignment (that is, objects with default alignment requirements larger than
this are output potentially unaligned at the next fitting location.
</para>
<para><strong>Warning:</strong> the <option>-fpack-struct</option> switch causes GCC to generate
code that is not binary compatible with code generated without that switch.
Additionally, it makes the code suboptimal.
Use it to conform to a non-default application binary interface.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-finstrument-functions</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2592" incode="1">finstrument-functions</indexterm></indexcommand>
<para>Generate instrumentation calls for entry and exit to functions.  Just
after function entry and just before function exit, the following
profiling functions are called with the address of the current
function and its call site.  (On some platforms,
<code>__builtin_return_address</code> does not work beyond the current
function, so the call site information may not be available to the
profiling functions otherwise.)
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void __cyg_profile_func_enter (void *this_fn,
                               void *call_site);
void __cyg_profile_func_exit  (void *this_fn,
                               void *call_site);
</pre></smallexample>

<para>The first argument is the address of the start of the current function,
which may be looked up exactly in the symbol table.
</para>
<para>This instrumentation is also done for functions expanded inline in other
functions.  The profiling calls indicate where, conceptually, the
inline function is entered and exited.  This means that addressable
versions of such functions must be available.  If all your uses of a
function are expanded inline, this may mean an additional expansion of
code size.  If you use <code>extern inline</code> in your C code, an
addressable version of such functions must be provided.  (This is
normally the case anyway, but if you get lucky and the optimizer always
expands the functions inline, you might have gotten away without
providing static copies.)
</para>
<para>A function may be given the attribute <code>no_instrument_function</code>, in
which case this instrumentation is not done.  This can be used, for
example, for the profiling functions listed above, high-priority
interrupt routines, and any functions from which the profiling functions
cannot safely be called (perhaps signal handlers, if the profiling
routines generate output or allocate memory).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-finstrument-functions-exclude-file-list=<var>file</var>,<var>file</var>,&dots;</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2593" incode="1">finstrument-functions-exclude-file-list</indexterm></indexcommand>

<para>Set the list of functions that are excluded from instrumentation (see
the description of <option>-finstrument-functions</option>).  If the file that
contains a function definition matches with one of <var>file</var>, then
that function is not instrumented.  The match is done on substrings:
if the <var>file</var> parameter is a substring of the file name, it is
considered to be a match.
</para>
<para>For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">-finstrument-functions-exclude-file-list=/bits/stl,include/sys
</pre></smallexample>

<noindent></noindent>
<para>excludes any inline function defined in files whose pathnames
contain <file>/bits/stl</file> or <file>include/sys</file>.
</para>
<para>If, for some reason, you want to include letter <samp>,</samp> in one of
<var>sym</var>, write <samp>\,</samp>. For example,
<option>-finstrument-functions-exclude-file-list='\,\,tmp'</option>
(note the single quote surrounding the option).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-finstrument-functions-exclude-function-list=<var>sym</var>,<var>sym</var>,&dots;</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2594" incode="1">finstrument-functions-exclude-function-list</indexterm></indexcommand>

<para>This is similar to <option>-finstrument-functions-exclude-file-list</option>,
but this option sets the list of function names to be excluded from
instrumentation.  The function name to be matched is its user-visible
name, such as <code>vector&lt;int&gt; blah(const vector&lt;int&gt; &amp;)</code>, not the
internal mangled name (e.g., <code>_Z4blahRSt6vectorIiSaIiEE</code>).  The
match is done on substrings: if the <var>sym</var> parameter is a substring
of the function name, it is considered to be a match.  For C99 and C++
extended identifiers, the function name must be given in UTF-8, not
using universal character names.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstack-check</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2595" incode="1">fstack-check</indexterm></indexcommand>
<para>Generate code to verify that you do not go beyond the boundary of the
stack.  You should specify this flag if you are running in an
environment with multiple threads, but you only rarely need to specify it in
a single-threaded environment since stack overflow is automatically
detected on nearly all systems if there is only one stack.
</para>
<para>Note that this switch does not actually cause checking to be done; the
operating system or the language runtime must do that.  The switch causes
generation of code to ensure that they see the stack being extended.
</para>
<para>You can additionally specify a string parameter: <samp>no</samp> means no
checking, <samp>generic</samp> means force the use of old-style checking,
<samp>specific</samp> means use the best checking method and is equivalent
to bare <option>-fstack-check</option>.
</para>
<para>Old-style checking is a generic mechanism that requires no specific
target support in the compiler but comes with the following drawbacks:
</para>
<enumerate first="1" endspaces=" ">
<listitem>
<para>Modified allocation strategy for large objects: they are always
allocated dynamically if their size exceeds a fixed threshold.
</para>
</listitem><listitem>
<para>Fixed limit on the size of the static frame of functions: when it is
topped by a particular function, stack checking is not reliable and
a warning is issued by the compiler.
</para>
</listitem><listitem>
<para>Inefficiency: because of both the modified allocation strategy and the
generic implementation, code performance is hampered.
</para></listitem></enumerate>

<para>Note that old-style stack checking is also the fallback method for
<samp>specific</samp> if no target support has been added in the compiler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstack-limit-register=<var>reg</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">-fstack-limit-symbol=<var>sym</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="code">-fno-stack-limit</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2596" incode="1">fstack-limit-register</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2597" incode="1">fstack-limit-symbol</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2598" incode="1">fno-stack-limit</indexterm></indexcommand>
<para>Generate code to ensure that the stack does not grow beyond a certain value,
either the value of a register or the address of a symbol.  If a larger
stack is required, a signal is raised at run time.  For most targets,
the signal is raised before the stack overruns the boundary, so
it is possible to catch the signal without taking special precautions.
</para>
<para>For instance, if the stack starts at absolute address <samp>0x80000000</samp>
and grows downwards, you can use the flags
<option>-fstack-limit-symbol=__stack_limit</option> and
<option>-Wl,--defsym,__stack_limit=0x7ffe0000</option> to enforce a stack limit
of 128KB&eosperiod;  Note that this may only work with the GNU linker.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsplit-stack</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2599" incode="1">fsplit-stack</indexterm></indexcommand>
<para>Generate code to automatically split the stack before it overflows.
The resulting program has a discontiguous stack which can only
overflow if the program is unable to allocate any more memory.  This
is most useful when running threaded programs, as it is no longer
necessary to calculate a good stack size to use for each thread.  This
is currently only implemented for the x86 targets running
GNU/Linux.
</para>
<para>When code compiled with <option>-fsplit-stack</option> calls code compiled
without <option>-fsplit-stack</option>, there may not be much stack space
available for the latter code to run.  If compiling all code,
including library code, with <option>-fsplit-stack</option> is not an option,
then the linker can fix up these calls so that the code compiled
without <option>-fsplit-stack</option> always has a large stack.  Support for
this is implemented in the gold linker in GNU binutils release 2.21
and later.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fleading-underscore</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2600" incode="1">fleading-underscore</indexterm></indexcommand>
<para>This option and its counterpart, <option>-fno-leading-underscore</option>, forcibly
change the way C symbols are represented in the object file.  One use
is to help link with legacy assembly code.
</para>
<para><strong>Warning:</strong> the <option>-fleading-underscore</option> switch causes GCC to
generate code that is not binary compatible with code generated without that
switch.  Use it to conform to a non-default application binary interface.
Not all targets provide complete support for this switch.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-ftls-model=<var>model</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2601" incode="1">ftls-model</indexterm></indexcommand>
<para>Alter the thread-local storage model to be used (<pxref label="Thread_002dLocal"><xrefnodename>Thread-Local</xrefnodename></pxref>).
The <var>model</var> argument should be one of <samp>global-dynamic</samp>,
<samp>local-dynamic</samp>, <samp>initial-exec</samp> or <samp>local-exec</samp>.
Note that the choice is subject to optimization: the compiler may use
a more efficient model for symbols not visible outside of the translation
unit, or if <option>-fpic</option> is not given on the command line.
</para>
<para>The default without <option>-fpic</option> is <samp>initial-exec</samp>; with
<option>-fpic</option> the default is <samp>global-dynamic</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fvisibility=<r>[</r>default<r>|</r>internal<r>|</r>hidden<r>|</r>protected<r>]</r></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2602" incode="1">fvisibility</indexterm></indexcommand>
<para>Set the default ELF image symbol visibility to the specified option&textmdash;all
symbols are marked with this unless overridden within the code.
Using this feature can very substantially improve linking and
load times of shared object libraries, produce more optimized
code, provide near-perfect API export and prevent symbol clashes.
It is <strong>strongly</strong> recommended that you use this in any shared objects
you distribute.
</para>
<para>Despite the nomenclature, <samp>default</samp> always means public; i.e.,
available to be linked against from outside the shared object.
<samp>protected</samp> and <samp>internal</samp> are pretty useless in real-world
usage so the only other commonly used option is <samp>hidden</samp>.
The default if <option>-fvisibility</option> isn&textrsquo;t specified is
<samp>default</samp>, i.e., make every symbol public.
</para>
<para>A good explanation of the benefits offered by ensuring ELF
symbols have the correct visibility is given by &textldquo;How To Write
Shared Libraries&textrdquo; by Ulrich Drepper (which can be found at
<w><uref><urefurl>http://www.akkadia.org/drepper/</urefurl></uref></w>)&textmdash;however a superior
solution made possible by this option to marking things hidden when
the default is public is to make the default hidden and mark things
public.  This is the norm with DLLs on Windows and with <option>-fvisibility=hidden</option>
and <code>__attribute__ ((visibility(&quot;default&quot;)))</code> instead of
<code>__declspec(dllexport)</code> you get almost identical semantics with
identical syntax.  This is a great boon to those working with
cross-platform projects.
</para>
<para>For those adding visibility support to existing code, you may find
<code>#pragma GCC visibility</code> of use.  This works by you enclosing
the declarations you wish to set visibility for with (for example)
<code>#pragma GCC visibility push(hidden)</code> and
<code>#pragma GCC visibility pop</code>.
Bear in mind that symbol visibility should be viewed <strong>as
part of the API interface contract</strong> and thus all new code should
always specify visibility when it is not the default; i.e., declarations
only for use within the local DSO should <strong>always</strong> be marked explicitly
as hidden as so to avoid PLT indirection overheads&textmdash;making this
abundantly clear also aids readability and self-documentation of the code.
Note that due to ISO C++ specification requirements, <code>operator new</code> and
<code>operator delete</code> must always be of default visibility.
</para>
<para>Be aware that headers from outside your project, in particular system
headers and headers from any other library you use, may not be
expecting to be compiled with visibility other than the default.  You
may need to explicitly say <code>#pragma GCC visibility push(default)</code>
before including any such headers.
</para>
<para><code>extern</code> declarations are not affected by <option>-fvisibility</option>, so
a lot of code can be recompiled with <option>-fvisibility=hidden</option> with
no modifications.  However, this means that calls to <code>extern</code>
functions with no explicit visibility use the PLT, so it is more
effective to use <code>__attribute ((visibility))</code> and/or
<code>#pragma GCC visibility</code> to tell the compiler which <code>extern</code>
declarations should be treated as hidden.
</para>
<para>Note that <option>-fvisibility</option> does affect C++ vague linkage
entities. This means that, for instance, an exception class that is
be thrown between DSOs must be explicitly marked with default
visibility so that the <samp>type_info</samp> nodes are unified between
the DSOs.
</para>
<para>An overview of these techniques, their benefits and how to use them
is at <uref><urefurl>http://gcc.gnu.org/&slashbreak;wiki/&slashbreak;Visibility</urefurl></uref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstrict-volatile-bitfields</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2603" incode="1">fstrict-volatile-bitfields</indexterm></indexcommand>
<para>This option should be used if accesses to volatile bit-fields (or other
structure fields, although the compiler usually honors those types
anyway) should use a single access of the width of the
field&textrsquo;s type, aligned to a natural alignment if possible.  For
example, targets with memory-mapped peripheral registers might require
all such accesses to be 16 bits wide; with this flag you can
declare all peripheral bit-fields as <code>unsigned short</code> (assuming short
is 16 bits on these targets) to force GCC to use 16-bit accesses
instead of, perhaps, a more efficient 32-bit access.
</para>
<para>If this option is disabled, the compiler uses the most efficient
instruction.  In the previous example, that might be a 32-bit load
instruction, even though that accesses bytes that do not contain
any portion of the bit-field, or memory-mapped registers unrelated to
the one being updated.
</para>
<para>In some cases, such as when the <code>packed</code> attribute is applied to a 
structure field, it may not be possible to access the field with a single
read or write that is correctly aligned for the target machine.  In this
case GCC falls back to generating multiple accesses rather than code that 
will fault or truncate the result at run time.
</para>
<para>Note:  Due to restrictions of the C/C++11 memory model, write accesses are
not allowed to touch non bit-field members.  It is therefore recommended
to define all bits of the field&textrsquo;s type as bit-field members.
</para>
<para>The default value of this option is determined by the application binary
interface for the target processor.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fsync-libcalls</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2604" incode="1">fsync-libcalls</indexterm></indexcommand>
<para>This option controls whether any out-of-line instance of the <code>__sync</code>
family of functions may be used to implement the C++11 <code>__atomic</code>
family of functions.
</para>
<para>The default value of this option is enabled, thus the only useful form
of the option is <option>-fno-sync-libcalls</option>.  This option is used in
the implementation of the <file>libatomic</file> runtime library.
</para>
</tableitem></tableentry></table>

<!-- c man end -->

</section>
<node name="Environment-Variables" spaces=" "><nodename>Environment Variables</nodename><nodenext automatic="on">Precompiled Headers</nodenext><nodeprev automatic="on">Code Gen Options</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Environment Variables Affecting GCC</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="237">environment variables</indexterm></cindex>

<!-- c man begin ENVIRONMENT -->
<para>This section describes several environment variables that affect how GCC
operates.  Some of them work by specifying directories or prefixes to use
when searching for various kinds of files.  Some are used to specify other
aspects of the compilation environment.
</para>
<para>Note that you can also specify places to search using options such as
<option>-B</option>, <option>-I</option> and <option>-L</option> (<pxref label="Directory-Options"><xrefnodename>Directory Options</xrefnodename></pxref>).  These
take precedence over places specified using environment variables, which
in turn take precedence over those specified by the configuration of GCC&eosperiod;
<xref label="Driver" manual="gccint"><xrefnodename>Driver</xrefnodename><xrefprinteddesc spaces=" ">Controlling the Compilation Driver <file>gcc</file></xrefprinteddesc><xrefinfofile spaces=" ">gccint</xrefinfofile><xrefprintedname spaces="\n">GNU Compiler Collection (GCC) Internals</xrefprintedname></xref>.
</para>
<table commandarg="env" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="env">LANG</itemformat></item>
<itemx spaces=" "><itemformat command="env">LC_CTYPE</itemformat></itemx>
<!-- c @itemx LC_COLLATE -->
<itemx spaces=" "><itemformat command="env">LC_MESSAGES</itemformat></itemx>
<!-- c @itemx LC_MONETARY -->
<!-- c @itemx LC_NUMERIC -->
<!-- c @itemx LC_TIME -->
<itemx spaces=" "><itemformat command="env">LC_ALL</itemformat></itemx>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="4" mergedindex="cp">LANG</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="5" mergedindex="cp">LC_CTYPE</indexterm></findex>
<!-- c @findex LC_COLLATE -->
<findex index="fn" spaces=" "><indexterm index="fn" number="6" mergedindex="cp">LC_MESSAGES</indexterm></findex>
<!-- c @findex LC_MONETARY -->
<!-- c @findex LC_NUMERIC -->
<!-- c @findex LC_TIME -->
<findex index="fn" spaces=" "><indexterm index="fn" number="7" mergedindex="cp">LC_ALL</indexterm></findex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="238">locale</indexterm></cindex>
<para>These environment variables control the way that GCC uses
localization information which allows GCC to work with different
national conventions.  GCC inspects the locale categories
<env>LC_CTYPE</env> and <env>LC_MESSAGES</env> if it has been configured to do
so.  These locale categories can be set to any value supported by your
installation.  A typical value is <samp>en_GB.UTF-8</samp> for English in the United
Kingdom encoded in UTF-8.
</para>
<para>The <env>LC_CTYPE</env> environment variable specifies character
classification.  GCC uses it to determine the character boundaries in
a string; this is needed for some multibyte encodings that contain quote
and escape characters that are otherwise interpreted as a string
end or escape.
</para>
<para>The <env>LC_MESSAGES</env> environment variable specifies the language to
use in diagnostic messages.
</para>
<para>If the <env>LC_ALL</env> environment variable is set, it overrides the value
of <env>LC_CTYPE</env> and <env>LC_MESSAGES</env>; otherwise, <env>LC_CTYPE</env>
and <env>LC_MESSAGES</env> default to the value of the <env>LANG</env>
environment variable.  If none of these variables are set, GCC
defaults to traditional C English behavior.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="env">TMPDIR</itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="8" mergedindex="cp">TMPDIR</indexterm></findex>
<para>If <env>TMPDIR</env> is set, it specifies the directory to use for temporary
files.  GCC uses temporary files to hold the output of one stage of
compilation which is to be used as input to the next stage: for example,
the output of the preprocessor, which is the input to the compiler
proper.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="env">GCC_COMPARE_DEBUG</itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="9" mergedindex="cp">GCC_COMPARE_DEBUG</indexterm></findex>
<para>Setting <env>GCC_COMPARE_DEBUG</env> is nearly equivalent to passing
<option>-fcompare-debug</option> to the compiler driver.  See the documentation
of this option for more details.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="env">GCC_EXEC_PREFIX</itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="10" mergedindex="cp">GCC_EXEC_PREFIX</indexterm></findex>
<para>If <env>GCC_EXEC_PREFIX</env> is set, it specifies a prefix to use in the
names of the subprograms executed by the compiler.  No slash is added
when this prefix is combined with the name of a subprogram, but you can
specify a prefix that ends with a slash if you wish.
</para>
<para>If <env>GCC_EXEC_PREFIX</env> is not set, GCC attempts to figure out
an appropriate prefix to use based on the pathname it is invoked with.
</para>
<para>If GCC cannot find the subprogram using the specified prefix, it
tries looking in the usual places for the subprogram.
</para>
<para>The default value of <env>GCC_EXEC_PREFIX</env> is
<file><var>prefix</var>/lib/gcc/</file> where <var>prefix</var> is the prefix to
the installed compiler. In many cases <var>prefix</var> is the value
of <code>prefix</code> when you ran the <file>configure</file> script.
</para>
<para>Other prefixes specified with <option>-B</option> take precedence over this prefix.
</para>
<para>This prefix is also used for finding files such as <file>crt0.o</file> that are
used for linking.
</para>
<para>In addition, the prefix is used in an unusual way in finding the
directories to search for header files.  For each of the standard
directories whose name normally begins with <samp>/usr/local/lib/gcc</samp>
(more precisely, with the value of <env>GCC_INCLUDE_DIR</env>), GCC tries
replacing that beginning with the specified prefix to produce an
alternate directory name.  Thus, with <option>-Bfoo/</option>, GCC searches
<file>foo/bar</file> just before it searches the standard directory 
<file>/usr/local/lib/bar</file>.
If a standard directory begins with the configured
<var>prefix</var> then the value of <var>prefix</var> is replaced by
<env>GCC_EXEC_PREFIX</env> when looking for header files.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="env">COMPILER_PATH</itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="11" mergedindex="cp">COMPILER_PATH</indexterm></findex>
<para>The value of <env>COMPILER_PATH</env> is a colon-separated list of
directories, much like <env>PATH</env>.  GCC tries the directories thus
specified when searching for subprograms, if it can&textrsquo;t find the
subprograms using <env>GCC_EXEC_PREFIX</env>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="env">LIBRARY_PATH</itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="12" mergedindex="cp">LIBRARY_PATH</indexterm></findex>
<para>The value of <env>LIBRARY_PATH</env> is a colon-separated list of
directories, much like <env>PATH</env>.  When configured as a native compiler,
GCC tries the directories thus specified when searching for special
linker files, if it can&textrsquo;t find them using <env>GCC_EXEC_PREFIX</env>.  Linking
using GCC also uses these directories when searching for ordinary
libraries for the <option>-l</option> option (but directories specified with
<option>-L</option> come first).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="env">LANG</itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="13" mergedindex="cp">LANG</indexterm></findex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="239">locale definition</indexterm></cindex>
<para>This variable is used to pass locale information to the compiler.  One way in
which this information is used is to determine the character set to be used
when character literals, string literals and comments are parsed in C and C++.
When the compiler is configured to allow multibyte characters,
the following values for <env>LANG</env> are recognized:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">C-JIS</itemformat></item>
</tableterm><tableitem><para>Recognize JIS characters.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">C-SJIS</itemformat></item>
</tableterm><tableitem><para>Recognize SJIS characters.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">C-EUCJP</itemformat></item>
</tableterm><tableitem><para>Recognize EUCJP characters.
</para></tableitem></tableentry></table>

<para>If <env>LANG</env> is not defined, or if it has some other value, then the
compiler uses <code>mblen</code> and <code>mbtowc</code> as defined by the default locale to
recognize and translate multibyte characters.
</para></tableitem></tableentry></table>

<noindent></noindent>
<para>Some additional environment variables affect the behavior of the
preprocessor.
</para>
<!-- c Copyright (C) 1999-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the CPP and GCC manuals. -->
<!-- c For copying conditions, see the file gcc.texi. -->

<!-- c - -->
<!-- c Environment variables affecting the preprocessor -->
<!-- c - -->

<!-- c If this file is included with the flag ``cppmanual'' set, it is -->
<!-- c formatted for inclusion in the CPP manual; otherwise the main GCC manual. -->

<vtable commandarg="env" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="env"><indexterm index="vr" number="8" mergedindex="cp">CPATH</indexterm>CPATH</itemformat></item>
<itemx spaces=" "><itemformat command="env"><indexterm index="vr" number="9" mergedindex="cp">C_INCLUDE_PATH</indexterm>C_INCLUDE_PATH</itemformat></itemx>
<itemx spaces=" "><itemformat command="env"><indexterm index="vr" number="10" mergedindex="cp">CPLUS_INCLUDE_PATH</indexterm>CPLUS_INCLUDE_PATH</itemformat></itemx>
<itemx spaces=" "><itemformat command="env"><indexterm index="vr" number="11" mergedindex="cp">OBJC_INCLUDE_PATH</indexterm>OBJC_INCLUDE_PATH</itemformat></itemx>
</tableterm><tableitem><!-- c Commented out until ObjC++ is part of GCC: -->
<!-- c @itemx OBJCPLUS_INCLUDE_PATH -->
<para>Each variable&textrsquo;s value is a list of directories separated by a special
character, much like <env>PATH</env>, in which to look for header files.
The special character, <code>PATH_SEPARATOR</code>, is target-dependent and
determined at GCC build time.  For Microsoft Windows-based targets it is a
semicolon, and for almost all other targets it is a colon.
</para>
<para><env>CPATH</env> specifies a list of directories to be searched as if
specified with <option>-I</option>, but after any paths given with <option>-I</option>
options on the command line.  This environment variable is used
regardless of which language is being preprocessed.
</para>
<para>The remaining environment variables apply only when preprocessing the
particular language indicated.  Each specifies a list of directories
to be searched as if specified with <option>-isystem</option>, but after any
paths given with <option>-isystem</option> options on the command line.
</para>
<para>In all these variables, an empty element instructs the compiler to
search its current working directory.  Empty elements can appear at the
beginning or end of a path.  For instance, if the value of
<env>CPATH</env> is <code>:/special/include</code>, that has the same
effect as <samp><w>-I. -I/special/include</w></samp>.
</para>
<!-- c man end -->
<!-- c man begin ENVIRONMENT -->

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="env"><indexterm index="vr" number="12" mergedindex="cp">DEPENDENCIES_OUTPUT</indexterm>DEPENDENCIES_OUTPUT</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="240">dependencies for make as output</indexterm></cindex>
<para>If this variable is set, its value specifies how to output
dependencies for Make based on the non-system header files processed
by the compiler.  System header files are ignored in the dependency
output.
</para>
<para>The value of <env>DEPENDENCIES_OUTPUT</env> can be just a file name, in
which case the Make rules are written to that file, guessing the target
name from the source file name.  Or the value can have the form
<samp><var>file</var> <var>target</var></samp>, in which case the rules are written to
file <var>file</var> using <var>target</var> as the target name.
</para>
<para>In other words, this environment variable is equivalent to combining
the options <option>-MM</option> and <option>-MF</option>
(<pxref label="Preprocessor-Options"><xrefnodename>Preprocessor Options</xrefnodename></pxref>),
with an optional <option>-MT</option> switch too.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="env"><indexterm index="vr" number="13" mergedindex="cp">SUNPRO_DEPENDENCIES</indexterm>SUNPRO_DEPENDENCIES</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="241">dependencies for make as output</indexterm></cindex>
<para>This variable is the same as <env>DEPENDENCIES_OUTPUT</env> (see above),
except that system header files are not ignored, so it implies
<option>-M</option> rather than <option>-MM</option>.  However, the dependence on the
main input file is omitted.
<xref label="Preprocessor-Options"><xrefnodename>Preprocessor Options</xrefnodename></xref>.
</para></tableitem></tableentry></vtable>

<!-- c man end -->

</section>
<node name="Precompiled-Headers" spaces=" "><nodename>Precompiled Headers</nodename><nodeprev automatic="on">Environment Variables</nodeprev><nodeup automatic="on">Invoking GCC</nodeup></node>
<section spaces=" "><sectiontitle>Using Precompiled Headers</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="242">precompiled headers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="243">speed of compilation</indexterm></cindex>

<para>Often large projects have many header files that are included in every
source file.  The time the compiler takes to process these header files
over and over again can account for nearly all of the time required to
build the project.  To make builds faster, GCC allows you to
<dfn>precompile</dfn> a header file.
</para>
<para>To create a precompiled header file, simply compile it as you would any
other file, if necessary using the <option>-x</option> option to make the driver
treat it as a C or C++ header file.  You may want to use a
tool like <command>make</command> to keep the precompiled header up-to-date when
the headers it contains change.
</para>
<para>A precompiled header file is searched for when <code>#include</code> is
seen in the compilation.  As it searches for the included file
(<pxref label="Search-Path" manual="cpp"><xrefnodename>Search Path</xrefnodename><xrefprinteddesc>Search Path</xrefprinteddesc><xrefinfofile>cpp</xrefinfofile><xrefprintedname>The C Preprocessor</xrefprintedname></pxref>) the
compiler looks for a precompiled header in each directory just before it
looks for the include file in that directory.  The name searched for is
the name specified in the <code>#include</code> with <samp>.gch</samp> appended.  If
the precompiled header file can&textrsquo;t be used, it is ignored.
</para>
<para>For instance, if you have <code>#include &quot;all.h&quot;</code>, and you have
<file>all.h.gch</file> in the same directory as <file>all.h</file>, then the
precompiled header file is used if possible, and the original
header is used otherwise.
</para>
<para>Alternatively, you might decide to put the precompiled header file in a
directory and use <option>-I</option> to ensure that directory is searched
before (or instead of) the directory containing the original header.
Then, if you want to check that the precompiled header file is always
used, you can put a file of the same name as the original header in this
directory containing an <code>#error</code> command.
</para>
<para>This also works with <option>-include</option>.  So yet another way to use
precompiled headers, good for projects not designed with precompiled
header files in mind, is to simply take most of the header files used by
a project, include them from another header file, precompile that header
file, and <option>-include</option> the precompiled header.  If the header files
have guards against multiple inclusion, they are skipped because
they&textrsquo;ve already been included (in the precompiled header).
</para>
<para>If you need to precompile the same header file for different
languages, targets, or compiler options, you can instead make a
<emph>directory</emph> named like <file>all.h.gch</file>, and put each precompiled
header in the directory, perhaps using <option>-o</option>.  It doesn&textrsquo;t matter
what you call the files in the directory; every precompiled header in
the directory is considered.  The first precompiled header
encountered in the directory that is valid for this compilation is
used; they&textrsquo;re searched in no particular order.
</para>
<para>There are many other possibilities, limited only by your imagination,
good sense, and the constraints of your build system.
</para>
<para>A precompiled header file can be used only when these conditions apply:
</para>
<itemize commandarg="bullet" endspaces=" ">
<listitem><prepend>&bullet;</prepend>
<para>Only one precompiled header can be used in a particular compilation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>A precompiled header can&textrsquo;t be used once the first C token is seen.  You
can have preprocessor directives before a precompiled header; you cannot
include a precompiled header from inside another header.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The precompiled header file must be produced for the same language as
the current compilation.  You can&textrsquo;t use a C precompiled header for a C++
compilation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The precompiled header file must have been produced by the same compiler
binary as the current compilation is using.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Any macros defined before the precompiled header is included must
either be defined in the same way as when the precompiled header was
generated, or must not affect the precompiled header, which usually
means that they don&textrsquo;t appear in the precompiled header at all.
</para>
<para>The <option>-D</option> option is one way to define a macro before a
precompiled header is included; using a <code>#define</code> can also do it.
There are also some options that define macros implicitly, like
<option>-O</option> and <option>-Wdeprecated</option>; the same rule applies to macros
defined this way.
</para>
</listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>If debugging information is output when using the precompiled
header, using <option>-g</option> or similar, the same kind of debugging information
must have been output when building the precompiled header.  However,
a precompiled header built using <option>-g</option> can be used in a compilation
when no debugging information is being output.
</para>
</listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>The same <option>-m</option> options must generally be used when building
and using the precompiled header.  <xref label="Submodel-Options"><xrefnodename>Submodel Options</xrefnodename></xref>,
for any cases where this rule is relaxed.
</para>
</listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>Each of the following options must be the same when building and using
the precompiled header:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">-fexceptions
</pre></smallexample>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Some other command-line options starting with <option>-f</option>,
<option>-p</option>, or <option>-O</option> must be defined in the same way as when
the precompiled header was generated.  At present, it&textrsquo;s not clear
which options are safe to change and which are not; the safest choice
is to use exactly the same options when generating and using the
precompiled header.  The following are known to be safe:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">-fmessage-length=  -fpreprocessed  -fsched-interblock 
-fsched-spec  -fsched-spec-load  -fsched-spec-load-dangerous 
-fsched-verbose=<var>number</var>  -fschedule-insns  -fvisibility= 
-pedantic-errors
</pre></smallexample>

</listitem></itemize>

<para>For all of these except the last, the compiler automatically
ignores the precompiled header if the conditions aren&textrsquo;t met.  If you
find an option combination that doesn&textrsquo;t work and doesn&textrsquo;t cause the
precompiled header to be ignored, please consider filing a bug report,
see <ref label="Bugs"><xrefnodename>Bugs</xrefnodename></ref>.
</para>
<para>If you do use differing options when generating and using the
precompiled header, the actual behavior is a mixture of the
behavior for the options.  For instance, if you use <option>-g</option> to
generate the precompiled header but not when using it, you may or may
not get debugging information for routines in the precompiled header.
<!-- c Copyright (C) 2001-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->
</para>
</section>
</chapter>
<node name="C-Implementation" spaces=" "><nodename>C Implementation</nodename><nodenext automatic="on">C++ Implementation</nodenext><nodeprev automatic="on">Invoking GCC</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>C Implementation-Defined Behavior</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="244">implementation-defined behavior, C language</indexterm></cindex>

<para>A conforming implementation of ISO C is required to document its
choice of behavior in each of the areas that are designated
&textldquo;implementation defined&textrdquo;.  The following lists all such areas,
along with the section numbers from the ISO/IEC 9899:1990, ISO/IEC
9899:1999 and ISO/IEC 9899:2011 standards.  Some areas are only
implementation-defined in one version of the standard.
</para>
<para>Some choices depend on the externally determined ABI for the platform
(including standard character encodings) which GCC follows; these are
listed as &textldquo;determined by ABI&textrdquo; below.  <xref label="Compatibility"><xrefnodename>Compatibility</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Binary
Compatibility</xrefprinteddesc></xref>, and <uref><urefurl>http://gcc.gnu.org/readings.html</urefurl></uref>.  Some
choices are documented in the preprocessor manual.
<xref label="Implementation_002ddefined-behavior" manual="cpp"><xrefnodename>Implementation-defined behavior</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Implementation-defined
behavior</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>.  Some choices are made by the
library and operating system (or other environment when compiling for
a freestanding environment); refer to their documentation for details.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Translation implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Environment implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Identifiers implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Characters implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Integers implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Floating point implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Arrays and pointers implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Hints implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Structures unions enumerations and bit-fields implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Qualifiers implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Declarators implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Statements implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Preprocessing directives implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Library functions implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Architecture implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Locale-specific behavior implementation</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="Translation-implementation" spaces=" "><nodename>Translation implementation</nodename><nodenext automatic="on">Environment implementation</nodenext><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Translation</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>How a diagnostic is identified (C90 3.7, C99 and C11 3.10, C90,
C99 and C11 5.1.1.3).</cite>
</para>
<para>Diagnostics consist of all the output sent to stderr by GCC&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether each nonempty sequence of white-space characters other than
new-line is retained or replaced by one space character in translation
phase 3 (C90, C99 and C11 5.1.1.2).</cite>
</para>
<para><xref label="Implementation_002ddefined-behavior" manual="cpp"><xrefnodename>Implementation-defined behavior</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Implementation-defined
behavior</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>.
</para>
</listitem></itemize>

</section>
<node name="Environment-implementation" spaces=" "><nodename>Environment implementation</nodename><nodenext automatic="on">Identifiers implementation</nodenext><nodeprev automatic="on">Translation implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Environment</sectiontitle>

<para>The behavior of most of these points are dependent on the implementation
of the C library, and are not defined by GCC itself.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>The mapping between physical source file multibyte characters
and the source character set in translation phase 1 (C90, C99 and C11
5.1.1.2).</cite>
</para>
<para><xref label="Implementation_002ddefined-behavior" manual="cpp"><xrefnodename>Implementation-defined behavior</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Implementation-defined
behavior</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>.
</para>
</listitem></itemize>

</section>
<node name="Identifiers-implementation" spaces=" "><nodename>Identifiers implementation</nodename><nodenext automatic="on">Characters implementation</nodenext><nodeprev automatic="on">Environment implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Identifiers</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>Which additional multibyte characters may appear in identifiers
and their correspondence to universal character names (C99 and C11 6.4.2).</cite>
</para>
<para><xref label="Implementation_002ddefined-behavior" manual="cpp"><xrefnodename>Implementation-defined behavior</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Implementation-defined
behavior</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The number of significant initial characters in an identifier
(C90 6.1.2, C90, C99 and C11 5.2.4.1, C99 and C11 6.4.2).</cite>
</para>
<para>For internal names, all characters are significant.  For external names,
the number of significant characters are defined by the linker; for
almost all targets, all characters are significant.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether case distinctions are significant in an identifier with
external linkage (C90 6.1.2).</cite>
</para>
<para>This is a property of the linker.  C99 and C11 require that case distinctions
are always significant in identifiers with external linkage and
systems without this property are not supported by GCC&eosperiod;
</para>
</listitem></itemize>

</section>
<node name="Characters-implementation" spaces=" "><nodename>Characters implementation</nodename><nodenext automatic="on">Integers implementation</nodenext><nodeprev automatic="on">Identifiers implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Characters</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>The number of bits in a byte (C90 3.4, C99 and C11 3.6).</cite>
</para>
<para>Determined by ABI&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The values of the members of the execution character set (C90,
C99 and C11 5.2.1).</cite>
</para>
<para>Determined by ABI&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The unique value of the member of the execution character set produced
for each of the standard alphabetic escape sequences (C90, C99 and C11
5.2.2).</cite>
</para>
<para>Determined by ABI&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The value of a <code>char</code> object into which has been stored any
character other than a member of the basic execution character set
(C90 6.1.2.5, C99 and C11 6.2.5).</cite>
</para>
<para>Determined by ABI&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Which of <code>signed char</code> or <code>unsigned char</code> has the same
range, representation, and behavior as &textldquo;plain&textrdquo; <code>char</code> (C90
6.1.2.5, C90 6.2.1.1, C99 and C11 6.2.5, C99 and C11 6.3.1.1).</cite>
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2605" incode="1">fsigned-char</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2606" incode="1">funsigned-char</indexterm></indexcommand>
<para>Determined by ABI&eosperiod;  The options <option>-funsigned-char</option> and
<option>-fsigned-char</option> change the default.  <xref label="C-Dialect-Options"><xrefnodename>C Dialect Options</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces="\n">Options Controlling C Dialect</xrefprinteddesc></xref>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The mapping of members of the source character set (in character
constants and string literals) to members of the execution character
set (C90 6.1.3.4, C99 and C11 6.4.4.4, C90, C99 and C11 5.1.1.2).</cite>
</para>
<para>Determined by ABI&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The value of an integer character constant containing more than one
character or containing a character or escape sequence that does not map
to a single-byte execution character (C90 6.1.3.4, C99 and C11 6.4.4.4).</cite>
</para>
<para><xref label="Implementation_002ddefined-behavior" manual="cpp"><xrefnodename>Implementation-defined behavior</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Implementation-defined
behavior</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The value of a wide character constant containing more than one
multibyte character or a single multibyte character that maps to
multiple members of the extended execution character set, or
containing a multibyte character or escape sequence not represented in
the extended execution character set (C90 6.1.3.4, C99 and C11
6.4.4.4).</cite>
</para>
<para><xref label="Implementation_002ddefined-behavior" manual="cpp"><xrefnodename>Implementation-defined behavior</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Implementation-defined
behavior</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The current locale used to convert a wide character constant consisting
of a single multibyte character that maps to a member of the extended
execution character set into a corresponding wide character code (C90
6.1.3.4, C99 and C11 6.4.4.4).</cite>
</para>
<para><xref label="Implementation_002ddefined-behavior" manual="cpp"><xrefnodename>Implementation-defined behavior</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Implementation-defined
behavior</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether differently-prefixed wide string literal tokens can be
concatenated and, if so, the treatment of the resulting multibyte
character sequence (C11 6.4.5).</cite>
</para>
<para>Such tokens may not be concatenated.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The current locale used to convert a wide string literal into
corresponding wide character codes (C90 6.1.4, C99 and C11 6.4.5).</cite>
</para>
<para><xref label="Implementation_002ddefined-behavior" manual="cpp"><xrefnodename>Implementation-defined behavior</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Implementation-defined
behavior</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The value of a string literal containing a multibyte character or escape
sequence not represented in the execution character set (C90 6.1.4,
C99 and C11 6.4.5).</cite>
</para>
<para><xref label="Implementation_002ddefined-behavior" manual="cpp"><xrefnodename>Implementation-defined behavior</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Implementation-defined
behavior</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The encoding of any of <code>wchar_t</code>, <code>char16_t</code>, and
<code>char32_t</code> where the corresponding standard encoding macro
(<code>__STDC_ISO_10646__</code>, <code>__STDC_UTF_16__</code>, or
<code>__STDC_UTF_32__</code>) is not defined (C11 6.10.8.2).</cite>
</para>
<para><xref label="Implementation_002ddefined-behavior" manual="cpp"><xrefnodename>Implementation-defined behavior</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Implementation-defined
behavior</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>.  <code>char16_t</code> and
<code>char32_t</code> literals are always encoded in UTF-16 and UTF-32
respectively.
</para>
</listitem></itemize>

</section>
<node name="Integers-implementation" spaces=" "><nodename>Integers implementation</nodename><nodenext automatic="on">Floating point implementation</nodenext><nodeprev automatic="on">Characters implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Integers</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>Any extended integer types that exist in the implementation (C99
and C11 6.2.5).</cite>
</para>
<para>GCC does not support any extended integer types.
<!-- c The __mode__ attribute might create types of precisions not -->
<!-- c otherwise supported, but the syntax isn't right for use everywhere -->
<!-- c the standard type names might be used.  Predefined typedefs should -->
<!-- c be used if any extended integer types are to be defined.  The -->
<!-- c __int128_t and __uint128_t typedefs are not extended integer types -->
<!-- c as they are generally longer than the ABI-specified intmax_t. -->
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether signed integer types are represented using sign and magnitude,
two&textrsquo;s complement, or one&textrsquo;s complement, and whether the extraordinary value
is a trap representation or an ordinary value (C99 and C11 6.2.6.2).</cite>
</para>
<para>GCC supports only two&textrsquo;s complement integer types, and all bit patterns
are ordinary values.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The rank of any extended integer type relative to another extended
integer type with the same precision (C99 and C11 6.3.1.1).</cite>
</para>
<para>GCC does not support any extended integer types.
<!-- c If it did, there would only be one of each precision and signedness. -->
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The result of, or the signal raised by, converting an integer to a
signed integer type when the value cannot be represented in an object of
that type (C90 6.2.1.2, C99 and C11 6.3.1.3).</cite>
</para>
<para>For conversion to a type of width <math>N</math>, the value is reduced
modulo <math>2^N</math> to be within range of the type; no signal is raised.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The results of some bitwise operations on signed integers (C90
6.3, C99 and C11 6.5).</cite>
</para>
<para>Bitwise operators act on the representation of the value including
both the sign and value bits, where the sign bit is considered
immediately above the highest-value value bit.  Signed <samp>&gt;&gt;</samp> acts
on negative numbers by sign extension.
</para>
<para>GCC does not use the latitude given in C99 and C11 only to treat certain
aspects of signed <samp>&lt;&lt;</samp> as undefined, but this is subject to
change.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The sign of the remainder on integer division (C90 6.3.5).</cite>
</para>
<para>GCC always follows the C99 and C11 requirement that the result of division is
truncated towards zero.
</para>
</listitem></itemize>

</section>
<node name="Floating-point-implementation" spaces=" "><nodename>Floating point implementation</nodename><nodenext automatic="on">Arrays and pointers implementation</nodenext><nodeprev automatic="on">Integers implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Floating Point</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>The accuracy of the floating-point operations and of the library
functions in <code>&lt;math.h&gt;</code> and <code>&lt;complex.h&gt;</code> that return floating-point
results (C90, C99 and C11 5.2.4.2.2).</cite>
</para>
<para>The accuracy is unknown.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The rounding behaviors characterized by non-standard values
of <code>FLT_ROUNDS</code> 
(C90, C99 and C11 5.2.4.2.2).</cite>
</para>
<para>GCC does not use such values.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The evaluation methods characterized by non-standard negative
values of <code>FLT_EVAL_METHOD</code> (C99 and C11 5.2.4.2.2).</cite>
</para>
<para>GCC does not use such values.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The direction of rounding when an integer is converted to a
floating-point number that cannot exactly represent the original
value (C90 6.2.1.3, C99 and C11 6.3.1.4).</cite>
</para>
<para>C99 Annex F is followed.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The direction of rounding when a floating-point number is
converted to a narrower floating-point number (C90 6.2.1.4, C99 and C11
6.3.1.5).</cite>
</para>
<para>C99 Annex F is followed.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>How the nearest representable value or the larger or smaller
representable value immediately adjacent to the nearest representable
value is chosen for certain floating constants (C90 6.1.3.1, C99 and C11
6.4.4.2).</cite>
</para>
<para>C99 Annex F is followed.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether and how floating expressions are contracted when not
disallowed by the <code>FP_CONTRACT</code> pragma (C99 and C11 6.5).</cite>
</para>
<para>Expressions are currently only contracted if <option>-ffp-contract=fast</option>,
<option>-funsafe-math-optimizations</option> or <option>-ffast-math</option> are used.
This is subject to change.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The default state for the <code>FENV_ACCESS</code> pragma (C99 and C11
7.6.1).</cite>
</para>
<para>This pragma is not implemented, but the default is to &textldquo;off&textrdquo; unless
<option>-frounding-math</option> is used in which case it is &textldquo;on&textrdquo;.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Additional floating-point exceptions, rounding modes, environments,
and classifications, and their macro names (C99 and C11 7.6, C99 and
C11 7.12).</cite>
</para>
<para>This is dependent on the implementation of the C library, and is not
defined by GCC itself.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The default state for the <code>FP_CONTRACT</code> pragma (C99 and C11
7.12.2).</cite>
</para>
<para>This pragma is not implemented.  Expressions are currently only
contracted if <option>-ffp-contract=fast</option>,
<option>-funsafe-math-optimizations</option> or <option>-ffast-math</option> are used.
This is subject to change.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether the &textldquo;inexact&textrdquo; floating-point exception can be raised
when the rounded result actually does equal the mathematical result
in an IEC 60559 conformant implementation (C99 F.9).</cite>
</para>
<para>This is dependent on the implementation of the C library, and is not
defined by GCC itself.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether the &textldquo;underflow&textrdquo; (and &textldquo;inexact&textrdquo;) floating-point
exception can be raised when a result is tiny but not inexact in an
IEC 60559 conformant implementation (C99 F.9).</cite>
</para>
<para>This is dependent on the implementation of the C library, and is not
defined by GCC itself.
</para>
</listitem></itemize>

</section>
<node name="Arrays-and-pointers-implementation" spaces=" "><nodename>Arrays and pointers implementation</nodename><nodenext automatic="on">Hints implementation</nodenext><nodeprev automatic="on">Floating point implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Arrays and Pointers</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>The result of converting a pointer to an integer or
vice versa (C90 6.3.4, C99 and C11 6.3.2.3).</cite>
</para>
<para>A cast from pointer to integer discards most-significant bits if the
pointer representation is larger than the integer type,
sign-extends<footnote><para>Future versions of GCC may zero-extend, or use
a target-defined <code>ptr_extend</code> pattern.  Do not rely on sign extension.</para></footnote>
if the pointer representation is smaller than the integer type, otherwise
the bits are unchanged.
<!-- c ??? We've always claimed that pointers were unsigned entities. -->
<!-- c Shouldn't we therefore be doing zero-extension?  If so, the bug -->
<!-- c is in convert_to_integer, where we call type_for_size and request -->
<!-- c a signed integral type.  On the other hand, it might be most useful -->
<!-- c for the target if we extend according to POINTERS_EXTEND_UNSIGNED. -->
</para>
<para>A cast from integer to pointer discards most-significant bits if the
pointer representation is smaller than the integer type, extends according
to the signedness of the integer type if the pointer representation
is larger than the integer type, otherwise the bits are unchanged.
</para>
<para>When casting from pointer to integer and back again, the resulting
pointer must reference the same object as the original pointer, otherwise
the behavior is undefined.  That is, one may not use integer arithmetic to
avoid the undefined behavior of pointer arithmetic as proscribed in
C99 and C11 6.5.6/8.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The size of the result of subtracting two pointers to elements
of the same array (C90 6.3.6, C99 and C11 6.5.6).</cite>
</para>
<para>The value is as specified in the standard and the type is determined
by the ABI&eosperiod;
</para>
</listitem></itemize>

</section>
<node name="Hints-implementation" spaces=" "><nodename>Hints implementation</nodename><nodenext automatic="on">Structures unions enumerations and bit-fields implementation</nodenext><nodeprev automatic="on">Arrays and pointers implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Hints</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>The extent to which suggestions made by using the <code>register</code>
storage-class specifier are effective (C90 6.5.1, C99 and C11 6.7.1).</cite>
</para>
<para>The <code>register</code> specifier affects code generation only in these ways:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>When used as part of the register variable extension, see
<ref label="Explicit-Reg-Vars"><xrefnodename>Explicit Reg Vars</xrefnodename></ref>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>When <option>-O0</option> is in use, the compiler allocates distinct stack
memory for all variables that do not have the <code>register</code>
storage-class specifier; if <code>register</code> is specified, the variable
may have a shorter lifespan than the code would indicate and may never
be placed in memory.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>On some rare x86 targets, <code>setjmp</code> doesn&textrsquo;t save the registers in
all circumstances.  In those cases, GCC doesn&textrsquo;t allocate any variables
in registers unless they are marked <code>register</code>.
</para>
</listitem></itemize>

</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The extent to which suggestions made by using the inline function
specifier are effective (C99 and C11 6.7.4).</cite>
</para>
<para>GCC will not inline any functions if the <option>-fno-inline</option> option is
used or if <option>-O0</option> is used.  Otherwise, GCC may still be unable to
inline a function for many reasons; the <option>-Winline</option> option may be
used to determine if a function has not been inlined and why not.
</para>
</listitem></itemize>

</section>
<node name="Structures-unions-enumerations-and-bit_002dfields-implementation" spaces=" "><nodename>Structures unions enumerations and bit-fields implementation</nodename><nodenext automatic="on">Qualifiers implementation</nodenext><nodeprev automatic="on">Hints implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Structures, Unions, Enumerations, and Bit-Fields</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>A member of a union object is accessed using a member of a
different type (C90 6.3.2.3).</cite>
</para>
<para>The relevant bytes of the representation of the object are treated as
an object of the type used for the access.  <xref label="Type_002dpunning"><xrefnodename>Type-punning</xrefnodename></xref>.  This
may be a trap representation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether a &textldquo;plain&textrdquo; <code>int</code> bit-field is treated as a
<code>signed int</code> bit-field or as an <code>unsigned int</code> bit-field
(C90 6.5.2, C90 6.5.2.1, C99 and C11 6.7.2, C99 and C11 6.7.2.1).</cite>
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2607" incode="1">funsigned-bitfields</indexterm></indexcommand>
<para>By default it is treated as <code>signed int</code> but this may be changed
by the <option>-funsigned-bitfields</option> option.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Allowable bit-field types other than <code>_Bool</code>, <code>signed int</code>,
and <code>unsigned int</code> (C99 and C11 6.7.2.1).</cite>
</para>
<para>Other integer types, such as <code>long int</code>, and enumerated types are
permitted even in strictly conforming mode.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether atomic types are permitted for bit-fields (C11 6.7.2.1).</cite>
</para>
<para>Atomic types are not permitted for bit-fields.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether a bit-field can straddle a storage-unit boundary (C90
6.5.2.1, C99 and C11 6.7.2.1).</cite>
</para>
<para>Determined by ABI&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The order of allocation of bit-fields within a unit (C90
6.5.2.1, C99 and C11 6.7.2.1).</cite>
</para>
<para>Determined by ABI&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The alignment of non-bit-field members of structures (C90
6.5.2.1, C99 and C11 6.7.2.1).</cite>
</para>
<para>Determined by ABI&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The integer type compatible with each enumerated type (C90
6.5.2.2, C99 and C11 6.7.2.2).</cite>
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2608" incode="1">fshort-enums</indexterm></indexcommand>
<para>Normally, the type is <code>unsigned int</code> if there are no negative
values in the enumeration, otherwise <code>int</code>.  If
<option>-fshort-enums</option> is specified, then if there are negative values
it is the first of <code>signed char</code>, <code>short</code> and <code>int</code>
that can represent all the values, otherwise it is the first of
<code>unsigned char</code>, <code>unsigned short</code> and <code>unsigned int</code>
that can represent all the values.
<!-- c On a few unusual targets with 64-bit int, this doesn't agree with -->
<!-- c the code and one of the types accessed via mode attributes (which -->
<!-- c are not currently considered extended integer types) may be used. -->
<!-- c If these types are made extended integer types, it would still be -->
<!-- c the case that -fshort-enums stops the implementation from -->
<!-- c conforming to C90 on those targets. -->
</para>
<para>On some targets, <option>-fshort-enums</option> is the default; this is
determined by the ABI&eosperiod;
</para>
</listitem></itemize>

</section>
<node name="Qualifiers-implementation" spaces=" "><nodename>Qualifiers implementation</nodename><nodenext automatic="on">Declarators implementation</nodenext><nodeprev automatic="on">Structures unions enumerations and bit-fields implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Qualifiers</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>What constitutes an access to an object that has volatile-qualified
type (C90 6.5.3, C99 and C11 6.7.3).</cite>
</para>
<para>Such an object is normally accessed by pointers and used for accessing
hardware.  In most expressions, it is intuitively obvious what is a read
and what is a write.  For example
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">volatile int *dst = <var>somevalue</var>;
volatile int *src = <var>someothervalue</var>;
*dst = *src;
</pre></smallexample>

<noindent></noindent>
<para>will cause a read of the volatile object pointed to by <var>src</var> and store the
value into the volatile object pointed to by <var>dst</var>.  There is no
guarantee that these reads and writes are atomic, especially for objects
larger than <code>int</code>.
</para>
<para>However, if the volatile storage is not being modified, and the value of
the volatile storage is not used, then the situation is less obvious.
For example
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">volatile int *src = <var>somevalue</var>;
*src;
</pre></smallexample>

<para>According to the C standard, such an expression is an rvalue whose type
is the unqualified version of its original type, i.e. <code>int</code>.  Whether
GCC interprets this as a read of the volatile object being pointed to or
only as a request to evaluate the expression for its side-effects depends
on this type.
</para>
<para>If it is a scalar type, or on most targets an aggregate type whose only
member object is of a scalar type, or a union type whose member objects
are of scalar types, the expression is interpreted by GCC as a read of
the volatile object; in the other cases, the expression is only evaluated
for its side-effects.
</para>
</listitem></itemize>

</section>
<node name="Declarators-implementation" spaces=" "><nodename>Declarators implementation</nodename><nodenext automatic="on">Statements implementation</nodenext><nodeprev automatic="on">Qualifiers implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Declarators</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>The maximum number of declarators that may modify an arithmetic,
structure or union type (C90 6.5.4).</cite>
</para>
<para>GCC is only limited by available memory.
</para>
</listitem></itemize>

</section>
<node name="Statements-implementation" spaces=" "><nodename>Statements implementation</nodename><nodenext automatic="on">Preprocessing directives implementation</nodenext><nodeprev automatic="on">Declarators implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Statements</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>The maximum number of <code>case</code> values in a <code>switch</code>
statement (C90 6.6.4.2).</cite>
</para>
<para>GCC is only limited by available memory.
</para>
</listitem></itemize>

</section>
<node name="Preprocessing-directives-implementation" spaces=" "><nodename>Preprocessing directives implementation</nodename><nodenext automatic="on">Library functions implementation</nodenext><nodeprev automatic="on">Statements implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Preprocessing Directives</sectiontitle>

<para><xref label="Implementation_002ddefined-behavior" manual="cpp"><xrefnodename>Implementation-defined behavior</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Implementation-defined
behavior</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>, for details of these aspects of
implementation-defined behavior.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>The locations within <code>#pragma</code> directives where header name
preprocessing tokens are recognized (C11 6.4, C11 6.4.7).</cite>
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>How sequences in both forms of header names are mapped to headers
or external source file names (C90 6.1.7, C99 and C11 6.4.7).</cite>
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether the value of a character constant in a constant expression
that controls conditional inclusion matches the value of the same character
constant in the execution character set (C90 6.8.1, C99 and C11 6.10.1).</cite>
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether the value of a single-character character constant in a
constant expression that controls conditional inclusion may have a
negative value (C90 6.8.1, C99 and C11 6.10.1).</cite>
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The places that are searched for an included <samp>&lt;&gt;</samp> delimited
header, and how the places are specified or the header is
identified (C90 6.8.2, C99 and C11 6.10.2).</cite>
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>How the named source file is searched for in an included <samp>&quot;&quot;</samp>
delimited header (C90 6.8.2, C99 and C11 6.10.2).</cite>
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The method by which preprocessing tokens (possibly resulting from
macro expansion) in a <code>#include</code> directive are combined into a header
name (C90 6.8.2, C99 and C11 6.10.2).</cite>
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The nesting limit for <code>#include</code> processing (C90 6.8.2, C99
and C11 6.10.2).</cite>
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether the <samp>#</samp> operator inserts a <samp>\</samp> character before
the <samp>\</samp> character that begins a universal character name in a
character constant or string literal (C99 and C11 6.10.3.2).</cite>
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The behavior on each recognized non-<code>STDC #pragma</code>
directive (C90 6.8.6, C99 and C11 6.10.6).</cite>
</para>
<para><xref label="Pragmas" manual="cpp"><xrefnodename>Pragmas</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Pragmas</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>, for details of
pragmas accepted by GCC on all targets.  <xref label="Pragmas"><xrefnodename>Pragmas</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Pragmas
Accepted by GCC</xrefprinteddesc></xref>, for details of target-specific pragmas.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The definitions for <code>__DATE__</code> and <code>__TIME__</code> when
respectively, the date and time of translation are not available (C90
6.8.8, C99 6.10.8, C11 6.10.8.1).</cite>
</para>
</listitem></itemize>

</section>
<node name="Library-functions-implementation" spaces=" "><nodename>Library functions implementation</nodename><nodenext automatic="on">Architecture implementation</nodenext><nodeprev automatic="on">Preprocessing directives implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Library Functions</sectiontitle>

<para>The behavior of most of these points are dependent on the implementation
of the C library, and are not defined by GCC itself.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>The null pointer constant to which the macro <code>NULL</code> expands
(C90 7.1.6, C99 7.17, C11 7.19).</cite>
</para>
<para>In <code>&lt;stddef.h&gt;</code>, <code>NULL</code> expands to <code>((void *)0)</code>.  GCC
does not provide the other headers which define <code>NULL</code> and some
library implementations may use other definitions in those headers.
</para>
</listitem></itemize>

</section>
<node name="Architecture-implementation" spaces=" "><nodename>Architecture implementation</nodename><nodenext automatic="on">Locale-specific behavior implementation</nodenext><nodeprev automatic="on">Library functions implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Architecture</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>The values or expressions assigned to the macros specified in the
headers <code>&lt;float.h&gt;</code>, <code>&lt;limits.h&gt;</code>, and <code>&lt;stdint.h&gt;</code>
(C90, C99 and C11 5.2.4.2, C99 7.18.2, C99 7.18.3, C11 7.20.2, C11 7.20.3).</cite>
</para>
<para>Determined by ABI&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The result of attempting to indirectly access an object with
automatic or thread storage duration from a thread other than the one
with which it is associated (C11 6.2.4).</cite>
</para>
<para>Such accesses are supported, subject to the same requirements for
synchronization for concurrent accesses as for concurrent accesses to
any object.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The number, order, and encoding of bytes in any object
(when not explicitly specified in this International Standard) (C99
and C11 6.2.6.1).</cite>
</para>
<para>Determined by ABI&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Whether any extended alignments are supported and the contexts
in which they are supported (C11 6.2.8).</cite>
</para>
<para>Extended alignments up to <math>2^{28}</math> (bytes) are supported for
objects of automatic storage duration.  Alignments supported for
objects of static and thread storage duration are determined by the
ABI.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>Valid alignment values other than those returned by an _Alignof
expression for fundamental types, if any (C11 6.2.8).</cite>
</para>
<para>Valid alignments are powers of 2 up to and including <math>2^{28}</math>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>The value of the result of the <code>sizeof</code> and <code>_Alignof</code>
operators (C90 6.3.3.4, C99 and C11 6.5.3.4).</cite>
</para>
<para>Determined by ABI&eosperiod;
</para>
</listitem></itemize>

</section>
<node name="Locale_002dspecific-behavior-implementation" spaces=" "><nodename>Locale-specific behavior implementation</nodename><nodeprev automatic="on">Architecture implementation</nodeprev><nodeup automatic="on">C Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Locale-Specific Behavior</sectiontitle>

<para>The behavior of these points are dependent on the implementation
of the C library, and are not defined by GCC itself.
<!-- c Copyright (C) 2009-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->
</para>
</section>
</chapter>
<node name="C_002b_002b-Implementation" spaces=" "><nodename>C++ Implementation</nodename><nodenext automatic="on">C Extensions</nodenext><nodeprev automatic="on">C Implementation</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>C++ Implementation-Defined Behavior</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="245">implementation-defined behavior, C++ language</indexterm></cindex>

<para>A conforming implementation of ISO C++ is required to document its
choice of behavior in each of the areas that are designated
&textldquo;implementation defined&textrdquo;.  The following lists all such areas,
along with the section numbers from the ISO/IEC 14882:1998 and ISO/IEC
14882:2003 standards.  Some areas are only implementation-defined in
one version of the standard.
</para>
<para>Some choices depend on the externally determined ABI for the platform
(including standard character encodings) which GCC follows; these are
listed as &textldquo;determined by ABI&textrdquo; below.  <xref label="Compatibility"><xrefnodename>Compatibility</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Binary
Compatibility</xrefprinteddesc></xref>, and <uref><urefurl>http://gcc.gnu.org/readings.html</urefurl></uref>.  Some
choices are documented in the preprocessor manual.
<xref label="Implementation_002ddefined-behavior" manual="cpp"><xrefnodename>Implementation-defined behavior</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Implementation-defined
behavior</xrefprinteddesc><xrefinfofile spaces=" ">cpp</xrefinfofile><xrefprintedname spaces=" ">The C Preprocessor</xrefprintedname></xref>.  Some choices are documented in
the corresponding document for the C language.  <xref label="C-Implementation"><xrefnodename>C
Implementation</xrefnodename></xref>.  Some choices are made by the library and operating
system (or other environment when compiling for a freestanding
environment); refer to their documentation for details.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Conditionally-supported behavior</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Exception handling</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="Conditionally_002dsupported-behavior" spaces=" "><nodename>Conditionally-supported behavior</nodename><nodenext automatic="on">Exception handling</nodenext><nodeup automatic="on">C++ Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Conditionally-Supported Behavior</sectiontitle>

<para><cite>Each implementation shall include documentation that identifies
all conditionally-supported constructs that it does not support (C++0x
1.4).</cite>
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>Whether an argument of class type with a non-trivial copy
constructor or destructor can be passed to ... (C++0x 5.2.2).</cite>
</para>
<para>Such argument passing is supported, using the same
pass-by-invisible-reference approach used for normal function
arguments of such types.
</para>
</listitem></itemize>

</section>
<node name="Exception-handling" spaces=" "><nodename>Exception handling</nodename><nodeprev automatic="on">Conditionally-supported behavior</nodeprev><nodeup automatic="on">C++ Implementation</nodeup></node>
<section spaces=" "><sectiontitle>Exception Handling</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>In the situation where no matching handler is found, it is
implementation-defined whether or not the stack is unwound before
std::terminate() is called (C++98 15.5.1).</cite>
</para>
<para>The stack is not unwound before std::terminate is called.
</para>
</listitem></itemize>
<!-- c Copyright (C) 1988-2015 Free Software Foundation, Inc. -->

<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->

</section>
</chapter>
<node name="C-Extensions" spaces=" "><nodename>C Extensions</nodename><nodenext automatic="on">C++ Extensions</nodenext><nodeprev automatic="on">C++ Implementation</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Extensions to the C Language Family</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="246">extensions, C language</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="247">C language extensions</indexterm></cindex>

<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2609" incode="1">pedantic</indexterm></indexcommand>
<para>GNU C provides several language features not found in ISO standard C&eosperiod;
(The <option>-pedantic</option> option directs GCC to print a warning message if
any of these features is used.)  To test for the availability of these
features in conditional compilation, check for a predefined macro
<code>__GNUC__</code>, which is always defined under GCC&eosperiod;
</para>
<para>These extensions are available in C and Objective-C&eosperiod;  Most of them are
also available in C++.  <xref label="C_002b_002b-Extensions"><xrefnodename>C++ Extensions</xrefnodename><xrefprinteddesc>Extensions to the
C++ Language</xrefprinteddesc></xref>, for extensions that apply <emph>only</emph> to C++.
</para>
<para>Some features that are in ISO C99 but not C90 or C++ are also, as
extensions, accepted by GCC in C90 mode and in C++.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::     ">Statement Exprs</menunode><menudescription><pre xml:space="preserve">Putting statements and declarations inside expressions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Local Labels</menunode><menudescription><pre xml:space="preserve">Labels local to a block.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Labels as Values</menunode><menudescription><pre xml:space="preserve">Getting pointers to labels, and computed gotos.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Nested Functions</menunode><menudescription><pre xml:space="preserve">As in Algol and Pascal, lexical scoping of functions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">Constructing Calls</menunode><menudescription><pre xml:space="preserve">Dispatching a call to another function.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">Typeof</menunode><menudescription><pre xml:space="preserve"><code>typeof</code>: referring to the type of an expression.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Conditionals</menunode><menudescription><pre xml:space="preserve">Omitting the middle operand of a <samp>?:</samp> expression.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::		">__int128</menunode><menudescription><pre xml:space="preserve">128-bit integers&textmdash;<code>__int128</code>.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">Long Long</menunode><menudescription><pre xml:space="preserve">Double-word integers&textmdash;<code>long long int</code>.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">Complex</menunode><menudescription><pre xml:space="preserve">Data types for complex numbers.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Floating Types</menunode><menudescription><pre xml:space="preserve">Additional Floating Types.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Half-Precision</menunode><menudescription><pre xml:space="preserve">Half-Precision Floating Point.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">Decimal Float</menunode><menudescription><pre xml:space="preserve">Decimal Floating Types.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">Hex Floats</menunode><menudescription><pre xml:space="preserve">Hexadecimal floating-point constants.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Fixed-Point</menunode><menudescription><pre xml:space="preserve">Fixed-Point Types.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Named Address Spaces</menunode><menudescription><pre xml:space="preserve">Named address spaces.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Zero Length</menunode><menudescription><pre xml:space="preserve">Zero-length arrays.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Empty Structures</menunode><menudescription><pre xml:space="preserve">Structures with no members.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Variable Length</menunode><menudescription><pre xml:space="preserve">Arrays whose length is computed at run time.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Variadic Macros</menunode><menudescription><pre xml:space="preserve">Macros with a variable number of arguments.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Escaped Newlines</menunode><menudescription><pre xml:space="preserve">Slightly looser rules for escaped newlines.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Subscripting</menunode><menudescription><pre xml:space="preserve">Any array can be subscripted, even if not an lvalue.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">Pointer Arith</menunode><menudescription><pre xml:space="preserve">Arithmetic on <code>void</code>-pointers and function pointers.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">Pointers to Arrays</menunode><menudescription><pre xml:space="preserve">Pointers to arrays with qualifiers work as expected.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Initializers</menunode><menudescription><pre xml:space="preserve">Non-constant initializers.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Compound Literals</menunode><menudescription><pre xml:space="preserve">Compound literals give structures, unions
                        or arrays as values.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Designated Inits</menunode><menudescription><pre xml:space="preserve">Labeling elements of initializers.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Case Ranges</menunode><menudescription><pre xml:space="preserve">&textlsquo;case 1 ... 9&textrsquo; and such.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">Cast to Union</menunode><menudescription><pre xml:space="preserve">Casting to union type from any member of the union.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">Mixed Declarations</menunode><menudescription><pre xml:space="preserve">Mixing declarations and code.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Function Attributes</menunode><menudescription><pre xml:space="preserve">Declaring that functions have no side effects,
                        or that they can never return.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Variable Attributes</menunode><menudescription><pre xml:space="preserve">Specifying attributes of variables.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Type Attributes</menunode><menudescription><pre xml:space="preserve">Specifying attributes of types.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Label Attributes</menunode><menudescription><pre xml:space="preserve">Specifying attributes on labels.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Attribute Syntax</menunode><menudescription><pre xml:space="preserve">Formal syntax for attributes.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Function Prototypes</menunode><menudescription><pre xml:space="preserve">Prototype declarations and old-style definitions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">C++ Comments</menunode><menudescription><pre xml:space="preserve">C++ comments are recognized.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Dollar Signs</menunode><menudescription><pre xml:space="preserve">Dollar sign is allowed in identifiers.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Character Escapes</menunode><menudescription><pre xml:space="preserve"><samp>\e</samp> stands for the character <key>ESC</key>.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">Alignment</menunode><menudescription><pre xml:space="preserve">Inquiring about the alignment of a type or variable.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">Inline</menunode><menudescription><pre xml:space="preserve">Defining inline functions (as fast as macros).
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">Volatiles</menunode><menudescription><pre xml:space="preserve">What constitutes an access to a volatile object.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Using Assembly Language with C</menunode><menudescription><pre xml:space="preserve">Instructions and extensions for interfacing C with assembler.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">Alternate Keywords</menunode><menudescription><pre xml:space="preserve"><code>__const__</code>, <code>__asm__</code>, etc., for header files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Incomplete Enums</menunode><menudescription><pre xml:space="preserve"><code>enum foo;</code>, with details to follow.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Function Names</menunode><menudescription><pre xml:space="preserve">Printable strings which are the name of the current
                        function.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Return Address</menunode><menudescription><pre xml:space="preserve">Getting the return or frame address of a function.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Vector Extensions</menunode><menudescription><pre xml:space="preserve">Using vector instructions through built-in functions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">Offsetof</menunode><menudescription><pre xml:space="preserve">Special syntax for implementing <code>offsetof</code>.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">__sync Builtins</menunode><menudescription><pre xml:space="preserve">Legacy built-in functions for atomic memory access.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">__atomic Builtins</menunode><menudescription><pre xml:space="preserve">Atomic built-in functions with memory model.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Integer Overflow Builtins</menunode><menudescription><pre xml:space="preserve">Built-in functions to perform arithmetics and
                        arithmetic overflow checking.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">x86 specific memory model extensions for transactional memory</menunode><menudescription><pre xml:space="preserve">x86 memory models.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Object Size Checking</menunode><menudescription><pre xml:space="preserve">Built-in functions for limited buffer overflow
                        checking.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Pointer Bounds Checker builtins</menunode><menudescription><pre xml:space="preserve">Built-in functions for Pointer Bounds Checker.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">Cilk Plus Builtins</menunode><menudescription><pre xml:space="preserve">Built-in functions for the Cilk Plus language extension.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Other Builtins</menunode><menudescription><pre xml:space="preserve">Other built-in functions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Target Builtins</menunode><menudescription><pre xml:space="preserve">Built-in functions specific to particular targets.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Target Format Checks</menunode><menudescription><pre xml:space="preserve">Format checks specific to particular targets.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">Pragmas</menunode><menudescription><pre xml:space="preserve">Pragmas accepted by GCC.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Unnamed Fields</menunode><menudescription><pre xml:space="preserve">Unnamed struct/union fields within structs/unions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Thread-Local</menunode><menudescription><pre xml:space="preserve">Per-thread variables.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Binary constants</menunode><menudescription><pre xml:space="preserve">Binary constants using the <samp>0b</samp> prefix.
</pre></menudescription></menuentry></menu>

<node name="Statement-Exprs" spaces=" "><nodename>Statement Exprs</nodename><nodenext automatic="on">Local Labels</nodenext><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Statements and Declarations in Expressions</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="248">statements inside expressions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="249">declarations inside expressions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="250">expressions containing statements</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="251">macros, statements in expressions</indexterm></cindex>

<!-- c the above section title wrapped and causes an underfull hbox.. i -->
<!-- c changed it from "within" to "in". -mew 4feb93 -->
<para>A compound statement enclosed in parentheses may appear as an expression
in GNU C&eosperiod;  This allows you to use loops, switches, and local variables
within an expression.
</para>
<para>Recall that a compound statement is a sequence of statements surrounded
by braces; in this construct, parentheses go around the braces.  For
example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">(&lbrace; int y = foo (); int z;
   if (y &gt; 0) z = y;
   else z = - y;
   z; &rbrace;)
</pre></smallexample>

<noindent></noindent>
<para>is a valid (though slightly more complex than necessary) expression
for the absolute value of <code>foo ()</code>.
</para>
<para>The last thing in the compound statement should be an expression
followed by a semicolon; the value of this subexpression serves as the
value of the entire construct.  (If you use some other kind of statement
last within the braces, the construct has type <code>void</code>, and thus
effectively no value.)
</para>
<para>This feature is especially useful in making macro definitions &textldquo;safe&textrdquo; (so
that they evaluate each operand exactly once).  For example, the
&textldquo;maximum&textrdquo; function is commonly defined as a macro in standard C as
follows:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define max(a,b) ((a) &gt; (b) ? (a) : (b))
</pre></smallexample>

<noindent></noindent>
<cindex index="cp" spaces=" "><indexterm index="cp" number="252">side effects, macro argument</indexterm></cindex>
<para>But this definition computes either <var>a</var> or <var>b</var> twice, with bad
results if the operand has side effects.  In GNU C, if you know the
type of the operands (here taken as <code>int</code>), you can define
the macro safely as follows:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define maxint(a,b) \
  (&lbrace;int _a = (a), _b = (b); _a &gt; _b ? _a : _b; &rbrace;)
</pre></smallexample>

<para>Embedded statements are not allowed in constant expressions, such as
the value of an enumeration constant, the width of a bit-field, or
the initial value of a static variable.
</para>
<para>If you don&textrsquo;t know the type of the operand, you can still do this, but you
must use <code>typeof</code> or <code>__auto_type</code> (<pxref label="Typeof"><xrefnodename>Typeof</xrefnodename></pxref>).
</para>
<para>In G++, the result value of a statement expression undergoes array and
function pointer decay, and is returned by value to the enclosing
expression.  For instance, if <code>A</code> is a class, then
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">        A a;

        (&lbrace;a;&rbrace;).Foo ()
</pre></smallexample>

<noindent></noindent>
<para>constructs a temporary <code>A</code> object to hold the result of the
statement expression, and that is used to invoke <code>Foo</code>.
Therefore the <code>this</code> pointer observed by <code>Foo</code> is not the
address of <code>a</code>.
</para>
<para>In a statement expression, any temporaries created within a statement
are destroyed at that statement&textrsquo;s end.  This makes statement
expressions inside macros slightly different from function calls.  In
the latter case temporaries introduced during argument evaluation are
destroyed at the end of the statement that includes the function
call.  In the statement expression case they are destroyed during
the statement expression.  For instance,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define macro(a)  (&lbrace;__typeof__(a) b = (a); b + 3; &rbrace;)
template&lt;typename T&gt; T function(T a) &lbrace; T b = a; return b + 3; &rbrace;

void foo ()
&lbrace;
  macro (X ());
  function (X ());
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>has different places where temporaries are destroyed.  For the
<code>macro</code> case, the temporary <code>X</code> is destroyed just after
the initialization of <code>b</code>.  In the <code>function</code> case that
temporary is destroyed when the function returns.
</para>
<para>These considerations mean that it is probably a bad idea to use
statement expressions of this form in header files that are designed to
work with C++.  (Note that some versions of the GNU C Library contained
header files using statement expressions that lead to precisely this
bug.)
</para>
<para>Jumping into a statement expression with <code>goto</code> or using a
<code>switch</code> statement outside the statement expression with a
<code>case</code> or <code>default</code> label inside the statement expression is
not permitted.  Jumping into a statement expression with a computed
<code>goto</code> (<pxref label="Labels-as-Values"><xrefnodename>Labels as Values</xrefnodename></pxref>) has undefined behavior.
Jumping out of a statement expression is permitted, but if the
statement expression is part of a larger expression then it is
unspecified which other subexpressions of that expression have been
evaluated except where the language definition requires certain
subexpressions to be evaluated before or after the statement
expression.  In any case, as with a function call, the evaluation of a
statement expression is not interleaved with the evaluation of other
parts of the containing expression.  For example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  foo (), ((&lbrace; bar1 (); goto a; 0; &rbrace;) + bar2 ()), baz();
</pre></smallexample>

<noindent></noindent>
<para>calls <code>foo</code> and <code>bar1</code> and does not call <code>baz</code> but
may or may not call <code>bar2</code>.  If <code>bar2</code> is called, it is
called after <code>foo</code> and before <code>bar1</code>.
</para>
</section>
<node name="Local-Labels" spaces=" "><nodename>Local Labels</nodename><nodenext automatic="on">Labels as Values</nodenext><nodeprev automatic="on">Statement Exprs</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Locally Declared Labels</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="253">local labels</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="254">macros, local labels</indexterm></cindex>

<para>GCC allows you to declare <dfn>local labels</dfn> in any nested block
scope.  A local label is just like an ordinary label, but you can
only reference it (with a <code>goto</code> statement, or by taking its
address) within the block in which it is declared.
</para>
<para>A local label declaration looks like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">__label__ <var>label</var>;
</pre></smallexample>

<noindent></noindent>
<para>or
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">__label__ <var>label1</var>, <var>label2</var>, /* <r>&dots;</r> */;
</pre></smallexample>

<para>Local label declarations must come at the beginning of the block,
before any ordinary declarations or statements.
</para>
<para>The label declaration defines the label <emph>name</emph>, but does not define
the label itself.  You must do this in the usual way, with
<code><var>label</var>:</code>, within the statements of the statement expression.
</para>
<para>The local label feature is useful for complex macros.  If a macro
contains nested loops, a <code>goto</code> can be useful for breaking out of
them.  However, an ordinary label whose scope is the whole function
cannot be used: if the macro can be expanded several times in one
function, the label is multiply defined in that function.  A
local label avoids this problem.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define SEARCH(value, array, target)              \
do &lbrace;                                              \
  __label__ found;                                \
  typeof (target) _SEARCH_target = (target);      \
  typeof (*(array)) *_SEARCH_array = (array);     \
  int i, j;                                       \
  int value;                                      \
  for (i = 0; i &lt; max; i++)                       \
    for (j = 0; j &lt; max; j++)                     \
      if (_SEARCH_array[i][j] == _SEARCH_target)  \
        &lbrace; (value) = i; goto found; &rbrace;              \
  (value) = -1;                                   \
 found:;                                          \
&rbrace; while (0)
</pre></smallexample>

<para>This could also be written using a statement expression:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define SEARCH(array, target)                     \
(&lbrace;                                                \
  __label__ found;                                \
  typeof (target) _SEARCH_target = (target);      \
  typeof (*(array)) *_SEARCH_array = (array);     \
  int i, j;                                       \
  int value;                                      \
  for (i = 0; i &lt; max; i++)                       \
    for (j = 0; j &lt; max; j++)                     \
      if (_SEARCH_array[i][j] == _SEARCH_target)  \
        &lbrace; value = i; goto found; &rbrace;                \
  value = -1;                                     \
 found:                                           \
  value;                                          \
&rbrace;)
</pre></smallexample>

<para>Local label declarations also make the labels they declare visible to
nested functions, if there are any.  <xref label="Nested-Functions"><xrefnodename>Nested Functions</xrefnodename></xref>, for details.
</para>
</section>
<node name="Labels-as-Values" spaces=" "><nodename>Labels as Values</nodename><nodenext automatic="on">Nested Functions</nodenext><nodeprev automatic="on">Local Labels</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Labels as Values</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="255">labels as values</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="256">computed gotos</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="257">goto with computed label</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="258">address of a label</indexterm></cindex>

<para>You can get the address of a label defined in the current function
(or a containing function) with the unary operator <samp>&amp;&amp;</samp>.  The
value has type <code>void *</code>.  This value is a constant and can be used
wherever a constant of that type is valid.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void *ptr;
/* <r>&dots;</r> */
ptr = &amp;&amp;foo;
</pre></smallexample>

<para>To use these values, you need to be able to jump to one.  This is done
with the computed goto statement<footnote><para>The analogous feature in
Fortran is called an assigned goto, but that name seems inappropriate in
C, where one can do more than simply store label addresses in label
variables.</para></footnote>, <code>goto *<var>exp</var>;</code>.  For example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">goto *ptr;
</pre></smallexample>

<noindent></noindent>
<para>Any expression of type <code>void *</code> is allowed.
</para>
<para>One way of using these constants is in initializing a static array that
serves as a jump table:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">static void *array[] = &lbrace; &amp;&amp;foo, &amp;&amp;bar, &amp;&amp;hack &rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>Then you can select a label with indexing, like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">goto *array[i];
</pre></smallexample>

<noindent></noindent>
<para>Note that this does not check whether the subscript is in bounds&textmdash;array
indexing in C never does that.
</para>
<para>Such an array of label values serves a purpose much like that of the
<code>switch</code> statement.  The <code>switch</code> statement is cleaner, so
use that rather than an array unless the problem does not fit a
<code>switch</code> statement very well.
</para>
<para>Another use of label values is in an interpreter for threaded code.
The labels within the interpreter function can be stored in the
threaded code for super-fast dispatching.
</para>
<para>You may not use this mechanism to jump to code in a different function.
If you do that, totally unpredictable things happen.  The best way to
avoid this is to store the label address only in automatic variables and
never pass it as an argument.
</para>
<para>An alternate way to write the above example is
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">static const int array[] = &lbrace; &amp;&amp;foo - &amp;&amp;foo, &amp;&amp;bar - &amp;&amp;foo,
                             &amp;&amp;hack - &amp;&amp;foo &rbrace;;
goto *(&amp;&amp;foo + array[i]);
</pre></smallexample>

<noindent></noindent>
<para>This is more friendly to code living in shared libraries, as it reduces
the number of dynamic relocations that are needed, and by consequence,
allows the data to be read-only.
This alternative with label differences is not supported for the AVR target,
please use the first approach for AVR programs.
</para>
<para>The <code>&amp;&amp;foo</code> expressions for the same label might have different
values if the containing function is inlined or cloned.  If a program
relies on them being always the same,
<code>__attribute__((__noinline__,__noclone__))</code> should be used to
prevent inlining and cloning.  If <code>&amp;&amp;foo</code> is used in a static
variable initializer, inlining and cloning is forbidden.
</para>
</section>
<node name="Nested-Functions" spaces=" "><nodename>Nested Functions</nodename><nodenext automatic="on">Constructing Calls</nodenext><nodeprev automatic="on">Labels as Values</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Nested Functions</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="259">nested functions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="260">downward funargs</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="261">thunks</indexterm></cindex>

<para>A <dfn>nested function</dfn> is a function defined inside another function.
Nested functions are supported as an extension in GNU C, but are not
supported by GNU C++.
</para>
<para>The nested function&textrsquo;s name is local to the block where it is defined.
For example, here we define a nested function named <code>square</code>, and
call it twice:
</para>
<smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">foo (double a, double b)
&lbrace;
  double square (double z) &lbrace; return z * z; &rbrace;

  return square (a) + square (b);
&rbrace;
</pre></group>
</smallexample>

<para>The nested function can access all the variables of the containing
function that are visible at the point of its definition.  This is
called <dfn>lexical scoping</dfn>.  For example, here we show a nested
function which uses an inherited variable named <code>offset</code>:
</para>
<smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">bar (int *array, int offset, int size)
&lbrace;
  int access (int *array, int index)
    &lbrace; return array[index + offset]; &rbrace;
  int i;
  /* <r>&dots;</r> */
  for (i = 0; i &lt; size; i++)
    /* <r>&dots;</r> */ access (array, i) /* <r>&dots;</r> */
&rbrace;
</pre></group>
</smallexample>

<para>Nested function definitions are permitted within functions in the places
where variable definitions are allowed; that is, in any block, mixed
with the other declarations and statements in the block.
</para>
<para>It is possible to call the nested function from outside the scope of its
name by storing its address or passing the address to another function:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">hack (int *array, int size)
&lbrace;
  void store (int index, int value)
    &lbrace; array[index] = value; &rbrace;

  intermediate (store, size);
&rbrace;
</pre></smallexample>

<para>Here, the function <code>intermediate</code> receives the address of
<code>store</code> as an argument.  If <code>intermediate</code> calls <code>store</code>,
the arguments given to <code>store</code> are used to store into <code>array</code>.
But this technique works only so long as the containing function
(<code>hack</code>, in this example) does not exit.
</para>
<para>If you try to call the nested function through its address after the
containing function exits, all hell breaks loose.  If you try
to call it after a containing scope level exits, and if it refers
to some of the variables that are no longer in scope, you may be lucky,
but it&textrsquo;s not wise to take the risk.  If, however, the nested function
does not refer to anything that has gone out of scope, you should be
safe.
</para>
<para>GCC implements taking the address of a nested function using a technique
called <dfn>trampolines</dfn>.  This technique was described in
<cite>Lexical Closures for C++</cite> (Thomas M. Breuel, USENIX
C++ Conference Proceedings, October 17-21, 1988).
</para>
<para>A nested function can jump to a label inherited from a containing
function, provided the label is explicitly declared in the containing
function (<pxref label="Local-Labels"><xrefnodename>Local Labels</xrefnodename></pxref>).  Such a jump returns instantly to the
containing function, exiting the nested function that did the
<code>goto</code> and any intermediate functions as well.  Here is an example:
</para>
<smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">bar (int *array, int offset, int size)
&lbrace;
  __label__ failure;
  int access (int *array, int index)
    &lbrace;
      if (index &gt; size)
        goto failure;
      return array[index + offset];
    &rbrace;
  int i;
  /* <r>&dots;</r> */
  for (i = 0; i &lt; size; i++)
    /* <r>&dots;</r> */ access (array, i) /* <r>&dots;</r> */
  /* <r>&dots;</r> */
  return 0;

 /* <r>Control comes here from <code>access</code>
    if it detects an error.</r>  */
 failure:
  return -1;
&rbrace;
</pre></group>
</smallexample>

<para>A nested function always has no linkage.  Declaring one with
<code>extern</code> or <code>static</code> is erroneous.  If you need to declare the nested function
before its definition, use <code>auto</code> (which is otherwise meaningless
for function declarations).
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">bar (int *array, int offset, int size)
&lbrace;
  __label__ failure;
  auto int access (int *, int);
  /* <r>&dots;</r> */
  int access (int *array, int index)
    &lbrace;
      if (index &gt; size)
        goto failure;
      return array[index + offset];
    &rbrace;
  /* <r>&dots;</r> */
&rbrace;
</pre></smallexample>

</section>
<node name="Constructing-Calls" spaces=" "><nodename>Constructing Calls</nodename><nodenext automatic="on">Typeof</nodenext><nodeprev automatic="on">Nested Functions</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Constructing Function Calls</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="262">constructing calls</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="263">forwarding calls</indexterm></cindex>

<para>Using the built-in functions described below, you can record
the arguments a function received, and call another function
with the same arguments, without knowing the number or types
of the arguments.
</para>
<para>You can also record the return value of that function call,
and later return that value, without knowing what data type
the function tried to return (as long as your caller expects
that data type).
</para>
<para>However, these built-in functions may interact badly with some
sophisticated features or other extensions of the language.  It
is, therefore, not recommended to use them outside very simple
functions acting as mere forwarders for their arguments.
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="14" mergedindex="cp">__builtin_apply_args</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void *</deftype> <deffunction>__builtin_apply_args</deffunction> <defdelimiter>(</defdelimiter><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This built-in function returns a pointer to data
describing how to perform a call with the same arguments as are passed
to the current function.
</para>
<para>The function saves the arg pointer register, structure value address,
and all registers that might be used to pass arguments to a function
into a block of memory allocated on the stack.  Then it returns the
address of that block.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="15" mergedindex="cp">__builtin_apply</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void *</deftype> <deffunction>__builtin_apply</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype> <defdelimiter>(</defdelimiter><defparamtype>*</defparamtype><defparam><var>function</var></defparam><defdelimiter>)</defdelimiter><defdelimiter>(</defdelimiter><defdelimiter>)</defdelimiter><defdelimiter>,</defdelimiter> <defparamtype>void</defparamtype> <defparam>*</defparam><defparam><var>arguments</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>size_t</defparamtype> <defparam><var>size</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This built-in function invokes <var>function</var>
with a copy of the parameters described by <var>arguments</var>
and <var>size</var>.
</para>
<para>The value of <var>arguments</var> should be the value returned by
<code>__builtin_apply_args</code>.  The argument <var>size</var> specifies the size
of the stack argument data, in bytes.
</para>
<para>This function returns a pointer to data describing
how to return whatever value is returned by <var>function</var>.  The data
is saved in a block of memory allocated on the stack.
</para>
<para>It is not always simple to compute the proper value for <var>size</var>.  The
value is used by <code>__builtin_apply</code> to compute the amount of data
that should be pushed on the stack and copied from the incoming argument
area.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="16" mergedindex="cp">__builtin_return</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void</deftype> <deffunction>__builtin_return</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype> <defparam>*</defparam><defparam><var>result</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This built-in function returns the value described by <var>result</var> from
the containing function.  You should specify, for <var>result</var>, a value
returned by <code>__builtin_apply</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="17" mergedindex="cp">__builtin_va_arg_pack</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on"></deftype> <deffunction>__builtin_va_arg_pack</deffunction> <defdelimiter>(</defdelimiter><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This built-in function represents all anonymous arguments of an inline
function.  It can be used only in inline functions that are always
inlined, never compiled as a separate function, such as those using
<code>__attribute__ ((__always_inline__))</code> or
<code>__attribute__ ((__gnu_inline__))</code> extern inline functions.
It must be only passed as last argument to some other function
with variable arguments.  This is useful for writing small wrapper
inlines for variable argument functions, when using preprocessor
macros is undesirable.  For example:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">extern int myprintf (FILE *f, const char *format, ...);
extern inline __attribute__ ((__gnu_inline__)) int
myprintf (FILE *f, const char *format, ...)
&lbrace;
  int r = fprintf (f, &quot;myprintf: &quot;);
  if (r &lt; 0)
    return r;
  int s = fprintf (f, format, __builtin_va_arg_pack ());
  if (s &lt; 0)
    return s;
  return r + s;
&rbrace;
</pre></smallexample>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="18" mergedindex="cp">__builtin_va_arg_pack_len</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">size_t</deftype> <deffunction>__builtin_va_arg_pack_len</deffunction> <defdelimiter>(</defdelimiter><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This built-in function returns the number of anonymous arguments of
an inline function.  It can be used only in inline functions that
are always inlined, never compiled as a separate function, such
as those using <code>__attribute__ ((__always_inline__))</code> or
<code>__attribute__ ((__gnu_inline__))</code> extern inline functions.
For example following does link- or run-time checking of open
arguments for optimized code:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">#ifdef __OPTIMIZE__
extern inline __attribute__((__gnu_inline__)) int
myopen (const char *path, int oflag, ...)
&lbrace;
  if (__builtin_va_arg_pack_len () &gt; 1)
    warn_open_too_many_arguments ();

  if (__builtin_constant_p (oflag))
    &lbrace;
      if ((oflag &amp; O_CREAT) != 0 &amp;&amp; __builtin_va_arg_pack_len () &lt; 1)
        &lbrace;
          warn_open_missing_mode ();
          return __open_2 (path, oflag);
        &rbrace;
      return open (path, oflag, __builtin_va_arg_pack ());
    &rbrace;

  if (__builtin_va_arg_pack_len () &lt; 1)
    return __open_2 (path, oflag);

  return open (path, oflag, __builtin_va_arg_pack ());
&rbrace;
#endif
</pre></smallexample>
</definitionitem></deftypefn>

</section>
<node name="Typeof" spaces=" "><nodename>Typeof</nodename><nodenext automatic="on">Conditionals</nodenext><nodeprev automatic="on">Constructing Calls</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Referring to a Type with <code>typeof</code></sectiontitle>
<findex index="fn" spaces=" "><indexterm index="fn" number="19" mergedindex="cp">typeof</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="20" mergedindex="cp">sizeof</indexterm></findex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="264">macros, types of arguments</indexterm></cindex>

<para>Another way to refer to the type of an expression is with <code>typeof</code>.
The syntax of using of this keyword looks like <code>sizeof</code>, but the
construct acts semantically like a type name defined with <code>typedef</code>.
</para>
<para>There are two ways of writing the argument to <code>typeof</code>: with an
expression or with a type.  Here is an example with an expression:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typeof (x[0](1))
</pre></smallexample>

<noindent></noindent>
<para>This assumes that <code>x</code> is an array of pointers to functions;
the type described is that of the values of the functions.
</para>
<para>Here is an example with a typename as the argument:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typeof (int *)
</pre></smallexample>

<noindent></noindent>
<para>Here the type described is that of pointers to <code>int</code>.
</para>
<para>If you are writing a header file that must work when included in ISO C
programs, write <code>__typeof__</code> instead of <code>typeof</code>.
<xref label="Alternate-Keywords"><xrefnodename>Alternate Keywords</xrefnodename></xref>.
</para>
<para>A <code>typeof</code> construct can be used anywhere a typedef name can be
used.  For example, you can use it in a declaration, in a cast, or inside
of <code>sizeof</code> or <code>typeof</code>.
</para>
<para>The operand of <code>typeof</code> is evaluated for its side effects if and
only if it is an expression of variably modified type or the name of
such a type.
</para>
<para><code>typeof</code> is often useful in conjunction with
statement expressions (<pxref label="Statement-Exprs"><xrefnodename>Statement Exprs</xrefnodename></pxref>).
Here is how the two together can
be used to define a safe &textldquo;maximum&textrdquo; macro which operates on any
arithmetic type and evaluates each of its arguments exactly once:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define max(a,b) \
  (&lbrace; typeof (a) _a = (a); \
      typeof (b) _b = (b); \
    _a &gt; _b ? _a : _b; &rbrace;)
</pre></smallexample>

<cindex index="cp" spaces=" "><indexterm index="cp" number="265">underscores in variables in macros</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="266"><samp>_</samp> in variables in macros</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="267">local variables in macros</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="268">variables, local, in macros</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="269">macros, local variables in</indexterm></cindex>

<para>The reason for using names that start with underscores for the local
variables is to avoid conflicts with variable names that occur within the
expressions that are substituted for <code>a</code> and <code>b</code>.  Eventually we
hope to design a new form of declaration syntax that allows you to declare
variables whose scopes start only after their initializers; this will be a
more reliable way to prevent such conflicts.
</para>
<noindent></noindent>
<para>Some more examples of the use of <code>typeof</code>:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>This declares <code>y</code> with the type of what <code>x</code> points to.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typeof (*x) y;
</pre></smallexample>

</listitem><listitem><prepend>&bullet;</prepend>
<para>This declares <code>y</code> as an array of such values.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typeof (*x) y[4];
</pre></smallexample>

</listitem><listitem><prepend>&bullet;</prepend>
<para>This declares <code>y</code> as an array of pointers to characters:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typeof (typeof (char *)[4]) y;
</pre></smallexample>

<noindent></noindent>
<para>It is equivalent to the following traditional C declaration:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">char *y[4];
</pre></smallexample>

<para>To see the meaning of the declaration using <code>typeof</code>, and why it
might be a useful way to write, rewrite it with these macros:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define pointer(T)  typeof(T *)
#define array(T, N) typeof(T [N])
</pre></smallexample>

<noindent></noindent>
<para>Now the declaration can be rewritten this way:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">array (pointer (char), 4) y;
</pre></smallexample>

<noindent></noindent>
<para>Thus, <code>array (pointer (char), 4)</code> is the type of arrays of 4
pointers to <code>char</code>.
</para></listitem></itemize>

<para>In GNU C, but not GNU C++, you may also declare the type of a variable
as <code>__auto_type</code>.  In that case, the declaration must declare
only one variable, whose declarator must just be an identifier, the
declaration must be initialized, and the type of the variable is
determined by the initializer; the name of the variable is not in
scope until after the initializer.  (In C++, you should use C++11
<code>auto</code> for this purpose.)  Using <code>__auto_type</code>, the
&textldquo;maximum&textrdquo; macro above could be written as:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define max(a,b) \
  (&lbrace; __auto_type _a = (a); \
      __auto_type _b = (b); \
    _a &gt; _b ? _a : _b; &rbrace;)
</pre></smallexample>

<para>Using <code>__auto_type</code> instead of <code>typeof</code> has two advantages:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem spaces=" "><prepend>&bullet;</prepend><para>Each argument to the macro appears only once in the expansion of
the macro.  This prevents the size of the macro expansion growing
exponentially when calls to such macros are nested inside arguments of
such macros.
</para>
</listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>If the argument to the macro has variably modified type, it is
evaluated only once when using <code>__auto_type</code>, but twice if
<code>typeof</code> is used.
</para></listitem></itemize>

</section>
<node name="Conditionals" spaces=" "><nodename>Conditionals</nodename><nodenext automatic="on">__int128</nodenext><nodeprev automatic="on">Typeof</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Conditionals with Omitted Operands</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="270">conditional expressions, extensions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="271">omitted middle-operands</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="272">middle-operands, omitted</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="273">extensions, <code>?:</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="274"><code>?:</code> extensions</indexterm></cindex>

<para>The middle operand in a conditional expression may be omitted.  Then
if the first operand is nonzero, its value is the value of the conditional
expression.
</para>
<para>Therefore, the expression
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">x ? : y
</pre></smallexample>

<noindent></noindent>
<para>has the value of <code>x</code> if that is nonzero; otherwise, the value of
<code>y</code>.
</para>
<para>This example is perfectly equivalent to
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">x ? x : y
</pre></smallexample>

<cindex index="cp" spaces=" "><indexterm index="cp" number="275">side effect in <code>?:</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="276"><code>?:</code> side effect</indexterm></cindex>
<noindent></noindent>
<para>In this simple case, the ability to omit the middle operand is not
especially useful.  When it becomes useful is when the first operand does,
or may (if it is a macro argument), contain a side effect.  Then repeating
the operand in the middle would perform the side effect twice.  Omitting
the middle operand uses the value already computed without the undesirable
effects of recomputing it.
</para>
</section>
<node name="_005f_005fint128" spaces=" "><nodename>__int128</nodename><nodenext automatic="on">Long Long</nodenext><nodeprev automatic="on">Conditionals</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>128-bit Integers</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="277"><code>__int128</code> data types</indexterm></cindex>

<para>As an extension the integer scalar type <code>__int128</code> is supported for
targets which have an integer mode wide enough to hold 128 bits.
Simply write <code>__int128</code> for a signed 128-bit integer, or
<code>unsigned __int128</code> for an unsigned 128-bit integer.  There is no
support in GCC for expressing an integer constant of type <code>__int128</code>
for targets with <code>long long</code> integer less than 128 bits wide.
</para>
</section>
<node name="Long-Long" spaces=" "><nodename>Long Long</nodename><nodenext automatic="on">Complex</nodenext><nodeprev automatic="on">__int128</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Double-Word Integers</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="278"><code>long long</code> data types</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="279">double-word arithmetic</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="280">multiprecision arithmetic</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="281"><code>LL</code> integer suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="282"><code>ULL</code> integer suffix</indexterm></cindex>

<para>ISO C99 supports data types for integers that are at least 64 bits wide,
and as an extension GCC supports them in C90 mode and in C++.
Simply write <code>long long int</code> for a signed integer, or
<code>unsigned long long int</code> for an unsigned integer.  To make an
integer constant of type <code>long long int</code>, add the suffix <samp>LL</samp>
to the integer.  To make an integer constant of type <code>unsigned long
long int</code>, add the suffix <samp>ULL</samp> to the integer.
</para>
<para>You can use these types in arithmetic like any other integer types.
Addition, subtraction, and bitwise boolean operations on these types
are open-coded on all types of machines.  Multiplication is open-coded
if the machine supports a fullword-to-doubleword widening multiply
instruction.  Division and shifts are open-coded only on machines that
provide special support.  The operations that are not open-coded use
special library routines that come with GCC&eosperiod;
</para>
<para>There may be pitfalls when you use <code>long long</code> types for function
arguments without function prototypes.  If a function
expects type <code>int</code> for its argument, and you pass a value of type
<code>long long int</code>, confusion results because the caller and the
subroutine disagree about the number of bytes for the argument.
Likewise, if the function expects <code>long long int</code> and you pass
<code>int</code>.  The best way to avoid such problems is to use prototypes.
</para>
</section>
<node name="Complex" spaces=" "><nodename>Complex</nodename><nodenext automatic="on">Floating Types</nodenext><nodeprev automatic="on">Long Long</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Complex Numbers</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="283">complex numbers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="284"><code>_Complex</code> keyword</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="285"><code>__complex__</code> keyword</indexterm></cindex>

<para>ISO C99 supports complex floating data types, and as an extension GCC
supports them in C90 mode and in C++.  GCC also supports complex integer data
types which are not part of ISO C99.  You can declare complex types
using the keyword <code>_Complex</code>.  As an extension, the older GNU
keyword <code>__complex__</code> is also supported.
</para>
<para>For example, <samp>_Complex double x;</samp> declares <code>x</code> as a
variable whose real part and imaginary part are both of type
<code>double</code>.  <samp>_Complex short int y;</samp> declares <code>y</code> to
have real and imaginary parts of type <code>short int</code>; this is not
likely to be useful, but it shows that the set of complex types is
complete.
</para>
<para>To write a constant with a complex data type, use the suffix <samp>i</samp> or
<samp>j</samp> (either one; they are equivalent).  For example, <code>2.5fi</code>
has type <code>_Complex float</code> and <code>3i</code> has type
<code>_Complex int</code>.  Such a constant always has a pure imaginary
value, but you can form any complex value you like by adding one to a
real constant.  This is a GNU extension; if you have an ISO C99
conforming C library (such as the GNU C Library), and want to construct complex
constants of floating type, you should include <code>&lt;complex.h&gt;</code> and
use the macros <code>I</code> or <code>_Complex_I</code> instead.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="286"><code>__real__</code> keyword</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="287"><code>__imag__</code> keyword</indexterm></cindex>
<para>To extract the real part of a complex-valued expression <var>exp</var>, write
<code>__real__ <var>exp</var></code>.  Likewise, use <code>__imag__</code> to
extract the imaginary part.  This is a GNU extension; for values of
floating type, you should use the ISO C99 functions <code>crealf</code>,
<code>creal</code>, <code>creall</code>, <code>cimagf</code>, <code>cimag</code> and
<code>cimagl</code>, declared in <code>&lt;complex.h&gt;</code> and also provided as
built-in functions by GCC&eosperiod;
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="288">complex conjugation</indexterm></cindex>
<para>The operator <samp>~</samp> performs complex conjugation when used on a value
with a complex type.  This is a GNU extension; for values of
floating type, you should use the ISO C99 functions <code>conjf</code>,
<code>conj</code> and <code>conjl</code>, declared in <code>&lt;complex.h&gt;</code> and also
provided as built-in functions by GCC&eosperiod;
</para>
<para>GCC can allocate complex automatic variables in a noncontiguous
fashion; it&textrsquo;s even possible for the real part to be in a register while
the imaginary part is on the stack (or vice versa).  Only the DWARF 2
debug info format can represent this, so use of DWARF 2 is recommended.
If you are using the stabs debug info format, GCC describes a noncontiguous
complex variable as if it were two separate variables of noncomplex type.
If the variable&textrsquo;s actual name is <code>foo</code>, the two fictitious
variables are named <code>foo$real</code> and <code>foo$imag</code>.  You can
examine and set these two fictitious variables with your debugger.
</para>
</section>
<node name="Floating-Types" spaces=" "><nodename>Floating Types</nodename><nodenext automatic="on">Half-Precision</nodenext><nodeprev automatic="on">Complex</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Additional Floating Types</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="289">additional floating types</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="290"><code>__float80</code> data type</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="291"><code>__float128</code> data type</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="292"><code>w</code> floating point suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="293"><code>q</code> floating point suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="294"><code>W</code> floating point suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="295"><code>Q</code> floating point suffix</indexterm></cindex>

<para>As an extension, GNU C supports additional floating
types, <code>__float80</code> and <code>__float128</code> to support 80-bit
(<code>XFmode</code>) and 128-bit (<code>TFmode</code>) floating types.
Support for additional types includes the arithmetic operators:
add, subtract, multiply, divide; unary arithmetic operators;
relational operators; equality operators; and conversions to and from
integer and other floating types.  Use a suffix <samp>w</samp> or <samp>W</samp>
in a literal constant of type <code>__float80</code> and <samp>q</samp> or <samp>Q</samp>
for <code>_float128</code>.  You can declare complex types using the
corresponding internal complex type, <code>XCmode</code> for <code>__float80</code>
type and <code>TCmode</code> for <code>__float128</code> type:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef _Complex float __attribute__((mode(TC))) _Complex128;
typedef _Complex float __attribute__((mode(XC))) _Complex80;
</pre></smallexample>

<para>Not all targets support additional floating-point types.  <code>__float80</code>
and <code>__float128</code> types are supported on x86 and IA-64 targets.
The <code>__float128</code> type is supported on hppa HP-UX targets.
</para>
</section>
<node name="Half_002dPrecision" spaces=" "><nodename>Half-Precision</nodename><nodenext automatic="on">Decimal Float</nodenext><nodeprev automatic="on">Floating Types</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Half-Precision Floating Point</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="296">half-precision floating point</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="297"><code>__fp16</code> data type</indexterm></cindex>

<para>On ARM targets, GCC supports half-precision (16-bit) floating point via
the <code>__fp16</code> type.  You must enable this type explicitly
with the <option>-mfp16-format</option> command-line option in order to use it.
</para>
<para>ARM supports two incompatible representations for half-precision
floating-point values.  You must choose one of the representations and
use it consistently in your program.
</para>
<para>Specifying <option>-mfp16-format=ieee</option> selects the IEEE 754-2008 format.
This format can represent normalized values in the range of <math>2^{-14}</math> to 65504.
There are 11 bits of significand precision, approximately 3
decimal digits.
</para>
<para>Specifying <option>-mfp16-format=alternative</option> selects the ARM
alternative format.  This representation is similar to the IEEE
format, but does not support infinities or NaNs.  Instead, the range
of exponents is extended, so that this format can represent normalized
values in the range of <math>2^{-14}</math> to 131008.
</para>
<para>The <code>__fp16</code> type is a storage format only.  For purposes
of arithmetic and other operations, <code>__fp16</code> values in C or C++
expressions are automatically promoted to <code>float</code>.  In addition,
you cannot declare a function with a return value or parameters
of type <code>__fp16</code>.
</para>
<para>Note that conversions from <code>double</code> to <code>__fp16</code>
involve an intermediate conversion to <code>float</code>.  Because
of rounding, this can sometimes produce a different result than a
direct conversion.
</para>
<para>ARM provides hardware support for conversions between
<code>__fp16</code> and <code>float</code> values
as an extension to VFP and NEON (Advanced SIMD).  GCC generates
code using these hardware instructions if you compile with
options to select an FPU that provides them;
for example, <option>-mfpu=neon-fp16 -mfloat-abi=softfp</option>,
in addition to the <option>-mfp16-format</option> option to select
a half-precision format.
</para>
<para>Language-level support for the <code>__fp16</code> data type is
independent of whether GCC generates code using hardware floating-point
instructions.  In cases where hardware support is not specified, GCC
implements conversions between <code>__fp16</code> and <code>float</code> values
as library calls.
</para>
</section>
<node name="Decimal-Float" spaces=" "><nodename>Decimal Float</nodename><nodenext automatic="on">Hex Floats</nodenext><nodeprev automatic="on">Half-Precision</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Decimal Floating Types</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="298">decimal floating types</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="299"><code>_Decimal32</code> data type</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="300"><code>_Decimal64</code> data type</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="301"><code>_Decimal128</code> data type</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="302"><code>df</code> integer suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="303"><code>dd</code> integer suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="304"><code>dl</code> integer suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="305"><code>DF</code> integer suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="306"><code>DD</code> integer suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="307"><code>DL</code> integer suffix</indexterm></cindex>

<para>As an extension, GNU C supports decimal floating types as
defined in the N1312 draft of ISO/IEC WDTR24732.  Support for decimal
floating types in GCC will evolve as the draft technical report changes.
Calling conventions for any target might also change.  Not all targets
support decimal floating types.
</para>
<para>The decimal floating types are <code>_Decimal32</code>, <code>_Decimal64</code>, and
<code>_Decimal128</code>.  They use a radix of ten, unlike the floating types
<code>float</code>, <code>double</code>, and <code>long double</code> whose radix is not
specified by the C standard but is usually two.
</para>
<para>Support for decimal floating types includes the arithmetic operators
add, subtract, multiply, divide; unary arithmetic operators;
relational operators; equality operators; and conversions to and from
integer and other floating types.  Use a suffix <samp>df</samp> or
<samp>DF</samp> in a literal constant of type <code>_Decimal32</code>, <samp>dd</samp>
or <samp>DD</samp> for <code>_Decimal64</code>, and <samp>dl</samp> or <samp>DL</samp> for
<code>_Decimal128</code>.
</para>
<para>GCC support of decimal float as specified by the draft technical report
is incomplete:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>When the value of a decimal floating type cannot be represented in the
integer type to which it is being converted, the result is undefined
rather than the result value specified by the draft technical report.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>GCC does not provide the C library functionality associated with
<file>math.h</file>, <file>fenv.h</file>, <file>stdio.h</file>, <file>stdlib.h</file>, and
<file>wchar.h</file>, which must come from a separate C library implementation.
Because of this the GNU C compiler does not define macro
<code>__STDC_DEC_FP__</code> to indicate that the implementation conforms to
the technical report.
</para></listitem></itemize>

<para>Types <code>_Decimal32</code>, <code>_Decimal64</code>, and <code>_Decimal128</code>
are supported by the DWARF 2 debug information format.
</para>
</section>
<node name="Hex-Floats" spaces=" "><nodename>Hex Floats</nodename><nodenext automatic="on">Fixed-Point</nodenext><nodeprev automatic="on">Decimal Float</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Hex Floats</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="308">hex floats</indexterm></cindex>

<para>ISO C99 supports floating-point numbers written not only in the usual
decimal notation, such as <code>1.55e1</code>, but also numbers such as
<code>0x1.fp3</code> written in hexadecimal format.  As a GNU extension, GCC
supports this in C90 mode (except in some cases when strictly
conforming) and in C++.  In that format the
<samp>0x</samp> hex introducer and the <samp>p</samp> or <samp>P</samp> exponent field are
mandatory.  The exponent is a decimal number that indicates the power of
2 by which the significant part is multiplied.  Thus <samp>0x1.f</samp> is
<tex endspaces=" ">
$1 {15\over16}$,
</tex>
1 15/16,
<samp>p3</samp> multiplies it by 8, and the value of <code>0x1.fp3</code>
is the same as <code>1.55e1</code>.
</para>
<para>Unlike for floating-point numbers in the decimal notation the exponent
is always required in the hexadecimal notation.  Otherwise the compiler
would not be able to resolve the ambiguity of, e.g., <code>0x1.f</code>.  This
could mean <code>1.0f</code> or <code>1.9375</code> since <samp>f</samp> is also the
extension for floating-point constants of type <code>float</code>.
</para>
</section>
<node name="Fixed_002dPoint" spaces=" "><nodename>Fixed-Point</nodename><nodenext automatic="on">Named Address Spaces</nodenext><nodeprev automatic="on">Hex Floats</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Fixed-Point Types</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="309">fixed-point types</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="310"><code>_Fract</code> data type</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="311"><code>_Accum</code> data type</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="312"><code>_Sat</code> data type</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="313"><code>hr</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="314"><code>r</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="315"><code>lr</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="316"><code>llr</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="317"><code>uhr</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="318"><code>ur</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="319"><code>ulr</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="320"><code>ullr</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="321"><code>hk</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="322"><code>k</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="323"><code>lk</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="324"><code>llk</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="325"><code>uhk</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="326"><code>uk</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="327"><code>ulk</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="328"><code>ullk</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="329"><code>HR</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="330"><code>R</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="331"><code>LR</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="332"><code>LLR</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="333"><code>UHR</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="334"><code>UR</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="335"><code>ULR</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="336"><code>ULLR</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="337"><code>HK</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="338"><code>K</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="339"><code>LK</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="340"><code>LLK</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="341"><code>UHK</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="342"><code>UK</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="343"><code>ULK</code> fixed-suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="344"><code>ULLK</code> fixed-suffix</indexterm></cindex>

<para>As an extension, GNU C supports fixed-point types as
defined in the N1169 draft of ISO/IEC DTR 18037.  Support for fixed-point
types in GCC will evolve as the draft technical report changes.
Calling conventions for any target might also change.  Not all targets
support fixed-point types.
</para>
<para>The fixed-point types are
<code>short _Fract</code>,
<code>_Fract</code>,
<code>long _Fract</code>,
<code>long long _Fract</code>,
<code>unsigned short _Fract</code>,
<code>unsigned _Fract</code>,
<code>unsigned long _Fract</code>,
<code>unsigned long long _Fract</code>,
<code>_Sat short _Fract</code>,
<code>_Sat _Fract</code>,
<code>_Sat long _Fract</code>,
<code>_Sat long long _Fract</code>,
<code>_Sat unsigned short _Fract</code>,
<code>_Sat unsigned _Fract</code>,
<code>_Sat unsigned long _Fract</code>,
<code>_Sat unsigned long long _Fract</code>,
<code>short _Accum</code>,
<code>_Accum</code>,
<code>long _Accum</code>,
<code>long long _Accum</code>,
<code>unsigned short _Accum</code>,
<code>unsigned _Accum</code>,
<code>unsigned long _Accum</code>,
<code>unsigned long long _Accum</code>,
<code>_Sat short _Accum</code>,
<code>_Sat _Accum</code>,
<code>_Sat long _Accum</code>,
<code>_Sat long long _Accum</code>,
<code>_Sat unsigned short _Accum</code>,
<code>_Sat unsigned _Accum</code>,
<code>_Sat unsigned long _Accum</code>,
<code>_Sat unsigned long long _Accum</code>.
</para>
<para>Fixed-point data values contain fractional and optional integral parts.
The format of fixed-point data varies and depends on the target machine.
</para>
<para>Support for fixed-point types includes:
</para><itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>prefix and postfix increment and decrement operators (<code>++</code>, <code>--</code>)
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>unary arithmetic operators (<code>+</code>, <code>-</code>, <code>!</code>)
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>binary arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>)
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>binary shift operators (<code>&lt;&lt;</code>, <code>&gt;&gt;</code>)
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>relational operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>)
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>equality operators (<code>==</code>, <code>!=</code>)
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>assignment operators (<code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>,
<code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>)
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>conversions to and from integer, floating-point, or fixed-point types
</para></listitem></itemize>

<para>Use a suffix in a fixed-point literal constant:
</para><itemize commandarg="bullet" endspaces=" ">
<listitem spaces=" "><prepend>&bullet;</prepend><para><samp>hr</samp> or <samp>HR</samp> for <code>short _Fract</code> and
<code>_Sat short _Fract</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>r</samp> or <samp>R</samp> for <code>_Fract</code> and <code>_Sat _Fract</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>lr</samp> or <samp>LR</samp> for <code>long _Fract</code> and
<code>_Sat long _Fract</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>llr</samp> or <samp>LLR</samp> for <code>long long _Fract</code> and
<code>_Sat long long _Fract</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>uhr</samp> or <samp>UHR</samp> for <code>unsigned short _Fract</code> and
<code>_Sat unsigned short _Fract</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>ur</samp> or <samp>UR</samp> for <code>unsigned _Fract</code> and
<code>_Sat unsigned _Fract</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>ulr</samp> or <samp>ULR</samp> for <code>unsigned long _Fract</code> and
<code>_Sat unsigned long _Fract</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>ullr</samp> or <samp>ULLR</samp> for <code>unsigned long long _Fract</code>
and <code>_Sat unsigned long long _Fract</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>hk</samp> or <samp>HK</samp> for <code>short _Accum</code> and
<code>_Sat short _Accum</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>k</samp> or <samp>K</samp> for <code>_Accum</code> and <code>_Sat _Accum</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>lk</samp> or <samp>LK</samp> for <code>long _Accum</code> and
<code>_Sat long _Accum</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>llk</samp> or <samp>LLK</samp> for <code>long long _Accum</code> and
<code>_Sat long long _Accum</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>uhk</samp> or <samp>UHK</samp> for <code>unsigned short _Accum</code> and
<code>_Sat unsigned short _Accum</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>uk</samp> or <samp>UK</samp> for <code>unsigned _Accum</code> and
<code>_Sat unsigned _Accum</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>ulk</samp> or <samp>ULK</samp> for <code>unsigned long _Accum</code> and
<code>_Sat unsigned long _Accum</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><samp>ullk</samp> or <samp>ULLK</samp> for <code>unsigned long long _Accum</code>
and <code>_Sat unsigned long long _Accum</code>
</para></listitem></itemize>

<para>GCC support of fixed-point types as specified by the draft technical report
is incomplete:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Pragmas to control overflow and rounding behaviors are not implemented.
</para></listitem></itemize>

<para>Fixed-point types are supported by the DWARF 2 debug information format.
</para>
</section>
<node name="Named-Address-Spaces" spaces=" "><nodename>Named Address Spaces</nodename><nodenext automatic="on">Zero Length</nodenext><nodeprev automatic="on">Fixed-Point</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Named Address Spaces</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="345">Named Address Spaces</indexterm></cindex>

<para>As an extension, GNU C supports named address spaces as
defined in the N1275 draft of ISO/IEC DTR 18037.  Support for named
address spaces in GCC will evolve as the draft technical report
changes.  Calling conventions for any target might also change.  At
present, only the AVR, SPU, M32C, and RL78 targets support address
spaces other than the generic address space.
</para>
<para>Address space identifiers may be used exactly like any other C type
qualifier (e.g., <code>const</code> or <code>volatile</code>).  See the N1275
document for more details.
</para>
<anchor name="AVR-Named-Address-Spaces">AVR Named Address Spaces</anchor>
<subsection spaces=" "><sectiontitle>AVR Named Address Spaces</sectiontitle>

<para>On the AVR target, there are several address spaces that can be used
in order to put read-only data into the flash memory and access that
data by means of the special instructions <code>LPM</code> or <code>ELPM</code>
needed to read from flash.
</para>
<para>Per default, any data including read-only data is located in RAM
(the generic address space) so that non-generic address spaces are
needed to locate read-only data in flash memory
<emph>and</emph> to generate the right instructions to access this data
without using (inline) assembler code.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">__flash</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="346"><code>__flash</code> AVR Named Address Spaces</indexterm></cindex>
<para>The <code>__flash</code> qualifier locates data in the
<code>.progmem.data</code> section. Data is read using the <code>LPM</code>
instruction. Pointers to this address space are 16 bits wide.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__flash1</itemformat></item>
<itemx spaces=" "><itemformat command="code">__flash2</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">__flash3</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">__flash4</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">__flash5</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="347"><code>__flash1</code> AVR Named Address Spaces</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="348"><code>__flash2</code> AVR Named Address Spaces</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="349"><code>__flash3</code> AVR Named Address Spaces</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="350"><code>__flash4</code> AVR Named Address Spaces</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="351"><code>__flash5</code> AVR Named Address Spaces</indexterm></cindex>
<para>These are 16-bit address spaces locating data in section
<code>.progmem<var>N</var>.data</code> where <var>N</var> refers to
address space <code>__flash<var>N</var></code>.
The compiler sets the <code>RAMPZ</code> segment register appropriately 
before reading data by means of the <code>ELPM</code> instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__memx</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="352"><code>__memx</code> AVR Named Address Spaces</indexterm></cindex>
<para>This is a 24-bit address space that linearizes flash and RAM:
If the high bit of the address is set, data is read from
RAM using the lower two bytes as RAM address.
If the high bit of the address is clear, data is read from flash
with <code>RAMPZ</code> set according to the high byte of the address.
<xref label="AVR-Built_002din-Functions"><xrefnodename>AVR Built-in Functions</xrefnodename><xrefprinteddesc><code>__builtin_avr_flash_segment</code></xrefprinteddesc></xref>.
</para>
<para>Objects in this address space are located in <code>.progmemx.data</code>.
</para></tableitem></tableentry></table>

<para><b>Example</b>
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">char my_read (const __flash char ** p)
&lbrace;
    /* p is a pointer to RAM that points to a pointer to flash.
       The first indirection of p reads that flash pointer
       from RAM and the second indirection reads a char from this
       flash address.  */

    return **p;
&rbrace;

/* Locate array[] in flash memory */
const __flash int array[] = &lbrace; 3, 5, 7, 11, 13, 17, 19 &rbrace;;

int i = 1;

int main (void)
&lbrace;
   /* Return 17 by reading from flash memory */
   return array[array[i]];
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>For each named address space supported by avr-gcc there is an equally
named but uppercase built-in macro defined. 
The purpose is to facilitate testing if respective address space
support is available or not:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#ifdef __FLASH
const __flash int var = 1;

int read_var (void)
&lbrace;
    return var;
&rbrace;
#else
#include &lt;avr/pgmspace.h&gt; /* From AVR-LibC */

const int var PROGMEM = 1;

int read_var (void)
&lbrace;
    return (int) pgm_read_word (&amp;var);
&rbrace;
#endif /* __FLASH */
</pre></smallexample>

<noindent></noindent>
<para>Notice that attribute <ref label="AVR-Variable-Attributes"><xrefnodename>AVR Variable Attributes</xrefnodename><xrefprinteddesc><code>progmem</code></xrefprinteddesc></ref>
locates data in flash but
accesses to these data read from generic address space, i.e.&noeos;
from RAM,
so that you need special accessors like <code>pgm_read_byte</code>
from <w><uref><urefurl>http://nongnu.org/avr-libc/user-manual/</urefurl><urefdesc>AVR-LibC</urefdesc></uref></w>
together with attribute <code>progmem</code>.
</para>
<noindent></noindent>
<para><b>Limitations and caveats</b>
</para>
<itemize commandarg="bullet" endspaces=" ">
<listitem><prepend>&bullet;</prepend>
<para>Reading across the 64&nbsp;KiB section boundary of
the <code>__flash</code> or <code>__flash<var>N</var></code> address spaces
shows undefined behavior. The only address space that
supports reading across the 64&nbsp;KiB flash segment boundaries is
<code>__memx</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If you use one of the <code>__flash<var>N</var></code> address spaces
you must arrange your linker script to locate the
<code>.progmem<var>N</var>.data</code> sections according to your needs.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Any data or pointers to the non-generic address spaces must
be qualified as <code>const</code>, i.e.&noeos; as read-only data.
This still applies if the data in one of these address
spaces like software version number or calibration lookup table are intended to
be changed after load time by, say, a boot loader. In this case
the right qualification is <code>const</code> <code>volatile</code> so that the compiler
must not optimize away known values or insert them
as immediates into operands of instructions.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The following code initializes a variable <code>pfoo</code>
located in static storage with a 24-bit address:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">extern const __memx char foo;
const __memx void *pfoo = &amp;foo;
</pre></smallexample>

<noindent></noindent>
<para>Such code requires at least binutils 2.23, see
<w><uref><urefurl>http://sourceware.org/PR13503</urefurl><urefdesc>PR13503</urefdesc></uref></w>.
</para>
</listitem></itemize>

</subsection>
<subsection spaces=" "><sectiontitle>M32C Named Address Spaces</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="353"><code>__far</code> M32C Named Address Spaces</indexterm></cindex>

<para>On the M32C target, with the R8C and M16C CPU variants, variables
qualified with <code>__far</code> are accessed using 32-bit addresses in
order to access memory beyond the first 64&nbsp;Ki bytes.  If
<code>__far</code> is used with the M32CM or M32C CPU variants, it has no
effect.
</para>
</subsection>
<subsection spaces=" "><sectiontitle>RL78 Named Address Spaces</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="354"><code>__far</code> RL78 Named Address Spaces</indexterm></cindex>

<para>On the RL78 target, variables qualified with <code>__far</code> are accessed
with 32-bit pointers (20-bit addresses) rather than the default 16-bit
addresses.  Non-far variables are assumed to appear in the topmost
64&nbsp;KiB of the address space.
</para>
</subsection>
<subsection spaces=" "><sectiontitle>SPU Named Address Spaces</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="355"><code>__ea</code> SPU Named Address Spaces</indexterm></cindex>

<para>On the SPU target variables may be declared as
belonging to another address space by qualifying the type with the
<code>__ea</code> address space identifier:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern int __ea i;
</pre></smallexample>

<noindent></noindent> 
<para>The compiler generates special code to access the variable <code>i</code>.
It may use runtime library
support, or generate special machine instructions to access that address
space.
</para>
</subsection>
</section>
<node name="Zero-Length" spaces=" "><nodename>Zero Length</nodename><nodenext automatic="on">Empty Structures</nodenext><nodeprev automatic="on">Named Address Spaces</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Arrays of Length Zero</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="356">arrays of length zero</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="357">zero-length arrays</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="358">length-zero arrays</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="359">flexible array members</indexterm></cindex>

<para>Zero-length arrays are allowed in GNU C&eosperiod;  They are very useful as the
last element of a structure that is really a header for a variable-length
object:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct line &lbrace;
  int length;
  char contents[0];
&rbrace;;

struct line *thisline = (struct line *)
  malloc (sizeof (struct line) + this_length);
thisline-&gt;length = this_length;
</pre></smallexample>

<para>In ISO C90, you would have to give <code>contents</code> a length of 1, which
means either you waste space or complicate the argument to <code>malloc</code>.
</para>
<para>In ISO C99, you would use a <dfn>flexible array member</dfn>, which is
slightly different in syntax and semantics:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Flexible array members are written as <code>contents[]</code> without
the <code>0</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Flexible array members have incomplete type, and so the <code>sizeof</code>
operator may not be applied.  As a quirk of the original implementation
of zero-length arrays, <code>sizeof</code> evaluates to zero.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Flexible array members may only appear as the last member of a
<code>struct</code> that is otherwise non-empty.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>A structure containing a flexible array member, or a union containing
such a structure (possibly recursively), may not be a member of a
structure or an element of an array.  (However, these uses are
permitted by GCC as extensions.)
</para></listitem></itemize>

<para>Non-empty initialization of zero-length
arrays is treated like any case where there are more initializer
elements than the array holds, in that a suitable warning about &textldquo;excess
elements in array&textrdquo; is given, and the excess elements (all of them, in
this case) are ignored.
</para>
<para>GCC allows static initialization of flexible array members.
This is equivalent to defining a new structure containing the original
structure followed by an array of sufficient size to contain the data.
E.g.&noeos; in the following, <code>f1</code> is constructed as if it were declared
like <code>f2</code>.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct f1 &lbrace;
  int x; int y[];
&rbrace; f1 = &lbrace; 1, &lbrace; 2, 3, 4 &rbrace; &rbrace;;

struct f2 &lbrace;
  struct f1 f1; int data[3];
&rbrace; f2 = &lbrace; &lbrace; 1 &rbrace;, &lbrace; 2, 3, 4 &rbrace; &rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>The convenience of this extension is that <code>f1</code> has the desired
type, eliminating the need to consistently refer to <code>f2.f1</code>.
</para>
<para>This has symmetry with normal static arrays, in that an array of
unknown size is also written with <code>[]</code>.
</para>
<para>Of course, this extension only makes sense if the extra data comes at
the end of a top-level object, as otherwise we would be overwriting
data at subsequent offsets.  To avoid undue complication and confusion
with initialization of deeply nested arrays, we simply disallow any
non-empty initialization except when the structure is the top-level
object.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct foo &lbrace; int x; int y[]; &rbrace;;
struct bar &lbrace; struct foo z; &rbrace;;

struct foo a = &lbrace; 1, &lbrace; 2, 3, 4 &rbrace; &rbrace;;        // <r>Valid.</r>
struct bar b = &lbrace; &lbrace; 1, &lbrace; 2, 3, 4 &rbrace; &rbrace; &rbrace;;    // <r>Invalid.</r>
struct bar c = &lbrace; &lbrace; 1, &lbrace; &rbrace; &rbrace; &rbrace;;            // <r>Valid.</r>
struct foo d[1] = &lbrace; &lbrace; 1, &lbrace; 2, 3, 4 &rbrace; &rbrace; &rbrace;;  // <r>Invalid.</r>
</pre></smallexample>

</section>
<node name="Empty-Structures" spaces=" "><nodename>Empty Structures</nodename><nodenext automatic="on">Variable Length</nodenext><nodeprev automatic="on">Zero Length</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Structures with No Members</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="360">empty structures</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="361">zero-size structures</indexterm></cindex>

<para>GCC permits a C structure to have no members:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct empty &lbrace;
&rbrace;;
</pre></smallexample>

<para>The structure has size zero.  In C++, empty structures are part
of the language.  G++ treats empty structures as if they had a single
member of type <code>char</code>.
</para>
</section>
<node name="Variable-Length" spaces=" "><nodename>Variable Length</nodename><nodenext automatic="on">Variadic Macros</nodenext><nodeprev automatic="on">Empty Structures</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Arrays of Variable Length</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="362">variable-length arrays</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="363">arrays of variable length</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="364">VLAs</indexterm></cindex>

<para>Variable-length automatic arrays are allowed in ISO C99, and as an
extension GCC accepts them in C90 mode and in C++.  These arrays are
declared like any other automatic arrays, but with a length that is not
a constant expression.  The storage is allocated at the point of
declaration and deallocated when the block scope containing the declaration
exits.  For
example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">FILE *
concat_fopen (char *s1, char *s2, char *mode)
&lbrace;
  char str[strlen (s1) + strlen (s2) + 1];
  strcpy (str, s1);
  strcat (str, s2);
  return fopen (str, mode);
&rbrace;
</pre></smallexample>

<cindex index="cp" spaces=" "><indexterm index="cp" number="365">scope of a variable length array</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="366">variable-length array scope</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="367">deallocating variable length arrays</indexterm></cindex>
<para>Jumping or breaking out of the scope of the array name deallocates the
storage.  Jumping into the scope is not allowed; you get an error
message for it.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="368">variable-length array in a structure</indexterm></cindex>
<para>As an extension, GCC accepts variable-length arrays as a member of
a structure or a union.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void
foo (int n)
&lbrace;
  struct S &lbrace; int x[n]; &rbrace;;
&rbrace;
</pre></smallexample>

<cindex index="cp" spaces=" "><indexterm index="cp" number="369"><code>alloca</code> vs variable-length arrays</indexterm></cindex>
<para>You can use the function <code>alloca</code> to get an effect much like
variable-length arrays.  The function <code>alloca</code> is available in
many other C implementations (but not in all).  On the other hand,
variable-length arrays are more elegant.
</para>
<para>There are other differences between these two methods.  Space allocated
with <code>alloca</code> exists until the containing <emph>function</emph> returns.
The space for a variable-length array is deallocated as soon as the array
name&textrsquo;s scope ends.  (If you use both variable-length arrays and
<code>alloca</code> in the same function, deallocation of a variable-length array
also deallocates anything more recently allocated with <code>alloca</code>.)
</para>
<para>You can also use variable-length arrays as arguments to functions:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct entry
tester (int len, char data[len][len])
&lbrace;
  /* <r>&dots;</r> */
&rbrace;
</pre></smallexample>

<para>The length of an array is computed once when the storage is allocated
and is remembered for the scope of the array in case you access it with
<code>sizeof</code>.
</para>
<para>If you want to pass the array first and the length afterward, you can
use a forward declaration in the parameter list&textmdash;another GNU extension.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct entry
tester (int len; char data[len][len], int len)
&lbrace;
  /* <r>&dots;</r> */
&rbrace;
</pre></smallexample>

<cindex index="cp" spaces=" "><indexterm index="cp" number="370">parameter forward declaration</indexterm></cindex>
<para>The <samp>int len</samp> before the semicolon is a <dfn>parameter forward
declaration</dfn>, and it serves the purpose of making the name <code>len</code>
known when the declaration of <code>data</code> is parsed.
</para>
<para>You can write any number of such parameter forward declarations in the
parameter list.  They can be separated by commas or semicolons, but the
last one must end with a semicolon, which is followed by the &textldquo;real&textrdquo;
parameter declarations.  Each forward declaration must match a &textldquo;real&textrdquo;
declaration in parameter name and data type.  ISO C99 does not support
parameter forward declarations.
</para>
</section>
<node name="Variadic-Macros" spaces=" "><nodename>Variadic Macros</nodename><nodenext automatic="on">Escaped Newlines</nodenext><nodeprev automatic="on">Variable Length</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Macros with a Variable Number of Arguments.</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="371">variable number of arguments</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="372">macro with variable arguments</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="373">rest argument (in macro)</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="374">variadic macros</indexterm></cindex>

<para>In the ISO C standard of 1999, a macro can be declared to accept a
variable number of arguments much as a function can.  The syntax for
defining the macro is similar to that of a function.  Here is an
example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define debug(format, ...) fprintf (stderr, format, __VA_ARGS__)
</pre></smallexample>

<noindent></noindent>
<para>Here <samp>&dots;</samp> is a <dfn>variable argument</dfn>.  In the invocation of
such a macro, it represents the zero or more tokens until the closing
parenthesis that ends the invocation, including any commas.  This set of
tokens replaces the identifier <code>__VA_ARGS__</code> in the macro body
wherever it appears.  See the CPP manual for more information.
</para>
<para>GCC has long supported variadic macros, and used a different syntax that
allowed you to give a name to the variable arguments just like any other
argument.  Here is an example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define debug(format, args...) fprintf (stderr, format, args)
</pre></smallexample>

<noindent></noindent>
<para>This is in all ways equivalent to the ISO C example above, but arguably
more readable and descriptive.
</para>
<para>GNU CPP has two further variadic macro extensions, and permits them to
be used with either of the above forms of macro definition.
</para>
<para>In standard C, you are not allowed to leave the variable argument out
entirely; but you are allowed to pass an empty argument.  For example,
this invocation is invalid in ISO C, because there is no comma after
the string:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">debug (&quot;A message&quot;)
</pre></smallexample>

<para>GNU CPP permits you to completely omit the variable arguments in this
way.  In the above examples, the compiler would complain, though since
the expansion of the macro still has the extra comma after the format
string.
</para>
<para>To help solve this problem, CPP behaves specially for variable arguments
used with the token paste operator, <samp>##</samp>.  If instead you write
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define debug(format, ...) fprintf (stderr, format, ## __VA_ARGS__)
</pre></smallexample>

<noindent></noindent>
<para>and if the variable arguments are omitted or empty, the <samp>##</samp>
operator causes the preprocessor to remove the comma before it.  If you
do provide some variable arguments in your macro invocation, GNU CPP
does not complain about the paste operation and instead places the
variable arguments after the comma.  Just like any other pasted macro
argument, these arguments are not macro expanded.
</para>
</section>
<node name="Escaped-Newlines" spaces=" "><nodename>Escaped Newlines</nodename><nodenext automatic="on">Subscripting</nodenext><nodeprev automatic="on">Variadic Macros</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Slightly Looser Rules for Escaped Newlines</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="375">escaped newlines</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="376">newlines (escaped)</indexterm></cindex>

<para>The preprocessor treatment of escaped newlines is more relaxed 
than that specified by the C90 standard, which requires the newline
to immediately follow a backslash.  
GCC&textrsquo;s implementation allows whitespace in the form
of spaces, horizontal and vertical tabs, and form feeds between the
backslash and the subsequent newline.  The preprocessor issues a
warning, but treats it as a valid escaped newline and combines the two
lines to form a single logical line.  This works within comments and
tokens, as well as between tokens.  Comments are <emph>not</emph> treated as
whitespace for the purposes of this relaxation, since they have not
yet been replaced with spaces.
</para>
</section>
<node name="Subscripting" spaces=" "><nodename>Subscripting</nodename><nodenext automatic="on">Pointer Arith</nodenext><nodeprev automatic="on">Escaped Newlines</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Non-Lvalue Arrays May Have Subscripts</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="377">subscripting</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="378">arrays, non-lvalue</indexterm></cindex>

<cindex index="cp" spaces=" "><indexterm index="cp" number="379">subscripting and function values</indexterm></cindex>
<para>In ISO C99, arrays that are not lvalues still decay to pointers, and
may be subscripted, although they may not be modified or used after
the next sequence point and the unary <samp>&amp;</samp> operator may not be
applied to them.  As an extension, GNU C allows such arrays to be
subscripted in C90 mode, though otherwise they do not decay to
pointers outside C99 mode.  For example,
this is valid in GNU C though not valid in C90:
</para>
<smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">struct foo &lbrace;int a[4];&rbrace;;

struct foo f();

bar (int index)
&lbrace;
  return f().a[index];
&rbrace;
</pre></group>
</smallexample>

</section>
<node name="Pointer-Arith" spaces=" "><nodename>Pointer Arith</nodename><nodenext automatic="on">Pointers to Arrays</nodenext><nodeprev automatic="on">Subscripting</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Arithmetic on <code>void</code>- and Function-Pointers</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="380">void pointers, arithmetic</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="381">void, size of pointer to</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="382">function pointers, arithmetic</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="383">function, size of pointer to</indexterm></cindex>

<para>In GNU C, addition and subtraction operations are supported on pointers to
<code>void</code> and on pointers to functions.  This is done by treating the
size of a <code>void</code> or of a function as 1.
</para>
<para>A consequence of this is that <code>sizeof</code> is also allowed on <code>void</code>
and on function types, and returns 1.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2610" incode="1">Wpointer-arith</indexterm></indexcommand>
<para>The option <option>-Wpointer-arith</option> requests a warning if these extensions
are used.
</para>
</section>
<node name="Pointers-to-Arrays" spaces=" "><nodename>Pointers to Arrays</nodename><nodenext automatic="on">Initializers</nodenext><nodeprev automatic="on">Pointer Arith</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Pointers to Arrays with Qualifiers Work as Expected</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="384">pointers to arrays</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="385">const qualifier</indexterm></cindex>

<para>In GNU C, pointers to arrays with qualifiers work similar to pointers
to other qualified types. For example, a value of type <code>int (*)[5]</code>
can be used to initialize a variable of type <code>const int (*)[5]</code>.
These types are incompatible in ISO C because the <code>const</code> qualifier
is formally attached to the element type of the array and not the
array itself.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern void
transpose (int N, int M, double out[M][N], const double in[N][M]);
double x[3][2];
double y[2][3];
<r>&dots;</r>
transpose(3, 2, y, x);
</pre></smallexample>

</section>
<node name="Initializers" spaces=" "><nodename>Initializers</nodename><nodenext automatic="on">Compound Literals</nodenext><nodeprev automatic="on">Pointers to Arrays</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Non-Constant Initializers</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="386">initializers, non-constant</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="387">non-constant initializers</indexterm></cindex>

<para>As in standard C++ and ISO C99, the elements of an aggregate initializer for an
automatic variable are not required to be constant expressions in GNU C&eosperiod;
Here is an example of an initializer with run-time varying elements:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">foo (float f, float g)
&lbrace;
  float beat_freqs[2] = &lbrace; f-g, f+g &rbrace;;
  /* <r>&dots;</r> */
&rbrace;
</pre></smallexample>

</section>
<node name="Compound-Literals" spaces=" "><nodename>Compound Literals</nodename><nodenext automatic="on">Designated Inits</nodenext><nodeprev automatic="on">Initializers</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Compound Literals</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="388">constructor expressions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="389">initializations in expressions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="390">structures, constructor expression</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="391">expressions, constructor</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="392">compound literals</indexterm></cindex>
<!-- c The GNU C name for what C99 calls compound literals was "constructor expressions". -->

<para>ISO C99 supports compound literals.  A compound literal looks like
a cast containing an initializer.  Its value is an object of the
type specified in the cast, containing the elements specified in
the initializer; it is an lvalue.  As an extension, GCC supports
compound literals in C90 mode and in C++, though the semantics are
somewhat different in C++.
</para>
<para>Usually, the specified type is a structure.  Assume that
<code>struct foo</code> and <code>structure</code> are declared as shown:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct foo &lbrace;int a; char b[2];&rbrace; structure;
</pre></smallexample>

<noindent></noindent>
<para>Here is an example of constructing a <code>struct foo</code> with a compound literal:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">structure = ((struct foo) &lbrace;x + y, 'a', 0&rbrace;);
</pre></smallexample>

<noindent></noindent>
<para>This is equivalent to writing the following:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">&lbrace;
  struct foo temp = &lbrace;x + y, 'a', 0&rbrace;;
  structure = temp;
&rbrace;
</pre></smallexample>

<para>You can also construct an array, though this is dangerous in C++, as
explained below.  If all the elements of the compound literal are
(made up of) simple constant expressions, suitable for use in
initializers of objects of static storage duration, then the compound
literal can be coerced to a pointer to its first element and used in
such an initializer, as shown here:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">char **foo = (char *[]) &lbrace; &quot;x&quot;, &quot;y&quot;, &quot;z&quot; &rbrace;;
</pre></smallexample>

<para>Compound literals for scalar types and union types are
also allowed, but then the compound literal is equivalent
to a cast.
</para>
<para>As a GNU extension, GCC allows initialization of objects with static storage
duration by compound literals (which is not possible in ISO C99, because
the initializer is not a constant).
It is handled as if the object is initialized only with the bracket
enclosed list if the types of the compound literal and the object match.
The initializer list of the compound literal must be constant.
If the object being initialized has array type of unknown size, the size is
determined by compound literal size.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">static struct foo x = (struct foo) &lbrace;1, 'a', 'b'&rbrace;;
static int y[] = (int []) &lbrace;1, 2, 3&rbrace;;
static int z[] = (int [3]) &lbrace;1&rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>The above lines are equivalent to the following:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">static struct foo x = &lbrace;1, 'a', 'b'&rbrace;;
static int y[] = &lbrace;1, 2, 3&rbrace;;
static int z[] = &lbrace;1, 0, 0&rbrace;;
</pre></smallexample>

<para>In C, a compound literal designates an unnamed object with static or
automatic storage duration.  In C++, a compound literal designates a
temporary object, which only lives until the end of its
full-expression.  As a result, well-defined C code that takes the
address of a subobject of a compound literal can be undefined in C++,
so the C++ compiler rejects the conversion of a temporary array to a pointer.
For instance, if the array compound literal example above appeared
inside a function, any subsequent use of <samp>foo</samp> in C++ has
undefined behavior because the lifetime of the array ends after the
declaration of <samp>foo</samp>.  
</para>
<para>As an optimization, the C++ compiler sometimes gives array compound
literals longer lifetimes: when the array either appears outside a
function or has const-qualified type.  If <samp>foo</samp> and its
initializer had elements of <samp>char *const</samp> type rather than
<samp>char *</samp>, or if <samp>foo</samp> were a global variable, the array
would have static storage duration.  But it is probably safest just to
avoid the use of array compound literals in code compiled as C++.
</para>
</section>
<node name="Designated-Inits" spaces=" "><nodename>Designated Inits</nodename><nodenext automatic="on">Case Ranges</nodenext><nodeprev automatic="on">Compound Literals</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Designated Initializers</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="393">initializers with labeled elements</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="394">labeled elements in initializers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="395">case labels in initializers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="396">designated initializers</indexterm></cindex>

<para>Standard C90 requires the elements of an initializer to appear in a fixed
order, the same as the order of the elements in the array or structure
being initialized.
</para>
<para>In ISO C99 you can give the elements in any order, specifying the array
indices or structure field names they apply to, and GNU C allows this as
an extension in C90 mode as well.  This extension is not
implemented in GNU C++.
</para>
<para>To specify an array index, write
<samp>[<var>index</var>] =</samp> before the element value.  For example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int a[6] = &lbrace; [4] = 29, [2] = 15 &rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>is equivalent to
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int a[6] = &lbrace; 0, 0, 15, 0, 29, 0 &rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>The index values must be constant expressions, even if the array being
initialized is automatic.
</para>
<para>An alternative syntax for this that has been obsolete since GCC 2.5 but
GCC still accepts is to write <samp>[<var>index</var>]</samp> before the element
value, with no <samp>=</samp>.
</para>
<para>To initialize a range of elements to the same value, write
<samp>[<var>first</var> ... <var>last</var>] = <var>value</var></samp>.  This is a GNU
extension.  For example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int widths[] = &lbrace; [0 ... 9] = 1, [10 ... 99] = 2, [100] = 3 &rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>If the value in it has side-effects, the side-effects happen only once,
not for each initialized field by the range initializer.
</para>
<noindent></noindent>
<para>Note that the length of the array is the highest value specified
plus one.
</para>
<para>In a structure initializer, specify the name of a field to initialize
with <samp>.<var>fieldname</var> =</samp> before the element value.  For example,
given the following structure,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct point &lbrace; int x, y; &rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>the following initialization
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct point p = &lbrace; .y = yvalue, .x = xvalue &rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>is equivalent to
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct point p = &lbrace; xvalue, yvalue &rbrace;;
</pre></smallexample>

<para>Another syntax that has the same meaning, obsolete since GCC 2.5, is
<samp><var>fieldname</var>:</samp>, as shown here:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct point p = &lbrace; y: yvalue, x: xvalue &rbrace;;
</pre></smallexample>

<para>Omitted field members are implicitly initialized the same as objects
that have static storage duration.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="397">designators</indexterm></cindex>
<para>The <samp>[<var>index</var>]</samp> or <samp>.<var>fieldname</var></samp> is known as a
<dfn>designator</dfn>.  You can also use a designator (or the obsolete colon
syntax) when initializing a union, to specify which element of the union
should be used.  For example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">union foo &lbrace; int i; double d; &rbrace;;

union foo f = &lbrace; .d = 4 &rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>converts 4 to a <code>double</code> to store it in the union using
the second element.  By contrast, casting 4 to type <code>union foo</code>
stores it into the union as the integer <code>i</code>, since it is
an integer.  (<xref label="Cast-to-Union"><xrefnodename>Cast to Union</xrefnodename></xref>.)
</para>
<para>You can combine this technique of naming elements with ordinary C
initialization of successive elements.  Each initializer element that
does not have a designator applies to the next consecutive element of the
array or structure.  For example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int a[6] = &lbrace; [1] = v1, v2, [4] = v4 &rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>is equivalent to
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int a[6] = &lbrace; 0, v1, v2, 0, v4, 0 &rbrace;;
</pre></smallexample>

<para>Labeling the elements of an array initializer is especially useful
when the indices are characters or belong to an <code>enum</code> type.
For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int whitespace[256]
  = &lbrace; [' '] = 1, ['\t'] = 1, ['\h'] = 1,
      ['\f'] = 1, ['\n'] = 1, ['\r'] = 1 &rbrace;;
</pre></smallexample>

<cindex index="cp" spaces=" "><indexterm index="cp" number="398">designator lists</indexterm></cindex>
<para>You can also write a series of <samp>.<var>fieldname</var></samp> and
<samp>[<var>index</var>]</samp> designators before an <samp>=</samp> to specify a
nested subobject to initialize; the list is taken relative to the
subobject corresponding to the closest surrounding brace pair.  For
example, with the <samp>struct point</samp> declaration above:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct point ptarray[10] = &lbrace; [2].y = yv2, [2].x = xv2, [0].x = xv0 &rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>If the same field is initialized multiple times, it has the value from
the last initialization.  If any such overridden initialization has
side-effect, it is unspecified whether the side-effect happens or not.
Currently, GCC discards them and issues a warning.
</para>
</section>
<node name="Case-Ranges" spaces=" "><nodename>Case Ranges</nodename><nodenext automatic="on">Cast to Union</nodenext><nodeprev automatic="on">Designated Inits</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Case Ranges</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="399">case ranges</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="400">ranges in case statements</indexterm></cindex>

<para>You can specify a range of consecutive values in a single <code>case</code> label,
like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">case <var>low</var> ... <var>high</var>:
</pre></smallexample>

<noindent></noindent>
<para>This has the same effect as the proper number of individual <code>case</code>
labels, one for each integer value from <var>low</var> to <var>high</var>, inclusive.
</para>
<para>This feature is especially useful for ranges of ASCII character codes:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">case 'A' ... 'Z':
</pre></smallexample>

<para><strong>Be careful:</strong> Write spaces around the <code>...</code>, for otherwise
it may be parsed wrong when you use it with integer values.  For example,
write this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">case 1 ... 5:
</pre></smallexample>

<noindent></noindent>
<para>rather than this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">case 1...5:
</pre></smallexample>

</section>
<node name="Cast-to-Union" spaces=" "><nodename>Cast to Union</nodename><nodenext automatic="on">Mixed Declarations</nodenext><nodeprev automatic="on">Case Ranges</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Cast to a Union Type</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="401">cast to a union</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="402">union, casting to a</indexterm></cindex>

<para>A cast to union type is similar to other casts, except that the type
specified is a union type.  You can specify the type either with
<code>union <var>tag</var></code> or with a typedef name.  A cast to union is actually
a constructor, not a cast, and hence does not yield an lvalue like
normal casts.  (<xref label="Compound-Literals"><xrefnodename>Compound Literals</xrefnodename></xref>.)
</para>
<para>The types that may be cast to the union type are those of the members
of the union.  Thus, given the following union and variables:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">union foo &lbrace; int i; double d; &rbrace;;
int x;
double y;
</pre></smallexample>

<noindent></noindent>
<para>both <code>x</code> and <code>y</code> can be cast to type <code>union foo</code>.
</para>
<para>Using the cast as the right-hand side of an assignment to a variable of
union type is equivalent to storing in a member of the union:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">union foo u;
/* <r>&dots;</r> */
u = (union foo) x  &equiv;  u.i = x
u = (union foo) y  &equiv;  u.d = y
</pre></smallexample>

<para>You can also use the union cast as a function argument:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void hack (union foo);
/* <r>&dots;</r> */
hack ((union foo) x);
</pre></smallexample>

</section>
<node name="Mixed-Declarations" spaces=" "><nodename>Mixed Declarations</nodename><nodenext automatic="on">Function Attributes</nodenext><nodeprev automatic="on">Cast to Union</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Mixed Declarations and Code</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="403">mixed declarations and code</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="404">declarations, mixed with code</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="405">code, mixed with declarations</indexterm></cindex>

<para>ISO C99 and ISO C++ allow declarations and code to be freely mixed
within compound statements.  As an extension, GNU C also allows this in
C90 mode.  For example, you could do:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int i;
/* <r>&dots;</r> */
i++;
int j = i + 2;
</pre></smallexample>

<para>Each identifier is visible from where it is declared until the end of
the enclosing block.
</para>
</section>
<node name="Function-Attributes" spaces=" "><nodename>Function Attributes</nodename><nodenext automatic="on">Variable Attributes</nodenext><nodeprev automatic="on">Mixed Declarations</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Declaring Attributes of Functions</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="406">function attributes</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="407">declaring attributes of functions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="408"><code>volatile</code> applied to function</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="409"><code>const</code> applied to function</indexterm></cindex>

<para>In GNU C, you can use function attributes to declare certain things
about functions called in your program which help the compiler
optimize calls and check your code more carefully.  For example, you
can use attributes to declare that a function never returns
(<code>noreturn</code>), returns a value depending only on its arguments
(<code>pure</code>), or has <code>printf</code>-style arguments (<code>format</code>).
</para>
<para>You can also use attributes to control memory placement, code
generation options or call/return conventions within the function
being annotated.  Many of these attributes are target-specific.  For
example, many targets support attributes for defining interrupt
handler functions, which typically must follow special register usage
and return conventions.
</para>
<para>Function attributes are introduced by the <code>__attribute__</code> keyword
on a declaration, followed by an attribute specification inside double
parentheses.  You can specify multiple attributes in a declaration by
separating them by commas within the double parentheses or by
immediately following an attribute declaration with another attribute
declaration.  <xref label="Attribute-Syntax"><xrefnodename>Attribute Syntax</xrefnodename></xref>, for the exact rules on
attribute syntax and placement.
</para>
<para>GCC also supports attributes on
variable declarations (<pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>),
labels (<pxref label="Label-Attributes"><xrefnodename>Label Attributes</xrefnodename></pxref>),
and types (<pxref label="Type-Attributes"><xrefnodename>Type Attributes</xrefnodename></pxref>).
</para>
<para>There is some overlap between the purposes of attributes and pragmas
(<pxref label="Pragmas"><xrefnodename>Pragmas</xrefnodename><xrefprinteddesc>Pragmas Accepted by GCC</xrefprinteddesc></pxref>).  It has been
found convenient to use <code>__attribute__</code> to achieve a natural
attachment of attributes to their corresponding declarations, whereas
<code>#pragma</code> is of use for compatibility with other compilers
or constructs that do not naturally form part of the grammar.
</para>
<para>In addition to the attributes documented here,
GCC plugins may provide their own attributes.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Common Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">ARC Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">ARM Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">AVR Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Blackfin Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">CR16 Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Epiphany Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">H8/300 Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">IA-64 Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">M32C Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">M32R/D Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">m68k Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MCORE Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MeP Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MicroBlaze Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Microsoft Windows Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MIPS Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MSP430 Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">NDS32 Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Nios II Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">PowerPC Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">RL78 Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">RX Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">S/390 Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">SH Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">SPU Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Symbian OS Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Visium Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">x86 Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Xstormy16 Function Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="Common-Function-Attributes" spaces=" "><nodename>Common Function Attributes</nodename><nodenext automatic="on">ARC Function Attributes</nodenext><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Common Function Attributes</sectiontitle>

<para>The following attributes are supported on most targets.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem><!-- c Keep this table alphabetized by attribute name.  Treat _ as space. -->

</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">alias (&quot;<var>target</var>&quot;)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="410"><code>alias</code> function attribute</indexterm></cindex>
<para>The <code>alias</code> attribute causes the declaration to be emitted as an
alias for another symbol, which must be specified.  For instance,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void __f () &lbrace; /* <r>Do something.</r> */; &rbrace;
void f () __attribute__ ((weak, alias (&quot;__f&quot;)));
</pre></smallexample>

<noindent></noindent>
<para>defines <samp>f</samp> to be a weak alias for <samp>__f</samp>.  In C++, the
mangled name for the target must be used.  It is an error if <samp>__f</samp>
is not defined in the same translation unit.
</para>
<para>This attribute requires assembler and object file support,
and may not be available on all targets.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">aligned (<var>alignment</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="411"><code>aligned</code> function attribute</indexterm></cindex>
<para>This attribute specifies a minimum alignment for the function,
measured in bytes.
</para>
<para>You cannot use this attribute to decrease the alignment of a function,
only to increase it.  However, when you explicitly specify a function
alignment this overrides the effect of the
<option>-falign-functions</option> (<pxref label="Optimize-Options"><xrefnodename>Optimize Options</xrefnodename></pxref>) option for this
function.
</para>
<para>Note that the effectiveness of <code>aligned</code> attributes may be
limited by inherent limitations in your linker.  On many systems, the
linker is only able to arrange for functions to be aligned up to a
certain maximum alignment.  (For some linkers, the maximum supported
alignment may be very very small.)  See your linker documentation for
further information.
</para>
<para>The <code>aligned</code> attribute can also be used for variables and fields
(<pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">alloc_align</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="412"><code>alloc_align</code> function attribute</indexterm></cindex>
<para>The <code>alloc_align</code> attribute is used to tell the compiler that the
function return value points to memory, where the returned pointer minimum
alignment is given by one of the functions parameters.  GCC uses this
information to improve pointer alignment analysis.
</para>
<para>The function parameter denoting the allocated alignment is specified by
one integer argument, whose number is the argument of the attribute.
Argument numbering starts at one.
</para>
<para>For instance,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void* my_memalign(size_t, size_t) __attribute__((alloc_align(1)))
</pre></smallexample>

<noindent></noindent>
<para>declares that <code>my_memalign</code> returns memory with minimum alignment
given by parameter 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">alloc_size</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="413"><code>alloc_size</code> function attribute</indexterm></cindex>
<para>The <code>alloc_size</code> attribute is used to tell the compiler that the
function return value points to memory, where the size is given by
one or two of the functions parameters.  GCC uses this
information to improve the correctness of <code>__builtin_object_size</code>.
</para>
<para>The function parameter(s) denoting the allocated size are specified by
one or two integer arguments supplied to the attribute.  The allocated size
is either the value of the single function argument specified or the product
of the two function arguments specified.  Argument numbering starts at
one.
</para>
<para>For instance,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void* my_calloc(size_t, size_t) __attribute__((alloc_size(1,2)))
void* my_realloc(void*, size_t) __attribute__((alloc_size(2)))
</pre></smallexample>

<noindent></noindent>
<para>declares that <code>my_calloc</code> returns memory of the size given by
the product of parameter 1 and 2 and that <code>my_realloc</code> returns memory
of the size given by parameter 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">always_inline</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="414"><code>always_inline</code> function attribute</indexterm></cindex>
<para>Generally, functions are not inlined unless optimization is specified.
For functions declared inline, this attribute inlines the function
independent of any restrictions that otherwise apply to inlining.
Failure to inline such a function is diagnosed as an error.
Note that if such a function is called indirectly the compiler may
or may not inline it depending on optimization level and a failure
to inline an indirect call may or may not be diagnosed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">artificial</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="415"><code>artificial</code> function attribute</indexterm></cindex>
<para>This attribute is useful for small inline wrappers that if possible
should appear during debugging as a unit.  Depending on the debug
info format it either means marking the function as artificial
or using the caller location for all instructions within the inlined
body.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">assume_aligned</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="416"><code>assume_aligned</code> function attribute</indexterm></cindex>
<para>The <code>assume_aligned</code> attribute is used to tell the compiler that the
function return value points to memory, where the returned pointer minimum
alignment is given by the first argument.
If the attribute has two arguments, the second argument is misalignment offset.
</para>
<para>For instance
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void* my_alloc1(size_t) __attribute__((assume_aligned(16)))
void* my_alloc2(size_t) __attribute__((assume_aligned(32, 8)))
</pre></smallexample>

<noindent></noindent>
<para>declares that <code>my_alloc1</code> returns 16-byte aligned pointer and
that <code>my_alloc2</code> returns a pointer whose value modulo 32 is equal
to 8.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">bnd_instrument</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="417"><code>bnd_instrument</code> function attribute</indexterm></cindex>
<para>The <code>bnd_instrument</code> attribute on functions is used to inform the
compiler that the function should be instrumented when compiled
with the <option>-fchkp-instrument-marked-only</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">bnd_legacy</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="418"><code>bnd_legacy</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="419">Pointer Bounds Checker attributes</indexterm></cindex>
<para>The <code>bnd_legacy</code> attribute on functions is used to inform the
compiler that the function should not be instrumented when compiled
with the <option>-fcheck-pointer-bounds</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">cold</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="420"><code>cold</code> function attribute</indexterm></cindex>
<para>The <code>cold</code> attribute on functions is used to inform the compiler that
the function is unlikely to be executed.  The function is optimized for
size rather than speed and on many targets it is placed into a special
subsection of the text section so all cold functions appear close together,
improving code locality of non-cold parts of program.  The paths leading
to calls of cold functions within code are marked as unlikely by the branch
prediction mechanism.  It is thus useful to mark functions used to handle
unlikely conditions, such as <code>perror</code>, as cold to improve optimization
of hot functions that do call marked functions in rare occasions.
</para>
<para>When profile feedback is available, via <option>-fprofile-use</option>, cold functions
are automatically detected and this attribute is ignored.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">const</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="421"><code>const</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="422">functions that have no side effects</indexterm></cindex>
<para>Many functions do not examine any values except their arguments, and
have no effects except the return value.  Basically this is just slightly
more strict class than the <code>pure</code> attribute below, since function is not
allowed to read global memory.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="423">pointer arguments</indexterm></cindex>
<para>Note that a function that has pointer arguments and examines the data
pointed to must <emph>not</emph> be declared <code>const</code>.  Likewise, a
function that calls a non-<code>const</code> function usually must not be
<code>const</code>.  It does not make sense for a <code>const</code> function to
return <code>void</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">constructor</itemformat></item>
<itemx spaces=" "><itemformat command="code">destructor</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">constructor (<var>priority</var>)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">destructor (<var>priority</var>)</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="424"><code>constructor</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="425"><code>destructor</code> function attribute</indexterm></cindex>
<para>The <code>constructor</code> attribute causes the function to be called
automatically before execution enters <code>main ()</code>.  Similarly, the
<code>destructor</code> attribute causes the function to be called
automatically after <code>main ()</code> completes or <code>exit ()</code> is
called.  Functions with these attributes are useful for
initializing data that is used implicitly during the execution of
the program.
</para>
<para>You may provide an optional integer priority to control the order in
which constructor and destructor functions are run.  A constructor
with a smaller priority number runs before a constructor with a larger
priority number; the opposite relationship holds for destructors.  So,
if you have a constructor that allocates a resource and a destructor
that deallocates the same resource, both functions typically have the
same priority.  The priorities for constructor and destructor
functions are the same as those specified for namespace-scope C++
objects (<pxref label="C_002b_002b-Attributes"><xrefnodename>C++ Attributes</xrefnodename></pxref>).
</para>
<para>These attributes are not currently implemented for Objective-C&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">deprecated</itemformat></item>
<itemx spaces=" "><itemformat command="code">deprecated (<var>msg</var>)</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="426"><code>deprecated</code> function attribute</indexterm></cindex>
<para>The <code>deprecated</code> attribute results in a warning if the function
is used anywhere in the source file.  This is useful when identifying
functions that are expected to be removed in a future version of a
program.  The warning also includes the location of the declaration
of the deprecated function, to enable users to easily find further
information about why the function is deprecated, or what they should
do instead.  Note that the warnings only occurs for uses:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int old_fn () __attribute__ ((deprecated));
int old_fn ();
int (*fn_ptr)() = old_fn;
</pre></smallexample>

<noindent></noindent>
<para>results in a warning on line 3 but not line 2.  The optional <var>msg</var>
argument, which must be a string, is printed in the warning if
present.
</para>
<para>The <code>deprecated</code> attribute can also be used for variables and
types (<pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>, <pxref label="Type-Attributes"><xrefnodename>Type Attributes</xrefnodename></pxref>.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">error (&quot;<var>message</var>&quot;)</itemformat></item>
<itemx spaces=" "><itemformat command="code">warning (&quot;<var>message</var>&quot;)</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="427"><code>error</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="428"><code>warning</code> function attribute</indexterm></cindex>
<para>If the <code>error</code> or <code>warning</code> attribute 
is used on a function declaration and a call to such a function
is not eliminated through dead code elimination or other optimizations, 
an error or warning (respectively) that includes <var>message</var> is diagnosed.  
This is useful
for compile-time checking, especially together with <code>__builtin_constant_p</code>
and inline functions where checking the inline function arguments is not
possible through <code>extern char [(condition) ? 1 : -1];</code> tricks.
</para>
<para>While it is possible to leave the function undefined and thus invoke
a link failure (to define the function with
a message in <code>.gnu.warning*</code> section),
when using these attributes the problem is diagnosed
earlier and with exact location of the call even in presence of inline
functions or when not emitting debugging information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">externally_visible</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="429"><code>externally_visible</code> function attribute</indexterm></cindex>
<para>This attribute, attached to a global variable or function, nullifies
the effect of the <option>-fwhole-program</option> command-line option, so the
object remains visible outside the current compilation unit.
</para>
<para>If <option>-fwhole-program</option> is used together with <option>-flto</option> and 
<command>gold</command> is used as the linker plugin, 
<code>externally_visible</code> attributes are automatically added to functions 
(not variable yet due to a current <command>gold</command> issue) 
that are accessed outside of LTO objects according to resolution file
produced by <command>gold</command>.
For other linkers that cannot generate resolution file,
explicit <code>externally_visible</code> attributes are still necessary.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">flatten</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="430"><code>flatten</code> function attribute</indexterm></cindex>
<para>Generally, inlining into a function is limited.  For a function marked with
this attribute, every call inside this function is inlined, if possible.
Whether the function itself is considered for inlining depends on its size and
the current inlining parameters.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">format (<var>archetype</var>, <var>string-index</var>, <var>first-to-check</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="431"><code>format</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="432">functions with <code>printf</code>, <code>scanf</code>, <code>strftime</code> or <code>strfmon</code> style arguments</indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2611" incode="1">Wformat</indexterm></indexcommand>
<para>The <code>format</code> attribute specifies that a function takes <code>printf</code>,
<code>scanf</code>, <code>strftime</code> or <code>strfmon</code> style arguments that
should be type-checked against a format string.  For example, the
declaration:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern int
my_printf (void *my_object, const char *my_format, ...)
      __attribute__ ((format (printf, 2, 3)));
</pre></smallexample>

<noindent></noindent>
<para>causes the compiler to check the arguments in calls to <code>my_printf</code>
for consistency with the <code>printf</code> style format string argument
<code>my_format</code>.
</para>
<para>The parameter <var>archetype</var> determines how the format string is
interpreted, and should be <code>printf</code>, <code>scanf</code>, <code>strftime</code>,
<code>gnu_printf</code>, <code>gnu_scanf</code>, <code>gnu_strftime</code> or
<code>strfmon</code>.  (You can also use <code>__printf__</code>,
<code>__scanf__</code>, <code>__strftime__</code> or <code>__strfmon__</code>.)  On
MinGW targets, <code>ms_printf</code>, <code>ms_scanf</code>, and
<code>ms_strftime</code> are also present.
<var>archetype</var> values such as <code>printf</code> refer to the formats accepted
by the system&textrsquo;s C runtime library,
while values prefixed with <samp>gnu_</samp> always refer
to the formats accepted by the GNU C Library.  On Microsoft Windows
targets, values prefixed with <samp>ms_</samp> refer to the formats accepted by the
<file>msvcrt.dll</file> library.
The parameter <var>string-index</var>
specifies which argument is the format string argument (starting
from 1), while <var>first-to-check</var> is the number of the first
argument to check against the format string.  For functions
where the arguments are not available to be checked (such as
<code>vprintf</code>), specify the third parameter as zero.  In this case the
compiler only checks the format string for consistency.  For
<code>strftime</code> formats, the third parameter is required to be zero.
Since non-static C++ methods have an implicit <code>this</code> argument, the
arguments of such methods should be counted from two, not one, when
giving values for <var>string-index</var> and <var>first-to-check</var>.
</para>
<para>In the example above, the format string (<code>my_format</code>) is the second
argument of the function <code>my_print</code>, and the arguments to check
start with the third argument, so the correct parameters for the format
attribute are 2 and 3.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2612" incode="1">ffreestanding</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2613" incode="1">fno-builtin</indexterm></indexcommand>
<para>The <code>format</code> attribute allows you to identify your own functions
that take format strings as arguments, so that GCC can check the
calls to these functions for errors.  The compiler always (unless
<option>-ffreestanding</option> or <option>-fno-builtin</option> is used) checks formats
for the standard library functions <code>printf</code>, <code>fprintf</code>,
<code>sprintf</code>, <code>scanf</code>, <code>fscanf</code>, <code>sscanf</code>, <code>strftime</code>,
<code>vprintf</code>, <code>vfprintf</code> and <code>vsprintf</code> whenever such
warnings are requested (using <option>-Wformat</option>), so there is no need to
modify the header file <file>stdio.h</file>.  In C99 mode, the functions
<code>snprintf</code>, <code>vsnprintf</code>, <code>vscanf</code>, <code>vfscanf</code> and
<code>vsscanf</code> are also checked.  Except in strictly conforming C
standard modes, the X/Open function <code>strfmon</code> is also checked as
are <code>printf_unlocked</code> and <code>fprintf_unlocked</code>.
<xref label="C-Dialect-Options"><xrefnodename>C Dialect Options</xrefnodename><xrefprinteddesc>Options Controlling C Dialect</xrefprinteddesc></xref>.
</para>
<para>For Objective-C dialects, <code>NSString</code> (or <code>__NSString__</code>) is
recognized in the same context.  Declarations including these format attributes
are parsed for correct syntax, however the result of checking of such format
strings is not yet defined, and is not carried out by this version of the
compiler.
</para>
<para>The target may also provide additional types of format checks.
<xref label="Target-Format-Checks"><xrefnodename>Target Format Checks</xrefnodename><xrefprinteddesc>Format Checks Specific to Particular
Target Machines</xrefprinteddesc></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">format_arg (<var>string-index</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="433"><code>format_arg</code> function attribute</indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2614" incode="1">Wformat-nonliteral</indexterm></indexcommand>
<para>The <code>format_arg</code> attribute specifies that a function takes a format
string for a <code>printf</code>, <code>scanf</code>, <code>strftime</code> or
<code>strfmon</code> style function and modifies it (for example, to translate
it into another language), so the result can be passed to a
<code>printf</code>, <code>scanf</code>, <code>strftime</code> or <code>strfmon</code> style
function (with the remaining arguments to the format function the same
as they would have been for the unmodified string).  For example, the
declaration:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern char *
my_dgettext (char *my_domain, const char *my_format)
      __attribute__ ((format_arg (2)));
</pre></smallexample>

<noindent></noindent>
<para>causes the compiler to check the arguments in calls to a <code>printf</code>,
<code>scanf</code>, <code>strftime</code> or <code>strfmon</code> type function, whose
format string argument is a call to the <code>my_dgettext</code> function, for
consistency with the format string argument <code>my_format</code>.  If the
<code>format_arg</code> attribute had not been specified, all the compiler
could tell in such calls to format functions would be that the format
string argument is not constant; this would generate a warning when
<option>-Wformat-nonliteral</option> is used, but the calls could not be checked
without the attribute.
</para>
<para>The parameter <var>string-index</var> specifies which argument is the format
string argument (starting from one).  Since non-static C++ methods have
an implicit <code>this</code> argument, the arguments of such methods should
be counted from two.
</para>
<para>The <code>format_arg</code> attribute allows you to identify your own
functions that modify format strings, so that GCC can check the
calls to <code>printf</code>, <code>scanf</code>, <code>strftime</code> or <code>strfmon</code>
type function whose operands are a call to one of your own function.
The compiler always treats <code>gettext</code>, <code>dgettext</code>, and
<code>dcgettext</code> in this manner except when strict ISO C support is
requested by <option>-ansi</option> or an appropriate <option>-std</option> option, or
<option>-ffreestanding</option> or <option>-fno-builtin</option>
is used.  <xref label="C-Dialect-Options"><xrefnodename>C Dialect Options</xrefnodename><xrefprinteddesc>Options
Controlling C Dialect</xrefprinteddesc></xref>.
</para>
<para>For Objective-C dialects, the <code>format-arg</code> attribute may refer to an
<code>NSString</code> reference for compatibility with the <code>format</code> attribute
above.
</para>
<para>The target may also allow additional types in <code>format-arg</code> attributes.
<xref label="Target-Format-Checks"><xrefnodename>Target Format Checks</xrefnodename><xrefprinteddesc>Format Checks Specific to Particular
Target Machines</xrefprinteddesc></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">gnu_inline</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="434"><code>gnu_inline</code> function attribute</indexterm></cindex>
<para>This attribute should be used with a function that is also declared
with the <code>inline</code> keyword.  It directs GCC to treat the function
as if it were defined in gnu90 mode even when compiling in C99 or
gnu99 mode.
</para>
<para>If the function is declared <code>extern</code>, then this definition of the
function is used only for inlining.  In no case is the function
compiled as a standalone function, not even if you take its address
explicitly.  Such an address becomes an external reference, as if you
had only declared the function, and had not defined it.  This has
almost the effect of a macro.  The way to use this is to put a
function definition in a header file with this attribute, and put
another copy of the function, without <code>extern</code>, in a library
file.  The definition in the header file causes most calls to the
function to be inlined.  If any uses of the function remain, they
refer to the single copy in the library.  Note that the two
definitions of the functions need not be precisely the same, although
if they do not have the same effect your program may behave oddly.
</para>
<para>In C, if the function is neither <code>extern</code> nor <code>static</code>, then
the function is compiled as a standalone function, as well as being
inlined where possible.
</para>
<para>This is how GCC traditionally handled functions declared
<code>inline</code>.  Since ISO C99 specifies a different semantics for
<code>inline</code>, this function attribute is provided as a transition
measure and as a useful feature in its own right.  This attribute is
available in GCC 4.1.3 and later.  It is available if either of the
preprocessor macros <code>__GNUC_GNU_INLINE__</code> or
<code>__GNUC_STDC_INLINE__</code> are defined.  <xref label="Inline"><xrefnodename>Inline</xrefnodename><xrefprinteddesc>An Inline
Function is As Fast As a Macro</xrefprinteddesc></xref>.
</para>
<para>In C++, this attribute does not depend on <code>extern</code> in any way,
but it still requires the <code>inline</code> keyword to enable its special
behavior.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">hot</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="435"><code>hot</code> function attribute</indexterm></cindex>
<para>The <code>hot</code> attribute on a function is used to inform the compiler that
the function is a hot spot of the compiled program.  The function is
optimized more aggressively and on many targets it is placed into a special
subsection of the text section so all hot functions appear close together,
improving locality.
</para>
<para>When profile feedback is available, via <option>-fprofile-use</option>, hot functions
are automatically detected and this attribute is ignored.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ifunc (&quot;<var>resolver</var>&quot;)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="436"><code>ifunc</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="437">indirect functions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="438">functions that are dynamically resolved</indexterm></cindex>
<para>The <code>ifunc</code> attribute is used to mark a function as an indirect
function using the STT_GNU_IFUNC symbol type extension to the ELF
standard.  This allows the resolution of the symbol value to be
determined dynamically at load time, and an optimized version of the
routine can be selected for the particular processor or other system
characteristics determined then.  To use this attribute, first define
the implementation functions available, and a resolver function that
returns a pointer to the selected implementation function.  The
implementation functions&textrsquo; declarations must match the API of the
function being implemented, the resolver&textrsquo;s declaration is be a
function returning pointer to void function returning void:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void *my_memcpy (void *dst, const void *src, size_t len)
&lbrace;
  &dots;
&rbrace;

static void (*resolve_memcpy (void)) (void)
&lbrace;
  return my_memcpy; // we'll just always select this routine
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>The exported header file declaring the function the user calls would
contain:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern void *memcpy (void *, const void *, size_t);
</pre></smallexample>

<noindent></noindent>
<para>allowing the user to call this as a regular function, unaware of the
implementation.  Finally, the indirect function needs to be defined in
the same translation unit as the resolver function:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void *memcpy (void *, const void *, size_t)
     __attribute__ ((ifunc (&quot;resolve_memcpy&quot;)));
</pre></smallexample>

<para>Indirect functions cannot be weak.  Binutils version 2.20.1 or higher
and GNU C Library version 2.11.1 are required to use this feature.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
<itemx spaces=" "><itemformat command="code">interrupt_handler</itemformat></itemx>
</tableterm><tableitem><para>Many GCC back ends support attributes to indicate that a function is
an interrupt handler, which tells the compiler to generate function
entry and exit sequences that differ from those from regular
functions.  The exact syntax and behavior are target-specific;
refer to the following subsections for details.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">leaf</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="439"><code>leaf</code> function attribute</indexterm></cindex>
<para>Calls to external functions with this attribute must return to the current
compilation unit only by return or by exception handling.  In particular, leaf
functions are not allowed to call callback function passed to it from the current
compilation unit or directly call functions exported by the unit or longjmp
into the unit.  Leaf function might still call functions from other compilation
units and thus they are not necessarily leaf in the sense that they contain no
function calls at all.
</para>
<para>The attribute is intended for library functions to improve dataflow analysis.
The compiler takes the hint that any data not escaping the current compilation unit can
not be used or modified by the leaf function.  For example, the <code>sin</code> function
is a leaf function, but <code>qsort</code> is not.
</para>
<para>Note that leaf functions might invoke signals and signal handlers might be
defined in the current compilation unit and use static variables.  The only
compliant way to write such a signal handler is to declare such variables
<code>volatile</code>.
</para>
<para>The attribute has no effect on functions defined within the current compilation
unit.  This is to allow easy merging of multiple compilation units into one,
for example, by using the link-time optimization.  For this reason the
attribute is not allowed on types to annotate indirect calls.
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">malloc</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="440"><code>malloc</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="441">functions that behave like malloc</indexterm></cindex>
<para>This tells the compiler that a function is <code>malloc</code>-like, i.e.,
that the pointer <var>P</var> returned by the function cannot alias any
other pointer valid when the function returns, and moreover no
pointers to valid objects occur in any storage addressed by <var>P</var>.
</para>
<para>Using this attribute can improve optimization.  Functions like
<code>malloc</code> and <code>calloc</code> have this property because they return
a pointer to uninitialized or zeroed-out storage.  However, functions
like <code>realloc</code> do not have this property, as they can return a
pointer to storage containing pointers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">no_icf</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="442"><code>no_icf</code> function attribute</indexterm></cindex>
<para>This function attribute prevents a functions from being merged with another
semantically equivalent function.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">no_instrument_function</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="443"><code>no_instrument_function</code> function attribute</indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2615" incode="1">finstrument-functions</indexterm></indexcommand>
<para>If <option>-finstrument-functions</option> is given, profiling function calls are
generated at entry and exit of most user-compiled functions.
Functions with this attribute are not so instrumented.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">no_reorder</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="444"><code>no_reorder</code> function attribute</indexterm></cindex>
<para>Do not reorder functions or variables marked <code>no_reorder</code>
against each other or top level assembler statements the executable.
The actual order in the program will depend on the linker command
line. Static variables marked like this are also not removed.
This has a similar effect
as the <option>-fno-toplevel-reorder</option> option, but only applies to the
marked symbols.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">no_sanitize_address</itemformat></item>
<itemx spaces=" "><itemformat command="code">no_address_safety_analysis</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="445"><code>no_sanitize_address</code> function attribute</indexterm></cindex>
<para>The <code>no_sanitize_address</code> attribute on functions is used
to inform the compiler that it should not instrument memory accesses
in the function when compiling with the <option>-fsanitize=address</option> option.
The <code>no_address_safety_analysis</code> is a deprecated alias of the
<code>no_sanitize_address</code> attribute, new code should use
<code>no_sanitize_address</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">no_sanitize_thread</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="446"><code>no_sanitize_thread</code> function attribute</indexterm></cindex>
<para>The <code>no_sanitize_thread</code> attribute on functions is used
to inform the compiler that it should not instrument memory accesses
in the function when compiling with the <option>-fsanitize=thread</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">no_sanitize_undefined</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="447"><code>no_sanitize_undefined</code> function attribute</indexterm></cindex>
<para>The <code>no_sanitize_undefined</code> attribute on functions is used
to inform the compiler that it should not check for undefined behavior
in the function when compiling with the <option>-fsanitize=undefined</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">no_split_stack</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="448"><code>no_split_stack</code> function attribute</indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2616" incode="1">fsplit-stack</indexterm></indexcommand>
<para>If <option>-fsplit-stack</option> is given, functions have a small
prologue which decides whether to split the stack.  Functions with the
<code>no_split_stack</code> attribute do not have that prologue, and thus
may run with only a small amount of stack space available.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">noclone</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="449"><code>noclone</code> function attribute</indexterm></cindex>
<para>This function attribute prevents a function from being considered for
cloning&textmdash;a mechanism that produces specialized copies of functions
and which is (currently) performed by interprocedural constant
propagation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">noinline</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="450"><code>noinline</code> function attribute</indexterm></cindex>
<para>This function attribute prevents a function from being considered for
inlining.
<!-- c Don't enumerate the optimizations by name here; we try to be -->
<!-- c future-compatible with this mechanism. -->
If the function does not have side-effects, there are optimizations
other than inlining that cause function calls to be optimized away,
although the function call is live.  To keep such calls from being
optimized away, put
</para><smallexample endspaces=" ">
<pre xml:space="preserve">asm (&quot;&quot;);
</pre></smallexample>

<noindent></noindent>
<para>(<pxref label="Extended-Asm"><xrefnodename>Extended Asm</xrefnodename></pxref>) in the called function, to serve as a special
side-effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">nonnull (<var>arg-index</var>, &dots;)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="451"><code>nonnull</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="452">functions with non-null pointer arguments</indexterm></cindex>
<para>The <code>nonnull</code> attribute specifies that some function parameters should
be non-null pointers.  For instance, the declaration:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern void *
my_memcpy (void *dest, const void *src, size_t len)
        __attribute__((nonnull (1, 2)));
</pre></smallexample>

<noindent></noindent>
<para>causes the compiler to check that, in calls to <code>my_memcpy</code>,
arguments <var>dest</var> and <var>src</var> are non-null.  If the compiler
determines that a null pointer is passed in an argument slot marked
as non-null, and the <option>-Wnonnull</option> option is enabled, a warning
is issued.  The compiler may also choose to make optimizations based
on the knowledge that certain function arguments will never be null.
</para>
<para>If no argument index list is given to the <code>nonnull</code> attribute,
all pointer arguments are marked as non-null.  To illustrate, the
following declaration is equivalent to the previous example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern void *
my_memcpy (void *dest, const void *src, size_t len)
        __attribute__((nonnull));
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">noreturn</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="453"><code>noreturn</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="454">functions that never return</indexterm></cindex>
<para>A few standard library functions, such as <code>abort</code> and <code>exit</code>,
cannot return.  GCC knows this automatically.  Some programs define
their own functions that never return.  You can declare them
<code>noreturn</code> to tell the compiler this fact.  For example,
</para>
<smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">void fatal () __attribute__ ((noreturn));

void
fatal (/* <r>&dots;</r> */)
&lbrace;
  /* <r>&dots;</r> */ /* <r>Print error message.</r> */ /* <r>&dots;</r> */
  exit (1);
&rbrace;
</pre></group>
</smallexample>

<para>The <code>noreturn</code> keyword tells the compiler to assume that
<code>fatal</code> cannot return.  It can then optimize without regard to what
would happen if <code>fatal</code> ever did return.  This makes slightly
better code.  More importantly, it helps avoid spurious warnings of
uninitialized variables.
</para>
<para>The <code>noreturn</code> keyword does not affect the exceptional path when that
applies: a <code>noreturn</code>-marked function may still return to the caller
by throwing an exception or calling <code>longjmp</code>.
</para>
<para>Do not assume that registers saved by the calling function are
restored before calling the <code>noreturn</code> function.
</para>
<para>It does not make sense for a <code>noreturn</code> function to have a return
type other than <code>void</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">nothrow</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="455"><code>nothrow</code> function attribute</indexterm></cindex>
<para>The <code>nothrow</code> attribute is used to inform the compiler that a
function cannot throw an exception.  For example, most functions in
the standard C library can be guaranteed not to throw an exception
with the notable exceptions of <code>qsort</code> and <code>bsearch</code> that
take function pointer arguments.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">optimize</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="456"><code>optimize</code> function attribute</indexterm></cindex>
<para>The <code>optimize</code> attribute is used to specify that a function is to
be compiled with different optimization options than specified on the
command line.  Arguments can either be numbers or strings.  Numbers
are assumed to be an optimization level.  Strings that begin with
<code>O</code> are assumed to be an optimization option, while other options
are assumed to be used with a <code>-f</code> prefix.  You can also use the
<samp>#pragma GCC optimize</samp> pragma to set the optimization options
that affect more than one function.
<xref label="Function-Specific-Option-Pragmas"><xrefnodename>Function Specific Option Pragmas</xrefnodename></xref>, for details about the
<samp>#pragma GCC optimize</samp> pragma.
</para>
<para>This can be used for instance to have frequently-executed functions
compiled with more aggressive optimization options that produce faster
and larger code, while other functions can be compiled with less
aggressive options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">pure</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="457"><code>pure</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="458">functions that have no side effects</indexterm></cindex>
<para>Many functions have no effects except the return value and their
return value depends only on the parameters and/or global variables.
Such a function can be subject
to common subexpression elimination and loop optimization just as an
arithmetic operator would be.  These functions should be declared
with the attribute <code>pure</code>.  For example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int square (int) __attribute__ ((pure));
</pre></smallexample>

<noindent></noindent>
<para>says that the hypothetical function <code>square</code> is safe to call
fewer times than the program says.
</para>
<para>Some of common examples of pure functions are <code>strlen</code> or <code>memcmp</code>.
Interesting non-pure functions are functions with infinite loops or those
depending on volatile memory or other system resource, that may change between
two consecutive calls (such as <code>feof</code> in a multithreading environment).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">returns_nonnull</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="459"><code>returns_nonnull</code> function attribute</indexterm></cindex>
<para>The <code>returns_nonnull</code> attribute specifies that the function
return value should be a non-null pointer.  For instance, the declaration:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern void *
mymalloc (size_t len) __attribute__((returns_nonnull));
</pre></smallexample>

<noindent></noindent>
<para>lets the compiler optimize callers based on the knowledge
that the return value will never be null.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">returns_twice</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="460"><code>returns_twice</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="461">functions that return more than once</indexterm></cindex>
<para>The <code>returns_twice</code> attribute tells the compiler that a function may
return more than one time.  The compiler ensures that all registers
are dead before calling such a function and emits a warning about
the variables that may be clobbered after the second return from the
function.  Examples of such functions are <code>setjmp</code> and <code>vfork</code>.
The <code>longjmp</code>-like counterpart of such function, if any, might need
to be marked with the <code>noreturn</code> attribute.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">section (&quot;<var>section-name</var>&quot;)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="462"><code>section</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="463">functions in arbitrary sections</indexterm></cindex>
<para>Normally, the compiler places the code it generates in the <code>text</code> section.
Sometimes, however, you need additional sections, or you need certain
particular functions to appear in special sections.  The <code>section</code>
attribute specifies that a function lives in a particular section.
For example, the declaration:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern void foobar (void) __attribute__ ((section (&quot;bar&quot;)));
</pre></smallexample>

<noindent></noindent>
<para>puts the function <code>foobar</code> in the <code>bar</code> section.
</para>
<para>Some file formats do not support arbitrary sections so the <code>section</code>
attribute is not available on all platforms.
If you need to map the entire contents of a module to a particular
section, consider using the facilities of the linker instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sentinel</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="464"><code>sentinel</code> function attribute</indexterm></cindex>
<para>This function attribute ensures that a parameter in a function call is
an explicit <code>NULL</code>.  The attribute is only valid on variadic
functions.  By default, the sentinel is located at position zero, the
last parameter of the function call.  If an optional integer position
argument P is supplied to the attribute, the sentinel must be located at
position P counting backwards from the end of the argument list.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">__attribute__ ((sentinel))
is equivalent to
__attribute__ ((sentinel(0)))
</pre></smallexample>

<para>The attribute is automatically set with a position of 0 for the built-in
functions <code>execl</code> and <code>execlp</code>.  The built-in function
<code>execle</code> has the attribute set with a position of 1.
</para>
<para>A valid <code>NULL</code> in this context is defined as zero with any pointer
type.  If your system defines the <code>NULL</code> macro with an integer type
then you need to add an explicit cast.  GCC replaces <code>stddef.h</code>
with a copy that redefines NULL appropriately.
</para>
<para>The warnings for missing or incorrect sentinels are enabled with
<option>-Wformat</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">stack_protect</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="465"><code>stack_protect</code> function attribute</indexterm></cindex>
<para>This function attribute make a stack protection of the function if 
flags <option>fstack-protector</option> or <option>fstack-protector-strong</option>
or <option>fstack-protector-explicit</option> are set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">target (<var>options</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="466"><code>target</code> function attribute</indexterm></cindex>
<para>Multiple target back ends implement the <code>target</code> attribute
to specify that a function is to
be compiled with different target options than specified on the
command line.  This can be used for instance to have functions
compiled with a different ISA (instruction set architecture) than the
default.  You can also use the <samp>#pragma GCC target</samp> pragma to set
more than one function to be compiled with specific target options.
<xref label="Function-Specific-Option-Pragmas"><xrefnodename>Function Specific Option Pragmas</xrefnodename></xref>, for details about the
<samp>#pragma GCC target</samp> pragma.
</para>
<para>For instance, on an x86, you could declare one function with the
<code>target(&quot;sse4.1,arch=core2&quot;)</code> attribute and another with
<code>target(&quot;sse4a,arch=amdfam10&quot;)</code>.  This is equivalent to
compiling the first function with <option>-msse4.1</option> and
<option>-march=core2</option> options, and the second function with
<option>-msse4a</option> and <option>-march=amdfam10</option> options.  It is up to you
to make sure that a function is only invoked on a machine that
supports the particular ISA it is compiled for (for example by using
<code>cpuid</code> on x86 to determine what feature bits and architecture
family are used).
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int core2_func (void) __attribute__ ((__target__ (&quot;arch=core2&quot;)));
int sse3_func (void) __attribute__ ((__target__ (&quot;sse3&quot;)));
</pre></smallexample>

<para>You can either use multiple
strings separated by commas to specify multiple options,
or separate the options with a comma (<samp>,</samp>) within a single string.
</para>
<para>The options supported are specific to each target; refer to <ref label="x86-Function-Attributes"><xrefnodename>x86
Function Attributes</xrefnodename></ref>, <ref label="PowerPC-Function-Attributes"><xrefnodename>PowerPC Function Attributes</xrefnodename></ref>, and
<ref label="Nios-II-Function-Attributes"><xrefnodename>Nios II Function Attributes</xrefnodename></ref>, for details.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">unused</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="467"><code>unused</code> function attribute</indexterm></cindex>
<para>This attribute, attached to a function, means that the function is meant
to be possibly unused.  GCC does not produce a warning for this
function.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">used</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="468"><code>used</code> function attribute</indexterm></cindex>
<para>This attribute, attached to a function, means that code must be emitted
for the function even if it appears that the function is not referenced.
This is useful, for example, when the function is referenced only in
inline assembly.
</para>
<para>When applied to a member function of a C++ class template, the
attribute also means that the function is instantiated if the
class itself is instantiated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">visibility (&quot;<var>visibility_type</var>&quot;)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="469"><code>visibility</code> function attribute</indexterm></cindex>
<para>This attribute affects the linkage of the declaration to which it is attached.
There are four supported <var>visibility_type</var> values: default,
hidden, protected or internal visibility.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void __attribute__ ((visibility (&quot;protected&quot;)))
f () &lbrace; /* <r>Do something.</r> */; &rbrace;
int i __attribute__ ((visibility (&quot;hidden&quot;)));
</pre></smallexample>

<para>The possible values of <var>visibility_type</var> correspond to the
visibility settings in the ELF gABI.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem><!-- c keep this list of visibilities in alphabetical order. -->

</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">default</itemformat></item>
</tableterm><tableitem><para>Default visibility is the normal case for the object file format.
This value is available for the visibility attribute to override other
options that may change the assumed visibility of entities.
</para>
<para>On ELF, default visibility means that the declaration is visible to other
modules and, in shared libraries, means that the declared entity may be
overridden.
</para>
<para>On Darwin, default visibility means that the declaration is visible to
other modules.
</para>
<para>Default visibility corresponds to &textldquo;external linkage&textrdquo; in the language.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">hidden</itemformat></item>
</tableterm><tableitem><para>Hidden visibility indicates that the entity declared has a new
form of linkage, which we call &textldquo;hidden linkage&textrdquo;.  Two
declarations of an object with hidden linkage refer to the same object
if they are in the same shared object.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">internal</itemformat></item>
</tableterm><tableitem><para>Internal visibility is like hidden visibility, but with additional
processor specific semantics.  Unless otherwise specified by the
psABI, GCC defines internal visibility to mean that a function is
<emph>never</emph> called from another module.  Compare this with hidden
functions which, while they cannot be referenced directly by other
modules, can be referenced indirectly via function pointers.  By
indicating that a function cannot be called from outside the module,
GCC may for instance omit the load of a PIC register since it is known
that the calling function loaded the correct value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">protected</itemformat></item>
</tableterm><tableitem><para>Protected visibility is like default visibility except that it
indicates that references within the defining module bind to the
definition in that module.  That is, the declared entity cannot be
overridden by another module.
</para>
</tableitem></tableentry></table>

<para>All visibilities are supported on many, but not all, ELF targets
(supported when the assembler supports the <samp>.visibility</samp>
pseudo-op).  Default visibility is supported everywhere.  Hidden
visibility is supported on Darwin targets.
</para>
<para>The visibility attribute should be applied only to declarations that
would otherwise have external linkage.  The attribute should be applied
consistently, so that the same entity should not be declared with
different settings of the attribute.
</para>
<para>In C++, the visibility attribute applies to types as well as functions
and objects, because in C++ types have linkage.  A class must not have
greater visibility than its non-static data member types and bases,
and class members default to the visibility of their class.  Also, a
declaration without explicit visibility is limited to the visibility
of its type.
</para>
<para>In C++, you can mark member functions and static member variables of a
class with the visibility attribute.  This is useful if you know a
particular method or static member variable should only be used from
one shared object; then you can mark it hidden while the rest of the
class has default visibility.  Care must be taken to avoid breaking
the One Definition Rule; for example, it is usually not useful to mark
an inline method as hidden without marking the whole class as hidden.
</para>
<para>A C++ namespace declaration can also have the visibility attribute.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">namespace nspace1 __attribute__ ((visibility (&quot;protected&quot;)))
&lbrace; /* <r>Do something.</r> */; &rbrace;
</pre></smallexample>

<para>This attribute applies only to the particular namespace body, not to
other definitions of the same namespace; it is equivalent to using
<samp>#pragma GCC visibility</samp> before and after the namespace
definition (<pxref label="Visibility-Pragmas"><xrefnodename>Visibility Pragmas</xrefnodename></pxref>).
</para>
<para>In C++, if a template argument has limited visibility, this
restriction is implicitly propagated to the template instantiation.
Otherwise, template instantiations and specializations default to the
visibility of their template.
</para>
<para>If both the template and enclosing class have explicit visibility, the
visibility from the template is used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">warn_unused_result</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="470"><code>warn_unused_result</code> function attribute</indexterm></cindex>
<para>The <code>warn_unused_result</code> attribute causes a warning to be emitted
if a caller of the function with this attribute does not use its
return value.  This is useful for functions where not checking
the result is either a security problem or always a bug, such as
<code>realloc</code>.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int fn () __attribute__ ((warn_unused_result));
int foo ()
&lbrace;
  if (fn () &lt; 0) return -1;
  fn ();
  return 0;
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>results in warning on line 5.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">weak</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="471"><code>weak</code> function attribute</indexterm></cindex>
<para>The <code>weak</code> attribute causes the declaration to be emitted as a weak
symbol rather than a global.  This is primarily useful in defining
library functions that can be overridden in user code, though it can
also be used with non-function declarations.  Weak symbols are supported
for ELF targets, and also for a.out targets when using the GNU assembler
and linker.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">weakref</itemformat></item>
<itemx spaces=" "><itemformat command="code">weakref (&quot;<var>target</var>&quot;)</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="472"><code>weakref</code> function attribute</indexterm></cindex>
<para>The <code>weakref</code> attribute marks a declaration as a weak reference.
Without arguments, it should be accompanied by an <code>alias</code> attribute
naming the target symbol.  Optionally, the <var>target</var> may be given as
an argument to <code>weakref</code> itself.  In either case, <code>weakref</code>
implicitly marks the declaration as <code>weak</code>.  Without a
<var>target</var>, given as an argument to <code>weakref</code> or to <code>alias</code>,
<code>weakref</code> is equivalent to <code>weak</code>.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">static int x() __attribute__ ((weakref (&quot;y&quot;)));
/* is equivalent to... */
static int x() __attribute__ ((weak, weakref, alias (&quot;y&quot;)));
/* and to... */
static int x() __attribute__ ((weakref));
static int x() __attribute__ ((alias (&quot;y&quot;)));
</pre></smallexample>

<para>A weak reference is an alias that does not by itself require a
definition to be given for the target symbol.  If the target symbol is
only referenced through weak references, then it becomes a <code>weak</code>
undefined symbol.  If it is directly referenced, however, then such
strong references prevail, and a definition is required for the
symbol, not necessarily in the same translation unit.
</para>
<para>The effect is equivalent to moving all references to the alias to a
separate translation unit, renaming the alias to the aliased symbol,
declaring it as weak, compiling the two separate translation units and
performing a reloadable link on them.
</para>
<para>At present, a declaration to which <code>weakref</code> is attached can
only be <code>static</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">lower</itemformat></item>
<itemx spaces=" "><itemformat command="code">upper</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">either</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="473">lower memory region on the MSP430</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="474">upper memory region on the MSP430</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="475">either memory region on the MSP430</indexterm></cindex>
<para>On the MSP430 target these attributes can be used to specify whether
the function or variable should be placed into low memory, high
memory, or the placement should be left to the linker to decide.  The
attributes are only significant if compiling for the MSP430X
architecture.
</para>
<para>The attributes work in conjunction with a linker script that has been
augmented to specify where to place sections with a <code>.lower</code> and
a <code>.upper</code> prefix.  So for example as well as placing the
<code>.data</code> section the script would also specify the placement of a
<code>.lower.data</code> and a <code>.upper.data</code> section.  The intention
being that <code>lower</code> sections are placed into a small but easier to
access memory region and the upper sections are placed into a larger, but
slower to access region.
</para>
<para>The <code>either</code> attribute is special.  It tells the linker to place
the object into the corresponding <code>lower</code> section if there is
room for it.  If there is insufficient room then the object is placed
into the corresponding <code>upper</code> section instead.  Note - the
placement algorithm is not very sophisticated.  It will not attempt to
find an optimal packing of the <code>lower</code> sections.  It just makes
one pass over the objects and does the best that it can.  Using the
<option>-ffunction-sections</option> and <option>-fdata-sections</option> command line
options can help the packing however, since they produce smaller,
easier to pack regions.
</para>
</tableitem></tableentry></table>

<!-- c This is the end of the target-independent attribute table -->


</subsection>
<node name="ARC-Function-Attributes" spaces=" "><nodename>ARC Function Attributes</nodename><nodenext automatic="on">ARM Function Attributes</nodenext><nodeprev automatic="on">Common Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>ARC Function Attributes</sectiontitle>

<para>These function attributes are supported by the ARC back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="476"><code>interrupt</code> function attribute, ARC</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para>
<para>On the ARC, you must specify the kind of interrupt to be handled
in a parameter to the interrupt attribute like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void f () __attribute__ ((interrupt (&quot;ilink1&quot;)));
</pre></smallexample>

<para>Permissible values for this parameter are: <w><code>ilink1</code></w> and
<w><code>ilink2</code></w>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">long_call</itemformat></item>
<itemx spaces=" "><itemformat command="code">medium_call</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">short_call</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="477"><code>long_call</code> function attribute, ARC</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="478"><code>medium_call</code> function attribute, ARC</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="479"><code>short_call</code> function attribute, ARC</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="480">indirect calls, ARC</indexterm></cindex>
<para>These attributes specify how a particular function is called.
These attributes override the
<option>-mlong-calls</option> and <option>-mmedium-calls</option> (<pxref label="ARC-Options"><xrefnodename>ARC Options</xrefnodename></pxref>)
command-line switches and <code>#pragma long_calls</code> settings.
</para>
<para>For ARC, a function marked with the <code>long_call</code> attribute is
always called using register-indirect jump-and-link instructions,
thereby enabling the called function to be placed anywhere within the
32-bit address space.  A function marked with the <code>medium_call</code>
attribute will always be close enough to be called with an unconditional
branch-and-link instruction, which has a 25-bit offset from
the call site.  A function marked with the <code>short_call</code>
attribute will always be close enough to be called with a conditional
branch-and-link instruction, which has a 21-bit offset from
the call site.
</para></tableitem></tableentry></table>

</subsection>
<node name="ARM-Function-Attributes" spaces=" "><nodename>ARM Function Attributes</nodename><nodenext automatic="on">AVR Function Attributes</nodenext><nodeprev automatic="on">ARC Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>ARM Function Attributes</sectiontitle>

<para>These function attributes are supported for ARM targets:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="481"><code>interrupt</code> function attribute, ARM</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para>
<para>You can specify the kind of interrupt to be handled by
adding an optional parameter to the interrupt attribute like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void f () __attribute__ ((interrupt (&quot;IRQ&quot;)));
</pre></smallexample>

<noindent></noindent>
<para>Permissible values for this parameter are: <code>IRQ</code>, <code>FIQ</code>,
<code>SWI</code>, <code>ABORT</code> and <code>UNDEF</code>.
</para>
<para>On ARMv7-M the interrupt type is ignored, and the attribute means the function
may be called with a word-aligned stack pointer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">isr</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="482"><code>isr</code> function attribute, ARM</indexterm></cindex>
<para>Use this attribute on ARM to write Interrupt Service Routines. This is an
alias to the <code>interrupt</code> attribute above.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">long_call</itemformat></item>
<itemx spaces=" "><itemformat command="code">short_call</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="483"><code>long_call</code> function attribute, ARM</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="484"><code>short_call</code> function attribute, ARM</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="485">indirect calls, ARM</indexterm></cindex>
<para>These attributes specify how a particular function is called.
These attributes override the
<option>-mlong-calls</option> (<pxref label="ARM-Options"><xrefnodename>ARM Options</xrefnodename></pxref>)
command-line switch and <code>#pragma long_calls</code> settings.  For ARM, the
<code>long_call</code> attribute indicates that the function might be far
away from the call site and require a different (more expensive)
calling sequence.   The <code>short_call</code> attribute always places
the offset to the function from the call site into the <samp>BL</samp>
instruction directly.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">naked</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="486"><code>naked</code> function attribute, ARM</indexterm></cindex>
<para>This attribute allows the compiler to construct the
requisite function declaration, while allowing the body of the
function to be assembly code. The specified function will not have
prologue/epilogue sequences generated by the compiler. Only basic
<code>asm</code> statements can safely be included in naked functions
(<pxref label="Basic-Asm"><xrefnodename>Basic Asm</xrefnodename></pxref>). While using extended <code>asm</code> or a mixture of
basic <code>asm</code> and C code may appear to work, they cannot be
depended upon to work reliably and are not supported.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">pcs</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="487"><code>pcs</code> function attribute, ARM</indexterm></cindex>

<para>The <code>pcs</code> attribute can be used to control the calling convention
used for a function on ARM.  The attribute takes an argument that specifies
the calling convention to use.
</para>
<para>When compiling using the AAPCS ABI (or a variant of it) then valid
values for the argument are <code>&quot;aapcs&quot;</code> and <code>&quot;aapcs-vfp&quot;</code>.  In
order to use a variant other than <code>&quot;aapcs&quot;</code> then the compiler must
be permitted to use the appropriate co-processor registers (i.e., the
VFP registers must be available in order to use <code>&quot;aapcs-vfp&quot;</code>).
For example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">/* Argument passed in r0, and result returned in r0+r1.  */
double f2d (float) __attribute__((pcs(&quot;aapcs&quot;)));
</pre></smallexample>

<para>Variadic functions always use the <code>&quot;aapcs&quot;</code> calling convention and
the compiler rejects attempts to specify an alternative.
</para></tableitem></tableentry></table>

</subsection>
<node name="AVR-Function-Attributes" spaces=" "><nodename>AVR Function Attributes</nodename><nodenext automatic="on">Blackfin Function Attributes</nodenext><nodeprev automatic="on">ARM Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>AVR Function Attributes</sectiontitle>

<para>These function attributes are supported by the AVR back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="488"><code>interrupt</code> function attribute, AVR</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para>
<para>On the AVR, the hardware globally disables interrupts when an
interrupt is executed.  The first instruction of an interrupt handler
declared with this attribute is a <code>SEI</code> instruction to
re-enable interrupts.  See also the <code>signal</code> function attribute
that does not insert a <code>SEI</code> instruction.  If both <code>signal</code> and
<code>interrupt</code> are specified for the same function, <code>signal</code>
is silently ignored.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">naked</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="489"><code>naked</code> function attribute, AVR</indexterm></cindex>
<para>This attribute allows the compiler to construct the
requisite function declaration, while allowing the body of the
function to be assembly code. The specified function will not have
prologue/epilogue sequences generated by the compiler. Only basic
<code>asm</code> statements can safely be included in naked functions
(<pxref label="Basic-Asm"><xrefnodename>Basic Asm</xrefnodename></pxref>). While using extended <code>asm</code> or a mixture of
basic <code>asm</code> and C code may appear to work, they cannot be
depended upon to work reliably and are not supported.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">OS_main</itemformat></item>
<itemx spaces=" "><itemformat command="code">OS_task</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="490"><code>OS_main</code> function attribute, AVR</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="491"><code>OS_task</code> function attribute, AVR</indexterm></cindex>
<para>On AVR, functions with the <code>OS_main</code> or <code>OS_task</code> attribute
do not save/restore any call-saved register in their prologue/epilogue.
</para>
<para>The <code>OS_main</code> attribute can be used when there <emph>is
guarantee</emph> that interrupts are disabled at the time when the function
is entered.  This saves resources when the stack pointer has to be
changed to set up a frame for local variables.
</para>
<para>The <code>OS_task</code> attribute can be used when there is <emph>no
guarantee</emph> that interrupts are disabled at that time when the function
is entered like for, e&eosperiod;g&eosperiod; task functions in a multi-threading operating
system. In that case, changing the stack pointer register is
guarded by save/clear/restore of the global interrupt enable flag.
</para>
<para>The differences to the <code>naked</code> function attribute are:
</para><itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem spaces=" "><prepend>&bullet;</prepend><para><code>naked</code> functions do not have a return instruction whereas 
<code>OS_main</code> and <code>OS_task</code> functions have a <code>RET</code> or
<code>RETI</code> return instruction.
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>naked</code> functions do not set up a frame for local variables
or a frame pointer whereas <code>OS_main</code> and <code>OS_task</code> do this
as needed.
</para></listitem></itemize>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">signal</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="492"><code>signal</code> function attribute, AVR</indexterm></cindex>
<para>Use this attribute on the AVR to indicate that the specified
function is an interrupt handler.  The compiler generates function
entry and exit sequences suitable for use in an interrupt handler when this
attribute is present.
</para>
<para>See also the <code>interrupt</code> function attribute. 
</para>
<para>The AVR hardware globally disables interrupts when an interrupt is executed.
Interrupt handler functions defined with the <code>signal</code> attribute
do not re-enable interrupts.  It is save to enable interrupts in a
<code>signal</code> handler.  This &textldquo;save&textrdquo; only applies to the code
generated by the compiler and not to the IRQ layout of the
application which is responsibility of the application.
</para>
<para>If both <code>signal</code> and <code>interrupt</code> are specified for the same
function, <code>signal</code> is silently ignored.
</para></tableitem></tableentry></table>

</subsection>
<node name="Blackfin-Function-Attributes" spaces=" "><nodename>Blackfin Function Attributes</nodename><nodenext automatic="on">CR16 Function Attributes</nodenext><nodeprev automatic="on">AVR Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Blackfin Function Attributes</sectiontitle>

<para>These function attributes are supported by the Blackfin back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">exception_handler</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="493"><code>exception_handler</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="494">exception handler functions, Blackfin</indexterm></cindex>
<para>Use this attribute on the Blackfin to indicate that the specified function
is an exception handler.  The compiler generates function entry and
exit sequences suitable for use in an exception handler when this
attribute is present.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt_handler</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="495"><code>interrupt_handler</code> function attribute, Blackfin</indexterm></cindex>
<para>Use this attribute to
indicate that the specified function is an interrupt handler.  The compiler
generates function entry and exit sequences suitable for use in an
interrupt handler when this attribute is present.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">kspisusp</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="496"><code>kspisusp</code> function attribute, Blackfin</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="497">User stack pointer in interrupts on the Blackfin</indexterm></cindex>
<para>When used together with <code>interrupt_handler</code>, <code>exception_handler</code>
or <code>nmi_handler</code>, code is generated to load the stack pointer
from the USP register in the function prologue.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l1_text</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="498"><code>l1_text</code> function attribute, Blackfin</indexterm></cindex>
<para>This attribute specifies a function to be placed into L1 Instruction
SRAM&eosperiod; The function is put into a specific section named <code>.l1.text</code>.
With <option>-mfdpic</option>, function calls with a such function as the callee
or caller uses inlined PLT.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l2</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="499"><code>l2</code> function attribute, Blackfin</indexterm></cindex>
<para>This attribute specifies a function to be placed into L2
SRAM. The function is put into a specific section named
<code>.l2.text</code>. With <option>-mfdpic</option>, callers of such functions use
an inlined PLT.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">longcall</itemformat></item>
<itemx spaces=" "><itemformat command="code">shortcall</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="500">indirect calls, Blackfin</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="501"><code>longcall</code> function attribute, Blackfin</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="502"><code>shortcall</code> function attribute, Blackfin</indexterm></cindex>
<para>The <code>longcall</code> attribute
indicates that the function might be far away from the call site and
require a different (more expensive) calling sequence.  The
<code>shortcall</code> attribute indicates that the function is always close
enough for the shorter calling sequence to be used.  These attributes
override the <option>-mlongcall</option> switch.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">nesting</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="503"><code>nesting</code> function attribute, Blackfin</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="504">Allow nesting in an interrupt handler on the Blackfin processor</indexterm></cindex>
<para>Use this attribute together with <code>interrupt_handler</code>,
<code>exception_handler</code> or <code>nmi_handler</code> to indicate that the function
entry code should enable nested interrupts or exceptions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">nmi_handler</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="505"><code>nmi_handler</code> function attribute, Blackfin</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="506">NMI handler functions on the Blackfin processor</indexterm></cindex>
<para>Use this attribute on the Blackfin to indicate that the specified function
is an NMI handler.  The compiler generates function entry and
exit sequences suitable for use in an NMI handler when this
attribute is present.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">saveall</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="507"><code>saveall</code> function attribute, Blackfin</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="508">save all registers on the Blackfin</indexterm></cindex>
<para>Use this attribute to indicate that
all registers except the stack pointer should be saved in the prologue
regardless of whether they are used or not.
</para></tableitem></tableentry></table>

</subsection>
<node name="CR16-Function-Attributes" spaces=" "><nodename>CR16 Function Attributes</nodename><nodenext automatic="on">Epiphany Function Attributes</nodenext><nodeprev automatic="on">Blackfin Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>CR16 Function Attributes</sectiontitle>

<para>These function attributes are supported by the CR16 back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="509"><code>interrupt</code> function attribute, CR16</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para></tableitem></tableentry></table>

</subsection>
<node name="Epiphany-Function-Attributes" spaces=" "><nodename>Epiphany Function Attributes</nodename><nodenext automatic="on">H8/300 Function Attributes</nodenext><nodeprev automatic="on">CR16 Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Epiphany Function Attributes</sectiontitle>

<para>These function attributes are supported by the Epiphany back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">disinterrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="510"><code>disinterrupt</code> function attribute, Epiphany</indexterm></cindex>
<para>This attribute causes the compiler to emit
instructions to disable interrupts for the duration of the given
function.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">forwarder_section</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="511"><code>forwarder_section</code> function attribute, Epiphany</indexterm></cindex>
<para>This attribute modifies the behavior of an interrupt handler.
The interrupt handler may be in external memory which cannot be
reached by a branch instruction, so generate a local memory trampoline
to transfer control.  The single parameter identifies the section where
the trampoline is placed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="512"><code>interrupt</code> function attribute, Epiphany</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.  It may also generate
a special section with code to initialize the interrupt vector table.
</para>
<para>On Epiphany targets one or more optional parameters can be added like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void __attribute__ ((interrupt (&quot;dma0, dma1&quot;))) universal_dma_handler ();
</pre></smallexample>

<para>Permissible values for these parameters are: <w><code>reset</code></w>,
<w><code>software_exception</code></w>, <w><code>page_miss</code></w>,
<w><code>timer0</code></w>, <w><code>timer1</code></w>, <w><code>message</code></w>,
<w><code>dma0</code></w>, <w><code>dma1</code></w>, <w><code>wand</code></w> and <w><code>swi</code></w>.
Multiple parameters indicate that multiple entries in the interrupt
vector table should be initialized for this function, i.e.&noeos; for each
parameter <w><var>name</var></w>, a jump to the function is emitted in
the section <w>ivt_entry_<var>name</var></w>.  The parameter(s) may be omitted
entirely, in which case no interrupt vector table entry is provided.
</para>
<para>Note that interrupts are enabled inside the function
unless the <code>disinterrupt</code> attribute is also specified.
</para>
<para>The following examples are all valid uses of these attributes on
Epiphany targets:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">void __attribute__ ((interrupt)) universal_handler ();
void __attribute__ ((interrupt (&quot;dma1&quot;))) dma1_handler ();
void __attribute__ ((interrupt (&quot;dma0, dma1&quot;))) 
  universal_dma_handler ();
void __attribute__ ((interrupt (&quot;timer0&quot;), disinterrupt))
  fast_timer_handler ();
void __attribute__ ((interrupt (&quot;dma0, dma1&quot;), 
                     forwarder_section (&quot;tramp&quot;)))
  external_dma_handler ();
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">long_call</itemformat></item>
<itemx spaces=" "><itemformat command="code">short_call</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="513"><code>long_call</code> function attribute, Epiphany</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="514"><code>short_call</code> function attribute, Epiphany</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="515">indirect calls, Epiphany</indexterm></cindex>
<para>These attributes specify how a particular function is called.
These attributes override the
<option>-mlong-calls</option> (<pxref label="Adapteva-Epiphany-Options"><xrefnodename>Adapteva Epiphany Options</xrefnodename></pxref>)
command-line switch and <code>#pragma long_calls</code> settings.
</para></tableitem></tableentry></table>


</subsection>
<node name="H8_002f300-Function-Attributes" spaces=" "><nodename>H8/300 Function Attributes</nodename><nodenext automatic="on">IA-64 Function Attributes</nodenext><nodeprev automatic="on">Epiphany Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>H8/300 Function Attributes</sectiontitle>

<para>These function attributes are available for H8/300 targets:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">function_vector</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="516"><code>function_vector</code> function attribute, H8/300</indexterm></cindex>
<para>Use this attribute on the H8/300, H8/300H, and H8S to indicate 
that the specified function should be called through the function vector.
Calling a function through the function vector reduces code size; however,
the function vector has a limited size (maximum 128 entries on the H8/300
and 64 entries on the H8/300H and H8S)
and shares space with the interrupt vector.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt_handler</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="517"><code>interrupt_handler</code> function attribute, H8/300</indexterm></cindex>
<para>Use this attribute on the H8/300, H8/300H, and H8S to
indicate that the specified function is an interrupt handler.  The compiler
generates function entry and exit sequences suitable for use in an
interrupt handler when this attribute is present.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">saveall</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="518"><code>saveall</code> function attribute, H8/300</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="519">save all registers on the H8/300, H8/300H, and H8S</indexterm></cindex>
<para>Use this attribute on the H8/300, H8/300H, and H8S to indicate that
all registers except the stack pointer should be saved in the prologue
regardless of whether they are used or not.
</para></tableitem></tableentry></table>

</subsection>
<node name="IA_002d64-Function-Attributes" spaces=" "><nodename>IA-64 Function Attributes</nodename><nodenext automatic="on">M32C Function Attributes</nodenext><nodeprev automatic="on">H8/300 Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>IA-64 Function Attributes</sectiontitle>

<para>These function attributes are supported on IA-64 targets:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">syscall_linkage</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="520"><code>syscall_linkage</code> function attribute, IA-64</indexterm></cindex>
<para>This attribute is used to modify the IA-64 calling convention by marking
all input registers as live at all function exits.  This makes it possible
to restart a system call after an interrupt without having to save/restore
the input registers.  This also prevents kernel data from leaking into
application code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">version_id</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="521"><code>version_id</code> function attribute, IA-64</indexterm></cindex>
<para>This IA-64 HP-UX attribute, attached to a global variable or function, renames a
symbol to contain a version string, thus allowing for function level
versioning.  HP-UX system header files may use function level versioning
for some system calls.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern int foo () __attribute__((version_id (&quot;20040821&quot;)));
</pre></smallexample>

<noindent></noindent>
<para>Calls to <code>foo</code> are mapped to calls to <code>foo&lbrace;20040821&rbrace;</code>.
</para></tableitem></tableentry></table>

</subsection>
<node name="M32C-Function-Attributes" spaces=" "><nodename>M32C Function Attributes</nodename><nodenext automatic="on">M32R/D Function Attributes</nodenext><nodeprev automatic="on">IA-64 Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>M32C Function Attributes</sectiontitle>

<para>These function attributes are supported by the M32C back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">bank_switch</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="522"><code>bank_switch</code> function attribute, M32C</indexterm></cindex>
<para>When added to an interrupt handler with the M32C port, causes the
prologue and epilogue to use bank switching to preserve the registers
rather than saving them on the stack.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">fast_interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="523"><code>fast_interrupt</code> function attribute, M32C</indexterm></cindex>
<para>Use this attribute on the M32C port to indicate that the specified
function is a fast interrupt handler.  This is just like the
<code>interrupt</code> attribute, except that <code>freit</code> is used to return
instead of <code>reit</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">function_vector</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="524"><code>function_vector</code> function attribute, M16C/M32C</indexterm></cindex>
<para>On M16C/M32C targets, the <code>function_vector</code> attribute declares a
special page subroutine call function. Use of this attribute reduces
the code size by 2 bytes for each call generated to the
subroutine. The argument to the attribute is the vector number entry
from the special page vector table which contains the 16 low-order
bits of the subroutine&textrsquo;s entry address. Each vector table has special
page number (18 to 255) that is used in <code>jsrs</code> instructions.
Jump addresses of the routines are generated by adding 0x0F0000 (in
case of M16C targets) or 0xFF0000 (in case of M32C targets), to the
2-byte addresses set in the vector table. Therefore you need to ensure
that all the special page vector routines should get mapped within the
address range 0x0F0000 to 0x0FFFFF (for M16C) and 0xFF0000 to 0xFFFFFF
(for M32C).
</para>
<para>In the following example 2 bytes are saved for each call to
function <code>foo</code>.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void foo (void) __attribute__((function_vector(0x18)));
void foo (void)
&lbrace;
&rbrace;

void bar (void)
&lbrace;
    foo();
&rbrace;
</pre></smallexample>

<para>If functions are defined in one file and are called in another file,
then be sure to write this declaration in both files.
</para>
<para>This attribute is ignored for R8C target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="525"><code>interrupt</code> function attribute, M32C</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para></tableitem></tableentry></table>

</subsection>
<node name="M32R_002fD-Function-Attributes" spaces=" "><nodename>M32R/D Function Attributes</nodename><nodenext automatic="on">m68k Function Attributes</nodenext><nodeprev automatic="on">M32C Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>M32R/D Function Attributes</sectiontitle>

<para>These function attributes are supported by the M32R/D back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="526"><code>interrupt</code> function attribute, M32R/D</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">model (<var>model-name</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="527"><code>model</code> function attribute, M32R/D</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="528">function addressability on the M32R/D</indexterm></cindex>

<para>On the M32R/D, use this attribute to set the addressability of an
object, and of the code generated for a function.  The identifier
<var>model-name</var> is one of <code>small</code>, <code>medium</code>, or
<code>large</code>, representing each of the code models.
</para>
<para>Small model objects live in the lower 16MB of memory (so that their
addresses can be loaded with the <code>ld24</code> instruction), and are
callable with the <code>bl</code> instruction.
</para>
<para>Medium model objects may live anywhere in the 32-bit address space (the
compiler generates <code>seth/add3</code> instructions to load their addresses),
and are callable with the <code>bl</code> instruction.
</para>
<para>Large model objects may live anywhere in the 32-bit address space (the
compiler generates <code>seth/add3</code> instructions to load their addresses),
and may not be reachable with the <code>bl</code> instruction (the compiler
generates the much slower <code>seth/add3/jl</code> instruction sequence).
</para></tableitem></tableentry></table>

</subsection>
<node name="m68k-Function-Attributes" spaces=" "><nodename>m68k Function Attributes</nodename><nodenext automatic="on">MCORE Function Attributes</nodenext><nodeprev automatic="on">M32R/D Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>m68k Function Attributes</sectiontitle>

<para>These function attributes are supported by the m68k back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
<itemx spaces=" "><itemformat command="code">interrupt_handler</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="529"><code>interrupt</code> function attribute, m68k</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="530"><code>interrupt_handler</code> function attribute, m68k</indexterm></cindex>
<para>Use this attribute to
indicate that the specified function is an interrupt handler.  The compiler
generates function entry and exit sequences suitable for use in an
interrupt handler when this attribute is present.  Either name may be used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt_thread</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="531"><code>interrupt_thread</code> function attribute, fido</indexterm></cindex>
<para>Use this attribute on fido, a subarchitecture of the m68k, to indicate
that the specified function is an interrupt handler that is designed
to run as a thread.  The compiler omits generate prologue/epilogue
sequences and replaces the return instruction with a <code>sleep</code>
instruction.  This attribute is available only on fido.
</para></tableitem></tableentry></table>

</subsection>
<node name="MCORE-Function-Attributes" spaces=" "><nodename>MCORE Function Attributes</nodename><nodenext automatic="on">MeP Function Attributes</nodenext><nodeprev automatic="on">m68k Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>MCORE Function Attributes</sectiontitle>

<para>These function attributes are supported by the MCORE back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">naked</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="532"><code>naked</code> function attribute, MCORE</indexterm></cindex>
<para>This attribute allows the compiler to construct the
requisite function declaration, while allowing the body of the
function to be assembly code. The specified function will not have
prologue/epilogue sequences generated by the compiler. Only basic
<code>asm</code> statements can safely be included in naked functions
(<pxref label="Basic-Asm"><xrefnodename>Basic Asm</xrefnodename></pxref>). While using extended <code>asm</code> or a mixture of
basic <code>asm</code> and C code may appear to work, they cannot be
depended upon to work reliably and are not supported.
</para></tableitem></tableentry></table>

</subsection>
<node name="MeP-Function-Attributes" spaces=" "><nodename>MeP Function Attributes</nodename><nodenext automatic="on">MicroBlaze Function Attributes</nodenext><nodeprev automatic="on">MCORE Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>MeP Function Attributes</sectiontitle>

<para>These function attributes are supported by the MeP back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">disinterrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="533"><code>disinterrupt</code> function attribute, MeP</indexterm></cindex>
<para>On MeP targets, this attribute causes the compiler to emit
instructions to disable interrupts for the duration of the given
function.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="534"><code>interrupt</code> function attribute, MeP</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">near</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="535"><code>near</code> function attribute, MeP</indexterm></cindex>
<para>This attribute causes the compiler to assume the called
function is close enough to use the normal calling convention,
overriding the <option>-mtf</option> command-line option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">far</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="536"><code>far</code> function attribute, MeP</indexterm></cindex>
<para>On MeP targets this causes the compiler to use a calling convention
that assumes the called function is too far away for the built-in
addressing modes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">vliw</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="537"><code>vliw</code> function attribute, MeP</indexterm></cindex>
<para>The <code>vliw</code> attribute tells the compiler to emit
instructions in VLIW mode instead of core mode.  Note that this
attribute is not allowed unless a VLIW coprocessor has been configured
and enabled through command-line options.
</para></tableitem></tableentry></table>

</subsection>
<node name="MicroBlaze-Function-Attributes" spaces=" "><nodename>MicroBlaze Function Attributes</nodename><nodenext automatic="on">Microsoft Windows Function Attributes</nodenext><nodeprev automatic="on">MeP Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>MicroBlaze Function Attributes</sectiontitle>

<para>These function attributes are supported on MicroBlaze targets:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">save_volatiles</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="538"><code>save_volatiles</code> function attribute, MicroBlaze</indexterm></cindex>
<para>Use this attribute to indicate that the function is
an interrupt handler.  All volatile registers (in addition to non-volatile
registers) are saved in the function prologue.  If the function is a leaf
function, only volatiles used by the function are saved.  A normal function
return is generated instead of a return from interrupt.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">break_handler</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="539"><code>break_handler</code> function attribute, MicroBlaze</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="540">break handler functions</indexterm></cindex>
<para>Use this attribute to indicate that
the specified function is a break handler.  The compiler generates function
entry and exit sequences suitable for use in an break handler when this
attribute is present. The return from <code>break_handler</code> is done through
the <code>rtbd</code> instead of <code>rtsd</code>.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void f () __attribute__ ((break_handler));
</pre></smallexample>
</tableitem></tableentry></table>

</subsection>
<node name="Microsoft-Windows-Function-Attributes" spaces=" "><nodename>Microsoft Windows Function Attributes</nodename><nodenext automatic="on">MIPS Function Attributes</nodenext><nodeprev automatic="on">MicroBlaze Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Microsoft Windows Function Attributes</sectiontitle>

<para>The following attributes are available on Microsoft Windows and Symbian OS
targets.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">dllexport</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="541"><code>dllexport</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="542"><code>__declspec(dllexport)</code></indexterm></cindex>
<para>On Microsoft Windows targets and Symbian OS targets the
<code>dllexport</code> attribute causes the compiler to provide a global
pointer to a pointer in a DLL, so that it can be referenced with the
<code>dllimport</code> attribute.  On Microsoft Windows targets, the pointer
name is formed by combining <code>_imp__</code> and the function or variable
name.
</para>
<para>You can use <code>__declspec(dllexport)</code> as a synonym for
<code>__attribute__ ((dllexport))</code> for compatibility with other
compilers.
</para>
<para>On systems that support the <code>visibility</code> attribute, this
attribute also implies &textldquo;default&textrdquo; visibility.  It is an error to
explicitly specify any other visibility.
</para>
<para>GCC&textrsquo;s default behavior is to emit all inline functions with the
<code>dllexport</code> attribute.  Since this can cause object file-size bloat,
you can use <option>-fno-keep-inline-dllexport</option>, which tells GCC to
ignore the attribute for inlined functions unless the 
<option>-fkeep-inline-functions</option> flag is used instead.
</para>
<para>The attribute is ignored for undefined symbols.
</para>
<para>When applied to C++ classes, the attribute marks defined non-inlined
member functions and static data members as exports.  Static consts
initialized in-class are not marked unless they are also defined
out-of-class.
</para>
<para>For Microsoft Windows targets there are alternative methods for
including the symbol in the DLL&textrsquo;s export table such as using a
<file>.def</file> file with an <code>EXPORTS</code> section or, with GNU ld, using
the <option>--export-all</option> linker flag.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">dllimport</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="543"><code>dllimport</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="544"><code>__declspec(dllimport)</code></indexterm></cindex>
<para>On Microsoft Windows and Symbian OS targets, the <code>dllimport</code>
attribute causes the compiler to reference a function or variable via
a global pointer to a pointer that is set up by the DLL exporting the
symbol.  The attribute implies <code>extern</code>.  On Microsoft Windows
targets, the pointer name is formed by combining <code>_imp__</code> and the
function or variable name.
</para>
<para>You can use <code>__declspec(dllimport)</code> as a synonym for
<code>__attribute__ ((dllimport))</code> for compatibility with other
compilers.
</para>
<para>On systems that support the <code>visibility</code> attribute, this
attribute also implies &textldquo;default&textrdquo; visibility.  It is an error to
explicitly specify any other visibility.
</para>
<para>Currently, the attribute is ignored for inlined functions.  If the
attribute is applied to a symbol <emph>definition</emph>, an error is reported.
If a symbol previously declared <code>dllimport</code> is later defined, the
attribute is ignored in subsequent references, and a warning is emitted.
The attribute is also overridden by a subsequent declaration as
<code>dllexport</code>.
</para>
<para>When applied to C++ classes, the attribute marks non-inlined
member functions and static data members as imports.  However, the
attribute is ignored for virtual methods to allow creation of vtables
using thunks.
</para>
<para>On the SH Symbian OS target the <code>dllimport</code> attribute also has
another affect&textmdash;it can cause the vtable and run-time type information
for a class to be exported.  This happens when the class has a
dllimported constructor or a non-inline, non-pure virtual function
and, for either of those two conditions, the class also has an inline
constructor or destructor and has a key function that is defined in
the current translation unit.
</para>
<para>For Microsoft Windows targets the use of the <code>dllimport</code>
attribute on functions is not necessary, but provides a small
performance benefit by eliminating a thunk in the DLL&eosperiod;  The use of the
<code>dllimport</code> attribute on imported variables can be avoided by passing the
<option>--enable-auto-import</option> switch to the GNU linker.  As with
functions, using the attribute for a variable eliminates a thunk in
the DLL&eosperiod;
</para>
<para>One drawback to using this attribute is that a pointer to a
<emph>variable</emph> marked as <code>dllimport</code> cannot be used as a constant
address. However, a pointer to a <emph>function</emph> with the
<code>dllimport</code> attribute can be used as a constant initializer; in
this case, the address of a stub function in the import lib is
referenced.  On Microsoft Windows targets, the attribute can be disabled
for functions by setting the <option>-mnop-fun-dllimport</option> flag.
</para></tableitem></tableentry></table>

</subsection>
<node name="MIPS-Function-Attributes" spaces=" "><nodename>MIPS Function Attributes</nodename><nodenext automatic="on">MSP430 Function Attributes</nodenext><nodeprev automatic="on">Microsoft Windows Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>MIPS Function Attributes</sectiontitle>

<para>These function attributes are supported by the MIPS back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="545"><code>interrupt</code> function attribute, MIPS</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para>
<para>You can use the following attributes to modify the behavior
of an interrupt handler:
</para><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">use_shadow_register_set</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="546"><code>use_shadow_register_set</code> function attribute, MIPS</indexterm></cindex>
<para>Assume that the handler uses a shadow register set, instead of
the main general-purpose registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">keep_interrupts_masked</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="547"><code>keep_interrupts_masked</code> function attribute, MIPS</indexterm></cindex>
<para>Keep interrupts masked for the whole function.  Without this attribute,
GCC tries to reenable interrupts for as much of the function as it can.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">use_debug_exception_return</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="548"><code>use_debug_exception_return</code> function attribute, MIPS</indexterm></cindex>
<para>Return using the <code>deret</code> instruction.  Interrupt handlers that don&textrsquo;t
have this attribute return using <code>eret</code> instead.
</para></tableitem></tableentry></table>

<para>You can use any combination of these attributes, as shown below:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">void __attribute__ ((interrupt)) v0 ();
void __attribute__ ((interrupt, use_shadow_register_set)) v1 ();
void __attribute__ ((interrupt, keep_interrupts_masked)) v2 ();
void __attribute__ ((interrupt, use_debug_exception_return)) v3 ();
void __attribute__ ((interrupt, use_shadow_register_set,
                     keep_interrupts_masked)) v4 ();
void __attribute__ ((interrupt, use_shadow_register_set,
                     use_debug_exception_return)) v5 ();
void __attribute__ ((interrupt, keep_interrupts_masked,
                     use_debug_exception_return)) v6 ();
void __attribute__ ((interrupt, use_shadow_register_set,
                     keep_interrupts_masked,
                     use_debug_exception_return)) v7 ();
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">long_call</itemformat></item>
<itemx spaces=" "><itemformat command="code">near</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">far</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="549">indirect calls, MIPS</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="550"><code>long_call</code> function attribute, MIPS</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="551"><code>near</code> function attribute, MIPS</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="552"><code>far</code> function attribute, MIPS</indexterm></cindex>
<para>These attributes specify how a particular function is called on MIPS&eosperiod;
The attributes override the <option>-mlong-calls</option> (<pxref label="MIPS-Options"><xrefnodename>MIPS Options</xrefnodename></pxref>)
command-line switch.  The <code>long_call</code> and <code>far</code> attributes are
synonyms, and cause the compiler to always call
the function by first loading its address into a register, and then using
the contents of that register.  The <code>near</code> attribute has the opposite
effect; it specifies that non-PIC calls should be made using the more
efficient <code>jal</code> instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">mips16</itemformat></item>
<itemx spaces=" "><itemformat command="code">nomips16</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="553"><code>mips16</code> function attribute, MIPS</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="554"><code>nomips16</code> function attribute, MIPS</indexterm></cindex>

<para>On MIPS targets, you can use the <code>mips16</code> and <code>nomips16</code>
function attributes to locally select or turn off MIPS16 code generation.
A function with the <code>mips16</code> attribute is emitted as MIPS16 code,
while MIPS16 code generation is disabled for functions with the
<code>nomips16</code> attribute.  These attributes override the
<option>-mips16</option> and <option>-mno-mips16</option> options on the command line
(<pxref label="MIPS-Options"><xrefnodename>MIPS Options</xrefnodename></pxref>).
</para>
<para>When compiling files containing mixed MIPS16 and non-MIPS16 code, the
preprocessor symbol <code>__mips16</code> reflects the setting on the command line,
not that within individual functions.  Mixed MIPS16 and non-MIPS16 code
may interact badly with some GCC extensions such as <code>__builtin_apply</code>
(<pxref label="Constructing-Calls"><xrefnodename>Constructing Calls</xrefnodename></pxref>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">micromips, MIPS</itemformat></item>
<itemx spaces=" "><itemformat command="code">nomicromips, MIPS</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="555"><code>micromips</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="556"><code>nomicromips</code> function attribute</indexterm></cindex>

<para>On MIPS targets, you can use the <code>micromips</code> and <code>nomicromips</code>
function attributes to locally select or turn off microMIPS code generation.
A function with the <code>micromips</code> attribute is emitted as microMIPS code,
while microMIPS code generation is disabled for functions with the
<code>nomicromips</code> attribute.  These attributes override the
<option>-mmicromips</option> and <option>-mno-micromips</option> options on the command line
(<pxref label="MIPS-Options"><xrefnodename>MIPS Options</xrefnodename></pxref>).
</para>
<para>When compiling files containing mixed microMIPS and non-microMIPS code, the
preprocessor symbol <code>__mips_micromips</code> reflects the setting on the
command line,
not that within individual functions.  Mixed microMIPS and non-microMIPS code
may interact badly with some GCC extensions such as <code>__builtin_apply</code>
(<pxref label="Constructing-Calls"><xrefnodename>Constructing Calls</xrefnodename></pxref>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">nocompression</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="557"><code>nocompression</code> function attribute, MIPS</indexterm></cindex>
<para>On MIPS targets, you can use the <code>nocompression</code> function attribute
to locally turn off MIPS16 and microMIPS code generation.  This attribute
overrides the <option>-mips16</option> and <option>-mmicromips</option> options on the
command line (<pxref label="MIPS-Options"><xrefnodename>MIPS Options</xrefnodename></pxref>).
</para></tableitem></tableentry></table>

</subsection>
<node name="MSP430-Function-Attributes" spaces=" "><nodename>MSP430 Function Attributes</nodename><nodenext automatic="on">NDS32 Function Attributes</nodenext><nodeprev automatic="on">MIPS Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>MSP430 Function Attributes</sectiontitle>

<para>These function attributes are supported by the MSP430 back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">critical</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="558"><code>critical</code> function attribute, MSP430</indexterm></cindex>
<para>Critical functions disable interrupts upon entry and restore the
previous interrupt state upon exit.  Critical functions cannot also
have the <code>naked</code> or <code>reentrant</code> attributes.  They can have
the <code>interrupt</code> attribute.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="559"><code>interrupt</code> function attribute, MSP430</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para>
<para>You can provide an argument to the interrupt
attribute which specifies a name or number.  If the argument is a
number it indicates the slot in the interrupt vector table (0 - 31) to
which this handler should be assigned.  If the argument is a name it
is treated as a symbolic name for the vector slot.  These names should
match up with appropriate entries in the linker script.  By default
the names <code>watchdog</code> for vector 26, <code>nmi</code> for vector 30 and
<code>reset</code> for vector 31 are recognized.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">naked</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="560"><code>naked</code> function attribute, MSP430</indexterm></cindex>
<para>This attribute allows the compiler to construct the
requisite function declaration, while allowing the body of the
function to be assembly code. The specified function will not have
prologue/epilogue sequences generated by the compiler. Only basic
<code>asm</code> statements can safely be included in naked functions
(<pxref label="Basic-Asm"><xrefnodename>Basic Asm</xrefnodename></pxref>). While using extended <code>asm</code> or a mixture of
basic <code>asm</code> and C code may appear to work, they cannot be
depended upon to work reliably and are not supported.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">reentrant</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="561"><code>reentrant</code> function attribute, MSP430</indexterm></cindex>
<para>Reentrant functions disable interrupts upon entry and enable them
upon exit.  Reentrant functions cannot also have the <code>naked</code>
or <code>critical</code> attributes.  They can have the <code>interrupt</code>
attribute.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wakeup</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="562"><code>wakeup</code> function attribute, MSP430</indexterm></cindex>
<para>This attribute only applies to interrupt functions.  It is silently
ignored if applied to a non-interrupt function.  A wakeup interrupt
function will rouse the processor from any low-power state that it
might be in when the function exits.
</para></tableitem></tableentry></table>

</subsection>
<node name="NDS32-Function-Attributes" spaces=" "><nodename>NDS32 Function Attributes</nodename><nodenext automatic="on">Nios II Function Attributes</nodenext><nodeprev automatic="on">MSP430 Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>NDS32 Function Attributes</sectiontitle>

<para>These function attributes are supported by the NDS32 back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">exception</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="563"><code>exception</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="564">exception handler functions, NDS32</indexterm></cindex>
<para>Use this attribute on the NDS32 target to indicate that the specified function
is an exception handler.  The compiler will generate corresponding sections
for use in an exception handler.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="565"><code>interrupt</code> function attribute, NDS32</indexterm></cindex>
<para>On NDS32 target, this attribute indicates that the specified function
is an interrupt handler.  The compiler generates corresponding sections
for use in an interrupt handler.  You can use the following attributes
to modify the behavior:
</para><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">nested</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="566"><code>nested</code> function attribute, NDS32</indexterm></cindex>
<para>This interrupt service routine is interruptible.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">not_nested</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="567"><code>not_nested</code> function attribute, NDS32</indexterm></cindex>
<para>This interrupt service routine is not interruptible.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">nested_ready</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="568"><code>nested_ready</code> function attribute, NDS32</indexterm></cindex>
<para>This interrupt service routine is interruptible after <code>PSW.GIE</code>
(global interrupt enable) is set.  This allows interrupt service routine to
finish some short critical code before enabling interrupts.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">save_all</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="569"><code>save_all</code> function attribute, NDS32</indexterm></cindex>
<para>The system will help save all registers into stack before entering
interrupt handler.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">partial_save</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="570"><code>partial_save</code> function attribute, NDS32</indexterm></cindex>
<para>The system will help save caller registers into stack before entering
interrupt handler.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">naked</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="571"><code>naked</code> function attribute, NDS32</indexterm></cindex>
<para>This attribute allows the compiler to construct the
requisite function declaration, while allowing the body of the
function to be assembly code. The specified function will not have
prologue/epilogue sequences generated by the compiler. Only basic
<code>asm</code> statements can safely be included in naked functions
(<pxref label="Basic-Asm"><xrefnodename>Basic Asm</xrefnodename></pxref>). While using extended <code>asm</code> or a mixture of
basic <code>asm</code> and C code may appear to work, they cannot be
depended upon to work reliably and are not supported.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">reset</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="572"><code>reset</code> function attribute, NDS32</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="573">reset handler functions</indexterm></cindex>
<para>Use this attribute on the NDS32 target to indicate that the specified function
is a reset handler.  The compiler will generate corresponding sections
for use in a reset handler.  You can use the following attributes
to provide extra exception handling:
</para><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">nmi</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="574"><code>nmi</code> function attribute, NDS32</indexterm></cindex>
<para>Provide a user-defined function to handle NMI exception.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">warm</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="575"><code>warm</code> function attribute, NDS32</indexterm></cindex>
<para>Provide a user-defined function to handle warm reset exception.
</para></tableitem></tableentry></table>
</tableitem></tableentry></table>

</subsection>
<node name="Nios-II-Function-Attributes" spaces=" "><nodename>Nios II Function Attributes</nodename><nodenext automatic="on">PowerPC Function Attributes</nodenext><nodeprev automatic="on">NDS32 Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Nios II Function Attributes</sectiontitle>

<para>These function attributes are supported by the Nios II back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">target (<var>options</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="576"><code>target</code> function attribute</indexterm></cindex>
<para>As discussed in <ref label="Common-Function-Attributes"><xrefnodename>Common Function Attributes</xrefnodename></ref>, this attribute 
allows specification of target-specific compilation options.
</para>
<para>When compiling for Nios II, the following options are allowed:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">custom-<var>insn</var>=<var>N</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-custom-<var>insn</var></itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="577"><code>target(&quot;custom-<var>insn</var>=<var>N</var>&quot;)</code> function attribute, Nios II</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="578"><code>target(&quot;no-custom-<var>insn</var>&quot;)</code> function attribute, Nios II</indexterm></cindex>
<para>Each <samp>custom-<var>insn</var>=<var>N</var></samp> attribute locally enables use of a
custom instruction with encoding <var>N</var> when generating code that uses 
<var>insn</var>.  Similarly, <samp>no-custom-<var>insn</var></samp> locally inhibits use of
the custom instruction <var>insn</var>.
These target attributes correspond to the
<option>-mcustom-<var>insn</var>=<var>N</var></option> and <option>-mno-custom-<var>insn</var></option>
command-line options, and support the same set of <var>insn</var> keywords.
<xref label="Nios-II-Options"><xrefnodename>Nios II Options</xrefnodename></xref>, for more information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">custom-fpu-cfg=<var>name</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="579"><code>target(&quot;custom-fpu-cfg=<var>name</var>&quot;)</code> function attribute, Nios II</indexterm></cindex>
<para>This attribute corresponds to the <option>-mcustom-fpu-cfg=<var>name</var></option>
command-line option, to select a predefined set of custom instructions
named <var>name</var>.
<xref label="Nios-II-Options"><xrefnodename>Nios II Options</xrefnodename></xref>, for more information.
</para></tableitem></tableentry></table>
</tableitem></tableentry></table>

</subsection>
<node name="PowerPC-Function-Attributes" spaces=" "><nodename>PowerPC Function Attributes</nodename><nodenext automatic="on">RL78 Function Attributes</nodenext><nodeprev automatic="on">Nios II Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>PowerPC Function Attributes</sectiontitle>

<para>These function attributes are supported by the PowerPC back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">longcall</itemformat></item>
<itemx spaces=" "><itemformat command="code">shortcall</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="580">indirect calls, PowerPC</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="581"><code>longcall</code> function attribute, PowerPC</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="582"><code>shortcall</code> function attribute, PowerPC</indexterm></cindex>
<para>The <code>longcall</code> attribute
indicates that the function might be far away from the call site and
require a different (more expensive) calling sequence.  The
<code>shortcall</code> attribute indicates that the function is always close
enough for the shorter calling sequence to be used.  These attributes
override both the <option>-mlongcall</option> switch and
the <code>#pragma longcall</code> setting.
</para>
<para><xref label="RS_002f6000-and-PowerPC-Options"><xrefnodename>RS/6000 and PowerPC Options</xrefnodename></xref>, for more information on whether long
calls are necessary.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">target (<var>options</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="583"><code>target</code> function attribute</indexterm></cindex>
<para>As discussed in <ref label="Common-Function-Attributes"><xrefnodename>Common Function Attributes</xrefnodename></ref>, this attribute 
allows specification of target-specific compilation options.
</para>
<para>On the PowerPC, the following options are allowed:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">altivec</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-altivec</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="584"><code>target(&quot;altivec&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) AltiVec instructions.  In
32-bit code, you cannot enable AltiVec instructions unless
<option>-mabi=altivec</option> is used on the command line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cmpb</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-cmpb</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="585"><code>target(&quot;cmpb&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the compare bytes instruction
implemented on the POWER6 processor and other processors that support
the PowerPC V2.05 architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">dlmzb</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-dlmzb</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="586"><code>target(&quot;dlmzb&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the string-search <samp>dlmzb</samp>
instruction on the IBM 405, 440, 464 and 476 processors.  This instruction is
generated by default when targeting those processors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">fprnd</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-fprnd</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="587"><code>target(&quot;fprnd&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the FP round to integer
instructions implemented on the POWER5+ processor and other processors
that support the PowerPC V2.03 architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">hard-dfp</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-hard-dfp</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="588"><code>target(&quot;hard-dfp&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the decimal floating-point
instructions implemented on some POWER processors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">isel</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-isel</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="589"><code>target(&quot;isel&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) ISEL instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">mfcrf</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-mfcrf</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="590"><code>target(&quot;mfcrf&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the move from condition
register field instruction implemented on the POWER4 processor and
other processors that support the PowerPC V2.01 architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">mfpgpr</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-mfpgpr</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="591"><code>target(&quot;mfpgpr&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the FP move to/from general
purpose register instructions implemented on the POWER6X processor and
other processors that support the extended PowerPC V2.05 architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">mulhw</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-mulhw</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="592"><code>target(&quot;mulhw&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the half-word multiply and
multiply-accumulate instructions on the IBM 405, 440, 464 and 476 processors.
These instructions are generated by default when targeting those
processors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">multiple</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-multiple</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="593"><code>target(&quot;multiple&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the load multiple word
instructions and the store multiple word instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">update</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-update</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="594"><code>target(&quot;update&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the load or store instructions
that update the base register to the address of the calculated memory
location.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">popcntb</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-popcntb</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="595"><code>target(&quot;popcntb&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the popcount and double-precision
FP reciprocal estimate instruction implemented on the POWER5
processor and other processors that support the PowerPC V2.02
architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">popcntd</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-popcntd</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="596"><code>target(&quot;popcntd&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the popcount instruction
implemented on the POWER7 processor and other processors that support
the PowerPC V2.06 architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">powerpc-gfxopt</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-powerpc-gfxopt</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="597"><code>target(&quot;powerpc-gfxopt&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the optional PowerPC
architecture instructions in the Graphics group, including
floating-point select.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">powerpc-gpopt</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-powerpc-gpopt</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="598"><code>target(&quot;powerpc-gpopt&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the optional PowerPC
architecture instructions in the General Purpose group, including
floating-point square root.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">recip-precision</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-recip-precision</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="599"><code>target(&quot;recip-precision&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Assume (do not assume) that the reciprocal estimate instructions
provide higher-precision estimates than is mandated by the PowerPC
ABI.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">string</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-string</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="600"><code>target(&quot;string&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the load string instructions
and the store string word instructions to save multiple registers and
do small block moves.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">vsx</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-vsx</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="601"><code>target(&quot;vsx&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) vector/scalar (VSX)
instructions, and also enable the use of built-in functions that allow
more direct access to the VSX instruction set.  In 32-bit code, you
cannot enable VSX or AltiVec instructions unless
<option>-mabi=altivec</option> is used on the command line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">friz</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-friz</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="602"><code>target(&quot;friz&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate (do not generate) the <code>friz</code> instruction when the
<option>-funsafe-math-optimizations</option> option is used to optimize
rounding a floating-point value to 64-bit integer and back to floating
point.  The <code>friz</code> instruction does not return the same value if
the floating-point number is too large to fit in an integer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">avoid-indexed-addresses</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-avoid-indexed-addresses</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="603"><code>target(&quot;avoid-indexed-addresses&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that tries to avoid (not avoid) the use of indexed load
or store instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">paired</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-paired</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="604"><code>target(&quot;paired&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that uses (does not use) the generation of PAIRED simd
instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">longcall</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-longcall</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="605"><code>target(&quot;longcall&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Generate code that assumes (does not assume) that all calls are far
away so that a longer more expensive calling sequence is required.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cpu=<var>CPU</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="606"><code>target(&quot;cpu=<var>CPU</var>&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Specify the architecture to generate code for when compiling the
function.  If you select the <code>target(&quot;cpu=power7&quot;)</code> attribute when
generating 32-bit code, VSX and AltiVec instructions are not generated
unless you use the <option>-mabi=altivec</option> option on the command line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">tune=<var>TUNE</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="607"><code>target(&quot;tune=<var>TUNE</var>&quot;)</code> function attribute, PowerPC</indexterm></cindex>
<para>Specify the architecture to tune for when compiling the function.  If
you do not specify the <code>target(&quot;tune=<var>TUNE</var>&quot;)</code> attribute and
you do specify the <code>target(&quot;cpu=<var>CPU</var>&quot;)</code> attribute,
compilation tunes for the <var>CPU</var> architecture, and not the
default tuning specified on the command line.
</para></tableitem></tableentry></table>

<para>On the PowerPC, the inliner does not inline a
function that has different target options than the caller, unless the
callee has a subset of the target options of the caller.
</para></tableitem></tableentry></table>

</subsection>
<node name="RL78-Function-Attributes" spaces=" "><nodename>RL78 Function Attributes</nodename><nodenext automatic="on">RX Function Attributes</nodenext><nodeprev automatic="on">PowerPC Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>RL78 Function Attributes</sectiontitle>

<para>These function attributes are supported by the RL78 back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
<itemx spaces=" "><itemformat command="code">brk_interrupt</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="608"><code>interrupt</code> function attribute, RL78</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="609"><code>brk_interrupt</code> function attribute, RL78</indexterm></cindex>
<para>These attributes indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para>
<para>Use <code>brk_interrupt</code> instead of <code>interrupt</code> for
handlers intended to be used with the <code>BRK</code> opcode (i.e.&noeos; those
that must end with <code>RETB</code> instead of <code>RETI</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">naked</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="610"><code>naked</code> function attribute, RL78</indexterm></cindex>
<para>This attribute allows the compiler to construct the
requisite function declaration, while allowing the body of the
function to be assembly code. The specified function will not have
prologue/epilogue sequences generated by the compiler. Only basic
<code>asm</code> statements can safely be included in naked functions
(<pxref label="Basic-Asm"><xrefnodename>Basic Asm</xrefnodename></pxref>). While using extended <code>asm</code> or a mixture of
basic <code>asm</code> and C code may appear to work, they cannot be
depended upon to work reliably and are not supported.
</para></tableitem></tableentry></table>

</subsection>
<node name="RX-Function-Attributes" spaces=" "><nodename>RX Function Attributes</nodename><nodenext automatic="on">S/390 Function Attributes</nodenext><nodeprev automatic="on">RL78 Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>RX Function Attributes</sectiontitle>

<para>These function attributes are supported by the RX back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">fast_interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="611"><code>fast_interrupt</code> function attribute, RX</indexterm></cindex>
<para>Use this attribute on the RX port to indicate that the specified
function is a fast interrupt handler.  This is just like the
<code>interrupt</code> attribute, except that <code>freit</code> is used to return
instead of <code>reit</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="612"><code>interrupt</code> function attribute, RX</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para>
<para>On RX targets, you may specify one or more vector numbers as arguments
to the attribute, as well as naming an alternate table name.
Parameters are handled sequentially, so one handler can be assigned to
multiple entries in multiple tables.  One may also pass the magic
string <code>&quot;$default&quot;</code> which causes the function to be used for any
unfilled slots in the current table.
</para>
<para>This example shows a simple assignment of a function to one vector in
the default table (note that preprocessor macros may be used for
chip-specific symbolic vector names):
</para><smallexample endspaces=" ">
<pre xml:space="preserve">void __attribute__ ((interrupt (5))) txd1_handler ();
</pre></smallexample>

<para>This example assigns a function to two slots in the default table
(using preprocessor macros defined elsewhere) and makes it the default
for the <code>dct</code> table:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">void __attribute__ ((interrupt (RXD1_VECT,RXD2_VECT,&quot;dct&quot;,&quot;$default&quot;)))
	txd1_handler ();
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">naked</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="613"><code>naked</code> function attribute, RX</indexterm></cindex>
<para>This attribute allows the compiler to construct the
requisite function declaration, while allowing the body of the
function to be assembly code. The specified function will not have
prologue/epilogue sequences generated by the compiler. Only basic
<code>asm</code> statements can safely be included in naked functions
(<pxref label="Basic-Asm"><xrefnodename>Basic Asm</xrefnodename></pxref>). While using extended <code>asm</code> or a mixture of
basic <code>asm</code> and C code may appear to work, they cannot be
depended upon to work reliably and are not supported.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">vector</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="614"><code>vector</code> function attribute, RX</indexterm></cindex>
<para>This RX attribute is similar to the <code>interrupt</code> attribute, including its
parameters, but does not make the function an interrupt-handler type
function (i.e. it retains the normal C function calling ABI).  See the
<code>interrupt</code> attribute for a description of its arguments.
</para></tableitem></tableentry></table>

</subsection>
<node name="S_002f390-Function-Attributes" spaces=" "><nodename>S/390 Function Attributes</nodename><nodenext automatic="on">SH Function Attributes</nodenext><nodeprev automatic="on">RX Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>S/390 Function Attributes</sectiontitle>

<para>These function attributes are supported on the S/390:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">hotpatch (<var>halfwords-before-function-label</var>,<var>halfwords-after-function-label</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="615"><code>hotpatch</code> function attribute, S/390</indexterm></cindex>

<para>On S/390 System z targets, you can use this function attribute to
make GCC generate a &textldquo;hot-patching&textrdquo; function prologue.  If the
<option>-mhotpatch=</option> command-line option is used at the same time,
the <code>hotpatch</code> attribute takes precedence.  The first of the
two arguments specifies the number of halfwords to be added before
the function label.  A second argument can be used to specify the
number of halfwords to be added after the function label.  For
both arguments the maximum allowed value is 1000000.
</para>
<para>If both arguments are zero, hotpatching is disabled.
</para></tableitem></tableentry></table>

</subsection>
<node name="SH-Function-Attributes" spaces=" "><nodename>SH Function Attributes</nodename><nodenext automatic="on">SPU Function Attributes</nodenext><nodeprev automatic="on">S/390 Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>SH Function Attributes</sectiontitle>

<para>These function attributes are supported on the SH family of processors:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">function_vector</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="616"><code>function_vector</code> function attribute, SH</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="617">calling functions through the function vector on SH2A</indexterm></cindex>
<para>On SH2A targets, this attribute declares a function to be called using the
TBR relative addressing mode.  The argument to this attribute is the entry
number of the same function in a vector table containing all the TBR
relative addressable functions.  For correct operation the TBR must be setup
accordingly to point to the start of the vector table before any functions with
this attribute are invoked.  Usually a good place to do the initialization is
the startup routine.  The TBR relative vector table can have at max 256 function
entries.  The jumps to these functions are generated using a SH2A specific,
non delayed branch instruction JSR/N &arobase;(disp8,TBR).  You must use GAS and GLD
from GNU binutils version 2.7 or later for this attribute to work correctly.
</para>
<para>In an application, for a function being called once, this attribute
saves at least 8 bytes of code; and if other successive calls are being
made to the same function, it saves 2 bytes of code per each of these
calls.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt_handler</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="618"><code>interrupt_handler</code> function attribute, SH</indexterm></cindex>
<para>Use this attribute to
indicate that the specified function is an interrupt handler.  The compiler
generates function entry and exit sequences suitable for use in an
interrupt handler when this attribute is present.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">nosave_low_regs</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="619"><code>nosave_low_regs</code> function attribute, SH</indexterm></cindex>
<para>Use this attribute on SH targets to indicate that an <code>interrupt_handler</code>
function should not save and restore registers R0..R7.  This can be used on SH3*
and SH4* targets that have a second R0..R7 register bank for non-reentrant
interrupt handlers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">renesas</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="620"><code>renesas</code> function attribute, SH</indexterm></cindex>
<para>On SH targets this attribute specifies that the function or struct follows the
Renesas ABI.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">resbank</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="621"><code>resbank</code> function attribute, SH</indexterm></cindex>
<para>On the SH2A target, this attribute enables the high-speed register
saving and restoration using a register bank for <code>interrupt_handler</code>
routines.  Saving to the bank is performed automatically after the CPU
accepts an interrupt that uses a register bank.
</para>
<para>The nineteen 32-bit registers comprising general register R0 to R14,
control register GBR, and system registers MACH, MACL, and PR and the
vector table address offset are saved into a register bank.  Register
banks are stacked in first-in last-out (FILO) sequence.  Restoration
from the bank is executed by issuing a RESBANK instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sp_switch</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="622"><code>sp_switch</code> function attribute, SH</indexterm></cindex>
<para>Use this attribute on the SH to indicate an <code>interrupt_handler</code>
function should switch to an alternate stack.  It expects a string
argument that names a global variable holding the address of the
alternate stack.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void *alt_stack;
void f () __attribute__ ((interrupt_handler,
                          sp_switch (&quot;alt_stack&quot;)));
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">trap_exit</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="623"><code>trap_exit</code> function attribute, SH</indexterm></cindex>
<para>Use this attribute on the SH for an <code>interrupt_handler</code> to return using
<code>trapa</code> instead of <code>rte</code>.  This attribute expects an integer
argument specifying the trap number to be used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">trapa_handler</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="624"><code>trapa_handler</code> function attribute, SH</indexterm></cindex>
<para>On SH targets this function attribute is similar to <code>interrupt_handler</code>
but it does not save and restore all registers.
</para></tableitem></tableentry></table>

</subsection>
<node name="SPU-Function-Attributes" spaces=" "><nodename>SPU Function Attributes</nodename><nodenext automatic="on">Symbian OS Function Attributes</nodenext><nodeprev automatic="on">SH Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>SPU Function Attributes</sectiontitle>

<para>These function attributes are supported by the SPU back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">naked</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="625"><code>naked</code> function attribute, SPU</indexterm></cindex>
<para>This attribute allows the compiler to construct the
requisite function declaration, while allowing the body of the
function to be assembly code. The specified function will not have
prologue/epilogue sequences generated by the compiler. Only basic
<code>asm</code> statements can safely be included in naked functions
(<pxref label="Basic-Asm"><xrefnodename>Basic Asm</xrefnodename></pxref>). While using extended <code>asm</code> or a mixture of
basic <code>asm</code> and C code may appear to work, they cannot be
depended upon to work reliably and are not supported.
</para></tableitem></tableentry></table>

</subsection>
<node name="Symbian-OS-Function-Attributes" spaces=" "><nodename>Symbian OS Function Attributes</nodename><nodenext automatic="on">Visium Function Attributes</nodenext><nodeprev automatic="on">SPU Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Symbian OS Function Attributes</sectiontitle>

<para><xref label="Microsoft-Windows-Function-Attributes"><xrefnodename>Microsoft Windows Function Attributes</xrefnodename></xref>, for discussion of the
<code>dllexport</code> and <code>dllimport</code> attributes.
</para>
</subsection>
<node name="Visium-Function-Attributes" spaces=" "><nodename>Visium Function Attributes</nodename><nodenext automatic="on">x86 Function Attributes</nodenext><nodeprev automatic="on">Symbian OS Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Visium Function Attributes</sectiontitle>

<para>These function attributes are supported by the Visium back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="626"><code>interrupt</code> function attribute, Visium</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para></tableitem></tableentry></table>

</subsection>
<node name="x86-Function-Attributes" spaces=" "><nodename>x86 Function Attributes</nodename><nodenext automatic="on">Xstormy16 Function Attributes</nodenext><nodeprev automatic="on">Visium Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>x86 Function Attributes</sectiontitle>

<para>These function attributes are supported by the x86 back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">cdecl</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="627"><code>cdecl</code> function attribute, x86-32</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="628">functions that pop the argument stack on x86-32</indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2617" incode="1">mrtd</indexterm></indexcommand>
<para>On the x86-32 targets, the <code>cdecl</code> attribute causes the compiler to
assume that the calling function pops off the stack space used to
pass arguments.  This is
useful to override the effects of the <option>-mrtd</option> switch.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">fastcall</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="629"><code>fastcall</code> function attribute, x86-32</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="630">functions that pop the argument stack on x86-32</indexterm></cindex>
<para>On x86-32 targets, the <code>fastcall</code> attribute causes the compiler to
pass the first argument (if of integral type) in the register ECX and
the second argument (if of integral type) in the register EDX&eosperiod;  Subsequent
and other typed arguments are passed on the stack.  The called function
pops the arguments off the stack.  If the number of arguments is variable all
arguments are pushed on the stack.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">thiscall</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="631"><code>thiscall</code> function attribute, x86-32</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="632">functions that pop the argument stack on x86-32</indexterm></cindex>
<para>On x86-32 targets, the <code>thiscall</code> attribute causes the compiler to
pass the first argument (if of integral type) in the register ECX.
Subsequent and other typed arguments are passed on the stack. The called
function pops the arguments off the stack.
If the number of arguments is variable all arguments are pushed on the
stack.
The <code>thiscall</code> attribute is intended for C++ non-static member functions.
As a GCC extension, this calling convention can be used for C functions
and for static member methods.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ms_abi</itemformat></item>
<itemx spaces=" "><itemformat command="code">sysv_abi</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="633"><code>ms_abi</code> function attribute, x86</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="634"><code>sysv_abi</code> function attribute, x86</indexterm></cindex>

<para>On 32-bit and 64-bit x86 targets, you can use an ABI attribute
to indicate which calling convention should be used for a function.  The
<code>ms_abi</code> attribute tells the compiler to use the Microsoft ABI,
while the <code>sysv_abi</code> attribute tells the compiler to use the ABI
used on GNU/Linux and other systems.  The default is to use the Microsoft ABI
when targeting Windows.  On all other systems, the default is the x86/AMD ABI.
</para>
<para>Note, the <code>ms_abi</code> attribute for Microsoft Windows 64-bit targets currently
requires the <option>-maccumulate-outgoing-args</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">callee_pop_aggregate_return (<var>number</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="635"><code>callee_pop_aggregate_return</code> function attribute, x86</indexterm></cindex>

<para>On x86-32 targets, you can use this attribute to control how
aggregates are returned in memory.  If the caller is responsible for
popping the hidden pointer together with the rest of the arguments, specify
<var>number</var> equal to zero.  If callee is responsible for popping the
hidden pointer, specify <var>number</var> equal to one.  
</para>
<para>The default x86-32 ABI assumes that the callee pops the
stack for hidden pointer.  However, on x86-32 Microsoft Windows targets,
the compiler assumes that the
caller pops the stack for hidden pointer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ms_hook_prologue</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="636"><code>ms_hook_prologue</code> function attribute, x86</indexterm></cindex>

<para>On 32-bit and 64-bit x86 targets, you can use
this function attribute to make GCC generate the &textldquo;hot-patching&textrdquo; function
prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2
and newer.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">regparm (<var>number</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="637"><code>regparm</code> function attribute, x86</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="638">functions that are passed arguments in registers on x86-32</indexterm></cindex>
<para>On x86-32 targets, the <code>regparm</code> attribute causes the compiler to
pass arguments number one to <var>number</var> if they are of integral type
in registers EAX, EDX, and ECX instead of on the stack.  Functions that
take a variable number of arguments continue to be passed all of their
arguments on the stack.
</para>
<para>Beware that on some ELF systems this attribute is unsuitable for
global functions in shared libraries with lazy binding (which is the
default).  Lazy binding sends the first call via resolving code in
the loader, which might assume EAX, EDX and ECX can be clobbered, as
per the standard calling conventions.  Solaris 8 is affected by this.
Systems with the GNU C Library version 2.1 or higher
and FreeBSD are believed to be
safe since the loaders there save EAX, EDX and ECX.  (Lazy binding can be
disabled with the linker or the loader if desired, to avoid the
problem.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sseregparm</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="639"><code>sseregparm</code> function attribute, x86</indexterm></cindex>
<para>On x86-32 targets with SSE support, the <code>sseregparm</code> attribute
causes the compiler to pass up to 3 floating-point arguments in
SSE registers instead of on the stack.  Functions that take a
variable number of arguments continue to pass all of their
floating-point arguments on the stack.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">force_align_arg_pointer</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="640"><code>force_align_arg_pointer</code> function attribute, x86</indexterm></cindex>
<para>On x86 targets, the <code>force_align_arg_pointer</code> attribute may be
applied to individual function definitions, generating an alternate
prologue and epilogue that realigns the run-time stack if necessary.
This supports mixing legacy codes that run with a 4-byte aligned stack
with modern codes that keep a 16-byte stack for SSE compatibility.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">stdcall</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="641"><code>stdcall</code> function attribute, x86-32</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="642">functions that pop the argument stack on x86-32</indexterm></cindex>
<para>On x86-32 targets, the <code>stdcall</code> attribute causes the compiler to
assume that the called function pops off the stack space used to
pass arguments, unless it takes a variable number of arguments.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">target (<var>options</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="643"><code>target</code> function attribute</indexterm></cindex>
<para>As discussed in <ref label="Common-Function-Attributes"><xrefnodename>Common Function Attributes</xrefnodename></ref>, this attribute 
allows specification of target-specific compilation options.
</para>
<para>On the x86, the following options are allowed:
</para><table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">abm</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-abm</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="644"><code>target(&quot;abm&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the advanced bit instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">aes</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-aes</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="645"><code>target(&quot;aes&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the AES instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">default</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="646"><code>target(&quot;default&quot;)</code> function attribute, x86</indexterm></cindex>
<para><xref label="Function-Multiversioning"><xrefnodename>Function Multiversioning</xrefnodename></xref>, where it is used to specify the
default function version.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">mmx</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-mmx</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="647"><code>target(&quot;mmx&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the MMX instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">pclmul</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-pclmul</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="648"><code>target(&quot;pclmul&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the PCLMUL instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">popcnt</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-popcnt</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="649"><code>target(&quot;popcnt&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the POPCNT instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-sse</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="650"><code>target(&quot;sse&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the SSE instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse2</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-sse2</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="651"><code>target(&quot;sse2&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the SSE2 instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse3</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-sse3</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="652"><code>target(&quot;sse3&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the SSE3 instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse4</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-sse4</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="653"><code>target(&quot;sse4&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the SSE4 instructions (both SSE4.1
and SSE4.2).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse4.1</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-sse4.1</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="654"><code>target(&quot;sse4.1&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the sse4.1 instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse4.2</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-sse4.2</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="655"><code>target(&quot;sse4.2&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the sse4.2 instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse4a</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-sse4a</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="656"><code>target(&quot;sse4a&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the SSE4A instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">fma4</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-fma4</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="657"><code>target(&quot;fma4&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the FMA4 instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">xop</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-xop</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="658"><code>target(&quot;xop&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the XOP instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">lwp</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-lwp</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="659"><code>target(&quot;lwp&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the LWP instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ssse3</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-ssse3</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="660"><code>target(&quot;ssse3&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the SSSE3 instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cld</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-cld</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="661"><code>target(&quot;cld&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the CLD before string moves.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">fancy-math-387</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-fancy-math-387</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="662"><code>target(&quot;fancy-math-387&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the <code>sin</code>, <code>cos</code>, and
<code>sqrt</code> instructions on the 387 floating-point unit.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">fused-madd</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-fused-madd</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="663"><code>target(&quot;fused-madd&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the fused multiply/add instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ieee-fp</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-ieee-fp</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="664"><code>target(&quot;ieee-fp&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of floating point that depends on IEEE arithmetic.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">inline-all-stringops</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-inline-all-stringops</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="665"><code>target(&quot;inline-all-stringops&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable inlining of string operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">inline-stringops-dynamically</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-inline-stringops-dynamically</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="666"><code>target(&quot;inline-stringops-dynamically&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of the inline code to do small string
operations and calling the library routines for large operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">align-stringops</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-align-stringops</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="667"><code>target(&quot;align-stringops&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Do/do not align destination of inlined string operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">recip</itemformat></item>
<itemx spaces=" "><itemformat command="samp">no-recip</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="668"><code>target(&quot;recip&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Enable/disable the generation of RCPSS, RCPPS, RSQRTSS and RSQRTPS
instructions followed an additional Newton-Raphson step instead of
doing a floating-point division.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">arch=<var>ARCH</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="669"><code>target(&quot;arch=<var>ARCH</var>&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Specify the architecture to generate code for in compiling the function.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">tune=<var>TUNE</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="670"><code>target(&quot;tune=<var>TUNE</var>&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Specify the architecture to tune for in compiling the function.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">fpmath=<var>FPMATH</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="671"><code>target(&quot;fpmath=<var>FPMATH</var>&quot;)</code> function attribute, x86</indexterm></cindex>
<para>Specify which floating-point unit to use.  You must specify the
<code>target(&quot;fpmath=sse,387&quot;)</code> option as
<code>target(&quot;fpmath=sse+387&quot;)</code> because the comma would separate
different options.
</para></tableitem></tableentry></table>

<para>On the x86, the inliner does not inline a
function that has different target options than the caller, unless the
callee has a subset of the target options of the caller.  For example
a function declared with <code>target(&quot;sse3&quot;)</code> can inline a function
with <code>target(&quot;sse2&quot;)</code>, since <code>-msse3</code> implies <code>-msse2</code>.
</para></tableitem></tableentry></table>

</subsection>
<node name="Xstormy16-Function-Attributes" spaces=" "><nodename>Xstormy16 Function Attributes</nodename><nodeprev automatic="on">x86 Function Attributes</nodeprev><nodeup automatic="on">Function Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Xstormy16 Function Attributes</sectiontitle>

<para>These function attributes are supported by the Xstormy16 back end:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">interrupt</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="672"><code>interrupt</code> function attribute, Xstormy16</indexterm></cindex>
<para>Use this attribute to indicate
that the specified function is an interrupt handler.  The compiler generates
function entry and exit sequences suitable for use in an interrupt handler
when this attribute is present.
</para></tableitem></tableentry></table>

</subsection>
</section>
<node name="Variable-Attributes" spaces=" "><nodename>Variable Attributes</nodename><nodenext automatic="on">Type Attributes</nodenext><nodeprev automatic="on">Function Attributes</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Specifying Attributes of Variables</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="673">attribute of variables</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="674">variable attributes</indexterm></cindex>

<para>The keyword <code>__attribute__</code> allows you to specify special
attributes of variables or structure fields.  This keyword is followed
by an attribute specification inside double parentheses.  Some
attributes are currently defined generically for variables.
Other attributes are defined for variables on particular target
systems.  Other attributes are available for functions
(<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>), labels (<pxref label="Label-Attributes"><xrefnodename>Label Attributes</xrefnodename></pxref>) and for 
types (<pxref label="Type-Attributes"><xrefnodename>Type Attributes</xrefnodename></pxref>).
Other front ends might define more attributes
(<pxref label="C_002b_002b-Extensions"><xrefnodename>C++ Extensions</xrefnodename><xrefprinteddesc>Extensions to the C++ Language</xrefprinteddesc></pxref>).
</para>
<para><xref label="Attribute-Syntax"><xrefnodename>Attribute Syntax</xrefnodename></xref>, for details of the exact syntax for using
attributes.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Common Variable Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">AVR Variable Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Blackfin Variable Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">H8/300 Variable Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">IA-64 Variable Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">M32R/D Variable Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MeP Variable Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Microsoft Windows Variable Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">PowerPC Variable Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">SPU Variable Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">x86 Variable Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Xstormy16 Variable Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="Common-Variable-Attributes" spaces=" "><nodename>Common Variable Attributes</nodename><nodenext automatic="on">AVR Variable Attributes</nodenext><nodeup automatic="on">Variable Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Common Variable Attributes</sectiontitle>

<para>The following attributes are supported on most targets.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem><cindex index="cp" spaces=" "><indexterm index="cp" number="675"><code>aligned</code> variable attribute</indexterm></cindex>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">aligned (<var>alignment</var>)</itemformat></item>
</tableterm><tableitem><para>This attribute specifies a minimum alignment for the variable or
structure field, measured in bytes.  For example, the declaration:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int x __attribute__ ((aligned (16))) = 0;
</pre></smallexample>

<noindent></noindent>
<para>causes the compiler to allocate the global variable <code>x</code> on a
16-byte boundary.  On a 68040, this could be used in conjunction with
an <code>asm</code> expression to access the <code>move16</code> instruction which
requires 16-byte aligned operands.
</para>
<para>You can also specify the alignment of structure fields.  For example, to
create a double-word aligned <code>int</code> pair, you could write:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct foo &lbrace; int x[2] __attribute__ ((aligned (8))); &rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>This is an alternative to creating a union with a <code>double</code> member,
which forces the union to be double-word aligned.
</para>
<para>As in the preceding examples, you can explicitly specify the alignment
(in bytes) that you wish the compiler to use for a given variable or
structure field.  Alternatively, you can leave out the alignment factor
and just ask the compiler to align a variable or field to the
default alignment for the target architecture you are compiling for.
The default alignment is sufficient for all scalar types, but may not be
enough for all vector types on a target that supports vector operations.
The default alignment is fixed for a particular target ABI.
</para>
<para>GCC also provides a target specific macro <code>__BIGGEST_ALIGNMENT__</code>,
which is the largest alignment ever used for any data type on the
target machine you are compiling for.  For example, you could write:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">short array[3] __attribute__ ((aligned (__BIGGEST_ALIGNMENT__)));
</pre></smallexample>

<para>The compiler automatically sets the alignment for the declared
variable or field to <code>__BIGGEST_ALIGNMENT__</code>.  Doing this can
often make copy operations more efficient, because the compiler can
use whatever instructions copy the biggest chunks of memory when
performing copies to or from the variables or fields that you have
aligned this way.  Note that the value of <code>__BIGGEST_ALIGNMENT__</code>
may change depending on command-line options.
</para>
<para>When used on a struct, or struct member, the <code>aligned</code> attribute can
only increase the alignment; in order to decrease it, the <code>packed</code>
attribute must be specified as well.  When used as part of a typedef, the
<code>aligned</code> attribute can both increase and decrease alignment, and
specifying the <code>packed</code> attribute generates a warning.
</para>
<para>Note that the effectiveness of <code>aligned</code> attributes may be limited
by inherent limitations in your linker.  On many systems, the linker is
only able to arrange for variables to be aligned up to a certain maximum
alignment.  (For some linkers, the maximum supported alignment may
be very very small.)  If your linker is only able to align variables
up to a maximum of 8-byte alignment, then specifying <code>aligned(16)</code>
in an <code>__attribute__</code> still only provides you with 8-byte
alignment.  See your linker documentation for further information.
</para>
<para>The <code>aligned</code> attribute can also be used for functions
(<pxref label="Common-Function-Attributes"><xrefnodename>Common Function Attributes</xrefnodename></pxref>.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">cleanup (<var>cleanup_function</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="676"><code>cleanup</code> variable attribute</indexterm></cindex>
<para>The <code>cleanup</code> attribute runs a function when the variable goes
out of scope.  This attribute can only be applied to auto function
scope variables; it may not be applied to parameters or variables
with static storage duration.  The function must take one parameter,
a pointer to a type compatible with the variable.  The return value
of the function (if any) is ignored.
</para>
<para>If <option>-fexceptions</option> is enabled, then <var>cleanup_function</var>
is run during the stack unwinding that happens during the
processing of the exception.  Note that the <code>cleanup</code> attribute
does not allow the exception to be caught, only to perform an action.
It is undefined what happens if <var>cleanup_function</var> does not
return normally.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">common</itemformat></item>
<itemx spaces=" "><itemformat command="code">nocommon</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="677"><code>common</code> variable attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="678"><code>nocommon</code> variable attribute</indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2618" incode="1">fcommon</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2619" incode="1">fno-common</indexterm></indexcommand>
<para>The <code>common</code> attribute requests GCC to place a variable in
&textldquo;common&textrdquo; storage.  The <code>nocommon</code> attribute requests the
opposite&textmdash;to allocate space for it directly.
</para>
<para>These attributes override the default chosen by the
<option>-fno-common</option> and <option>-fcommon</option> flags respectively.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">deprecated</itemformat></item>
<itemx spaces=" "><itemformat command="code">deprecated (<var>msg</var>)</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="679"><code>deprecated</code> variable attribute</indexterm></cindex>
<para>The <code>deprecated</code> attribute results in a warning if the variable
is used anywhere in the source file.  This is useful when identifying
variables that are expected to be removed in a future version of a
program.  The warning also includes the location of the declaration
of the deprecated variable, to enable users to easily find further
information about why the variable is deprecated, or what they should
do instead.  Note that the warning only occurs for uses:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern int old_var __attribute__ ((deprecated));
extern int old_var;
int new_fn () &lbrace; return old_var; &rbrace;
</pre></smallexample>

<noindent></noindent>
<para>results in a warning on line 3 but not line 2.  The optional <var>msg</var>
argument, which must be a string, is printed in the warning if
present.
</para>
<para>The <code>deprecated</code> attribute can also be used for functions and
types (<pxref label="Common-Function-Attributes"><xrefnodename>Common Function Attributes</xrefnodename></pxref>,
<pxref label="Common-Type-Attributes"><xrefnodename>Common Type Attributes</xrefnodename></pxref>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">mode (<var>mode</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="680"><code>mode</code> variable attribute</indexterm></cindex>
<para>This attribute specifies the data type for the declaration&textmdash;whichever
type corresponds to the mode <var>mode</var>.  This in effect lets you
request an integer or floating-point type according to its width.
</para>
<para>You may also specify a mode of <code>byte</code> or <code>__byte__</code> to
indicate the mode corresponding to a one-byte integer, <code>word</code> or
<code>__word__</code> for the mode of a one-word integer, and <code>pointer</code>
or <code>__pointer__</code> for the mode used to represent pointers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">packed</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="681"><code>packed</code> variable attribute</indexterm></cindex>
<para>The <code>packed</code> attribute specifies that a variable or structure field
should have the smallest possible alignment&textmdash;one byte for a variable,
and one bit for a field, unless you specify a larger value with the
<code>aligned</code> attribute.
</para>
<para>Here is a structure in which the field <code>x</code> is packed, so that it
immediately follows <code>a</code>:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct foo
&lbrace;
  char a;
  int x[2] __attribute__ ((packed));
&rbrace;;
</pre></smallexample>

<para><emph>Note:</emph> The 4.1, 4.2 and 4.3 series of GCC ignore the
<code>packed</code> attribute on bit-fields of type <code>char</code>.  This has
been fixed in GCC 4.4 but the change can lead to differences in the
structure layout.  See the documentation of
<option>-Wpacked-bitfield-compat</option> for more information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">section (&quot;<var>section-name</var>&quot;)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="682"><code>section</code> variable attribute</indexterm></cindex>
<para>Normally, the compiler places the objects it generates in sections like
<code>data</code> and <code>bss</code>.  Sometimes, however, you need additional sections,
or you need certain particular variables to appear in special sections,
for example to map to special hardware.  The <code>section</code>
attribute specifies that a variable (or function) lives in a particular
section.  For example, this small program uses several specific section names:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct duart a __attribute__ ((section (&quot;DUART_A&quot;))) = &lbrace; 0 &rbrace;;
struct duart b __attribute__ ((section (&quot;DUART_B&quot;))) = &lbrace; 0 &rbrace;;
char stack[10000] __attribute__ ((section (&quot;STACK&quot;))) = &lbrace; 0 &rbrace;;
int init_data __attribute__ ((section (&quot;INITDATA&quot;)));

main()
&lbrace;
  /* <r>Initialize stack pointer</r> */
  init_sp (stack + sizeof (stack));

  /* <r>Initialize initialized data</r> */
  memcpy (&amp;init_data, &amp;data, &amp;edata - &amp;data);

  /* <r>Turn on the serial ports</r> */
  init_duart (&amp;a);
  init_duart (&amp;b);
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>Use the <code>section</code> attribute with
<emph>global</emph> variables and not <emph>local</emph> variables,
as shown in the example.
</para>
<para>You may use the <code>section</code> attribute with initialized or
uninitialized global variables but the linker requires
each object be defined once, with the exception that uninitialized
variables tentatively go in the <code>common</code> (or <code>bss</code>) section
and can be multiply &textldquo;defined&textrdquo;.  Using the <code>section</code> attribute
changes what section the variable goes into and may cause the
linker to issue an error if an uninitialized variable has multiple
definitions.  You can force a variable to be initialized with the
<option>-fno-common</option> flag or the <code>nocommon</code> attribute.
</para>
<para>Some file formats do not support arbitrary sections so the <code>section</code>
attribute is not available on all platforms.
If you need to map the entire contents of a module to a particular
section, consider using the facilities of the linker instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">tls_model (&quot;<var>tls_model</var>&quot;)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="683"><code>tls_model</code> variable attribute</indexterm></cindex>
<para>The <code>tls_model</code> attribute sets thread-local storage model
(<pxref label="Thread_002dLocal"><xrefnodename>Thread-Local</xrefnodename></pxref>) of a particular <code>__thread</code> variable,
overriding <option>-ftls-model=</option> command-line switch on a per-variable
basis.
The <var>tls_model</var> argument should be one of <code>global-dynamic</code>,
<code>local-dynamic</code>, <code>initial-exec</code> or <code>local-exec</code>.
</para>
<para>Not all targets support this attribute.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">unused</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="684"><code>unused</code> variable attribute</indexterm></cindex>
<para>This attribute, attached to a variable, means that the variable is meant
to be possibly unused.  GCC does not produce a warning for this
variable.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">used</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="685"><code>used</code> variable attribute</indexterm></cindex>
<para>This attribute, attached to a variable with static storage, means that
the variable must be emitted even if it appears that the variable is not
referenced.
</para>
<para>When applied to a static data member of a C++ class template, the
attribute also means that the member is instantiated if the
class itself is instantiated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">vector_size (<var>bytes</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="686"><code>vector_size</code> variable attribute</indexterm></cindex>
<para>This attribute specifies the vector size for the variable, measured in
bytes.  For example, the declaration:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int foo __attribute__ ((vector_size (16)));
</pre></smallexample>

<noindent></noindent>
<para>causes the compiler to set the mode for <code>foo</code>, to be 16 bytes,
divided into <code>int</code> sized units.  Assuming a 32-bit int (a vector of
4 units of 4 bytes), the corresponding mode of <code>foo</code> is V4SI&eosperiod;
</para>
<para>This attribute is only applicable to integral and float scalars,
although arrays, pointers, and function return values are allowed in
conjunction with this construct.
</para>
<para>Aggregates with this attribute are invalid, even if they are of the same
size as a corresponding scalar.  For example, the declaration:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct S &lbrace; int a; &rbrace;;
struct S  __attribute__ ((vector_size (16))) foo;
</pre></smallexample>

<noindent></noindent>
<para>is invalid even if the size of the structure is the same as the size of
the <code>int</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">weak</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="687"><code>weak</code> variable attribute</indexterm></cindex>
<para>The <code>weak</code> attribute is described in
<ref label="Common-Function-Attributes"><xrefnodename>Common Function Attributes</xrefnodename></ref>.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="AVR-Variable-Attributes" spaces=" "><nodename>AVR Variable Attributes</nodename><nodenext automatic="on">Blackfin Variable Attributes</nodenext><nodeprev automatic="on">Common Variable Attributes</nodeprev><nodeup automatic="on">Variable Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>AVR Variable Attributes</sectiontitle>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">progmem</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="688"><code>progmem</code> variable attribute, AVR</indexterm></cindex>
<para>The <code>progmem</code> attribute is used on the AVR to place read-only
data in the non-volatile program memory (flash). The <code>progmem</code>
attribute accomplishes this by putting respective variables into a
section whose name starts with <code>.progmem</code>.
</para>
<para>This attribute works similar to the <code>section</code> attribute
but adds additional checking. Notice that just like the
<code>section</code> attribute, <code>progmem</code> affects the location
of the data but not how this data is accessed.
</para>
<para>In order to read data located with the <code>progmem</code> attribute
(inline) assembler must be used.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">/* Use custom macros from <w><uref><urefurl>http://nongnu.org/avr-libc/user-manual/</urefurl><urefdesc>AVR-LibC</urefdesc></uref></w> */
#include &lt;avr/pgmspace.h&gt; 

/* Locate var in flash memory */
const int var[2] PROGMEM = &lbrace; 1, 2 &rbrace;;

int read_var (int i)
&lbrace;
    /* Access var[] by accessor macro from avr/pgmspace.h */
    return (int) pgm_read_word (&amp; var[i]);
&rbrace;
</pre></smallexample>

<para>AVR is a Harvard architecture processor and data and read-only data
normally resides in the data memory (RAM).
</para>
<para>See also the <ref label="AVR-Named-Address-Spaces"><xrefnodename>AVR Named Address Spaces</xrefnodename></ref> section for
an alternate way to locate and access data in flash memory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">io</itemformat></item>
<itemx spaces=" "><itemformat command="code">io (<var>addr</var>)</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="689"><code>io</code> variable attribute, AVR</indexterm></cindex>
<para>Variables with the <code>io</code> attribute are used to address
memory-mapped peripherals in the io address range.
If an address is specified, the variable
is assigned that address, and the value is interpreted as an
address in the data address space.
Example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">volatile int porta __attribute__((io (0x22)));
</pre></smallexample>

<para>The address specified in the address in the data address range.
</para>
<para>Otherwise, the variable it is not assigned an address, but the
compiler will still use in/out instructions where applicable,
assuming some other module assigns an address in the io address range.
Example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern volatile int porta __attribute__((io));
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">io_low</itemformat></item>
<itemx spaces=" "><itemformat command="code">io_low (<var>addr</var>)</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="690"><code>io_low</code> variable attribute, AVR</indexterm></cindex>
<para>This is like the <code>io</code> attribute, but additionally it informs the
compiler that the object lies in the lower half of the I/O area,
allowing the use of <code>cbi</code>, <code>sbi</code>, <code>sbic</code> and <code>sbis</code>
instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">address</itemformat></item>
<itemx spaces=" "><itemformat command="code">address (<var>addr</var>)</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="691"><code>address</code> variable attribute, AVR</indexterm></cindex>
<para>Variables with the <code>address</code> attribute are used to address
memory-mapped peripherals that may lie outside the io address range.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">volatile int porta __attribute__((address (0x600)));
</pre></smallexample>

</tableitem></tableentry></table>

</subsection>
<node name="Blackfin-Variable-Attributes" spaces=" "><nodename>Blackfin Variable Attributes</nodename><nodenext automatic="on">H8/300 Variable Attributes</nodenext><nodeprev automatic="on">AVR Variable Attributes</nodeprev><nodeup automatic="on">Variable Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Blackfin Variable Attributes</sectiontitle>

<para>Three attributes are currently defined for the Blackfin.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">l1_data</itemformat></item>
<itemx spaces=" "><itemformat command="code">l1_data_A</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">l1_data_B</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="692"><code>l1_data</code> variable attribute, Blackfin</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="693"><code>l1_data_A</code> variable attribute, Blackfin</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="694"><code>l1_data_B</code> variable attribute, Blackfin</indexterm></cindex>
<para>Use these attributes on the Blackfin to place the variable into L1 Data SRAM.
Variables with <code>l1_data</code> attribute are put into the specific section
named <code>.l1.data</code>. Those with <code>l1_data_A</code> attribute are put into
the specific section named <code>.l1.data.A</code>. Those with <code>l1_data_B</code>
attribute are put into the specific section named <code>.l1.data.B</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l2</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="695"><code>l2</code> variable attribute, Blackfin</indexterm></cindex>
<para>Use this attribute on the Blackfin to place the variable into L2 SRAM.
Variables with <code>l2</code> attribute are put into the specific section
named <code>.l2.data</code>.
</para></tableitem></tableentry></table>

</subsection>
<node name="H8_002f300-Variable-Attributes" spaces=" "><nodename>H8/300 Variable Attributes</nodename><nodenext automatic="on">IA-64 Variable Attributes</nodenext><nodeprev automatic="on">Blackfin Variable Attributes</nodeprev><nodeup automatic="on">Variable Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>H8/300 Variable Attributes</sectiontitle>

<para>These variable attributes are available for H8/300 targets:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">eightbit_data</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="696"><code>eightbit_data</code> variable attribute, H8/300</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="697">eight-bit data on the H8/300, H8/300H, and H8S</indexterm></cindex>
<para>Use this attribute on the H8/300, H8/300H, and H8S to indicate that the specified
variable should be placed into the eight-bit data section.
The compiler generates more efficient code for certain operations
on data in the eight-bit data area.  Note the eight-bit data area is limited to
256 bytes of data.
</para>
<para>You must use GAS and GLD from GNU binutils version 2.7 or later for
this attribute to work correctly.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">tiny_data</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="698"><code>tiny_data</code> variable attribute, H8/300</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="699">tiny data section on the H8/300H and H8S</indexterm></cindex>
<para>Use this attribute on the H8/300H and H8S to indicate that the specified
variable should be placed into the tiny data section.
The compiler generates more efficient code for loads and stores
on data in the tiny data section.  Note the tiny data area is limited to
slightly under 32KB of data.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="IA_002d64-Variable-Attributes" spaces=" "><nodename>IA-64 Variable Attributes</nodename><nodenext automatic="on">M32R/D Variable Attributes</nodenext><nodeprev automatic="on">H8/300 Variable Attributes</nodeprev><nodeup automatic="on">Variable Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>IA-64 Variable Attributes</sectiontitle>

<para>The IA-64 back end supports the following variable attribute:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">model (<var>model-name</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="700"><code>model</code> variable attribute, IA-64</indexterm></cindex>

<para>On IA-64, use this attribute to set the addressability of an object.
At present, the only supported identifier for <var>model-name</var> is
<code>small</code>, indicating addressability via &textldquo;small&textrdquo; (22-bit)
addresses (so that their addresses can be loaded with the <code>addl</code>
instruction).  Caveat: such addressing is by definition not position
independent and hence this attribute must not be used for objects
defined by shared libraries.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="M32R_002fD-Variable-Attributes" spaces=" "><nodename>M32R/D Variable Attributes</nodename><nodenext automatic="on">MeP Variable Attributes</nodenext><nodeprev automatic="on">IA-64 Variable Attributes</nodeprev><nodeup automatic="on">Variable Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>M32R/D Variable Attributes</sectiontitle>

<para>One attribute is currently defined for the M32R/D&eosperiod;
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">model (<var>model-name</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="701"><code>model-name</code> variable attribute, M32R/D</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="702">variable addressability on the M32R/D</indexterm></cindex>
<para>Use this attribute on the M32R/D to set the addressability of an object.
The identifier <var>model-name</var> is one of <code>small</code>, <code>medium</code>,
or <code>large</code>, representing each of the code models.
</para>
<para>Small model objects live in the lower 16MB of memory (so that their
addresses can be loaded with the <code>ld24</code> instruction).
</para>
<para>Medium and large model objects may live anywhere in the 32-bit address space
(the compiler generates <code>seth/add3</code> instructions to load their
addresses).
</para></tableitem></tableentry></table>

</subsection>
<node name="MeP-Variable-Attributes" spaces=" "><nodename>MeP Variable Attributes</nodename><nodenext automatic="on">Microsoft Windows Variable Attributes</nodenext><nodeprev automatic="on">M32R/D Variable Attributes</nodeprev><nodeup automatic="on">Variable Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>MeP Variable Attributes</sectiontitle>

<para>The MeP target has a number of addressing modes and busses.  The
<code>near</code> space spans the standard memory space&textrsquo;s first 16 megabytes
(24 bits).  The <code>far</code> space spans the entire 32-bit memory space.
The <code>based</code> space is a 128-byte region in the memory space that
is addressed relative to the <code>$tp</code> register.  The <code>tiny</code>
space is a 65536-byte region relative to the <code>$gp</code> register.  In
addition to these memory regions, the MeP target has a separate 16-bit
control bus which is specified with <code>cb</code> attributes.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">based</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="703"><code>based</code> variable attribute, MeP</indexterm></cindex>
<para>Any variable with the <code>based</code> attribute is assigned to the
<code>.based</code> section, and is accessed with relative to the
<code>$tp</code> register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">tiny</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="704"><code>tiny</code> variable attribute, MeP</indexterm></cindex>
<para>Likewise, the <code>tiny</code> attribute assigned variables to the
<code>.tiny</code> section, relative to the <code>$gp</code> register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">near</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="705"><code>near</code> variable attribute, MeP</indexterm></cindex>
<para>Variables with the <code>near</code> attribute are assumed to have addresses
that fit in a 24-bit addressing mode.  This is the default for large
variables (<code>-mtiny=4</code> is the default) but this attribute can
override <code>-mtiny=</code> for small variables, or override <code>-ml</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">far</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="706"><code>far</code> variable attribute, MeP</indexterm></cindex>
<para>Variables with the <code>far</code> attribute are addressed using a full
32-bit address.  Since this covers the entire memory space, this
allows modules to make no assumptions about where variables might be
stored.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">io</itemformat></item>
<cindex index="cp" spaces=" "><indexterm index="cp" number="707"><code>io</code> variable attribute, MeP</indexterm></cindex>
<itemx spaces=" "><itemformat command="code">io (<var>addr</var>)</itemformat></itemx>
</tableterm><tableitem><para>Variables with the <code>io</code> attribute are used to address
memory-mapped peripherals.  If an address is specified, the variable
is assigned that address, else it is not assigned an address (it is
assumed some other module assigns an address).  Example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int timer_count __attribute__((io(0x123)));
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">cb</itemformat></item>
<itemx spaces=" "><itemformat command="code">cb (<var>addr</var>)</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="708"><code>cb</code> variable attribute, MeP</indexterm></cindex>
<para>Variables with the <code>cb</code> attribute are used to access the control
bus, using special instructions.  <code>addr</code> indicates the control bus
address.  Example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int cpu_clock __attribute__((cb(0x123)));
</pre></smallexample>

</tableitem></tableentry></table>

</subsection>
<node name="Microsoft-Windows-Variable-Attributes" spaces=" "><nodename>Microsoft Windows Variable Attributes</nodename><nodenext automatic="on">PowerPC Variable Attributes</nodenext><nodeprev automatic="on">MeP Variable Attributes</nodeprev><nodeup automatic="on">Variable Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Microsoft Windows Variable Attributes</sectiontitle>

<para>You can use these attributes on Microsoft Windows targets.
<ref label="x86-Variable-Attributes"><xrefnodename>x86 Variable Attributes</xrefnodename></ref> for additional Windows compatibility
attributes available on all x86 targets.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">dllimport</itemformat></item>
<itemx spaces=" "><itemformat command="code">dllexport</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="709"><code>dllimport</code> variable attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="710"><code>dllexport</code> variable attribute</indexterm></cindex>
<para>The <code>dllimport</code> and <code>dllexport</code> attributes are described in
<ref label="Microsoft-Windows-Function-Attributes"><xrefnodename>Microsoft Windows Function Attributes</xrefnodename></ref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">selectany</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="711"><code>selectany</code> variable attribute</indexterm></cindex>
<para>The <code>selectany</code> attribute causes an initialized global variable to
have link-once semantics.  When multiple definitions of the variable are
encountered by the linker, the first is selected and the remainder are
discarded.  Following usage by the Microsoft compiler, the linker is told
<emph>not</emph> to warn about size or content differences of the multiple
definitions.
</para>
<para>Although the primary usage of this attribute is for POD types, the
attribute can also be applied to global C++ objects that are initialized
by a constructor.  In this case, the static initialization and destruction
code for the object is emitted in each translation defining the object,
but the calls to the constructor and destructor are protected by a
link-once guard variable.
</para>
<para>The <code>selectany</code> attribute is only available on Microsoft Windows
targets.  You can use <code>__declspec (selectany)</code> as a synonym for
<code>__attribute__ ((selectany))</code> for compatibility with other
compilers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">shared</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="712"><code>shared</code> variable attribute</indexterm></cindex>
<para>On Microsoft Windows, in addition to putting variable definitions in a named
section, the section can also be shared among all running copies of an
executable or DLL&eosperiod;  For example, this small program defines shared data
by putting it in a named section <code>shared</code> and marking the section
shareable:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int foo __attribute__((section (&quot;shared&quot;), shared)) = 0;

int
main()
&lbrace;
  /* <r>Read and write foo.  All running
     copies see the same value.</r>  */
  return 0;
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>You may only use the <code>shared</code> attribute along with <code>section</code>
attribute with a fully-initialized global definition because of the way
linkers work.  See <code>section</code> attribute for more information.
</para>
<para>The <code>shared</code> attribute is only available on Microsoft Windows&eosperiod;
</para>
</tableitem></tableentry></table>

</subsection>
<node name="PowerPC-Variable-Attributes" spaces=" "><nodename>PowerPC Variable Attributes</nodename><nodenext automatic="on">SPU Variable Attributes</nodenext><nodeprev automatic="on">Microsoft Windows Variable Attributes</nodeprev><nodeup automatic="on">Variable Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>PowerPC Variable Attributes</sectiontitle>

<para>Three attributes currently are defined for PowerPC configurations:
<code>altivec</code>, <code>ms_struct</code> and <code>gcc_struct</code>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="713"><code>ms_struct</code> variable attribute, PowerPC</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="714"><code>gcc_struct</code> variable attribute, PowerPC</indexterm></cindex>
<para>For full documentation of the struct attributes please see the
documentation in <ref label="x86-Variable-Attributes"><xrefnodename>x86 Variable Attributes</xrefnodename></ref>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="715"><code>altivec</code> variable attribute, PowerPC</indexterm></cindex>
<para>For documentation of <code>altivec</code> attribute please see the
documentation in <ref label="PowerPC-Type-Attributes"><xrefnodename>PowerPC Type Attributes</xrefnodename></ref>.
</para>
</subsection>
<node name="SPU-Variable-Attributes" spaces=" "><nodename>SPU Variable Attributes</nodename><nodenext automatic="on">x86 Variable Attributes</nodenext><nodeprev automatic="on">PowerPC Variable Attributes</nodeprev><nodeup automatic="on">Variable Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>SPU Variable Attributes</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="716"><code>spu_vector</code> variable attribute, SPU</indexterm></cindex>
<para>The SPU supports the <code>spu_vector</code> attribute for variables.  For
documentation of this attribute please see the documentation in
<ref label="SPU-Type-Attributes"><xrefnodename>SPU Type Attributes</xrefnodename></ref>.
</para>
</subsection>
<node name="x86-Variable-Attributes" spaces=" "><nodename>x86 Variable Attributes</nodename><nodenext automatic="on">Xstormy16 Variable Attributes</nodenext><nodeprev automatic="on">SPU Variable Attributes</nodeprev><nodeup automatic="on">Variable Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>x86 Variable Attributes</sectiontitle>

<para>Two attributes are currently defined for x86 configurations:
<code>ms_struct</code> and <code>gcc_struct</code>.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">ms_struct</itemformat></item>
<itemx spaces=" "><itemformat command="code">gcc_struct</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="717"><code>ms_struct</code> variable attribute, x86</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="718"><code>gcc_struct</code> variable attribute, x86</indexterm></cindex>

<para>If <code>packed</code> is used on a structure, or if bit-fields are used,
it may be that the Microsoft ABI lays out the structure differently
than the way GCC normally does.  Particularly when moving packed
data between functions compiled with GCC and the native Microsoft compiler
(either via function call or as data in a file), it may be necessary to access
either format.
</para>
<para>Currently <option>-m[no-]ms-bitfields</option> is provided for the Microsoft Windows x86
compilers to match the native Microsoft compiler.
</para>
<para>The Microsoft structure layout algorithm is fairly simple with the exception
of the bit-field packing.  
The padding and alignment of members of structures and whether a bit-field 
can straddle a storage-unit boundary are determine by these rules:
</para>
<enumerate first="1" endspaces=" ">
<listitem spaces=" "><para>Structure members are stored sequentially in the order in which they are
declared: the first member has the lowest memory address and the last member
the highest.
</para>
</listitem><listitem spaces=" "><para>Every data object has an alignment requirement.  The alignment requirement
for all data except structures, unions, and arrays is either the size of the
object or the current packing size (specified with either the
<code>aligned</code> attribute or the <code>pack</code> pragma),
whichever is less.  For structures, unions, and arrays,
the alignment requirement is the largest alignment requirement of its members.
Every object is allocated an offset so that:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">offset % alignment_requirement == 0
</pre></smallexample>

</listitem><listitem spaces=" "><para>Adjacent bit-fields are packed into the same 1-, 2-, or 4-byte allocation
unit if the integral types are the same size and if the next bit-field fits
into the current allocation unit without crossing the boundary imposed by the
common alignment requirements of the bit-fields.
</para></listitem></enumerate>

<para>MSVC interprets zero-length bit-fields in the following ways:
</para>
<enumerate first="1" endspaces=" ">
<listitem spaces=" "><para>If a zero-length bit-field is inserted between two bit-fields that
are normally coalesced, the bit-fields are not coalesced.
</para>
<para>For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct
 &lbrace;
   unsigned long bf_1 : 12;
   unsigned long : 0;
   unsigned long bf_2 : 12;
 &rbrace; t1;
</pre></smallexample>

<noindent></noindent>
<para>The size of <code>t1</code> is 8 bytes with the zero-length bit-field.  If the
zero-length bit-field were removed, <code>t1</code>&textrsquo;s size would be 4 bytes.
</para>
</listitem><listitem spaces=" "><para>If a zero-length bit-field is inserted after a bit-field, <code>foo</code>, and the
alignment of the zero-length bit-field is greater than the member that follows it,
<code>bar</code>, <code>bar</code> is aligned as the type of the zero-length bit-field.
</para>
<para>For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct
 &lbrace;
   char foo : 4;
   short : 0;
   char bar;
 &rbrace; t2;

struct
 &lbrace;
   char foo : 4;
   short : 0;
   double bar;
 &rbrace; t3;
</pre></smallexample>

<noindent></noindent>
<para>For <code>t2</code>, <code>bar</code> is placed at offset 2, rather than offset 1.
Accordingly, the size of <code>t2</code> is 4.  For <code>t3</code>, the zero-length
bit-field does not affect the alignment of <code>bar</code> or, as a result, the size
of the structure.
</para>
<para>Taking this into account, it is important to note the following:
</para>
<enumerate first="1" endspaces=" ">
<listitem spaces=" "><para>If a zero-length bit-field follows a normal bit-field, the type of the
zero-length bit-field may affect the alignment of the structure as whole. For
example, <code>t2</code> has a size of 4 bytes, since the zero-length bit-field follows a
normal bit-field, and is of type short.
</para>
</listitem><listitem spaces=" "><para>Even if a zero-length bit-field is not followed by a normal bit-field, it may
still affect the alignment of the structure:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct
 &lbrace;
   char foo : 6;
   long : 0;
 &rbrace; t4;
</pre></smallexample>

<noindent></noindent>
<para>Here, <code>t4</code> takes up 4 bytes.
</para></listitem></enumerate>

</listitem><listitem spaces=" "><para>Zero-length bit-fields following non-bit-field members are ignored:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct
 &lbrace;
   char foo;
   long : 0;
   char bar;
 &rbrace; t5;
</pre></smallexample>

<noindent></noindent>
<para>Here, <code>t5</code> takes up 2 bytes.
</para></listitem></enumerate>
</tableitem></tableentry></table>

</subsection>
<node name="Xstormy16-Variable-Attributes" spaces=" "><nodename>Xstormy16 Variable Attributes</nodename><nodeprev automatic="on">x86 Variable Attributes</nodeprev><nodeup automatic="on">Variable Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Xstormy16 Variable Attributes</sectiontitle>

<para>One attribute is currently defined for xstormy16 configurations:
<code>below100</code>.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">below100</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="719"><code>below100</code> variable attribute, Xstormy16</indexterm></cindex>

<para>If a variable has the <code>below100</code> attribute (<code>BELOW100</code> is
allowed also), GCC places the variable in the first 0x100 bytes of
memory and use special opcodes to access it.  Such variables are
placed in either the <code>.bss_below100</code> section or the
<code>.data_below100</code> section.
</para>
</tableitem></tableentry></table>

</subsection>
</section>
<node name="Type-Attributes" spaces=" "><nodename>Type Attributes</nodename><nodenext automatic="on">Label Attributes</nodenext><nodeprev automatic="on">Variable Attributes</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Specifying Attributes of Types</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="720">attribute of types</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="721">type attributes</indexterm></cindex>

<para>The keyword <code>__attribute__</code> allows you to specify special
attributes of types.  Some type attributes apply only to <code>struct</code>
and <code>union</code> types, while others can apply to any type defined
via a <code>typedef</code> declaration.  Other attributes are defined for
functions (<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>), labels (<pxref label="Label-Attributes"><xrefnodename>Label 
Attributes</xrefnodename></pxref>) and for variables (<pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>).
</para>
<para>The <code>__attribute__</code> keyword is followed by an attribute specification
inside double parentheses.  
</para>
<para>You may specify type attributes in an enum, struct or union type
declaration or definition by placing them immediately after the
<code>struct</code>, <code>union</code> or <code>enum</code> keyword.  A less preferred
syntax is to place them just past the closing curly brace of the
definition.
</para>
<para>You can also include type attributes in a <code>typedef</code> declaration.
<xref label="Attribute-Syntax"><xrefnodename>Attribute Syntax</xrefnodename></xref>, for details of the exact syntax for using
attributes.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Common Type Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">ARM Type Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MeP Type Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">PowerPC Type Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">SPU Type Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">x86 Type Attributes</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="Common-Type-Attributes" spaces=" "><nodename>Common Type Attributes</nodename><nodenext automatic="on">ARM Type Attributes</nodenext><nodeup automatic="on">Type Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>Common Type Attributes</sectiontitle>

<para>The following type attributes are supported on most targets.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem><cindex index="cp" spaces=" "><indexterm index="cp" number="722"><code>aligned</code> type attribute</indexterm></cindex>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">aligned (<var>alignment</var>)</itemformat></item>
</tableterm><tableitem><para>This attribute specifies a minimum alignment (in bytes) for variables
of the specified type.  For example, the declarations:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct S &lbrace; short f[3]; &rbrace; __attribute__ ((aligned (8)));
typedef int more_aligned_int __attribute__ ((aligned (8)));
</pre></smallexample>

<noindent></noindent>
<para>force the compiler to ensure (as far as it can) that each variable whose
type is <code>struct S</code> or <code>more_aligned_int</code> is allocated and
aligned <emph>at least</emph> on a 8-byte boundary.  On a SPARC, having all
variables of type <code>struct S</code> aligned to 8-byte boundaries allows
the compiler to use the <code>ldd</code> and <code>std</code> (doubleword load and
store) instructions when copying one variable of type <code>struct S</code> to
another, thus improving run-time efficiency.
</para>
<para>Note that the alignment of any given <code>struct</code> or <code>union</code> type
is required by the ISO C standard to be at least a perfect multiple of
the lowest common multiple of the alignments of all of the members of
the <code>struct</code> or <code>union</code> in question.  This means that you <emph>can</emph>
effectively adjust the alignment of a <code>struct</code> or <code>union</code>
type by attaching an <code>aligned</code> attribute to any one of the members
of such a type, but the notation illustrated in the example above is a
more obvious, intuitive, and readable way to request the compiler to
adjust the alignment of an entire <code>struct</code> or <code>union</code> type.
</para>
<para>As in the preceding example, you can explicitly specify the alignment
(in bytes) that you wish the compiler to use for a given <code>struct</code>
or <code>union</code> type.  Alternatively, you can leave out the alignment factor
and just ask the compiler to align a type to the maximum
useful alignment for the target machine you are compiling for.  For
example, you could write:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct S &lbrace; short f[3]; &rbrace; __attribute__ ((aligned));
</pre></smallexample>

<para>Whenever you leave out the alignment factor in an <code>aligned</code>
attribute specification, the compiler automatically sets the alignment
for the type to the largest alignment that is ever used for any data
type on the target machine you are compiling for.  Doing this can often
make copy operations more efficient, because the compiler can use
whatever instructions copy the biggest chunks of memory when performing
copies to or from the variables that have types that you have aligned
this way.
</para>
<para>In the example above, if the size of each <code>short</code> is 2 bytes, then
the size of the entire <code>struct S</code> type is 6 bytes.  The smallest
power of two that is greater than or equal to that is 8, so the
compiler sets the alignment for the entire <code>struct S</code> type to 8
bytes.
</para>
<para>Note that although you can ask the compiler to select a time-efficient
alignment for a given type and then declare only individual stand-alone
objects of that type, the compiler&textrsquo;s ability to select a time-efficient
alignment is primarily useful only when you plan to create arrays of
variables having the relevant (efficiently aligned) type.  If you
declare or use arrays of variables of an efficiently-aligned type, then
it is likely that your program also does pointer arithmetic (or
subscripting, which amounts to the same thing) on pointers to the
relevant type, and the code that the compiler generates for these
pointer arithmetic operations is often more efficient for
efficiently-aligned types than for other types.
</para>
<para>The <code>aligned</code> attribute can only increase the alignment; but you
can decrease it by specifying <code>packed</code> as well.  See below.
</para>
<para>Note that the effectiveness of <code>aligned</code> attributes may be limited
by inherent limitations in your linker.  On many systems, the linker is
only able to arrange for variables to be aligned up to a certain maximum
alignment.  (For some linkers, the maximum supported alignment may
be very very small.)  If your linker is only able to align variables
up to a maximum of 8-byte alignment, then specifying <code>aligned(16)</code>
in an <code>__attribute__</code> still only provides you with 8-byte
alignment.  See your linker documentation for further information.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2620" incode="1">fshort-enums</indexterm></indexcommand>
<para>Specifying this attribute for <code>struct</code> and <code>union</code> types is
equivalent to specifying the <code>packed</code> attribute on each of the
structure or union members.  Specifying the <option>-fshort-enums</option>
flag on the line is equivalent to specifying the <code>packed</code>
attribute on all <code>enum</code> definitions.
</para>
<para>In the following example <code>struct my_packed_struct</code>&textrsquo;s members are
packed closely together, but the internal layout of its <code>s</code> member
is not packed&textmdash;to do that, <code>struct my_unpacked_struct</code> needs to
be packed too.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct my_unpacked_struct
 &lbrace;
    char c;
    int i;
 &rbrace;;

struct __attribute__ ((__packed__)) my_packed_struct
  &lbrace;
     char c;
     int  i;
     struct my_unpacked_struct s;
  &rbrace;;
</pre></smallexample>

<para>You may only specify this attribute on the definition of an <code>enum</code>,
<code>struct</code> or <code>union</code>, not on a <code>typedef</code> that does not
also define the enumerated type, structure or union.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">bnd_variable_size</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="723"><code>bnd_variable_size</code> type attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="724">Pointer Bounds Checker attributes</indexterm></cindex>
<para>When applied to a structure field, this attribute tells Pointer
Bounds Checker that the size of this field should not be computed
using static type information.  It may be used to mark variably-sized
static array fields placed at the end of a structure.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct S
&lbrace;
  int size;
  char data[1];
&rbrace;
S *p = (S *)malloc (sizeof(S) + 100);
p-&gt;data[10] = 0; //Bounds violation
</pre></smallexample>

<noindent></noindent>
<para>By using an attribute for the field we may avoid unwanted bound
violation checks:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct S
&lbrace;
  int size;
  char data[1] __attribute__((bnd_variable_size));
&rbrace;
S *p = (S *)malloc (sizeof(S) + 100);
p-&gt;data[10] = 0; //OK
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">deprecated</itemformat></item>
<itemx spaces=" "><itemformat command="code">deprecated (<var>msg</var>)</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="725"><code>deprecated</code> type attribute</indexterm></cindex>
<para>The <code>deprecated</code> attribute results in a warning if the type
is used anywhere in the source file.  This is useful when identifying
types that are expected to be removed in a future version of a program.
If possible, the warning also includes the location of the declaration
of the deprecated type, to enable users to easily find further
information about why the type is deprecated, or what they should do
instead.  Note that the warnings only occur for uses and then only
if the type is being applied to an identifier that itself is not being
declared as deprecated.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef int T1 __attribute__ ((deprecated));
T1 x;
typedef T1 T2;
T2 y;
typedef T1 T3 __attribute__ ((deprecated));
T3 z __attribute__ ((deprecated));
</pre></smallexample>

<noindent></noindent>
<para>results in a warning on line 2 and 3 but not lines 4, 5, or 6.  No
warning is issued for line 4 because T2 is not explicitly
deprecated.  Line 5 has no warning because T3 is explicitly
deprecated.  Similarly for line 6.  The optional <var>msg</var>
argument, which must be a string, is printed in the warning if
present.
</para>
<para>The <code>deprecated</code> attribute can also be used for functions and
variables (<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>, <pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">designated_init</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="726"><code>designated_init</code> type attribute</indexterm></cindex>
<para>This attribute may only be applied to structure types.  It indicates
that any initialization of an object of this type must use designated
initializers rather than positional initializers.  The intent of this
attribute is to allow the programmer to indicate that a structure&textrsquo;s
layout may change, and that therefore relying on positional
initialization will result in future breakage.
</para>
<para>GCC emits warnings based on this attribute by default; use
<option>-Wno-designated-init</option> to suppress them.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">may_alias</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="727"><code>may_alias</code> type attribute</indexterm></cindex>
<para>Accesses through pointers to types with this attribute are not subject
to type-based alias analysis, but are instead assumed to be able to alias
any other type of objects.
In the context of section 6.5 paragraph 7 of the C99 standard,
an lvalue expression
dereferencing such a pointer is treated like having a character type.
See <option>-fstrict-aliasing</option> for more information on aliasing issues.
This extension exists to support some vector APIs, in which pointers to
one vector type are permitted to alias pointers to a different vector type.
</para>
<para>Note that an object of a type with this attribute does not have any
special semantics.
</para>
<para>Example of use:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef short __attribute__((__may_alias__)) short_a;

int
main (void)
&lbrace;
  int a = 0x12345678;
  short_a *b = (short_a *) &amp;a;

  b[1] = 0;

  if (a == 0x12345678)
    abort();

  exit(0);
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>If you replaced <code>short_a</code> with <code>short</code> in the variable
declaration, the above program would abort when compiled with
<option>-fstrict-aliasing</option>, which is on by default at <option>-O2</option> or
above.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">packed</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="728"><code>packed</code> type attribute</indexterm></cindex>
<para>This attribute, attached to <code>struct</code> or <code>union</code> type
definition, specifies that each member (other than zero-width bit-fields)
of the structure or union is placed to minimize the memory required.  When
attached to an <code>enum</code> definition, it indicates that the smallest
integral type should be used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">transparent_union</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="729"><code>transparent_union</code> type attribute</indexterm></cindex>

<para>This attribute, attached to a <code>union</code> type definition, indicates
that any function parameter having that union type causes calls to that
function to be treated in a special way.
</para>
<para>First, the argument corresponding to a transparent union type can be of
any type in the union; no cast is required.  Also, if the union contains
a pointer type, the corresponding argument can be a null pointer
constant or a void pointer expression; and if the union contains a void
pointer type, the corresponding argument can be any pointer expression.
If the union member type is a pointer, qualifiers like <code>const</code> on
the referenced type must be respected, just as with normal pointer
conversions.
</para>
<para>Second, the argument is passed to the function using the calling
conventions of the first member of the transparent union, not the calling
conventions of the union itself.  All members of the union must have the
same machine representation; this is necessary for this argument passing
to work properly.
</para>
<para>Transparent unions are designed for library functions that have multiple
interfaces for compatibility reasons.  For example, suppose the
<code>wait</code> function must accept either a value of type <code>int *</code> to
comply with POSIX, or a value of type <code>union wait *</code> to comply with
the 4.1BSD interface.  If <code>wait</code>&textrsquo;s parameter were <code>void *</code>,
<code>wait</code> would accept both kinds of arguments, but it would also
accept any other pointer type and this would make argument type checking
less useful.  Instead, <code>&lt;sys/wait.h&gt;</code> might define the interface
as follows:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef union __attribute__ ((__transparent_union__))
  &lbrace;
    int *__ip;
    union wait *__up;
  &rbrace; wait_status_ptr_t;

pid_t wait (wait_status_ptr_t);
</pre></smallexample>

<noindent></noindent>
<para>This interface allows either <code>int *</code> or <code>union wait *</code>
arguments to be passed, using the <code>int *</code> calling convention.
The program can call <code>wait</code> with arguments of either type:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int w1 () &lbrace; int w; return wait (&amp;w); &rbrace;
int w2 () &lbrace; union wait w; return wait (&amp;w); &rbrace;
</pre></smallexample>

<noindent></noindent>
<para>With this interface, <code>wait</code>&textrsquo;s implementation might look like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">pid_t wait (wait_status_ptr_t p)
&lbrace;
  return waitpid (-1, p.__ip, 0);
&rbrace;
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">unused</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="730"><code>unused</code> type attribute</indexterm></cindex>
<para>When attached to a type (including a <code>union</code> or a <code>struct</code>),
this attribute means that variables of that type are meant to appear
possibly unused.  GCC does not produce a warning for any variables of
that type, even if the variable appears to do nothing.  This is often
the case with lock or thread classes, which are usually defined and then
not referenced, but contain constructors and destructors that have
nontrivial bookkeeping functions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">visibility</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="731"><code>visibility</code> type attribute</indexterm></cindex>
<para>In C++, attribute visibility (<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>) can also be
applied to class, struct, union and enum types.  Unlike other type
attributes, the attribute must appear between the initial keyword and
the name of the type; it cannot appear after the body of the type.
</para>
<para>Note that the type visibility is applied to vague linkage entities
associated with the class (vtable, typeinfo node, etc.).  In
particular, if a class is thrown as an exception in one shared object
and caught in another, the class must have default visibility.
Otherwise the two shared objects are unable to use the same
typeinfo node and exception handling will break.
</para>
</tableitem></tableentry></table>

<para>To specify multiple attributes, separate them by commas within the
double parentheses: for example, <samp>__attribute__ ((aligned (16),
packed))</samp>.
</para>
</subsection>
<node name="ARM-Type-Attributes" spaces=" "><nodename>ARM Type Attributes</nodename><nodenext automatic="on">MeP Type Attributes</nodenext><nodeprev automatic="on">Common Type Attributes</nodeprev><nodeup automatic="on">Type Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>ARM Type Attributes</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="732"><code>notshared</code> type attribute, ARM</indexterm></cindex>
<para>On those ARM targets that support <code>dllimport</code> (such as Symbian
OS), you can use the <code>notshared</code> attribute to indicate that the
virtual table and other similar data for a class should not be
exported from a DLL&eosperiod;  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">class __declspec(notshared) C &lbrace;
public:
  __declspec(dllimport) C();
  virtual void f();
&rbrace;

__declspec(dllexport)
C::C() &lbrace;&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>In this code, <code>C::C</code> is exported from the current DLL, but the
virtual table for <code>C</code> is not exported.  (You can use
<code>__attribute__</code> instead of <code>__declspec</code> if you prefer, but
most Symbian OS code uses <code>__declspec</code>.)
</para>
</subsection>
<node name="MeP-Type-Attributes" spaces=" "><nodename>MeP Type Attributes</nodename><nodenext automatic="on">PowerPC Type Attributes</nodenext><nodeprev automatic="on">ARM Type Attributes</nodeprev><nodeup automatic="on">Type Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>MeP Type Attributes</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="733"><code>based</code> type attribute, MeP</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="734"><code>tiny</code> type attribute, MeP</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="735"><code>near</code> type attribute, MeP</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="736"><code>far</code> type attribute, MeP</indexterm></cindex>
<para>Many of the MeP variable attributes may be applied to types as well.
Specifically, the <code>based</code>, <code>tiny</code>, <code>near</code>, and
<code>far</code> attributes may be applied to either.  The <code>io</code> and
<code>cb</code> attributes may not be applied to types.
</para>
</subsection>
<node name="PowerPC-Type-Attributes" spaces=" "><nodename>PowerPC Type Attributes</nodename><nodenext automatic="on">SPU Type Attributes</nodenext><nodeprev automatic="on">MeP Type Attributes</nodeprev><nodeup automatic="on">Type Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>PowerPC Type Attributes</sectiontitle>

<para>Three attributes currently are defined for PowerPC configurations:
<code>altivec</code>, <code>ms_struct</code> and <code>gcc_struct</code>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="737"><code>ms_struct</code> type attribute, PowerPC</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="738"><code>gcc_struct</code> type attribute, PowerPC</indexterm></cindex>
<para>For full documentation of the <code>ms_struct</code> and <code>gcc_struct</code>
attributes please see the documentation in <ref label="x86-Type-Attributes"><xrefnodename>x86 Type Attributes</xrefnodename></ref>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="739"><code>altivec</code> type attribute, PowerPC</indexterm></cindex>
<para>The <code>altivec</code> attribute allows one to declare AltiVec vector data
types supported by the AltiVec Programming Interface Manual.  The
attribute requires an argument to specify one of three vector types:
<code>vector__</code>, <code>pixel__</code> (always followed by unsigned short),
and <code>bool__</code> (always followed by unsigned).
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">__attribute__((altivec(vector__)))
__attribute__((altivec(pixel__))) unsigned short
__attribute__((altivec(bool__))) unsigned
</pre></smallexample>

<para>These attributes mainly are intended to support the <code>__vector</code>,
<code>__pixel</code>, and <code>__bool</code> AltiVec keywords.
</para>
</subsection>
<node name="SPU-Type-Attributes" spaces=" "><nodename>SPU Type Attributes</nodename><nodenext automatic="on">x86 Type Attributes</nodenext><nodeprev automatic="on">PowerPC Type Attributes</nodeprev><nodeup automatic="on">Type Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>SPU Type Attributes</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="740"><code>spu_vector</code> type attribute, SPU</indexterm></cindex>
<para>The SPU supports the <code>spu_vector</code> attribute for types.  This attribute
allows one to declare vector data types supported by the Sony/Toshiba/IBM SPU
Language Extensions Specification.  It is intended to support the
<code>__vector</code> keyword.
</para>
</subsection>
<node name="x86-Type-Attributes" spaces=" "><nodename>x86 Type Attributes</nodename><nodeprev automatic="on">SPU Type Attributes</nodeprev><nodeup automatic="on">Type Attributes</nodeup></node>
<subsection spaces=" "><sectiontitle>x86 Type Attributes</sectiontitle>

<para>Two attributes are currently defined for x86 configurations:
<code>ms_struct</code> and <code>gcc_struct</code>.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">ms_struct</itemformat></item>
<itemx spaces=" "><itemformat command="code">gcc_struct</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="741"><code>ms_struct</code> type attribute, x86</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="742"><code>gcc_struct</code> type attribute, x86</indexterm></cindex>

<para>If <code>packed</code> is used on a structure, or if bit-fields are used
it may be that the Microsoft ABI packs them differently
than GCC normally packs them.  Particularly when moving packed
data between functions compiled with GCC and the native Microsoft compiler
(either via function call or as data in a file), it may be necessary to access
either format.
</para>
<para>Currently <option>-m[no-]ms-bitfields</option> is provided for the Microsoft Windows x86
compilers to match the native Microsoft compiler.
</para></tableitem></tableentry></table>

</subsection>
</section>
<node name="Label-Attributes" spaces=" "><nodename>Label Attributes</nodename><nodenext automatic="on">Attribute Syntax</nodenext><nodeprev automatic="on">Type Attributes</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Label Attributes</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="743">Label Attributes</indexterm></cindex>

<para>GCC allows attributes to be set on C labels.  <xref label="Attribute-Syntax"><xrefnodename>Attribute Syntax</xrefnodename></xref>, for 
details of the exact syntax for using attributes.  Other attributes are 
available for functions (<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>), variables 
(<pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>) and for types (<pxref label="Type-Attributes"><xrefnodename>Type Attributes</xrefnodename></pxref>).
</para>
<para>This example uses the <code>cold</code> label attribute to indicate the 
<code>ErrorHandling</code> branch is unlikely to be taken and that the
<code>ErrorHandling</code> label is unused:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">
   asm goto (&quot;some asm&quot; : : : : NoError);

/* This branch (the fall-through from the asm) is less commonly used */
ErrorHandling: 
   __attribute__((cold, unused)); /* Semi-colon is required here */
   printf(&quot;error\n&quot;);
   return 0;

NoError:
   printf(&quot;no error\n&quot;);
   return 1;
</pre></smallexample>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">unused</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="744"><code>unused</code> label attribute</indexterm></cindex>
<para>This feature is intended for program-generated code that may contain 
unused labels, but which is compiled with <option>-Wall</option>.  It is
not normally appropriate to use in it human-written code, though it
could be useful in cases where the code that jumps to the label is
contained within an <code>#ifdef</code> conditional.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">hot</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="745"><code>hot</code> label attribute</indexterm></cindex>
<para>The <code>hot</code> attribute on a label is used to inform the compiler that
the path following the label is more likely than paths that are not so
annotated.  This attribute is used in cases where <code>__builtin_expect</code>
cannot be used, for instance with computed goto or <code>asm goto</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">cold</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="746"><code>cold</code> label attribute</indexterm></cindex>
<para>The <code>cold</code> attribute on labels is used to inform the compiler that
the path following the label is unlikely to be executed.  This attribute
is used in cases where <code>__builtin_expect</code> cannot be used, for instance
with computed goto or <code>asm goto</code>.
</para>
</tableitem></tableentry></table>

</section>
<node name="Attribute-Syntax" spaces=" "><nodename>Attribute Syntax</nodename><nodenext automatic="on">Function Prototypes</nodenext><nodeprev automatic="on">Label Attributes</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Attribute Syntax</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="747">attribute syntax</indexterm></cindex>

<para>This section describes the syntax with which <code>__attribute__</code> may be
used, and the constructs to which attribute specifiers bind, for the C
language.  Some details may vary for C++ and Objective-C&eosperiod;  Because of
infelicities in the grammar for attributes, some forms described here
may not be successfully parsed in all cases.
</para>
<para>There are some problems with the semantics of attributes in C++.  For
example, there are no manglings for attributes, although they may affect
code generation, so problems may arise when attributed types are used in
conjunction with templates or overloading.  Similarly, <code>typeid</code>
does not distinguish between types with different attributes.  Support
for attributes in C++ may be restricted in future to attributes on
declarations only, but not on nested declarators.
</para>
<para><xref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></xref>, for details of the semantics of attributes
applying to functions.  <xref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></xref>, for details of the
semantics of attributes applying to variables.  <xref label="Type-Attributes"><xrefnodename>Type Attributes</xrefnodename></xref>,
for details of the semantics of attributes applying to structure, union
and enumerated types.
<xref label="Label-Attributes"><xrefnodename>Label Attributes</xrefnodename></xref>, for details of the semantics of attributes 
applying to labels.
</para>
<para>An <dfn>attribute specifier</dfn> is of the form
<code>__attribute__ ((<var>attribute-list</var>))</code>.  An <dfn>attribute list</dfn>
is a possibly empty comma-separated sequence of <dfn>attributes</dfn>, where
each attribute is one of the following:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Empty.  Empty attributes are ignored.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>An attribute name
(which may be an identifier such as <code>unused</code>, or a reserved
word such as <code>const</code>).
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>An attribute name followed by a parenthesized list of
parameters for the attribute.
These parameters take one of the following forms:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>An identifier.  For example, <code>mode</code> attributes use this form.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>An identifier followed by a comma and a non-empty comma-separated list
of expressions.  For example, <code>format</code> attributes use this form.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>A possibly empty comma-separated list of expressions.  For example,
<code>format_arg</code> attributes use this form with the list being a single
integer constant expression, and <code>alias</code> attributes use this form
with the list being a single string constant.
</para></listitem></itemize>
</listitem></itemize>

<para>An <dfn>attribute specifier list</dfn> is a sequence of one or more attribute
specifiers, not separated by any other tokens.
</para>
<para>You may optionally specify attribute names with <samp>__</samp>
preceding and following the name.
This allows you to use them in header files without
being concerned about a possible macro of the same name.  For example,
you may use the attribute name <code>__noreturn__</code> instead of <code>noreturn</code>.
</para>

<subsubheading spaces=" ">Label Attributes</subsubheading>

<para>In GNU C, an attribute specifier list may appear after the colon following a
label, other than a <code>case</code> or <code>default</code> label.  GNU C++ only permits
attributes on labels if the attribute specifier is immediately
followed by a semicolon (i.e., the label applies to an empty
statement).  If the semicolon is missing, C++ label attributes are
ambiguous, as it is permissible for a declaration, which could begin
with an attribute list, to be labelled in C++.  Declarations cannot be
labelled in C90 or C99, so the ambiguity does not arise there.
</para>
<subsubheading spaces=" ">Type Attributes</subsubheading>

<para>An attribute specifier list may appear as part of a <code>struct</code>,
<code>union</code> or <code>enum</code> specifier.  It may go either immediately
after the <code>struct</code>, <code>union</code> or <code>enum</code> keyword, or after
the closing brace.  The former syntax is preferred.
Where attribute specifiers follow the closing brace, they are considered
to relate to the structure, union or enumerated type defined, not to any
enclosing declaration the type specifier appears in, and the type
defined is not complete until after the attribute specifiers.
<!-- c Otherwise, there would be the following problems: a shift/reduce -->
<!-- c conflict between attributes binding the struct/union/enum and -->
<!-- c binding to the list of specifiers/qualifiers; and "aligned" -->
<!-- c attributes could use sizeof for the structure, but the size could be -->
<!-- c changed later by "packed" attributes. -->
</para>

<subsubheading spaces=" ">All other attributes</subsubheading>

<para>Otherwise, an attribute specifier appears as part of a declaration,
counting declarations of unnamed parameters and type names, and relates
to that declaration (which may be nested in another declaration, for
example in the case of a parameter declaration), or to a particular declarator
within a declaration.  Where an
attribute specifier is applied to a parameter declared as a function or
an array, it should apply to the function or array rather than the
pointer to which the parameter is implicitly converted, but this is not
yet correctly implemented.
</para>
<para>Any list of specifiers and qualifiers at the start of a declaration may
contain attribute specifiers, whether or not such a list may in that
context contain storage class specifiers.  (Some attributes, however,
are essentially in the nature of storage class specifiers, and only make
sense where storage class specifiers may be used; for example,
<code>section</code>.)  There is one necessary limitation to this syntax: the
first old-style parameter declaration in a function definition cannot
begin with an attribute specifier, because such an attribute applies to
the function instead by syntax described below (which, however, is not
yet implemented in this case).  In some other cases, attribute
specifiers are permitted by this grammar but not yet supported by the
compiler.  All attribute specifiers in this place relate to the
declaration as a whole.  In the obsolescent usage where a type of
<code>int</code> is implied by the absence of type specifiers, such a list of
specifiers and qualifiers may be an attribute specifier list with no
other specifiers or qualifiers.
</para>
<para>At present, the first parameter in a function prototype must have some
type specifier that is not an attribute specifier; this resolves an
ambiguity in the interpretation of <code>void f(int
(__attribute__((foo)) x))</code>, but is subject to change.  At present, if
the parentheses of a function declarator contain only attributes then
those attributes are ignored, rather than yielding an error or warning
or implying a single parameter of type int, but this is subject to
change.
</para>
<para>An attribute specifier list may appear immediately before a declarator
(other than the first) in a comma-separated list of declarators in a
declaration of more than one identifier using a single list of
specifiers and qualifiers.  Such attribute specifiers apply
only to the identifier before whose declarator they appear.  For
example, in
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">__attribute__((noreturn)) void d0 (void),
    __attribute__((format(printf, 1, 2))) d1 (const char *, ...),
     d2 (void);
</pre></smallexample>

<noindent></noindent>
<para>the <code>noreturn</code> attribute applies to all the functions
declared; the <code>format</code> attribute only applies to <code>d1</code>.
</para>
<para>An attribute specifier list may appear immediately before the comma,
<code>=</code> or semicolon terminating the declaration of an identifier other
than a function definition.  Such attribute specifiers apply
to the declared object or function.  Where an
assembler name for an object or function is specified (<pxref label="Asm-Labels"><xrefnodename>Asm
Labels</xrefnodename></pxref>), the attribute must follow the <code>asm</code>
specification.
</para>
<para>An attribute specifier list may, in future, be permitted to appear after
the declarator in a function definition (before any old-style parameter
declarations or the function body).
</para>
<para>Attribute specifiers may be mixed with type qualifiers appearing inside
the <code>[]</code> of a parameter array declarator, in the C99 construct by
which such qualifiers are applied to the pointer to which the array is
implicitly converted.  Such attribute specifiers apply to the pointer,
not to the array, but at present this is not implemented and they are
ignored.
</para>
<para>An attribute specifier list may appear at the start of a nested
declarator.  At present, there are some limitations in this usage: the
attributes correctly apply to the declarator, but for most individual
attributes the semantics this implies are not implemented.
When attribute specifiers follow the <code>*</code> of a pointer
declarator, they may be mixed with any type qualifiers present.
The following describes the formal semantics of this syntax.  It makes the
most sense if you are familiar with the formal specification of
declarators in the ISO C standard.
</para>
<para>Consider (as in C99 subclause 6.7.5 paragraph 4) a declaration <code>T
D1</code>, where <code>T</code> contains declaration specifiers that specify a type
<var>Type</var> (such as <code>int</code>) and <code>D1</code> is a declarator that
contains an identifier <var>ident</var>.  The type specified for <var>ident</var>
for derived declarators whose type does not include an attribute
specifier is as in the ISO C standard.
</para>
<para>If <code>D1</code> has the form <code>( <var>attribute-specifier-list</var> D )</code>,
and the declaration <code>T D</code> specifies the type
&textldquo;<var>derived-declarator-type-list</var> <var>Type</var>&textrdquo; for <var>ident</var>, then
<code>T D1</code> specifies the type &textldquo;<var>derived-declarator-type-list</var>
<var>attribute-specifier-list</var> <var>Type</var>&textrdquo; for <var>ident</var>.
</para>
<para>If <code>D1</code> has the form <code>*
<var>type-qualifier-and-attribute-specifier-list</var> D</code>, and the
declaration <code>T D</code> specifies the type
&textldquo;<var>derived-declarator-type-list</var> <var>Type</var>&textrdquo; for <var>ident</var>, then
<code>T D1</code> specifies the type &textldquo;<var>derived-declarator-type-list</var>
<var>type-qualifier-and-attribute-specifier-list</var> pointer to <var>Type</var>&textrdquo; for
<var>ident</var>.
</para>
<para>For example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void (__attribute__((noreturn)) ****f) (void);
</pre></smallexample>

<noindent></noindent>
<para>specifies the type &textldquo;pointer to pointer to pointer to pointer to
non-returning function returning <code>void</code>&textrdquo;.  As another example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">char *__attribute__((aligned(8))) *f;
</pre></smallexample>

<noindent></noindent>
<para>specifies the type &textldquo;pointer to 8-byte-aligned pointer to <code>char</code>&textrdquo;.
Note again that this does not work with most attributes; for example,
the usage of <samp>aligned</samp> and <samp>noreturn</samp> attributes given above
is not yet supported.
</para>
<para>For compatibility with existing code written for compiler versions that
did not implement attributes on nested declarators, some laxity is
allowed in the placing of attributes.  If an attribute that only applies
to types is applied to a declaration, it is treated as applying to
the type of that declaration.  If an attribute that only applies to
declarations is applied to the type of a declaration, it is treated
as applying to that declaration; and, for compatibility with code
placing the attributes immediately before the identifier declared, such
an attribute applied to a function return type is treated as
applying to the function type, and such an attribute applied to an array
element type is treated as applying to the array type.  If an
attribute that only applies to function types is applied to a
pointer-to-function type, it is treated as applying to the pointer
target type; if such an attribute is applied to a function return type
that is not a pointer-to-function type, it is treated as applying
to the function type.
</para>
</section>
<node name="Function-Prototypes" spaces=" "><nodename>Function Prototypes</nodename><nodenext automatic="on">C++ Comments</nodenext><nodeprev automatic="on">Attribute Syntax</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Prototypes and Old-Style Function Definitions</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="748">function prototype declarations</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="749">old-style function definitions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="750">promotion of formal parameters</indexterm></cindex>

<para>GNU C extends ISO C to allow a function prototype to override a later
old-style non-prototype definition.  Consider the following example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">/* <r>Use prototypes unless the compiler is old-fashioned.</r>  */
#ifdef __STDC__
#define P(x) x
#else
#define P(x) ()
#endif

/* <r>Prototype function declaration.</r>  */
int isroot P((uid_t));

/* <r>Old-style function definition.</r>  */
int
isroot (x)   /* <r>??? lossage here ???</r> */
     uid_t x;
&lbrace;
  return x == 0;
&rbrace;
</pre></smallexample>

<para>Suppose the type <code>uid_t</code> happens to be <code>short</code>.  ISO C does
not allow this example, because subword arguments in old-style
non-prototype definitions are promoted.  Therefore in this example the
function definition&textrsquo;s argument is really an <code>int</code>, which does not
match the prototype argument type of <code>short</code>.
</para>
<para>This restriction of ISO C makes it hard to write code that is portable
to traditional C compilers, because the programmer does not know
whether the <code>uid_t</code> type is <code>short</code>, <code>int</code>, or
<code>long</code>.  Therefore, in cases like these GNU C allows a prototype
to override a later old-style definition.  More precisely, in GNU C, a
function prototype argument type overrides the argument type specified
by a later old-style definition if the former type is the same as the
latter type before promotion.  Thus in GNU C the above example is
equivalent to the following:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int isroot (uid_t);

int
isroot (uid_t x)
&lbrace;
  return x == 0;
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>GNU C++ does not support old-style function definitions, so this
extension is irrelevant.
</para>
</section>
<node name="C_002b_002b-Comments" spaces=" "><nodename>C++ Comments</nodename><nodenext automatic="on">Dollar Signs</nodenext><nodeprev automatic="on">Function Prototypes</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>C++ Style Comments</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="751"><code>//</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="752">C++ comments</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="753">comments, C++ style</indexterm></cindex>

<para>In GNU C, you may use C++ style comments, which start with <samp>//</samp> and
continue until the end of the line.  Many other C implementations allow
such comments, and they are included in the 1999 C standard.  However,
C++ style comments are not recognized if you specify an <option>-std</option>
option specifying a version of ISO C before C99, or <option>-ansi</option>
(equivalent to <option>-std=c90</option>).
</para>
</section>
<node name="Dollar-Signs" spaces=" "><nodename>Dollar Signs</nodename><nodenext automatic="on">Character Escapes</nodenext><nodeprev automatic="on">C++ Comments</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Dollar Signs in Identifier Names</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="754">$</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="755">dollar signs in identifier names</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="756">identifier names, dollar signs in</indexterm></cindex>

<para>In GNU C, you may normally use dollar signs in identifier names.
This is because many traditional C implementations allow such identifiers.
However, dollar signs in identifiers are not supported on a few target
machines, typically because the target assembler does not allow them.
</para>
</section>
<node name="Character-Escapes" spaces=" "><nodename>Character Escapes</nodename><nodenext automatic="on">Alignment</nodenext><nodeprev automatic="on">Dollar Signs</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>The Character <key>ESC</key> in Constants</sectiontitle>

<para>You can use the sequence <samp>\e</samp> in a string or character constant to
stand for the ASCII character <key>ESC</key>.
</para>
</section>
<node name="Alignment" spaces=" "><nodename>Alignment</nodename><nodenext automatic="on">Inline</nodenext><nodeprev automatic="on">Character Escapes</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Inquiring on Alignment of Types or Variables</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="757">alignment</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="758">type alignment</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="759">variable alignment</indexterm></cindex>

<para>The keyword <code>__alignof__</code> allows you to inquire about how an object
is aligned, or the minimum alignment usually required by a type.  Its
syntax is just like <code>sizeof</code>.
</para>
<para>For example, if the target machine requires a <code>double</code> value to be
aligned on an 8-byte boundary, then <code>__alignof__ (double)</code> is 8.
This is true on many RISC machines.  On more traditional machine
designs, <code>__alignof__ (double)</code> is 4 or even 2.
</para>
<para>Some machines never actually require alignment; they allow reference to any
data type even at an odd address.  For these machines, <code>__alignof__</code>
reports the smallest alignment that GCC gives the data type, usually as
mandated by the target ABI.
</para>
<para>If the operand of <code>__alignof__</code> is an lvalue rather than a type,
its value is the required alignment for its type, taking into account
any minimum alignment specified with GCC&textrsquo;s <code>__attribute__</code>
extension (<pxref label="Variable-Attributes"><xrefnodename>Variable Attributes</xrefnodename></pxref>).  For example, after this
declaration:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct foo &lbrace; int x; char y; &rbrace; foo1;
</pre></smallexample>

<noindent></noindent>
<para>the value of <code>__alignof__ (foo1.y)</code> is 1, even though its actual
alignment is probably 2 or 4, the same as <code>__alignof__ (int)</code>.
</para>
<para>It is an error to ask for the alignment of an incomplete type.
</para>

</section>
<node name="Inline" spaces=" "><nodename>Inline</nodename><nodenext automatic="on">Volatiles</nodenext><nodeprev automatic="on">Alignment</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>An Inline Function is As Fast As a Macro</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="760">inline functions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="761">integrating function code</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="762">open coding</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="763">macros, inline alternative</indexterm></cindex>

<para>By declaring a function inline, you can direct GCC to make
calls to that function faster.  One way GCC can achieve this is to
integrate that function&textrsquo;s code into the code for its callers.  This
makes execution faster by eliminating the function-call overhead; in
addition, if any of the actual argument values are constant, their
known values may permit simplifications at compile time so that not
all of the inline function&textrsquo;s code needs to be included.  The effect on
code size is less predictable; object code may be larger or smaller
with function inlining, depending on the particular case.  You can
also direct GCC to try to integrate all &textldquo;simple enough&textrdquo; functions
into their callers with the option <option>-finline-functions</option>.
</para>
<para>GCC implements three different semantics of declaring a function
inline.  One is available with <option>-std=gnu89</option> or
<option>-fgnu89-inline</option> or when <code>gnu_inline</code> attribute is present
on all inline declarations, another when
<option>-std=c99</option>, <option>-std=c11</option>,
<option>-std=gnu99</option> or <option>-std=gnu11</option>
(without <option>-fgnu89-inline</option>), and the third
is used when compiling C++.
</para>
<para>To declare a function inline, use the <code>inline</code> keyword in its
declaration, like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">static inline int
inc (int *a)
&lbrace;
  return (*a)++;
&rbrace;
</pre></smallexample>

<para>If you are writing a header file to be included in ISO C90 programs, write
<code>__inline__</code> instead of <code>inline</code>.  <xref label="Alternate-Keywords"><xrefnodename>Alternate Keywords</xrefnodename></xref>.
</para>
<para>The three types of inlining behave similarly in two important cases:
when the <code>inline</code> keyword is used on a <code>static</code> function,
like the example above, and when a function is first declared without
using the <code>inline</code> keyword and then is defined with
<code>inline</code>, like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern int inc (int *a);
inline int
inc (int *a)
&lbrace;
  return (*a)++;
&rbrace;
</pre></smallexample>

<para>In both of these common cases, the program behaves the same as if you
had not used the <code>inline</code> keyword, except for its speed.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="764">inline functions, omission of</indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2621" incode="1">fkeep-inline-functions</indexterm></indexcommand>
<para>When a function is both inline and <code>static</code>, if all calls to the
function are integrated into the caller, and the function&textrsquo;s address is
never used, then the function&textrsquo;s own assembler code is never referenced.
In this case, GCC does not actually output assembler code for the
function, unless you specify the option <option>-fkeep-inline-functions</option>.
Some calls cannot be integrated for various reasons (in particular,
calls that precede the function&textrsquo;s definition cannot be integrated, and
neither can recursive calls within the definition).  If there is a
nonintegrated call, then the function is compiled to assembler code as
usual.  The function must also be compiled as usual if the program
refers to its address, because that can&textrsquo;t be inlined.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2622" incode="1">Winline</indexterm></indexcommand>
<para>Note that certain usages in a function definition can make it unsuitable
for inline substitution.  Among these usages are: variadic functions, use of
<code>alloca</code>, use of variable-length data types (<pxref label="Variable-Length"><xrefnodename>Variable Length</xrefnodename></pxref>),
use of computed goto (<pxref label="Labels-as-Values"><xrefnodename>Labels as Values</xrefnodename></pxref>), use of nonlocal goto,
and nested functions (<pxref label="Nested-Functions"><xrefnodename>Nested Functions</xrefnodename></pxref>).  Using <option>-Winline</option>
warns when a function marked <code>inline</code> could not be substituted,
and gives the reason for the failure.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="765">automatic <code>inline</code> for C++ member fns</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="766"><code>inline</code> automatic for C++ member fns</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="767">member fns, automatically <code>inline</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="768">C++ member fns, automatically <code>inline</code></indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2623" incode="1">fno-default-inline</indexterm></indexcommand>
<para>As required by ISO C++, GCC considers member functions defined within
the body of a class to be marked inline even if they are
not explicitly declared with the <code>inline</code> keyword.  You can
override this with <option>-fno-default-inline</option>; <pxref label="C_002b_002b-Dialect-Options"><xrefnodename>C++ Dialect
Options</xrefnodename><xrefprinteddesc>Options Controlling C++ Dialect</xrefprinteddesc></pxref>.
</para>
<para>GCC does not inline any functions when not optimizing unless you specify
the <samp>always_inline</samp> attribute for the function, like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">/* <r>Prototype.</r>  */
inline void foo (const char) __attribute__((always_inline));
</pre></smallexample>

<para>The remainder of this section is specific to GNU C90 inlining.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="769">non-static inline function</indexterm></cindex>
<para>When an inline function is not <code>static</code>, then the compiler must assume
that there may be calls from other source files; since a global symbol can
be defined only once in any program, the function must not be defined in
the other source files, so the calls therein cannot be integrated.
Therefore, a non-<code>static</code> inline function is always compiled on its
own in the usual fashion.
</para>
<para>If you specify both <code>inline</code> and <code>extern</code> in the function
definition, then the definition is used only for inlining.  In no case
is the function compiled on its own, not even if you refer to its
address explicitly.  Such an address becomes an external reference, as
if you had only declared the function, and had not defined it.
</para>
<para>This combination of <code>inline</code> and <code>extern</code> has almost the
effect of a macro.  The way to use it is to put a function definition in
a header file with these keywords, and put another copy of the
definition (lacking <code>inline</code> and <code>extern</code>) in a library file.
The definition in the header file causes most calls to the function
to be inlined.  If any uses of the function remain, they refer to
the single copy in the library.
</para>
</section>
<node name="Volatiles" spaces=" "><nodename>Volatiles</nodename><nodenext automatic="on">Using Assembly Language with C</nodenext><nodeprev automatic="on">Inline</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>When is a Volatile Object Accessed?</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="770">accessing volatiles</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="771">volatile read</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="772">volatile write</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="773">volatile access</indexterm></cindex>

<para>C has the concept of volatile objects.  These are normally accessed by
pointers and used for accessing hardware or inter-thread
communication.  The standard encourages compilers to refrain from
optimizations concerning accesses to volatile objects, but leaves it
implementation defined as to what constitutes a volatile access.  The
minimum requirement is that at a sequence point all previous accesses
to volatile objects have stabilized and no subsequent accesses have
occurred.  Thus an implementation is free to reorder and combine
volatile accesses that occur between sequence points, but cannot do
so for accesses across a sequence point.  The use of volatile does
not allow you to violate the restriction on updating objects multiple
times between two sequence points.
</para>
<para>Accesses to non-volatile objects are not ordered with respect to
volatile accesses.  You cannot use a volatile object as a memory
barrier to order a sequence of writes to non-volatile memory.  For
instance:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int *ptr = <var>something</var>;
volatile int vobj;
*ptr = <var>something</var>;
vobj = 1;
</pre></smallexample>

<noindent></noindent>
<para>Unless <var>*ptr</var> and <var>vobj</var> can be aliased, it is not guaranteed
that the write to <var>*ptr</var> occurs by the time the update
of <var>vobj</var> happens.  If you need this guarantee, you must use
a stronger memory barrier such as:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int *ptr = <var>something</var>;
volatile int vobj;
*ptr = <var>something</var>;
asm volatile (&quot;&quot; : : : &quot;memory&quot;);
vobj = 1;
</pre></smallexample>

<para>A scalar volatile object is read when it is accessed in a void context:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">volatile int *src = <var>somevalue</var>;
*src;
</pre></smallexample>

<para>Such expressions are rvalues, and GCC implements this as a
read of the volatile object being pointed to.
</para>
<para>Assignments are also expressions and have an rvalue.  However when
assigning to a scalar volatile, the volatile object is not reread,
regardless of whether the assignment expression&textrsquo;s rvalue is used or
not.  If the assignment&textrsquo;s rvalue is used, the value is that assigned
to the volatile object.  For instance, there is no read of <var>vobj</var>
in all the following cases:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int obj;
volatile int vobj;
vobj = <var>something</var>;
obj = vobj = <var>something</var>;
obj ? vobj = <var>onething</var> : vobj = <var>anotherthing</var>;
obj = (<var>something</var>, vobj = <var>anotherthing</var>);
</pre></smallexample>

<para>If you need to read the volatile object after an assignment has
occurred, you must use a separate expression with an intervening
sequence point.
</para>
<para>As bit-fields are not individually addressable, volatile bit-fields may
be implicitly read when written to, or when adjacent bit-fields are
accessed.  Bit-field operations may be optimized such that adjacent
bit-fields are only partially accessed, if they straddle a storage unit
boundary.  For these reasons it is unwise to use volatile bit-fields to
access hardware.
</para>
</section>
<node name="Using-Assembly-Language-with-C" spaces=" "><nodename>Using Assembly Language with C</nodename><nodenext automatic="on">Alternate Keywords</nodenext><nodeprev automatic="on">Volatiles</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>How to Use Inline Assembly Language in C Code</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="774"><code>asm</code> keyword</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="775">assembly language in C</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="776">inline assembly language</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="777">mixing assembly language and C</indexterm></cindex>

<para>The <code>asm</code> keyword allows you to embed assembler instructions
within C code.  GCC provides two forms of inline <code>asm</code>
statements.  A <dfn>basic <code>asm</code></dfn> statement is one with no
operands (<pxref label="Basic-Asm"><xrefnodename>Basic Asm</xrefnodename></pxref>), while an <dfn>extended <code>asm</code></dfn>
statement (<pxref label="Extended-Asm"><xrefnodename>Extended Asm</xrefnodename></pxref>) includes one or more operands.  
The extended form is preferred for mixing C and assembly language
within a function, but to include assembly language at
top level you must use basic <code>asm</code>.
</para>
<para>You can also use the <code>asm</code> keyword to override the assembler name
for a C symbol, or to place a C variable in a specific register.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::          ">Basic Asm</menunode><menudescription><pre xml:space="preserve">Inline assembler without operands.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">Extended Asm</menunode><menudescription><pre xml:space="preserve">Inline assembler with operands.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Constraints</menunode><menudescription><pre xml:space="preserve">Constraints for <code>asm</code> operands
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Asm Labels</menunode><menudescription><pre xml:space="preserve">Specifying the assembler name to use for a C symbol.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">Explicit Reg Vars</menunode><menudescription><pre xml:space="preserve">Defining variables residing in specified registers.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Size of an asm</menunode><menudescription><pre xml:space="preserve">How GCC calculates the size of an <code>asm</code> block.
</pre></menudescription></menuentry></menu>

<node name="Basic-Asm" spaces=" "><nodename>Basic Asm</nodename><nodenext automatic="on">Extended Asm</nodenext><nodeup automatic="on">Using Assembly Language with C</nodeup></node>
<subsection spaces=" "><sectiontitle>Basic Asm &textmdash; Assembler Instructions Without Operands</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="778">basic <code>asm</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="779">assembly language in C, basic</indexterm></cindex>

<para>A basic <code>asm</code> statement has the following syntax:
</para>
<example endspaces=" ">
<pre xml:space="preserve">asm <r>[</r> volatile <r>]</r> ( <var>AssemblerInstructions</var> )
</pre></example>

<para>The <code>asm</code> keyword is a GNU extension.
When writing code that can be compiled with <option>-ansi</option> and the
various <option>-std</option> options, use <code>__asm__</code> instead of 
<code>asm</code> (<pxref label="Alternate-Keywords"><xrefnodename>Alternate Keywords</xrefnodename></pxref>).
</para>
<subsubheading spaces=" ">Qualifiers</subsubheading>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">volatile</itemformat></item>
</tableterm><tableitem><para>The optional <code>volatile</code> qualifier has no effect. 
All basic <code>asm</code> blocks are implicitly volatile.
</para></tableitem></tableentry></table>

<subsubheading spaces=" ">Parameters</subsubheading>
<table commandarg="var" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="var">AssemblerInstructions</itemformat></item>
</tableterm><tableitem><para>This is a literal string that specifies the assembler code. The string can 
contain any instructions recognized by the assembler, including directives. 
GCC does not parse the assembler instructions themselves and 
does not know what they mean or even whether they are valid assembler input. 
</para>
<para>You may place multiple assembler instructions together in a single <code>asm</code> 
string, separated by the characters normally used in assembly code for the 
system. A combination that works in most places is a newline to break the 
line, plus a tab character (written as <samp>\n\t</samp>).
Some assemblers allow semicolons as a line separator. However, 
note that some assembler dialects use semicolons to start a comment. 
</para></tableitem></tableentry></table>

<subsubheading spaces=" ">Remarks</subsubheading>
<para>Using extended <code>asm</code> typically produces smaller, safer, and more
efficient code, and in most cases it is a better solution than basic
<code>asm</code>.  However, there are two situations where only basic <code>asm</code>
can be used:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Extended <code>asm</code> statements have to be inside a C
function, so to write inline assembly language at file scope (&textldquo;top-level&textrdquo;),
outside of C functions, you must use basic <code>asm</code>.
You can use this technique to emit assembler directives,
define assembly language macros that can be invoked elsewhere in the file,
or write entire functions in assembly language.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Functions declared
with the <code>naked</code> attribute also require basic <code>asm</code>
(<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>).
</para></listitem></itemize>

<para>Safely accessing C data and calling functions from basic <code>asm</code> is more 
complex than it may appear. To access C data, it is better to use extended 
<code>asm</code>.
</para>
<para>Do not expect a sequence of <code>asm</code> statements to remain perfectly 
consecutive after compilation. If certain instructions need to remain 
consecutive in the output, put them in a single multi-instruction <code>asm</code>
statement. Note that GCC&textrsquo;s optimizers can move <code>asm</code> statements 
relative to other code, including across jumps.
</para>
<para><code>asm</code> statements may not perform jumps into other <code>asm</code> statements. 
GCC does not know about these jumps, and therefore cannot take 
account of them when deciding how to optimize. Jumps from <code>asm</code> to C 
labels are only supported in extended <code>asm</code>.
</para>
<para>Under certain circumstances, GCC may duplicate (or remove duplicates of) your 
assembly code when optimizing. This can lead to unexpected duplicate 
symbol errors during compilation if your assembly code defines symbols or 
labels.
</para>
<para>Since GCC does not parse the <var>AssemblerInstructions</var>, it has no 
visibility of any symbols it references. This may result in GCC discarding 
those symbols as unreferenced.
</para>
<para>The compiler copies the assembler instructions in a basic <code>asm</code> 
verbatim to the assembly language output file, without 
processing dialects or any of the <samp>%</samp> operators that are available with
extended <code>asm</code>. This results in minor differences between basic 
<code>asm</code> strings and extended <code>asm</code> templates. For example, to refer to 
registers you might use <samp>%eax</samp> in basic <code>asm</code> and
<samp>%%eax</samp> in extended <code>asm</code>.
</para>
<para>On targets such as x86 that support multiple assembler dialects,
all basic <code>asm</code> blocks use the assembler dialect specified by the 
<option>-masm</option> command-line option (<pxref label="x86-Options"><xrefnodename>x86 Options</xrefnodename></pxref>).  
Basic <code>asm</code> provides no
mechanism to provide different assembler strings for different dialects.
</para>
<para>Here is an example of basic <code>asm</code> for i386:
</para>
<example endspaces=" ">
<pre xml:space="preserve">/* Note that this code will not compile with -masm=intel */
#define DebugBreak() asm(&quot;int $3&quot;)
</pre></example>

</subsection>
<node name="Extended-Asm" spaces=" "><nodename>Extended Asm</nodename><nodenext automatic="on">Constraints</nodenext><nodeprev automatic="on">Basic Asm</nodeprev><nodeup automatic="on">Using Assembly Language with C</nodeup></node>
<subsection spaces=" "><sectiontitle>Extended Asm - Assembler Instructions with C Expression Operands</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="780">extended <code>asm</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="781">assembly language in C, extended</indexterm></cindex>

<para>With extended <code>asm</code> you can read and write C variables from 
assembler and perform jumps from assembler code to C labels.  
Extended <code>asm</code> syntax uses colons (<samp>:</samp>) to delimit
the operand parameters after the assembler template:
</para>
<example endspaces=" ">
<pre xml:space="preserve">asm <r>[</r>volatile<r>]</r> ( <var>AssemblerTemplate</var> 
                 : <var>OutputOperands</var> 
                 <r>[</r> : <var>InputOperands</var>
                 <r>[</r> : <var>Clobbers</var> <r>]</r> <r>]</r>)

asm <r>[</r>volatile<r>]</r> goto ( <var>AssemblerTemplate</var> 
                      : 
                      : <var>InputOperands</var>
                      : <var>Clobbers</var>
                      : <var>GotoLabels</var>)
</pre></example>

<para>The <code>asm</code> keyword is a GNU extension.
When writing code that can be compiled with <option>-ansi</option> and the
various <option>-std</option> options, use <code>__asm__</code> instead of 
<code>asm</code> (<pxref label="Alternate-Keywords"><xrefnodename>Alternate Keywords</xrefnodename></pxref>).
</para>
<subsubheading spaces=" ">Qualifiers</subsubheading>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">volatile</itemformat></item>
</tableterm><tableitem><para>The typical use of extended <code>asm</code> statements is to manipulate input 
values to produce output values. However, your <code>asm</code> statements may 
also produce side effects. If so, you may need to use the <code>volatile</code> 
qualifier to disable certain optimizations. <xref label="Volatile"><xrefnodename>Volatile</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">goto</itemformat></item>
</tableterm><tableitem><para>This qualifier informs the compiler that the <code>asm</code> statement may 
perform a jump to one of the labels listed in the <var>GotoLabels</var>.
<xref label="GotoLabels"><xrefnodename>GotoLabels</xrefnodename></xref>.
</para></tableitem></tableentry></table>

<subsubheading spaces=" ">Parameters</subsubheading>
<table commandarg="var" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="var">AssemblerTemplate</itemformat></item>
</tableterm><tableitem><para>This is a literal string that is the template for the assembler code. It is a 
combination of fixed text and tokens that refer to the input, output, 
and goto parameters. <xref label="AssemblerTemplate"><xrefnodename>AssemblerTemplate</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="var">OutputOperands</itemformat></item>
</tableterm><tableitem><para>A comma-separated list of the C variables modified by the instructions in the 
<var>AssemblerTemplate</var>.  An empty list is permitted.  <xref label="OutputOperands"><xrefnodename>OutputOperands</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="var">InputOperands</itemformat></item>
</tableterm><tableitem><para>A comma-separated list of C expressions read by the instructions in the 
<var>AssemblerTemplate</var>.  An empty list is permitted.  <xref label="InputOperands"><xrefnodename>InputOperands</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="var">Clobbers</itemformat></item>
</tableterm><tableitem><para>A comma-separated list of registers or other values changed by the 
<var>AssemblerTemplate</var>, beyond those listed as outputs.
An empty list is permitted.  <xref label="Clobbers"><xrefnodename>Clobbers</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="var">GotoLabels</itemformat></item>
</tableterm><tableitem><para>When you are using the <code>goto</code> form of <code>asm</code>, this section contains 
the list of all C labels to which the code in the 
<var>AssemblerTemplate</var> may jump. 
<xref label="GotoLabels"><xrefnodename>GotoLabels</xrefnodename></xref>.
</para>
<para><code>asm</code> statements may not perform jumps into other <code>asm</code> statements,
only to the listed <var>GotoLabels</var>.
GCC&textrsquo;s optimizers do not know about other jumps; therefore they cannot take 
account of them when deciding how to optimize.
</para></tableitem></tableentry></table>

<para>The total number of input + output + goto operands is limited to 30.
</para>
<subsubheading spaces=" ">Remarks</subsubheading>
<para>The <code>asm</code> statement allows you to include assembly instructions directly 
within C code. This may help you to maximize performance in time-sensitive 
code or to access assembly instructions that are not readily available to C 
programs.
</para>
<para>Note that extended <code>asm</code> statements must be inside a function. Only 
basic <code>asm</code> may be outside functions (<pxref label="Basic-Asm"><xrefnodename>Basic Asm</xrefnodename></pxref>).
Functions declared with the <code>naked</code> attribute also require basic 
<code>asm</code> (<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>).
</para>
<para>While the uses of <code>asm</code> are many and varied, it may help to think of an 
<code>asm</code> statement as a series of low-level instructions that convert input 
parameters to output parameters. So a simple (if not particularly useful) 
example for i386 using <code>asm</code> might look like this:
</para>
<example endspaces=" ">
<pre xml:space="preserve">int src = 1;
int dst;   

asm (&quot;mov %1, %0\n\t&quot;
    &quot;add $1, %0&quot;
    : &quot;=r&quot; (dst) 
    : &quot;r&quot; (src));

printf(&quot;%d\n&quot;, dst);
</pre></example>

<para>This code copies <code>src</code> to <code>dst</code> and add 1 to <code>dst</code>.
</para>
<anchor name="Volatile">Volatile</anchor>
<subsubsection spaces=" "><sectiontitle>Volatile</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="782">volatile <code>asm</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="783"><code>asm</code> volatile</indexterm></cindex>

<para>GCC&textrsquo;s optimizers sometimes discard <code>asm</code> statements if they determine 
there is no need for the output variables. Also, the optimizers may move 
code out of loops if they believe that the code will always return the same 
result (i.e. none of its input values change between calls). Using the 
<code>volatile</code> qualifier disables these optimizations. <code>asm</code> statements 
that have no output operands, including <code>asm goto</code> statements, 
are implicitly volatile.
</para>
<para>This i386 code demonstrates a case that does not use (or require) the 
<code>volatile</code> qualifier. If it is performing assertion checking, this code 
uses <code>asm</code> to perform the validation. Otherwise, <code>dwRes</code> is 
unreferenced by any code. As a result, the optimizers can discard the 
<code>asm</code> statement, which in turn removes the need for the entire 
<code>DoCheck</code> routine. By omitting the <code>volatile</code> qualifier when it 
isn&textrsquo;t needed you allow the optimizers to produce the most efficient code 
possible.
</para>
<example endspaces=" ">
<pre xml:space="preserve">void DoCheck(uint32_t dwSomeValue)
&lbrace;
   uint32_t dwRes;

   // Assumes dwSomeValue is not zero.
   asm (&quot;bsfl %1,%0&quot;
     : &quot;=r&quot; (dwRes)
     : &quot;r&quot; (dwSomeValue)
     : &quot;cc&quot;);

   assert(dwRes &gt; 3);
&rbrace;
</pre></example>

<para>The next example shows a case where the optimizers can recognize that the input 
(<code>dwSomeValue</code>) never changes during the execution of the function and can 
therefore move the <code>asm</code> outside the loop to produce more efficient code. 
Again, using <code>volatile</code> disables this type of optimization.
</para>
<example endspaces=" ">
<pre xml:space="preserve">void do_print(uint32_t dwSomeValue)
&lbrace;
   uint32_t dwRes;

   for (uint32_t x=0; x &lt; 5; x++)
   &lbrace;
      // Assumes dwSomeValue is not zero.
      asm (&quot;bsfl %1,%0&quot;
        : &quot;=r&quot; (dwRes)
        : &quot;r&quot; (dwSomeValue)
        : &quot;cc&quot;);

      printf(&quot;%u: %u %u\n&quot;, x, dwSomeValue, dwRes);
   &rbrace;
&rbrace;
</pre></example>

<para>The following example demonstrates a case where you need to use the 
<code>volatile</code> qualifier. 
It uses the x86 <code>rdtsc</code> instruction, which reads 
the computer&textrsquo;s time-stamp counter. Without the <code>volatile</code> qualifier, 
the optimizers might assume that the <code>asm</code> block will always return the 
same value and therefore optimize away the second call.
</para>
<example endspaces=" ">
<pre xml:space="preserve">uint64_t msr;

asm volatile ( &quot;rdtsc\n\t&quot;    // Returns the time in EDX:EAX.
        &quot;shl $32, %%rdx\n\t&quot;  // Shift the upper bits left.
        &quot;or %%rdx, %0&quot;        // 'Or' in the lower bits.
        : &quot;=a&quot; (msr)
        : 
        : &quot;rdx&quot;);

printf(&quot;msr: %llx\n&quot;, msr);

// Do other work...

// Reprint the timestamp
asm volatile ( &quot;rdtsc\n\t&quot;    // Returns the time in EDX:EAX.
        &quot;shl $32, %%rdx\n\t&quot;  // Shift the upper bits left.
        &quot;or %%rdx, %0&quot;        // 'Or' in the lower bits.
        : &quot;=a&quot; (msr)
        : 
        : &quot;rdx&quot;);

printf(&quot;msr: %llx\n&quot;, msr);
</pre></example>

<para>GCC&textrsquo;s optimizers do not treat this code like the non-volatile code in the 
earlier examples. They do not move it out of loops or omit it on the 
assumption that the result from a previous call is still valid.
</para>
<para>Note that the compiler can move even volatile <code>asm</code> instructions relative 
to other code, including across jump instructions. For example, on many 
targets there is a system register that controls the rounding mode of 
floating-point operations. Setting it with a volatile <code>asm</code>, as in the 
following PowerPC example, does not work reliably.
</para>
<example endspaces=" ">
<pre xml:space="preserve">asm volatile(&quot;mtfsf 255, %0&quot; : : &quot;f&quot; (fpenv));
sum = x + y;
</pre></example>

<para>The compiler may move the addition back before the volatile <code>asm</code>. To 
make it work as expected, add an artificial dependency to the <code>asm</code> by 
referencing a variable in the subsequent code, for example: 
</para>
<example endspaces=" ">
<pre xml:space="preserve">asm volatile (&quot;mtfsf 255,%1&quot; : &quot;=X&quot; (sum) : &quot;f&quot; (fpenv));
sum = x + y;
</pre></example>

<para>Under certain circumstances, GCC may duplicate (or remove duplicates of) your 
assembly code when optimizing. This can lead to unexpected duplicate symbol 
errors during compilation if your asm code defines symbols or labels. 
Using <samp>%=</samp> 
(<pxref label="AssemblerTemplate"><xrefnodename>AssemblerTemplate</xrefnodename></pxref>) may help resolve this problem.
</para>
<anchor name="AssemblerTemplate">AssemblerTemplate</anchor>
</subsubsection>
<subsubsection spaces=" "><sectiontitle>Assembler Template</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="784"><code>asm</code> assembler template</indexterm></cindex>

<para>An assembler template is a literal string containing assembler instructions.
The compiler replaces tokens in the template that refer 
to inputs, outputs, and goto labels,
and then outputs the resulting string to the assembler. The 
string can contain any instructions recognized by the assembler, including 
directives. GCC does not parse the assembler instructions 
themselves and does not know what they mean or even whether they are valid 
assembler input. However, it does count the statements 
(<pxref label="Size-of-an-asm"><xrefnodename>Size of an asm</xrefnodename></pxref>).
</para>
<para>You may place multiple assembler instructions together in a single <code>asm</code> 
string, separated by the characters normally used in assembly code for the 
system. A combination that works in most places is a newline to break the 
line, plus a tab character to move to the instruction field (written as 
<samp>\n\t</samp>). 
Some assemblers allow semicolons as a line separator. However, note 
that some assembler dialects use semicolons to start a comment. 
</para>
<para>Do not expect a sequence of <code>asm</code> statements to remain perfectly 
consecutive after compilation, even when you are using the <code>volatile</code> 
qualifier. If certain instructions need to remain consecutive in the output, 
put them in a single multi-instruction asm statement.
</para>
<para>Accessing data from C programs without using input/output operands (such as 
by using global symbols directly from the assembler template) may not work as 
expected. Similarly, calling functions directly from an assembler template 
requires a detailed understanding of the target assembler and ABI.
</para>
<para>Since GCC does not parse the assembler template,
it has no visibility of any 
symbols it references. This may result in GCC discarding those symbols as 
unreferenced unless they are also listed as input, output, or goto operands.
</para>
<subsubheading spaces=" ">Special format strings</subsubheading>

<para>In addition to the tokens described by the input, output, and goto operands, 
these tokens have special meanings in the assembler template:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">%% </itemformat></item>
</tableterm><tableitem><para>Outputs a single <samp>%</samp> into the assembler code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%= </itemformat></item>
</tableterm><tableitem><para>Outputs a number that is unique to each instance of the <code>asm</code> 
statement in the entire compilation. This option is useful when creating local 
labels and referring to them multiple times in a single template that 
generates multiple assembler instructions. 
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%&lbrace;</itemformat></item>
<itemx spaces=" "><itemformat command="samp">%|</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">%&rbrace;</itemformat></itemx>
</tableterm><tableitem><para>Outputs <samp>&lbrace;</samp>, <samp>|</samp>, and <samp>&rbrace;</samp> characters (respectively)
into the assembler code.  When unescaped, these characters have special
meaning to indicate multiple assembler dialects, as described below.
</para></tableitem></tableentry></table>

<subsubheading spaces=" ">Multiple assembler dialects in <code>asm</code> templates</subsubheading>

<para>On targets such as x86, GCC supports multiple assembler dialects.
The <option>-masm</option> option controls which dialect GCC uses as its 
default for inline assembler. The target-specific documentation for the 
<option>-masm</option> option contains the list of supported dialects, as well as the 
default dialect if the option is not specified. This information may be 
important to understand, since assembler code that works correctly when 
compiled using one dialect will likely fail if compiled using another.
<xref label="x86-Options"><xrefnodename>x86 Options</xrefnodename></xref>.
</para>
<para>If your code needs to support multiple assembler dialects (for example, if 
you are writing public headers that need to support a variety of compilation 
options), use constructs of this form:
</para>
<example endspaces=" ">
<pre xml:space="preserve">&lbrace; dialect0 | dialect1 | dialect2... &rbrace;
</pre></example>

<para>This construct outputs <code>dialect0</code> 
when using dialect #0 to compile the code, 
<code>dialect1</code> for dialect #1, etc. If there are fewer alternatives within the 
braces than the number of dialects the compiler supports, the construct 
outputs nothing.
</para>
<para>For example, if an x86 compiler supports two dialects
(<samp>att</samp>, <samp>intel</samp>), an 
assembler template such as this:
</para>
<example endspaces=" ">
<pre xml:space="preserve">&quot;bt&lbrace;l %[Offset],%[Base] | %[Base],%[Offset]&rbrace;; jc %l2&quot;
</pre></example>

<noindent></noindent>
<para>is equivalent to one of
</para>
<example endspaces=" ">
<pre xml:space="preserve">&quot;btl %[Offset],%[Base] ; jc %l2&quot;   <r>/* att dialect */</r>
&quot;bt %[Base],%[Offset]; jc %l2&quot;     <r>/* intel dialect */</r>
</pre></example>

<para>Using that same compiler, this code:
</para>
<example endspaces=" ">
<pre xml:space="preserve">&quot;xchg&lbrace;l&rbrace;\t&lbrace;%%&rbrace;ebx, %1&quot;
</pre></example>

<noindent></noindent>
<para>corresponds to either
</para>
<example endspaces=" ">
<pre xml:space="preserve">&quot;xchgl\t%%ebx, %1&quot;                 <r>/* att dialect */</r>
&quot;xchg\tebx, %1&quot;                    <r>/* intel dialect */</r>
</pre></example>

<para>There is no support for nesting dialect alternatives.
</para>
<anchor name="OutputOperands">OutputOperands</anchor>
</subsubsection>
<subsubsection spaces=" "><sectiontitle>Output Operands</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="785"><code>asm</code> output operands</indexterm></cindex>

<para>An <code>asm</code> statement has zero or more output operands indicating the names
of C variables modified by the assembler code.
</para>
<para>In this i386 example, <code>old</code> (referred to in the template string as 
<code>%0</code>) and <code>*Base</code> (as <code>%1</code>) are outputs and <code>Offset</code> 
(<code>%2</code>) is an input:
</para>
<example endspaces=" ">
<pre xml:space="preserve">bool old;

__asm__ (&quot;btsl %2,%1\n\t&quot; // Turn on zero-based bit #Offset in Base.
         &quot;sbb %0,%0&quot;      // Use the CF to calculate old.
   : &quot;=r&quot; (old), &quot;+rm&quot; (*Base)
   : &quot;Ir&quot; (Offset)
   : &quot;cc&quot;);

return old;
</pre></example>

<para>Operands are separated by commas.  Each operand has this format:
</para>
<example endspaces=" ">
<pre xml:space="preserve"><r>[</r> [<var>asmSymbolicName</var>] <r>]</r> <var>constraint</var> (<var>cvariablename</var>)
</pre></example>

<table commandarg="var" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="var">asmSymbolicName</itemformat></item>
</tableterm><tableitem><para>Specifies a symbolic name for the operand.
Reference the name in the assembler template 
by enclosing it in square brackets 
(i.e. <samp>%[Value]</samp>). The scope of the name is the <code>asm</code> statement 
that contains the definition. Any valid C variable name is acceptable, 
including names already defined in the surrounding code. No two operands 
within the same <code>asm</code> statement can use the same symbolic name.
</para>
<para>When not using an <var>asmSymbolicName</var>, use the (zero-based) position
of the operand 
in the list of operands in the assembler template. For example if there are 
three output operands, use <samp>%0</samp> in the template to refer to the first, 
<samp>%1</samp> for the second, and <samp>%2</samp> for the third. 
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="var">constraint</itemformat></item>
</tableterm><tableitem><para>A string constant specifying constraints on the placement of the operand; 
<xref label="Constraints"><xrefnodename>Constraints</xrefnodename></xref>, for details.
</para>
<para>Output constraints must begin with either <samp>=</samp> (a variable overwriting an 
existing value) or <samp>+</samp> (when reading and writing). When using 
<samp>=</samp>, do not assume the location contains the existing value
on entry to the <code>asm</code>, except 
when the operand is tied to an input; <pxref label="InputOperands"><xrefnodename>InputOperands</xrefnodename><xrefprinteddesc>Input Operands</xrefprinteddesc></pxref>.
</para>
<para>After the prefix, there must be one or more additional constraints 
(<pxref label="Constraints"><xrefnodename>Constraints</xrefnodename></pxref>) that describe where the value resides. Common 
constraints include <samp>r</samp> for register and <samp>m</samp> for memory. 
When you list more than one possible location (for example, <code>&quot;=rm&quot;</code>),
the compiler chooses the most efficient one based on the current context. 
If you list as many alternates as the <code>asm</code> statement allows, you permit 
the optimizers to produce the best possible code. 
If you must use a specific register, but your Machine Constraints do not
provide sufficient control to select the specific register you want, 
local register variables may provide a solution (<pxref label="Local-Reg-Vars"><xrefnodename>Local Reg Vars</xrefnodename></pxref>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="var">cvariablename</itemformat></item>
</tableterm><tableitem><para>Specifies a C lvalue expression to hold the output, typically a variable name.
The enclosing parentheses are a required part of the syntax.
</para>
</tableitem></tableentry></table>

<para>When the compiler selects the registers to use to 
represent the output operands, it does not use any of the clobbered registers 
(<pxref label="Clobbers"><xrefnodename>Clobbers</xrefnodename></pxref>).
</para>
<para>Output operand expressions must be lvalues. The compiler cannot check whether 
the operands have data types that are reasonable for the instruction being 
executed. For output expressions that are not directly addressable (for 
example a bit-field), the constraint must allow a register. In that case, GCC 
uses the register as the output of the <code>asm</code>, and then stores that 
register into the output. 
</para>
<para>Operands using the <samp>+</samp> constraint modifier count as two operands 
(that is, both as input and output) towards the total maximum of 30 operands
per <code>asm</code> statement.
</para>
<para>Use the <samp>&amp;</samp> constraint modifier (<pxref label="Modifiers"><xrefnodename>Modifiers</xrefnodename></pxref>) on all output
operands that must not overlap an input.  Otherwise, 
GCC may allocate the output operand in the same register as an unrelated 
input operand, on the assumption that the assembler code consumes its 
inputs before producing outputs. This assumption may be false if the assembler 
code actually consists of more than one instruction.
</para>
<para>The same problem can occur if one output parameter (<var>a</var>) allows a register 
constraint and another output parameter (<var>b</var>) allows a memory constraint.
The code generated by GCC to access the memory address in <var>b</var> can contain
registers which <emph>might</emph> be shared by <var>a</var>, and GCC considers those 
registers to be inputs to the asm. As above, GCC assumes that such input
registers are consumed before any outputs are written. This assumption may 
result in incorrect behavior if the asm writes to <var>a</var> before using 
<var>b</var>. Combining the <samp>&amp;</samp> modifier with the register constraint on <var>a</var>
ensures that modifying <var>a</var> does not affect the address referenced by 
<var>b</var>. Otherwise, the location of <var>b</var> 
is undefined if <var>a</var> is modified before using <var>b</var>.
</para>
<para><code>asm</code> supports operand modifiers on operands (for example <samp>%k2</samp> 
instead of simply <samp>%2</samp>). Typically these qualifiers are hardware 
dependent. The list of supported modifiers for x86 is found at 
<ref label="x86Operandmodifiers"><xrefnodename>x86Operandmodifiers</xrefnodename><xrefinfoname>x86 Operand modifiers</xrefinfoname></ref>.
</para>
<para>If the C code that follows the <code>asm</code> makes no use of any of the output 
operands, use <code>volatile</code> for the <code>asm</code> statement to prevent the 
optimizers from discarding the <code>asm</code> statement as unneeded 
(see <ref label="Volatile"><xrefnodename>Volatile</xrefnodename></ref>).
</para>
<para>This code makes no use of the optional <var>asmSymbolicName</var>. Therefore it 
references the first output operand as <code>%0</code> (were there a second, it 
would be <code>%1</code>, etc). The number of the first input operand is one greater 
than that of the last output operand. In this i386 example, that makes 
<code>Mask</code> referenced as <code>%1</code>:
</para>
<example endspaces=" ">
<pre xml:space="preserve">uint32_t Mask = 1234;
uint32_t Index;

  asm (&quot;bsfl %1, %0&quot;
     : &quot;=r&quot; (Index)
     : &quot;r&quot; (Mask)
     : &quot;cc&quot;);
</pre></example>

<para>That code overwrites the variable <code>Index</code> (<samp>=</samp>),
placing the value in a register (<samp>r</samp>).
Using the generic <samp>r</samp> constraint instead of a constraint for a specific 
register allows the compiler to pick the register to use, which can result 
in more efficient code. This may not be possible if an assembler instruction 
requires a specific register.
</para>
<para>The following i386 example uses the <var>asmSymbolicName</var> syntax.
It produces the 
same result as the code above, but some may consider it more readable or more 
maintainable since reordering index numbers is not necessary when adding or 
removing operands. The names <code>aIndex</code> and <code>aMask</code>
are only used in this example to emphasize which 
names get used where.
It is acceptable to reuse the names <code>Index</code> and <code>Mask</code>.
</para>
<example endspaces=" ">
<pre xml:space="preserve">uint32_t Mask = 1234;
uint32_t Index;

  asm (&quot;bsfl %[aMask], %[aIndex]&quot;
     : [aIndex] &quot;=r&quot; (Index)
     : [aMask] &quot;r&quot; (Mask)
     : &quot;cc&quot;);
</pre></example>

<para>Here are some more examples of output operands.
</para>
<example endspaces=" ">
<pre xml:space="preserve">uint32_t c = 1;
uint32_t d;
uint32_t *e = &amp;c;

asm (&quot;mov %[e], %[d]&quot;
   : [d] &quot;=rm&quot; (d)
   : [e] &quot;rm&quot; (*e));
</pre></example>

<para>Here, <code>d</code> may either be in a register or in memory. Since the compiler 
might already have the current value of the <code>uint32_t</code> location
pointed to by <code>e</code>
in a register, you can enable it to choose the best location
for <code>d</code> by specifying both constraints.
</para>
<anchor name="InputOperands">InputOperands</anchor>
</subsubsection>
<subsubsection spaces=" "><sectiontitle>Input Operands</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="786"><code>asm</code> input operands</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="787"><code>asm</code> expressions</indexterm></cindex>

<para>Input operands make values from C variables and expressions available to the 
assembly code.
</para>
<para>Operands are separated by commas.  Each operand has this format:
</para>
<example endspaces=" ">
<pre xml:space="preserve"><r>[</r> [<var>asmSymbolicName</var>] <r>]</r> <var>constraint</var> (<var>cexpression</var>)
</pre></example>

<table commandarg="var" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="var">asmSymbolicName</itemformat></item>
</tableterm><tableitem><para>Specifies a symbolic name for the operand.
Reference the name in the assembler template 
by enclosing it in square brackets 
(i.e. <samp>%[Value]</samp>). The scope of the name is the <code>asm</code> statement 
that contains the definition. Any valid C variable name is acceptable, 
including names already defined in the surrounding code. No two operands 
within the same <code>asm</code> statement can use the same symbolic name.
</para>
<para>When not using an <var>asmSymbolicName</var>, use the (zero-based) position
of the operand 
in the list of operands in the assembler template. For example if there are
two output operands and three inputs,
use <samp>%2</samp> in the template to refer to the first input operand,
<samp>%3</samp> for the second, and <samp>%4</samp> for the third. 
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="var">constraint</itemformat></item>
</tableterm><tableitem><para>A string constant specifying constraints on the placement of the operand; 
<xref label="Constraints"><xrefnodename>Constraints</xrefnodename></xref>, for details.
</para>
<para>Input constraint strings may not begin with either <samp>=</samp> or <samp>+</samp>.
When you list more than one possible location (for example, <samp>&quot;irm&quot;</samp>), 
the compiler chooses the most efficient one based on the current context.
If you must use a specific register, but your Machine Constraints do not
provide sufficient control to select the specific register you want, 
local register variables may provide a solution (<pxref label="Local-Reg-Vars"><xrefnodename>Local Reg Vars</xrefnodename></pxref>).
</para>
<para>Input constraints can also be digits (for example, <code>&quot;0&quot;</code>). This indicates 
that the specified input must be in the same place as the output constraint 
at the (zero-based) index in the output constraint list. 
When using <var>asmSymbolicName</var> syntax for the output operands,
you may use these names (enclosed in brackets <samp>[]</samp>) instead of digits.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="var">cexpression</itemformat></item>
</tableterm><tableitem><para>This is the C variable or expression being passed to the <code>asm</code> statement 
as input.  The enclosing parentheses are a required part of the syntax.
</para>
</tableitem></tableentry></table>

<para>When the compiler selects the registers to use to represent the input 
operands, it does not use any of the clobbered registers (<pxref label="Clobbers"><xrefnodename>Clobbers</xrefnodename></pxref>).
</para>
<para>If there are no output operands but there are input operands, place two 
consecutive colons where the output operands would go:
</para>
<example endspaces=" ">
<pre xml:space="preserve">__asm__ (&quot;some instructions&quot;
   : /* No outputs. */
   : &quot;r&quot; (Offset / 8));
</pre></example>

<para><strong>Warning:</strong> Do <emph>not</emph> modify the contents of input-only operands 
(except for inputs tied to outputs). The compiler assumes that on exit from 
the <code>asm</code> statement these operands contain the same values as they 
had before executing the statement. 
It is <emph>not</emph> possible to use clobbers
to inform the compiler that the values in these inputs are changing. One 
common work-around is to tie the changing input variable to an output variable 
that never gets used. Note, however, that if the code that follows the 
<code>asm</code> statement makes no use of any of the output operands, the GCC 
optimizers may discard the <code>asm</code> statement as unneeded 
(see <ref label="Volatile"><xrefnodename>Volatile</xrefnodename></ref>).
</para>
<para><code>asm</code> supports operand modifiers on operands (for example <samp>%k2</samp> 
instead of simply <samp>%2</samp>). Typically these qualifiers are hardware 
dependent. The list of supported modifiers for x86 is found at 
<ref label="x86Operandmodifiers"><xrefnodename>x86Operandmodifiers</xrefnodename><xrefinfoname>x86 Operand modifiers</xrefinfoname></ref>.
</para>
<para>In this example using the fictitious <code>combine</code> instruction, the 
constraint <code>&quot;0&quot;</code> for input operand 1 says that it must occupy the same 
location as output operand 0. Only input operands may use numbers in 
constraints, and they must each refer to an output operand. Only a number (or 
the symbolic assembler name) in the constraint can guarantee that one operand 
is in the same place as another. The mere fact that <code>foo</code> is the value of 
both operands is not enough to guarantee that they are in the same place in 
the generated assembler code.
</para>
<example endspaces=" ">
<pre xml:space="preserve">asm (&quot;combine %2, %0&quot; 
   : &quot;=r&quot; (foo) 
   : &quot;0&quot; (foo), &quot;g&quot; (bar));
</pre></example>

<para>Here is an example using symbolic names.
</para>
<example endspaces=" ">
<pre xml:space="preserve">asm (&quot;cmoveq %1, %2, %[result]&quot; 
   : [result] &quot;=r&quot;(result) 
   : &quot;r&quot; (test), &quot;r&quot; (new), &quot;[result]&quot; (old));
</pre></example>

<anchor name="Clobbers">Clobbers</anchor>
</subsubsection>
<subsubsection spaces=" "><sectiontitle>Clobbers</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="788"><code>asm</code> clobbers</indexterm></cindex>

<para>While the compiler is aware of changes to entries listed in the output 
operands, the inline <code>asm</code> code may modify more than just the outputs. For 
example, calculations may require additional registers, or the processor may 
overwrite a register as a side effect of a particular assembler instruction. 
In order to inform the compiler of these changes, list them in the clobber 
list. Clobber list items are either register names or the special clobbers 
(listed below). Each clobber list item is a string constant 
enclosed in double quotes and separated by commas.
</para>
<para>Clobber descriptions may not in any way overlap with an input or output 
operand. For example, you may not have an operand describing a register class 
with one member when listing that register in the clobber list. Variables 
declared to live in specific registers (<pxref label="Explicit-Reg-Vars"><xrefnodename>Explicit Reg Vars</xrefnodename></pxref>) and used 
as <code>asm</code> input or output operands must have no part mentioned in the 
clobber description. In particular, there is no way to specify that input 
operands get modified without also specifying them as output operands.
</para>
<para>When the compiler selects which registers to use to represent input and output 
operands, it does not use any of the clobbered registers. As a result, 
clobbered registers are available for any use in the assembler code.
</para>
<para>Here is a realistic example for the VAX showing the use of clobbered 
registers: 
</para>
<example endspaces=" ">
<pre xml:space="preserve">asm volatile (&quot;movc3 %0, %1, %2&quot;
                   : /* No outputs. */
                   : &quot;g&quot; (from), &quot;g&quot; (to), &quot;g&quot; (count)
                   : &quot;r0&quot;, &quot;r1&quot;, &quot;r2&quot;, &quot;r3&quot;, &quot;r4&quot;, &quot;r5&quot;);
</pre></example>

<para>Also, there are two special clobber arguments:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">&quot;cc&quot;</itemformat></item>
</tableterm><tableitem><para>The <code>&quot;cc&quot;</code> clobber indicates that the assembler code modifies the flags 
register. On some machines, GCC represents the condition codes as a specific 
hardware register; <code>&quot;cc&quot;</code> serves to name this register.
On other machines, condition code handling is different, 
and specifying <code>&quot;cc&quot;</code> has no effect. But 
it is valid no matter what the target.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">&quot;memory&quot;</itemformat></item>
</tableterm><tableitem><para>The <code>&quot;memory&quot;</code> clobber tells the compiler that the assembly code
performs memory 
reads or writes to items other than those listed in the input and output 
operands (for example, accessing the memory pointed to by one of the input 
parameters). To ensure memory contains correct values, GCC may need to flush 
specific register values to memory before executing the <code>asm</code>. Further, 
the compiler does not assume that any values read from memory before an 
<code>asm</code> remain unchanged after that <code>asm</code>; it reloads them as 
needed.  
Using the <code>&quot;memory&quot;</code> clobber effectively forms a read/write
memory barrier for the compiler.
</para>
<para>Note that this clobber does not prevent the <emph>processor</emph> from doing 
speculative reads past the <code>asm</code> statement. To prevent that, you need 
processor-specific fence instructions.
</para>
<para>Flushing registers to memory has performance implications and may be an issue 
for time-sensitive code.  You can use a trick to avoid this if the size of 
the memory being accessed is known at compile time. For example, if accessing 
ten bytes of a string, use a memory input like: 
</para>
<para><code>&lbrace;&quot;m&quot;( (&lbrace; struct &lbrace; char x[10]; &rbrace; *p = (void *)ptr ; *p; &rbrace;) )&rbrace;</code>.
</para>
</tableitem></tableentry></table>

<anchor name="GotoLabels">GotoLabels</anchor>
</subsubsection>
<subsubsection spaces=" "><sectiontitle>Goto Labels</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="789"><code>asm</code> goto labels</indexterm></cindex>

<para><code>asm goto</code> allows assembly code to jump to one or more C labels.  The
<var>GotoLabels</var> section in an <code>asm goto</code> statement contains 
a comma-separated 
list of all C labels to which the assembler code may jump. GCC assumes that 
<code>asm</code> execution falls through to the next statement (if this is not the 
case, consider using the <code>__builtin_unreachable</code> intrinsic after the 
<code>asm</code> statement). Optimization of <code>asm goto</code> may be improved by 
using the <code>hot</code> and <code>cold</code> label attributes (<pxref label="Label-Attributes"><xrefnodename>Label 
Attributes</xrefnodename></pxref>).
</para>
<para>An <code>asm goto</code> statement cannot have outputs.
This is due to an internal restriction of 
the compiler: control transfer instructions cannot have outputs. 
If the assembler code does modify anything, use the <code>&quot;memory&quot;</code> clobber 
to force the 
optimizers to flush all register values to memory and reload them if 
necessary after the <code>asm</code> statement.
</para>
<para>Also note that an <code>asm goto</code> statement is always implicitly
considered volatile.
</para>
<para>To reference a label in the assembler template,
prefix it with <samp>%l</samp> (lowercase <samp>L</samp>) followed 
by its (zero-based) position in <var>GotoLabels</var> plus the number of input 
operands.  For example, if the <code>asm</code> has three inputs and references two 
labels, refer to the first label as <samp>%l3</samp> and the second as <samp>%l4</samp>).
</para>
<para>Alternately, you can reference labels using the actual C label name enclosed
in brackets.  For example, to reference a label named <code>carry</code>, you can
use <samp>%l[carry]</samp>.  The label must still be listed in the <var>GotoLabels</var>
section when using this approach.
</para>
<para>Here is an example of <code>asm goto</code> for i386:
</para>
<example endspaces=" ">
<pre xml:space="preserve">asm goto (
    &quot;btl %1, %0\n\t&quot;
    &quot;jc %l2&quot;
    : /* No outputs. */
    : &quot;r&quot; (p1), &quot;r&quot; (p2) 
    : &quot;cc&quot; 
    : carry);

return 0;

carry:
return 1;
</pre></example>

<para>The following example shows an <code>asm goto</code> that uses a memory clobber.
</para>
<example endspaces=" ">
<pre xml:space="preserve">int frob(int x)
&lbrace;
  int y;
  asm goto (&quot;frob %%r5, %1; jc %l[error]; mov (%2), %%r5&quot;
            : /* No outputs. */
            : &quot;r&quot;(x), &quot;r&quot;(&amp;y)
            : &quot;r5&quot;, &quot;memory&quot; 
            : error);
  return y;
error:
  return -1;
&rbrace;
</pre></example>

<anchor name="x86Operandmodifiers">x86Operandmodifiers</anchor>
</subsubsection>
<subsubsection spaces=" "><sectiontitle>x86 Operand Modifiers</sectiontitle>

<para>References to input, output, and goto operands in the assembler template
of extended <code>asm</code> statements can use 
modifiers to affect the way the operands are formatted in 
the code output to the assembler. For example, the 
following code uses the <samp>h</samp> and <samp>b</samp> modifiers for x86:
</para>
<example endspaces=" ">
<pre xml:space="preserve">uint16_t  num;
asm volatile (&quot;xchg %h0, %b0&quot; : &quot;+a&quot; (num) );
</pre></example>

<noindent></noindent>
<para>These modifiers generate this assembler code:
</para>
<example endspaces=" ">
<pre xml:space="preserve">xchg %ah, %al
</pre></example>

<para>The rest of this discussion uses the following code for illustrative purposes.
</para>
<example endspaces=" ">
<pre xml:space="preserve">int main()
&lbrace;
   int iInt = 1;

top:

   asm volatile goto (&quot;some assembler instructions here&quot;
   : /* No outputs. */
   : &quot;q&quot; (iInt), &quot;X&quot; (sizeof(unsigned char) + 1)
   : /* No clobbers. */
   : top);
&rbrace;
</pre></example>

<para>With no modifiers, this is what the output from the operands would be for the 
<samp>att</samp> and <samp>intel</samp> dialects of assembler:
</para>
<multitable spaces=" " endspaces=" "><columnprototypes><columnprototype bracketed="on">Operand</columnprototype> <columnprototype bracketed="on">masm=att</columnprototype> <columnprototype bracketed="on">OFFSET FLAT:.L2</columnprototype></columnprototypes>
<thead><row><entry command="headitem" spaces=" "><para>Operand </para></entry><entry command="tab" spaces=" "><para>masm=att </para></entry><entry command="tab" spaces=" "><para>masm=intel
</para></entry></row></thead><tbody><row><entry command="item" spaces=" "><para><code>%0</code>
</para></entry><entry command="tab" spaces=" "><para><code>%eax</code>
</para></entry><entry command="tab" spaces=" "><para><code>eax</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>%1</code>
</para></entry><entry command="tab" spaces=" "><para><code>$2</code>
</para></entry><entry command="tab" spaces=" "><para><code>2</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>%2</code>
</para></entry><entry command="tab" spaces=" "><para><code>$.L2</code>
</para></entry><entry command="tab" spaces=" "><para><code>OFFSET FLAT:.L2</code>
</para></entry></row></tbody></multitable>

<para>The table below shows the list of supported modifiers and their effects.
</para>
<multitable spaces=" " endspaces=" "><columnprototypes><columnprototype bracketed="on">Modifier</columnprototype> <columnprototype bracketed="on">Print the opcode suffix for the size of th</columnprototype> <columnprototype bracketed="on">Operand</columnprototype> <columnprototype bracketed="on">masm=att</columnprototype> <columnprototype bracketed="on">masm=intel</columnprototype></columnprototypes>
<thead><row><entry command="headitem" spaces=" "><para>Modifier </para></entry><entry command="tab" spaces=" "><para>Description </para></entry><entry command="tab" spaces=" "><para>Operand </para></entry><entry command="tab" spaces=" "><para><option>masm=att</option> </para></entry><entry command="tab" spaces=" "><para><option>masm=intel</option>
</para></entry></row></thead><tbody><row><entry command="item" spaces=" "><para><code>z</code>
</para></entry><entry command="tab" spaces=" "><para>Print the opcode suffix for the size of the current integer operand (one of <code>b</code>/<code>w</code>/<code>l</code>/<code>q</code>).
</para></entry><entry command="tab" spaces=" "><para><code>%z0</code>
</para></entry><entry command="tab" spaces=" "><para><code>l</code>
</para></entry><entry command="tab"> 
</entry></row><row><entry command="item" spaces=" "><para><code>b</code>
</para></entry><entry command="tab" spaces=" "><para>Print the QImode name of the register.
</para></entry><entry command="tab" spaces=" "><para><code>%b0</code>
</para></entry><entry command="tab" spaces=" "><para><code>%al</code>
</para></entry><entry command="tab" spaces=" "><para><code>al</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>h</code>
</para></entry><entry command="tab" spaces=" "><para>Print the QImode name for a &textldquo;high&textrdquo; register.
</para></entry><entry command="tab" spaces=" "><para><code>%h0</code>
</para></entry><entry command="tab" spaces=" "><para><code>%ah</code>
</para></entry><entry command="tab" spaces=" "><para><code>ah</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>w</code>
</para></entry><entry command="tab" spaces=" "><para>Print the HImode name of the register.
</para></entry><entry command="tab" spaces=" "><para><code>%w0</code>
</para></entry><entry command="tab" spaces=" "><para><code>%ax</code>
</para></entry><entry command="tab" spaces=" "><para><code>ax</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>k</code>
</para></entry><entry command="tab" spaces=" "><para>Print the SImode name of the register.
</para></entry><entry command="tab" spaces=" "><para><code>%k0</code>
</para></entry><entry command="tab" spaces=" "><para><code>%eax</code>
</para></entry><entry command="tab" spaces=" "><para><code>eax</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>q</code>
</para></entry><entry command="tab" spaces=" "><para>Print the DImode name of the register.
</para></entry><entry command="tab" spaces=" "><para><code>%q0</code>
</para></entry><entry command="tab" spaces=" "><para><code>%rax</code>
</para></entry><entry command="tab" spaces=" "><para><code>rax</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>l</code>
</para></entry><entry command="tab" spaces=" "><para>Print the label name with no punctuation.
</para></entry><entry command="tab" spaces=" "><para><code>%l2</code>
</para></entry><entry command="tab" spaces=" "><para><code>.L2</code>
</para></entry><entry command="tab" spaces=" "><para><code>.L2</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>c</code>
</para></entry><entry command="tab" spaces=" "><para>Require a constant operand and print the constant expression with no punctuation.
</para></entry><entry command="tab" spaces=" "><para><code>%c1</code>
</para></entry><entry command="tab" spaces=" "><para><code>2</code>
</para></entry><entry command="tab" spaces=" "><para><code>2</code>
</para></entry></row></tbody></multitable>

<anchor name="x86floatingpointasmoperands">x86floatingpointasmoperands</anchor>
</subsubsection>
<subsubsection spaces=" "><sectiontitle>x86 Floating-Point <code>asm</code> Operands</sectiontitle>

<para>On x86 targets, there are several rules on the usage of stack-like registers
in the operands of an <code>asm</code>.  These rules apply only to the operands
that are stack-like registers:
</para>
<enumerate first="1" endspaces=" ">
<listitem>
<para>Given a set of input registers that die in an <code>asm</code>, it is
necessary to know which are implicitly popped by the <code>asm</code>, and
which must be explicitly popped by GCC&eosperiod;
</para>
<para>An input register that is implicitly popped by the <code>asm</code> must be
explicitly clobbered, unless it is constrained to match an
output operand.
</para>
</listitem><listitem>
<para>For any input register that is implicitly popped by an <code>asm</code>, it is
necessary to know how to adjust the stack to compensate for the pop.
If any non-popped input is closer to the top of the reg-stack than
the implicitly popped register, it would not be possible to know what the
stack looked like&textmdash;it&textrsquo;s not clear how the rest of the stack &textldquo;slides
up&textrdquo;.
</para>
<para>All implicitly popped input registers must be closer to the top of
the reg-stack than any input that is not implicitly popped.
</para>
<para>It is possible that if an input dies in an <code>asm</code>, the compiler might
use the input register for an output reload.  Consider this example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">asm (&quot;foo&quot; : &quot;=t&quot; (a) : &quot;f&quot; (b));
</pre></smallexample>

<noindent></noindent>
<para>This code says that input <code>b</code> is not popped by the <code>asm</code>, and that
the <code>asm</code> pushes a result onto the reg-stack, i.e., the stack is one
deeper after the <code>asm</code> than it was before.  But, it is possible that
reload may think that it can use the same register for both the input and
the output.
</para>
<para>To prevent this from happening,
if any input operand uses the <samp>f</samp> constraint, all output register
constraints must use the <samp>&amp;</samp> early-clobber modifier.
</para>
<para>The example above is correctly written as:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">asm (&quot;foo&quot; : &quot;=&amp;t&quot; (a) : &quot;f&quot; (b));
</pre></smallexample>

</listitem><listitem>
<para>Some operands need to be in particular places on the stack.  All
output operands fall in this category&textmdash;GCC has no other way to
know which registers the outputs appear in unless you indicate
this in the constraints.
</para>
<para>Output operands must specifically indicate which register an output
appears in after an <code>asm</code>.  <samp>=f</samp> is not allowed: the operand
constraints must select a class with a single register.
</para>
</listitem><listitem>
<para>Output operands may not be &textldquo;inserted&textrdquo; between existing stack registers.
Since no 387 opcode uses a read/write operand, all output operands
are dead before the <code>asm</code>, and are pushed by the <code>asm</code>.
It makes no sense to push anywhere but the top of the reg-stack.
</para>
<para>Output operands must start at the top of the reg-stack: output
operands may not &textldquo;skip&textrdquo; a register.
</para>
</listitem><listitem>
<para>Some <code>asm</code> statements may need extra stack space for internal
calculations.  This can be guaranteed by clobbering stack registers
unrelated to the inputs and outputs.
</para>
</listitem></enumerate>

<para>This <code>asm</code>
takes one input, which is internally popped, and produces two outputs.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">asm (&quot;fsincos&quot; : &quot;=t&quot; (cos), &quot;=u&quot; (sin) : &quot;0&quot; (inp));
</pre></smallexample>

<noindent></noindent>
<para>This <code>asm</code> takes two inputs, which are popped by the <code>fyl2xp1</code> opcode,
and replaces them with one output.  The <code>st(1)</code> clobber is necessary 
for the compiler to know that <code>fyl2xp1</code> pops both inputs.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">asm (&quot;fyl2xp1&quot; : &quot;=t&quot; (result) : &quot;0&quot; (x), &quot;u&quot; (y) : &quot;st(1)&quot;);
</pre></smallexample>

<lowersections></lowersections>
<!-- c Copyright (C) 1988-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->


<!-- c Most of this node appears by itself (in a different place) even -->
<!-- c when the INTERNALS flag is clear.  Passages that require the internals -->
<!-- c manual's context are conditionalized to appear only in the internals manual. -->
</subsubsection>
</subsection>
<node name="Constraints" spaces=" "><nodename>Constraints</nodename><nodenext automatic="on">Asm Labels</nodenext><nodeprev automatic="on">Extended Asm</nodeprev><nodeup automatic="on">Using Assembly Language with C</nodeup></node>
<subsection originalcommand="section" spaces=" "><sectiontitle>Constraints for <code>asm</code> Operands</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="790">operand constraints, <code>asm</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="791">constraints, <code>asm</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="792"><code>asm</code> constraints</indexterm></cindex>

<para>Here are specific details on what constraint letters you can use with
<code>asm</code> operands.
Constraints can say whether
an operand may be in a register, and which kinds of register; whether the
operand can be a memory reference, and which kinds of address; whether the
operand may be an immediate constant, and which possible values it may
have.  Constraints can also require two operands to match.
Side-effects aren&textrsquo;t allowed in operands of inline <code>asm</code>, unless
<samp>&lt;</samp> or <samp>&gt;</samp> constraints are used, because there is no guarantee
that the side-effects will happen exactly once in an instruction that can update
the addressing register.
</para>

<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::  ">Simple Constraints</menunode><menudescription><pre xml:space="preserve">Basic use of constraints.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Multi-Alternative</menunode><menudescription><pre xml:space="preserve">When an insn has two alternative constraint-patterns.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">Modifiers</menunode><menudescription><pre xml:space="preserve">More precise control over effects of constraints.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Machine Constraints</menunode><menudescription><pre xml:space="preserve">Special constraints for some particular machines.
</pre></menudescription></menuentry></menu>

<node name="Simple-Constraints" spaces=" "><nodename>Simple Constraints</nodename><nodenext automatic="on">Multi-Alternative</nodenext><nodeup automatic="on">Constraints</nodeup></node>
<subsubsection originalcommand="subsection" spaces=" "><sectiontitle>Simple Constraints</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="793">simple constraints</indexterm></cindex>

<para>The simplest kind of constraint is a string full of letters, each of
which describes one kind of operand that is permitted.  Here are
the letters that are allowed:
</para>
<table commandarg="asis" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="asis">whitespace</itemformat></item>
</tableterm><tableitem><para>Whitespace characters are ignored and can be inserted at any position
except the first.  This enables each alternative for different operands to
be visually aligned in the machine description even if they have different
number of constraints and modifiers.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="794"><samp>m</samp> in constraint</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="795">memory references in constraints</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>m</samp></itemformat></item>
</tableterm><tableitem><para>A memory operand is allowed, with any kind of address that the machine
supports in general.
Note that the letter used for the general memory constraint can be
re-defined by a back end using the <code>TARGET_MEM_CONSTRAINT</code> macro.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="796">offsettable address</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="797"><samp>o</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>o</samp></itemformat></item>
</tableterm><tableitem><para>A memory operand is allowed, but only if the address is
<dfn>offsettable</dfn>.  This means that adding a small integer (actually,
the width in bytes of the operand, as determined by its machine mode)
may be added to the address and the result is also a valid memory
address.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="798">autoincrement/decrement addressing</indexterm></cindex>
<para>For example, an address which is constant is offsettable; so is an
address that is the sum of a register and a constant (as long as a
slightly larger constant is also within the range of address-offsets
supported by the machine); but an autoincrement or autodecrement
address is not offsettable.  More complicated indirect/indexed
addresses may or may not be offsettable depending on the other
addressing modes that the machine supports.
</para>
<para>Note that in an output operand which can be matched by another
operand, the constraint letter <samp>o</samp> is valid only when accompanied
by both <samp>&lt;</samp> (if the target machine has predecrement addressing)
and <samp>&gt;</samp> (if the target machine has preincrement addressing).
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="799"><samp>V</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>V</samp></itemformat></item>
</tableterm><tableitem><para>A memory operand that is not offsettable.  In other words, anything that
would fit the <samp>m</samp> constraint but not the <samp>o</samp> constraint.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="800"><samp>&lt;</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>&lt;</samp></itemformat></item>
</tableterm><tableitem><para>A memory operand with autodecrement addressing (either predecrement or
postdecrement) is allowed.  In inline <code>asm</code> this constraint is only
allowed if the operand is used exactly once in an instruction that can
handle the side-effects.  Not using an operand with <samp>&lt;</samp> in constraint
string in the inline <code>asm</code> pattern at all or using it in multiple
instructions isn&textrsquo;t valid, because the side-effects wouldn&textrsquo;t be performed
or would be performed more than once.  Furthermore, on some targets
the operand with <samp>&lt;</samp> in constraint string must be accompanied by
special instruction suffixes like <code>%U0</code> instruction suffix on PowerPC
or <code>%P0</code> on IA-64.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="801"><samp>&gt;</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>&gt;</samp></itemformat></item>
</tableterm><tableitem><para>A memory operand with autoincrement addressing (either preincrement or
postincrement) is allowed.  In inline <code>asm</code> the same restrictions
as for <samp>&lt;</samp> apply.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="802"><samp>r</samp> in constraint</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="803">registers in constraints</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>r</samp></itemformat></item>
</tableterm><tableitem><para>A register operand is allowed provided that it is in a general
register.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="804">constants in constraints</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="805"><samp>i</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>i</samp></itemformat></item>
</tableterm><tableitem><para>An immediate integer operand (one with constant value) is allowed.
This includes symbolic constants whose values will be known only at
assembly time or later.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="806"><samp>n</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>n</samp></itemformat></item>
</tableterm><tableitem><para>An immediate integer operand with a known numeric value is allowed.
Many systems cannot support assembly-time constants for operands less
than a word wide.  Constraints for these operands should use <samp>n</samp>
rather than <samp>i</samp>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="807"><samp>I</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>I</samp>, <samp>J</samp>, <samp>K</samp>, &dots; <samp>P</samp></itemformat></item>
</tableterm><tableitem><para>Other letters in the range <samp>I</samp> through <samp>P</samp> may be defined in
a machine-dependent fashion to permit immediate integer operands with
explicit integer values in specified ranges.  For example, on the
68000, <samp>I</samp> is defined to stand for the range of values 1 to 8.
This is the range permitted as a shift count in the shift
instructions.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="808"><samp>E</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>E</samp></itemformat></item>
</tableterm><tableitem><para>An immediate floating operand (expression code <code>const_double</code>) is
allowed, but only if the target floating point format is the same as
that of the host machine (on which the compiler is running).
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="809"><samp>F</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>F</samp></itemformat></item>
</tableterm><tableitem><para>An immediate floating operand (expression code <code>const_double</code> or
<code>const_vector</code>) is allowed.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="810"><samp>G</samp> in constraint</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="811"><samp>H</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>G</samp>, <samp>H</samp></itemformat></item>
</tableterm><tableitem><para><samp>G</samp> and <samp>H</samp> may be defined in a machine-dependent fashion to
permit immediate floating operands in particular ranges of values.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="812"><samp>s</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>s</samp></itemformat></item>
</tableterm><tableitem><para>An immediate integer operand whose value is not an explicit integer is
allowed.
</para>
<para>This might appear strange; if an insn allows a constant operand with a
value not known at compile time, it certainly must allow any known
value.  So why use <samp>s</samp> instead of <samp>i</samp>?  Sometimes it allows
better code to be generated.
</para>
<para>For example, on the 68000 in a fullword instruction it is possible to
use an immediate operand; but if the immediate value is between &minus;128
and 127, better code results from loading the value into a register and
using the register.  This is because the load into the register can be
done with a <samp>moveq</samp> instruction.  We arrange for this to happen
by defining the letter <samp>K</samp> to mean &textldquo;any integer outside the
range &minus;128 to 127&textrdquo;, and then specifying <samp>Ks</samp> in the operand
constraints.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="813"><samp>g</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>g</samp></itemformat></item>
</tableterm><tableitem><para>Any register, memory or immediate integer operand is allowed, except for
registers that are not general registers.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="814"><samp>X</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>X</samp></itemformat></item>
</tableterm><tableitem><para>Any operand whatsoever is allowed.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="815"><samp>0</samp> in constraint</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="816">digits in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>0</samp>, <samp>1</samp>, <samp>2</samp>, &dots; <samp>9</samp></itemformat></item>
</tableterm><tableitem><para>An operand that matches the specified operand number is allowed.  If a
digit is used together with letters within the same alternative, the
digit should come last.
</para>
<para>This number is allowed to be more than a single digit.  If multiple
digits are encountered consecutively, they are interpreted as a single
decimal integer.  There is scant chance for ambiguity, since to-date
it has never been desirable that <samp>10</samp> be interpreted as matching
either operand 1 <emph>or</emph> operand 0.  Should this be desired, one
can use multiple alternatives instead.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="817">matching constraint</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="818">constraint, matching</indexterm></cindex>
<para>This is called a <dfn>matching constraint</dfn> and what it really means is
that the assembler has only a single operand that fills two roles
which <code>asm</code> distinguishes.  For example, an add instruction uses
two input operands and an output operand, but on most CISC
machines an add instruction really has only two operands, one of them an
input-output operand:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">addl #35,r12
</pre></smallexample>

<para>Matching constraints are used in these circumstances.
More precisely, the two operands that match must include one input-only
operand and one output-only operand.  Moreover, the digit must be a
smaller number than the number of the operand that uses it in the
constraint.
</para>

<cindex index="cp" spaces=" "><indexterm index="cp" number="819">load address instruction</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="820">push address instruction</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="821">address constraints</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="822"><samp>p</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><samp>p</samp></itemformat></item>
</tableterm><tableitem><para>An operand that is a valid memory address is allowed.  This is
for &textldquo;load address&textrdquo; and &textldquo;push address&textrdquo; instructions.
</para>
<findex index="fn" spaces=" "><indexterm index="fn" number="21" mergedindex="cp">address_operand</indexterm></findex>
<para><samp>p</samp> in the constraint must be accompanied by <code>address_operand</code>
as the predicate in the <code>match_operand</code>.  This predicate interprets
the mode specified in the <code>match_operand</code> as the mode of the memory
reference for which the address would be valid.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="823">other register constraints</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="824">extensible constraints</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><var>other-letters</var></itemformat></item>
</tableterm><tableitem><para>Other letters can be defined in machine-dependent fashion to stand for
particular classes of registers or other arbitrary operand types.
<samp>d</samp>, <samp>a</samp> and <samp>f</samp> are defined on the 68000/68020 to stand
for data, address and floating point registers.
</para></tableitem></tableentry></table>


</subsubsection>
<node name="Multi_002dAlternative" spaces=" "><nodename>Multi-Alternative</nodename><nodenext automatic="on">Modifiers</nodenext><nodeprev automatic="on">Simple Constraints</nodeprev><nodeup automatic="on">Constraints</nodeup></node>
<subsubsection originalcommand="subsection" spaces=" "><sectiontitle>Multiple Alternative Constraints</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="825">multiple alternative constraints</indexterm></cindex>

<para>Sometimes a single instruction has multiple alternative sets of possible
operands.  For example, on the 68000, a logical-or instruction can combine
register or an immediate value into memory, or it can combine any kind of
operand into a register; but it cannot combine one memory location into
another.
</para>
<para>These constraints are represented as multiple alternatives.  An alternative
can be described by a series of letters for each operand.  The overall
constraint for an operand is made from the letters for this operand
from the first alternative, a comma, the letters for this operand from
the second alternative, a comma, and so on until the last alternative.
</para>
<!-- c FIXME Is this ? and ! stuff of use in asm()?  If not, hide unless INTERNAL -->
<para>If all the operands fit any one alternative, the instruction is valid.
Otherwise, for each alternative, the compiler counts how many instructions
must be added to copy the operands so that that alternative applies.
The alternative requiring the least copying is chosen.  If two alternatives
need the same amount of copying, the one that comes first is chosen.
These choices can be altered with the <samp>?</samp> and <samp>!</samp> characters:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem><cindex index="cp" spaces=" "><indexterm index="cp" number="826"><samp>?</samp> in constraint</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="827">question mark</indexterm></cindex>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">?</itemformat></item>
</tableterm><tableitem><para>Disparage slightly the alternative that the <samp>?</samp> appears in,
as a choice when no alternative applies exactly.  The compiler regards
this alternative as one unit more costly for each <samp>?</samp> that appears
in it.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="828"><samp>!</samp> in constraint</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="829">exclamation point</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">!</itemformat></item>
</tableterm><tableitem><para>Disparage severely the alternative that the <samp>!</samp> appears in.
This alternative can still be used if it fits without reloading,
but if reloading is needed, some other alternative will be used.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="830"><samp>^</samp> in constraint</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="831">caret</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">^</itemformat></item>
</tableterm><tableitem><para>This constraint is analogous to <samp>?</samp> but it disparages slightly
the alternative only if the operand with the <samp>^</samp> needs a reload.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="832"><samp>$</samp> in constraint</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="833">dollar sign</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">$</itemformat></item>
</tableterm><tableitem><para>This constraint is analogous to <samp>!</samp> but it disparages severely
the alternative only if the operand with the <samp>$</samp> needs a reload.
</para></tableitem></tableentry></table>



</subsubsection>
<node name="Modifiers" spaces=" "><nodename>Modifiers</nodename><nodenext automatic="on">Machine Constraints</nodenext><nodeprev automatic="on">Multi-Alternative</nodeprev><nodeup automatic="on">Constraints</nodeup></node>
<subsubsection originalcommand="subsection" spaces=" "><sectiontitle>Constraint Modifier Characters</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="834">modifiers in constraints</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="835">constraint modifier characters</indexterm></cindex>

<!-- c prevent bad page break with this line -->
<para>Here are constraint modifier characters.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem><cindex index="cp" spaces=" "><indexterm index="cp" number="836"><samp>=</samp> in constraint</indexterm></cindex>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">=</itemformat></item>
</tableterm><tableitem><para>Means that this operand is written to by this instruction:
the previous value is discarded and replaced by new data.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="837"><samp>+</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">+</itemformat></item>
</tableterm><tableitem><para>Means that this operand is both read and written by the instruction.
</para>
<para>When the compiler fixes up the operands to satisfy the constraints,
it needs to know which operands are read by the instruction and
which are written by it.  <samp>=</samp> identifies an operand which is only
written; <samp>+</samp> identifies an operand that is both read and written; all
other operands are assumed to only be read.
</para>
<para>If you specify <samp>=</samp> or <samp>+</samp> in a constraint, you put it in the
first character of the constraint string.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="838"><samp>&amp;</samp> in constraint</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="839">earlyclobber operand</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">&amp;</itemformat></item>
</tableterm><tableitem><para>Means (in a particular alternative) that this operand is an
<dfn>earlyclobber</dfn> operand, which is written before the instruction is
finished using the input operands.  Therefore, this operand may not lie
in a register that is read by the instruction or as part of any memory
address.
</para>
<para><samp>&amp;</samp> applies only to the alternative in which it is written.  In
constraints with multiple alternatives, sometimes one alternative
requires <samp>&amp;</samp> while others do not.  See, for example, the
<samp>movdf</samp> insn of the 68000.
</para>
<para>A operand which is read by the instruction can be tied to an earlyclobber
operand if its only use as an input occurs before the early result is
written.  Adding alternatives of this form often allows GCC to produce
better code when only some of the read operands can be affected by the
earlyclobber. See, for example, the <samp>mulsi3</samp> insn of the ARM&eosperiod;
</para>
<para>Furthermore, if the <dfn>earlyclobber</dfn> operand is also a read/write
operand, then that operand is written only after it&textrsquo;s used.
</para>
<para><samp>&amp;</samp> does not obviate the need to write <samp>=</samp> or <samp>+</samp>.  As
<dfn>earlyclobber</dfn> operands are always written, a read-only
<dfn>earlyclobber</dfn> operand is ill-formed and will be rejected by the
compiler.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="840"><samp>%</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%</itemformat></item>
</tableterm><tableitem><para>Declares the instruction to be commutative for this operand and the
following operand.  This means that the compiler may interchange the
two operands if that is the cheapest way to make all operands fit the
constraints.  <samp>%</samp> applies to all alternatives and must appear as
the first character in the constraint.  Only read-only operands can use
<samp>%</samp>.
</para>
<para>GCC can only handle one commutative pair in an asm; if you use more,
the compiler may fail.  Note that you need not use the modifier if
the two alternatives are strictly identical; this would only waste
time in the reload pass.  The modifier is not operational after
register allocation, so the result of <code>define_peephole2</code>
and <code>define_split</code>s performed after reload cannot rely on
<samp>%</samp> to make the intended insn match.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="841"><samp>#</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">#</itemformat></item>
</tableterm><tableitem><para>Says that all following characters, up to the next comma, are to be
ignored as a constraint.  They are significant only for choosing
register preferences.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="842"><samp>*</samp> in constraint</indexterm></cindex>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">*</itemformat></item>
</tableterm><tableitem><para>Says that the following character should be ignored when choosing
register preferences.  <samp>*</samp> has no effect on the meaning of the
constraint as a constraint, and no effect on reloading.  For LRA
<samp>*</samp> additionally disparages slightly the alternative if the
following character matches the operand.
</para>
</tableitem></tableentry></table>

</subsubsection>
<node name="Machine-Constraints" spaces=" "><nodename>Machine Constraints</nodename><nodeprev automatic="on">Modifiers</nodeprev><nodeup automatic="on">Constraints</nodeup></node>
<subsubsection originalcommand="subsection" spaces=" "><sectiontitle>Constraints for Particular Machines</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="843">machine specific constraints</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="844">constraints, machine specific</indexterm></cindex>

<para>Whenever possible, you should use the general-purpose constraint letters
in <code>asm</code> arguments, since they will convey meaning more readily to
people reading your code.  Failing that, use the constraint letters
that usually have very similar meanings across architectures.  The most
commonly used constraints are <samp>m</samp> and <samp>r</samp> (for memory and
general-purpose registers respectively; <pxref label="Simple-Constraints"><xrefnodename>Simple Constraints</xrefnodename></pxref>), and
<samp>I</samp>, usually the letter indicating the most common
immediate-constant format.
</para>
<para>Each architecture defines additional constraints.  These constraints
are used by the compiler itself for instruction generation, as well as
for <code>asm</code> statements; therefore, some of the constraints are not
particularly useful for <code>asm</code>.  Here is a summary of some of the
machine-dependent constraints available on some particular machines;
it includes both constraints that are useful for <code>asm</code> and
constraints that aren&textrsquo;t.  The compiler source file mentioned in the
table heading for each architecture is the definitive reference for
the meanings of that architecture&textrsquo;s constraints.
</para>
<!-- c Please keep this table alphabetized by target! -->
<table commandarg="emph" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="emph">AArch64 family&textmdash;<file>config/aarch64/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">k</itemformat></item>
</tableterm><tableitem><para>The stack pointer register (<code>SP</code>)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">w</itemformat></item>
</tableterm><tableitem><para>Floating point or SIMD vector register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Integer constant that is valid as an immediate operand in an <code>ADD</code>
instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Integer constant that is valid as an immediate operand in a <code>SUB</code>
instruction (once negated)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Integer constant that can be used with a 32-bit logical instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Integer constant that can be used with a 64-bit logical instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>Integer constant that is valid as an immediate operand in a 32-bit <code>MOV</code>
pseudo instruction. The <code>MOV</code> may be assembled to one of several different
machine instructions depending on the value
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Integer constant that is valid as an immediate operand in a 64-bit <code>MOV</code>
pseudo instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>An absolute symbolic address or a label reference
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Y</itemformat></item>
</tableterm><tableitem><para>Floating point constant zero
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Z</itemformat></item>
</tableterm><tableitem><para>Integer constant zero
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ush</itemformat></item>
</tableterm><tableitem><para>The high part (bits 12 and upwards) of the pc-relative address of a symbol
within 4GB of the instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>A memory address which uses a single base register with no offset
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ump</itemformat></item>
</tableterm><tableitem><para>A memory address suitable for a load/store pair instruction in SI, DI, SF and
DF modes
</para>
</tableitem></tableentry></table>


</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">ARC &textmdash;<file>config/arc/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">q</itemformat></item>
</tableterm><tableitem><para>Registers usable in ARCompact 16-bit instructions: <code>r0</code>-<code>r3</code>,
<code>r12</code>-<code>r15</code>.  This constraint can only match when the <option>-mq</option>
option is in effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">e</itemformat></item>
</tableterm><tableitem><para>Registers usable as base-regs of memory addresses in ARCompact 16-bit memory
instructions: <code>r0</code>-<code>r3</code>, <code>r12</code>-<code>r15</code>, <code>sp</code>.
This constraint can only match when the <option>-mq</option>
option is in effect.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">D</itemformat></item>
</tableterm><tableitem><para>ARC FPX (dpfp) 64-bit registers. <code>D0</code>, <code>D1</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>A signed 12-bit integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Cal</itemformat></item>
</tableterm><tableitem><para>constant for arithmetic/logical operations.  This might be any constant
that can be put into a long immediate by the assmbler or linker without
involving a PIC relocation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>A 3-bit unsigned integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>A 6-bit unsigned integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">CnL</itemformat></item>
</tableterm><tableitem><para>One&textrsquo;s complement of a 6-bit unsigned integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">CmL</itemformat></item>
</tableterm><tableitem><para>Two&textrsquo;s complement of a 6-bit unsigned integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>A 5-bit unsigned integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>A 7-bit unsigned integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>A 8-bit unsigned integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">H</itemformat></item>
</tableterm><tableitem><para>Any const_double value.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">ARM family&textmdash;<file>config/arm/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">h</itemformat></item>
</tableterm><tableitem><para>In Thumb state, the core registers <code>r8</code>-<code>r15</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">k</itemformat></item>
</tableterm><tableitem><para>The stack pointer register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l</itemformat></item>
</tableterm><tableitem><para>In Thumb State the core registers <code>r0</code>-<code>r7</code>.  In ARM state this
is an alias for the <code>r</code> constraint.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">t</itemformat></item>
</tableterm><tableitem><para>VFP floating-point registers <code>s0</code>-<code>s31</code>.  Used for 32 bit values.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">w</itemformat></item>
</tableterm><tableitem><para>VFP floating-point registers <code>d0</code>-<code>d31</code> and the appropriate
subset <code>d0</code>-<code>d15</code> based on command line options.
Used for 64 bit values only.  Not valid for Thumb1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">y</itemformat></item>
</tableterm><tableitem><para>The iWMMX co-processor registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">z</itemformat></item>
</tableterm><tableitem><para>The iWMMX GR registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>The floating-point constant 0.0
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Integer that is valid as an immediate operand in a data processing
instruction.  That is, an integer in the range 0 to 255 rotated by a
multiple of 2
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Integer in the range &minus;4095 to 4095
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Integer that satisfies constraint <samp>I</samp> when inverted (ones complement)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Integer that satisfies constraint <samp>I</samp> when negated (twos complement)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>Integer in the range 0 to 32
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>A memory reference where the exact address is in a single register
(&textlsquo;<samp>m</samp>&textrsquo; is preferable for <code>asm</code> statements)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>An item in the constant pool
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>A symbol in the text segment of the current file
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Uv</itemformat></item>
</tableterm><tableitem><para>A memory reference suitable for VFP load/store insns (reg+constant offset)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Uy</itemformat></item>
</tableterm><tableitem><para>A memory reference suitable for iWMMXt load/store instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Uq</itemformat></item>
</tableterm><tableitem><para>A memory reference suitable for the ARMv4 ldrsb instruction.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">AVR family&textmdash;<file>config/avr/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">l</itemformat></item>
</tableterm><tableitem><para>Registers from r0 to r15
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>Registers from r16 to r23
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>Registers from r16 to r31
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">w</itemformat></item>
</tableterm><tableitem><para>Registers from r24 to r31.  These registers can be used in <samp>adiw</samp> command
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">e</itemformat></item>
</tableterm><tableitem><para>Pointer register (r26&textndash;r31)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>Base pointer register (r28&textndash;r31)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">q</itemformat></item>
</tableterm><tableitem><para>Stack pointer register (SPH:SPL)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">t</itemformat></item>
</tableterm><tableitem><para>Temporary register r0
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">x</itemformat></item>
</tableterm><tableitem><para>Register pair X (r27:r26)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">y</itemformat></item>
</tableterm><tableitem><para>Register pair Y (r29:r28)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">z</itemformat></item>
</tableterm><tableitem><para>Register pair Z (r31:r30)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Constant greater than &minus;1, less than 64
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Constant greater than &minus;64, less than 1
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Constant integer 2
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Constant integer 0
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>Constant that fits in 8 bits
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Constant integer &minus;1
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>Constant integer 8, 16, or 24
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>Constant integer 1
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>A floating point constant 0.0
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>A memory address based on Y or Z pointer with displacement.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Blackfin family&textmdash;<file>config/bfin/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>P register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>D register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">z</itemformat></item>
</tableterm><tableitem><para>A call clobbered P register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">q<var>n</var></itemformat></item>
</tableterm><tableitem><para>A single register.  If <var>n</var> is in the range 0 to 7, the corresponding D
register.  If it is <code>A</code>, then the register P0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">D</itemformat></item>
</tableterm><tableitem><para>Even-numbered D register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">W</itemformat></item>
</tableterm><tableitem><para>Odd-numbered D register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">e</itemformat></item>
</tableterm><tableitem><para>Accumulator register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">A</itemformat></item>
</tableterm><tableitem><para>Even-numbered accumulator register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">B</itemformat></item>
</tableterm><tableitem><para>Odd-numbered accumulator register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>I register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v</itemformat></item>
</tableterm><tableitem><para>B register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>M register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para>Registers used for circular buffering, i.e. I, B, or L registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">C</itemformat></item>
</tableterm><tableitem><para>The CC register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">t</itemformat></item>
</tableterm><tableitem><para>LT0 or LT1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">k</itemformat></item>
</tableterm><tableitem><para>LC0 or LC1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">u</itemformat></item>
</tableterm><tableitem><para>LB0 or LB1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">x</itemformat></item>
</tableterm><tableitem><para>Any D, P, B, M, I or L register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">y</itemformat></item>
</tableterm><tableitem><para>Additional registers typically used only in prologues and epilogues: RETS,
RETN, RETI, RETX, RETE, ASTAT, SEQSTAT and USP.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">w</itemformat></item>
</tableterm><tableitem><para>Any register except accumulators or CC.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ksh</itemformat></item>
</tableterm><tableitem><para>Signed 16 bit integer (in the range &minus;32768 to 32767)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Kuh</itemformat></item>
</tableterm><tableitem><para>Unsigned 16 bit integer (in the range 0 to 65535)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ks7</itemformat></item>
</tableterm><tableitem><para>Signed 7 bit integer (in the range &minus;64 to 63)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ku7</itemformat></item>
</tableterm><tableitem><para>Unsigned 7 bit integer (in the range 0 to 127)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ku5</itemformat></item>
</tableterm><tableitem><para>Unsigned 5 bit integer (in the range 0 to 31)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ks4</itemformat></item>
</tableterm><tableitem><para>Signed 4 bit integer (in the range &minus;8 to 7)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ks3</itemformat></item>
</tableterm><tableitem><para>Signed 3 bit integer (in the range &minus;3 to 4)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ku3</itemformat></item>
</tableterm><tableitem><para>Unsigned 3 bit integer (in the range 0 to 7)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P<var>n</var></itemformat></item>
</tableterm><tableitem><para>Constant <var>n</var>, where <var>n</var> is a single-digit constant in the range 0 to 4.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">PA</itemformat></item>
</tableterm><tableitem><para>An integer equal to one of the MACFLAG_XXX constants that is suitable for
use with either accumulator.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">PB</itemformat></item>
</tableterm><tableitem><para>An integer equal to one of the MACFLAG_XXX constants that is suitable for
use only with accumulator A1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M1</itemformat></item>
</tableterm><tableitem><para>Constant 255.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M2</itemformat></item>
</tableterm><tableitem><para>Constant 65535.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>An integer constant with exactly a single bit set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>An integer constant with all bits set except exactly one.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">H</itemformat></item>
</tableterm><tableitem>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>Any SYMBOL_REF.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">CR16 Architecture&textmdash;<file>config/cr16/cr16.h</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>Registers from r0 to r14 (registers without stack pointer)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">t</itemformat></item>
</tableterm><tableitem><para>Register from r0 to r11 (all 16-bit registers)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">p</itemformat></item>
</tableterm><tableitem><para>Register from r12 to r15 (all 32-bit registers)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Signed constant that fits in 4 bits
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Signed constant that fits in 5 bits
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Signed constant that fits in 6 bits
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Unsigned constant that fits in 4 bits
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>Signed constant that fits in 32 bits
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Check for 64 bits wide constants for add/sub instructions
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>Floating point constant that is legal for store immediate
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Epiphany&textmdash;<file>config/epiphany/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">U16</itemformat></item>
</tableterm><tableitem><para>An unsigned 16-bit constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>An unsigned 5-bit constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>A signed 11-bit constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Cm1</itemformat></item>
</tableterm><tableitem><para>A signed 11-bit constant added to &minus;1.
Can only match when the <option>-m1reg-<var>reg</var></option> option is active.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Cl1</itemformat></item>
</tableterm><tableitem><para>Left-shift of &minus;1, i.e., a bit mask with a block of leading ones, the rest
being a block of trailing zeroes.
Can only match when the <option>-m1reg-<var>reg</var></option> option is active.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Cr1</itemformat></item>
</tableterm><tableitem><para>Right-shift of &minus;1, i.e., a bit mask with a trailing block of ones, the
rest being zeroes.  Or to put it another way, one less than a power of two.
Can only match when the <option>-m1reg-<var>reg</var></option> option is active.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Cal</itemformat></item>
</tableterm><tableitem><para>Constant for arithmetic/logical operations.
This is like <code>i</code>, except that for position independent code,
no symbols / expressions needing relocations are allowed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Csy</itemformat></item>
</tableterm><tableitem><para>Symbolic constant for call/jump instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rcs</itemformat></item>
</tableterm><tableitem><para>The register class usable in short insns.  This is a register class
constraint, and can thus drive register allocation.
This constraint won&textrsquo;t match unless <option>-mprefer-short-insn-regs</option> is
in effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rsc</itemformat></item>
</tableterm><tableitem><para>The the register class of registers that can be used to hold a
sibcall call address.  I.e., a caller-saved register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rct</itemformat></item>
</tableterm><tableitem><para>Core control register class.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rgs</itemformat></item>
</tableterm><tableitem><para>The register group usable in short insns.
This constraint does not use a register class, so that it only
passively matches suitable registers, and doesn&textrsquo;t drive register allocation.
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rra</itemformat></item>
</tableterm><tableitem><para>Matches the return address if it can be replaced with the link register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rcc</itemformat></item>
</tableterm><tableitem><para>Matches the integer condition code register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Sra</itemformat></item>
</tableterm><tableitem><para>Matches the return address if it is in a stack slot.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Cfm</itemformat></item>
</tableterm><tableitem><para>Matches control register values to switch fp mode, which are encapsulated in
<code>UNSPEC_FP_MODE</code>.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">FRV&textmdash;<file>config/frv/frv.h</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>ACC_REGS</code> (<code>acc0</code> to <code>acc7</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>EVEN_ACC_REGS</code> (<code>acc0</code> to <code>acc7</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>CC_REGS</code> (<code>fcc0</code> to <code>fcc3</code> and
<code>icc0</code> to <code>icc3</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>GPR_REGS</code> (<code>gr0</code> to <code>gr63</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">e</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>EVEN_REGS</code> (<code>gr0</code> to <code>gr63</code>).
Odd registers are excluded not in the class but through the use of a machine
mode larger than 4 bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>FPR_REGS</code> (<code>fr0</code> to <code>fr63</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">h</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>FEVEN_REGS</code> (<code>fr0</code> to <code>fr63</code>).
Odd registers are excluded not in the class but through the use of a machine
mode larger than 4 bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>LR_REG</code> (the <code>lr</code> register).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">q</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>QUAD_REGS</code> (<code>gr2</code> to <code>gr63</code>).
Register numbers not divisible by 4 are excluded not in the class but through
the use of a machine mode larger than 8 bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">t</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>ICC_REGS</code> (<code>icc0</code> to <code>icc3</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">u</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>FCC_REGS</code> (<code>fcc0</code> to <code>fcc3</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>ICR_REGS</code> (<code>cc4</code> to <code>cc7</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">w</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>FCR_REGS</code> (<code>cc0</code> to <code>cc3</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">x</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>QUAD_FPR_REGS</code> (<code>fr0</code> to <code>fr63</code>).
Register numbers not divisible by 4 are excluded not in the class but through
the use of a machine mode larger than 8 bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">z</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>SPR_REGS</code> (<code>lcr</code> and <code>lr</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">A</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>QUAD_ACC_REGS</code> (<code>acc0</code> to <code>acc7</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">B</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>ACCG_REGS</code> (<code>accg0</code> to <code>accg7</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">C</itemformat></item>
</tableterm><tableitem><para>Register in the class <code>CR_REGS</code> (<code>cc0</code> to <code>cc7</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>Floating point constant zero
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>6-bit signed integer constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>10-bit signed integer constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>16-bit signed integer constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>16-bit unsigned integer constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>12-bit signed integer constant that is negative&textmdash;i.e.&noeos; in the
range of &minus;2048 to &minus;1
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>Constant zero
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>12-bit signed integer constant that is greater than zero&textmdash;i.e.&noeos; in the
range of 1 to 2047.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Hewlett-Packard PA-RISC&textmdash;<file>config/pa/pa.h</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>General register 1
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>Floating point register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">q</itemformat></item>
</tableterm><tableitem><para>Shift amount register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">x</itemformat></item>
</tableterm><tableitem><para>Floating point register (deprecated)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">y</itemformat></item>
</tableterm><tableitem><para>Upper floating point register (32-bit), floating point register (64-bit)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Z</itemformat></item>
</tableterm><tableitem><para>Any register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Signed 11-bit integer constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Signed 14-bit integer constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Integer constant that can be deposited with a <code>zdepi</code> instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Signed 5-bit integer constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>Integer constant 0
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Integer constant that can be loaded with a <code>ldil</code> instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>Integer constant whose value plus one is a power of 2
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>Integer constant that can be used for <code>and</code> operations in <code>depi</code>
and <code>extru</code> instructions
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>Integer constant 31
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U</itemformat></item>
</tableterm><tableitem><para>Integer constant 63
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>Floating-point constant 0.0
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">A</itemformat></item>
</tableterm><tableitem><para>A <code>lo_sum</code> data-linkage-table memory operand
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>A memory operand that can be used as the destination operand of an
integer store instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>A scaled or unscaled indexed memory operand
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">T</itemformat></item>
</tableterm><tableitem><para>A memory operand for floating-point loads and stores
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">W</itemformat></item>
</tableterm><tableitem><para>A register indirect memory operand
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Intel IA-64&textmdash;<file>config/ia64/ia64.h</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>General register <code>r0</code> to <code>r3</code> for <code>addl</code> instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>Branch register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para>Predicate register (<samp>c</samp> as in &textldquo;conditional&textrdquo;)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>Application register residing in M-unit
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">e</itemformat></item>
</tableterm><tableitem><para>Application register residing in I-unit
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>Floating-point register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">m</itemformat></item>
</tableterm><tableitem><para>Memory operand.  If used together with <samp>&lt;</samp> or <samp>&gt;</samp>,
the operand can have postincrement and postdecrement which
require printing with <samp>%Pn</samp> on IA-64.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>Floating-point constant 0.0 or 1.0
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>14-bit signed integer constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>22-bit signed integer constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>8-bit signed integer constant for logical instructions
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>8-bit adjusted signed integer constant for compare pseudo-ops
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>6-bit unsigned integer constant for shift counts
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>9-bit signed integer constant for load and store postincrements
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>The constant zero
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>0 or &minus;1 for <code>dep</code> instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>Non-volatile memory for floating-point loads and stores
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range 1 to 4 for <code>shladd</code> instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>Memory operand except postincrement and postdecrement.  This is
now roughly the same as <samp>m</samp> when not used together with <samp>&lt;</samp>
or <samp>&gt;</samp>.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">M32C&textmdash;<file>config/m32c/m32c.c</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">Rsp</itemformat></item>
<itemx spaces=" "><itemformat command="code">Rfb</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">Rsb</itemformat></itemx>
</tableterm><tableitem><para><samp>$sp</samp>, <samp>$fb</samp>, <samp>$sb</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rcr</itemformat></item>
</tableterm><tableitem><para>Any control register, when they&textrsquo;re 16 bits wide (nothing if control
registers are 24 bits wide)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rcl</itemformat></item>
</tableterm><tableitem><para>Any control register, when they&textrsquo;re 24 bits wide.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R0w</itemformat></item>
<itemx spaces=" "><itemformat command="code">R1w</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R2w</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R3w</itemformat></itemx>
</tableterm><tableitem><para>$r0, $r1, $r2, $r3.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R02</itemformat></item>
</tableterm><tableitem><para>$r0 or $r2, or $r2r0 for 32 bit values.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R13</itemformat></item>
</tableterm><tableitem><para>$r1 or $r3, or $r3r1 for 32 bit values.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rdi</itemformat></item>
</tableterm><tableitem><para>A register that can hold a 64 bit value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rhl</itemformat></item>
</tableterm><tableitem><para>$r0 or $r1 (registers with addressable high/low bytes)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R23</itemformat></item>
</tableterm><tableitem><para>$r2 or $r3
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Raa</itemformat></item>
</tableterm><tableitem><para>Address registers
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Raw</itemformat></item>
</tableterm><tableitem><para>Address registers when they&textrsquo;re 16 bits wide.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ral</itemformat></item>
</tableterm><tableitem><para>Address registers when they&textrsquo;re 24 bits wide.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rqi</itemformat></item>
</tableterm><tableitem><para>Registers that can hold QI values.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rad</itemformat></item>
</tableterm><tableitem><para>Registers that can be used with displacements ($a0, $a1, $sb).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rsi</itemformat></item>
</tableterm><tableitem><para>Registers that can hold 32 bit values.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rhi</itemformat></item>
</tableterm><tableitem><para>Registers that can hold 16 bit values.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rhc</itemformat></item>
</tableterm><tableitem><para>Registers chat can hold 16 bit values, including all control
registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rra</itemformat></item>
</tableterm><tableitem><para>$r0 through R1, plus $a0 and $a1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rfl</itemformat></item>
</tableterm><tableitem><para>The flags register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rmm</itemformat></item>
</tableterm><tableitem><para>The memory-based pseudo-registers $mem0 through $mem15.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rpi</itemformat></item>
</tableterm><tableitem><para>Registers that can hold pointers (16 bit registers for r8c, m16c; 24
bit registers for m32cm, m32c).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Rpa</itemformat></item>
</tableterm><tableitem><para>Matches multiple registers in a PARALLEL to form a larger register.
Used to match function return values.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Is3</itemformat></item>
</tableterm><tableitem><para>&minus;8 &dots; 7
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">IS1</itemformat></item>
</tableterm><tableitem><para>&minus;128 &dots; 127
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">IS2</itemformat></item>
</tableterm><tableitem><para>&minus;32768 &dots; 32767
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">IU2</itemformat></item>
</tableterm><tableitem><para>0 &dots; 65535
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">In4</itemformat></item>
</tableterm><tableitem><para>&minus;8 &dots; &minus;1 or 1 &dots; 8
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">In5</itemformat></item>
</tableterm><tableitem><para>&minus;16 &dots; &minus;1 or 1 &dots; 16
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">In6</itemformat></item>
</tableterm><tableitem><para>&minus;32 &dots; &minus;1 or 1 &dots; 32
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">IM2</itemformat></item>
</tableterm><tableitem><para>&minus;65536 &dots; &minus;1
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ilb</itemformat></item>
</tableterm><tableitem><para>An 8 bit value with exactly one bit set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ilw</itemformat></item>
</tableterm><tableitem><para>A 16 bit value with exactly one bit set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Sd</itemformat></item>
</tableterm><tableitem><para>The common src/dest memory addressing modes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Sa</itemformat></item>
</tableterm><tableitem><para>Memory addressed using $a0 or $a1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Si</itemformat></item>
</tableterm><tableitem><para>Memory addressed with immediate addresses.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ss</itemformat></item>
</tableterm><tableitem><para>Memory addressed using the stack pointer ($sp).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Sf</itemformat></item>
</tableterm><tableitem><para>Memory addressed using the frame base register ($fb).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ss</itemformat></item>
</tableterm><tableitem><para>Memory addressed using the small base register ($sb).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S1</itemformat></item>
</tableterm><tableitem><para>$r1h
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">MeP&textmdash;<file>config/mep/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>The $sp register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>The $tp register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para>Any control register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>Either the $hi or the $lo register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">em</itemformat></item>
</tableterm><tableitem><para>Coprocessor registers that can be directly loaded ($c0-$c15).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ex</itemformat></item>
</tableterm><tableitem><para>Coprocessor registers that can be moved to each other.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">er</itemformat></item>
</tableterm><tableitem><para>Coprocessor registers that can be moved to core registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">h</itemformat></item>
</tableterm><tableitem><para>The $hi register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">j</itemformat></item>
</tableterm><tableitem><para>The $rpc register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l</itemformat></item>
</tableterm><tableitem><para>The $lo register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">t</itemformat></item>
</tableterm><tableitem><para>Registers which can be used in $tp-relative addressing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v</itemformat></item>
</tableterm><tableitem><para>The $gp register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">x</itemformat></item>
</tableterm><tableitem><para>The coprocessor registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">y</itemformat></item>
</tableterm><tableitem><para>The coprocessor control registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">z</itemformat></item>
</tableterm><tableitem><para>The $0 register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">A</itemformat></item>
</tableterm><tableitem><para>User-defined register set A.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">B</itemformat></item>
</tableterm><tableitem><para>User-defined register set B.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">C</itemformat></item>
</tableterm><tableitem><para>User-defined register set C.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">D</itemformat></item>
</tableterm><tableitem><para>User-defined register set D.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Offsets for $gp-rel addressing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Constants that can be used directly with boolean insns.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Constants that can be moved directly to registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Small constants that can be added to registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>Long shift counts.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Small constants that can be compared to registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>Constants that can be loaded into the top half of registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>Signed 8-bit immediates.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">T</itemformat></item>
</tableterm><tableitem><para>Symbols encoded for $tp-rel or $gp-rel addressing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U</itemformat></item>
</tableterm><tableitem><para>Non-constant addresses for loading/saving coprocessor registers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">W</itemformat></item>
</tableterm><tableitem><para>The top half of a symbol&textrsquo;s value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Y</itemformat></item>
</tableterm><tableitem><para>A register indirect address without offset.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Z</itemformat></item>
</tableterm><tableitem><para>Symbolic references to the control bus.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">MicroBlaze&textmdash;<file>config/microblaze/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>A general register (<code>r0</code> to <code>r31</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">z</itemformat></item>
</tableterm><tableitem><para>A status register (<code>rmsr</code>, <code>$fcc1</code> to <code>$fcc7</code>).
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">MIPS&textmdash;<file>config/mips/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>An address register.  This is equivalent to <code>r</code> unless
generating MIPS16 code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>A floating-point register (if available).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">h</itemformat></item>
</tableterm><tableitem><para>Formerly the <code>hi</code> register.  This constraint is no longer supported.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l</itemformat></item>
</tableterm><tableitem><para>The <code>lo</code> register.  Use this register to store values that are
no bigger than a word.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">x</itemformat></item>
</tableterm><tableitem><para>The concatenated <code>hi</code> and <code>lo</code> registers.  Use this register
to store doubleword values.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para>A register suitable for use in an indirect jump.  This will always be
<code>$25</code> for <option>-mabicalls</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v</itemformat></item>
</tableterm><tableitem><para>Register <code>$3</code>.  Do not use this constraint in new code;
it is retained only for compatibility with glibc.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">y</itemformat></item>
</tableterm><tableitem><para>Equivalent to <code>r</code>; retained for backwards compatibility.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">z</itemformat></item>
</tableterm><tableitem><para>A floating-point condition code register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>A signed 16-bit constant (for arithmetic instructions).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Integer zero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>An unsigned 16-bit constant (for logic instructions).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>A signed 32-bit constant in which the lower 16 bits are zero.
Such constants can be loaded using <code>lui</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>A constant that cannot be loaded using <code>lui</code>, <code>addiu</code>
or <code>ori</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>A constant in the range &minus;65535 to &minus;1 (inclusive).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>A signed 15-bit constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>A constant in the range 1 to 65535 (inclusive).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>Floating-point zero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>An address that can be used in a non-macro load or store.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ZC</itemformat></item>
</tableterm><tableitem><para>A memory operand whose address is formed by a base register and offset
that is suitable for use in instructions with the same addressing mode
as <code>ll</code> and <code>sc</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ZD</itemformat></item>
</tableterm><tableitem><para>An address suitable for a <code>prefetch</code> instruction, or for any other
instruction with the same addressing mode as <code>prefetch</code>.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Motorola 680x0&textmdash;<file>config/m68k/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>Address register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>Data register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>68881 floating-point register, if available
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Integer in the range 1 to 8
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>16-bit signed number
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Signed number whose magnitude is greater than 0x80
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Integer in the range &minus;8 to &minus;1
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>Signed number whose magnitude is greater than 0x100
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Range 24 to 31, rotatert:SI 8 to 1 expressed as rotate
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>16 (for rotate using swap)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>Range 8 to 15, rotatert:HI 8 to 1 expressed as rotate
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>Numbers that mov3q can handle
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>Floating point constant that is not a 68881 constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>Operands that satisfy &textrsquo;m&textrsquo; when -mpcrel is in effect
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">T</itemformat></item>
</tableterm><tableitem><para>Operands that satisfy &textrsquo;s&textrsquo; when -mpcrel is not in effect
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>Address register indirect addressing mode
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U</itemformat></item>
</tableterm><tableitem><para>Register offset addressing
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">W</itemformat></item>
</tableterm><tableitem><para>const_call_operand
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Cs</itemformat></item>
</tableterm><tableitem><para>symbol_ref or const
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ci</itemformat></item>
</tableterm><tableitem><para>const_int
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">C0</itemformat></item>
</tableterm><tableitem><para>const_int 0
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Cj</itemformat></item>
</tableterm><tableitem><para>Range of signed numbers that don&textrsquo;t fit in 16 bits
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Cmvq</itemformat></item>
</tableterm><tableitem><para>Integers valid for mvq
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Capsw</itemformat></item>
</tableterm><tableitem><para>Integers valid for a moveq followed by a swap
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Cmvz</itemformat></item>
</tableterm><tableitem><para>Integers valid for mvz
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Cmvs</itemformat></item>
</tableterm><tableitem><para>Integers valid for mvs
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ap</itemformat></item>
</tableterm><tableitem><para>push_operand
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ac</itemformat></item>
</tableterm><tableitem><para>Non-register operands allowed in clr
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Moxie&textmdash;<file>config/moxie/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">A</itemformat></item>
</tableterm><tableitem><para>An absolute address
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">B</itemformat></item>
</tableterm><tableitem><para>An offset address
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">W</itemformat></item>
</tableterm><tableitem><para>A register indirect memory operand
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>A constant in the range of 0 to 255.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>A constant in the range of 0 to &minus;255.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">MSP430&textndash;<file>config/msp430/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">R12</itemformat></item>
</tableterm><tableitem><para>Register R12.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R13</itemformat></item>
</tableterm><tableitem><para>Register R13.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Integer constant 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Integer constant -1^20..1^19.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>Integer constant 1-4.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ya</itemformat></item>
</tableterm><tableitem><para>Memory references which do not require an extended MOVX instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Yl</itemformat></item>
</tableterm><tableitem><para>Memory reference, labels only.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ys</itemformat></item>
</tableterm><tableitem><para>Memory reference, stack only.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">NDS32&textmdash;<file>config/nds32/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">w</itemformat></item>
</tableterm><tableitem><para>LOW register class $r0 to $r7 constraint for V3/V3M ISA.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l</itemformat></item>
</tableterm><tableitem><para>LOW register class $r0 to $r7.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>MIDDLE register class $r0 to $r11, $r16 to $r19.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">h</itemformat></item>
</tableterm><tableitem><para>HIGH register class $r12 to $r14, $r20 to $r31.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">t</itemformat></item>
</tableterm><tableitem><para>Temporary assist register $ta (i.e.&noeos; $r15).
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">k</itemformat></item>
</tableterm><tableitem><para>Stack register $sp.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Iu03</itemformat></item>
</tableterm><tableitem><para>Unsigned immediate 3-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">In03</itemformat></item>
</tableterm><tableitem><para>Negative immediate 3-bit value in the range of &minus;7&textndash;0.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Iu04</itemformat></item>
</tableterm><tableitem><para>Unsigned immediate 4-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Is05</itemformat></item>
</tableterm><tableitem><para>Signed immediate 5-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Iu05</itemformat></item>
</tableterm><tableitem><para>Unsigned immediate 5-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">In05</itemformat></item>
</tableterm><tableitem><para>Negative immediate 5-bit value in the range of &minus;31&textndash;0.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ip05</itemformat></item>
</tableterm><tableitem><para>Unsigned immediate 5-bit value for movpi45 instruction with range 16&textndash;47.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Iu06</itemformat></item>
</tableterm><tableitem><para>Unsigned immediate 6-bit value constraint for addri36.sp instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Iu08</itemformat></item>
</tableterm><tableitem><para>Unsigned immediate 8-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Iu09</itemformat></item>
</tableterm><tableitem><para>Unsigned immediate 9-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Is10</itemformat></item>
</tableterm><tableitem><para>Signed immediate 10-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Is11</itemformat></item>
</tableterm><tableitem><para>Signed immediate 11-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Is15</itemformat></item>
</tableterm><tableitem><para>Signed immediate 15-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Iu15</itemformat></item>
</tableterm><tableitem><para>Unsigned immediate 15-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ic15</itemformat></item>
</tableterm><tableitem><para>A constant which is not in the range of imm15u but ok for bclr instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ie15</itemformat></item>
</tableterm><tableitem><para>A constant which is not in the range of imm15u but ok for bset instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">It15</itemformat></item>
</tableterm><tableitem><para>A constant which is not in the range of imm15u but ok for btgl instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ii15</itemformat></item>
</tableterm><tableitem><para>A constant whose compliment value is in the range of imm15u
and ok for bitci instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Is16</itemformat></item>
</tableterm><tableitem><para>Signed immediate 16-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Is17</itemformat></item>
</tableterm><tableitem><para>Signed immediate 17-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Is19</itemformat></item>
</tableterm><tableitem><para>Signed immediate 19-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Is20</itemformat></item>
</tableterm><tableitem><para>Signed immediate 20-bit value.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ihig</itemformat></item>
</tableterm><tableitem><para>The immediate value that can be simply set high 20-bit.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Izeb</itemformat></item>
</tableterm><tableitem><para>The immediate value 0xff.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Izeh</itemformat></item>
</tableterm><tableitem><para>The immediate value 0xffff.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ixls</itemformat></item>
</tableterm><tableitem><para>The immediate value 0x01.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ix11</itemformat></item>
</tableterm><tableitem><para>The immediate value 0x7ff.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ibms</itemformat></item>
</tableterm><tableitem><para>The immediate value with power of 2.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ifex</itemformat></item>
</tableterm><tableitem><para>The immediate value with power of 2 minus 1.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U33</itemformat></item>
</tableterm><tableitem><para>Memory constraint for 333 format.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U45</itemformat></item>
</tableterm><tableitem><para>Memory constraint for 45 format.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U37</itemformat></item>
</tableterm><tableitem><para>Memory constraint for 37 format.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Nios II family&textmdash;<file>config/nios2/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Integer that is valid as an immediate operand in an
instruction taking a signed 16-bit number. Range
&minus;32768 to 32767.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Integer that is valid as an immediate operand in an
instruction taking an unsigned 16-bit number. Range
0 to 65535.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Integer that is valid as an immediate operand in an
instruction taking only the upper 16-bits of a
32-bit number. Range 32-bit numbers with the lower
16-bits being 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Integer that is valid as an immediate operand for a 
shift instruction. Range 0 to 31.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>Integer that is valid as an immediate operand for
only the value 0. Can be used in conjunction with
the format modifier <code>z</code> to use <code>r0</code>
instead of <code>0</code> in the assembly output.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Integer that is valid as an immediate operand for
a custom instruction opcode. Range 0 to 255.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>Matches immediates which are addresses in the small
data section and therefore can be added to <code>gp</code>
as a 16-bit immediate to re-create their 32-bit value.
</para>

</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">PDP-11&textmdash;<file>config/pdp11/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>Floating point registers AC0 through AC3.  These can be loaded from/to
memory with a single instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>Odd numbered general registers (R1, R3, R5).  These are used for
16-bit multiply operations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>Any of the floating point registers (AC0 through AC5).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>Floating point constant 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>An integer constant that fits in 16 bits.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>An integer constant whose low order 16 bits are zero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>An integer constant that does not meet the constraints for codes
<samp>I</samp> or <samp>J</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>The integer constant 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>The integer constant &minus;1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>The integer constant 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>Integer constants &minus;4 through &minus;1 and 1 through 4; shifts by these
amounts are handled as multiple single-bit shifts rather than a single
variable-length shift.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>A memory reference which requires an additional word (address or
offset) after the opcode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>A memory reference that is encoded within the opcode.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">PowerPC and IBM RS6000&textmdash;<file>config/rs6000/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>Address base register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>Floating point register (containing 64-bit value)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>Floating point register (containing 32-bit value)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v</itemformat></item>
</tableterm><tableitem><para>Altivec vector register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wa</itemformat></item>
</tableterm><tableitem><para>Any VSX register if the -mvsx option was used or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wd</itemformat></item>
</tableterm><tableitem><para>VSX vector register to hold vector double data or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wf</itemformat></item>
</tableterm><tableitem><para>VSX vector register to hold vector float data or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wg</itemformat></item>
</tableterm><tableitem><para>If <option>-mmfpgpr</option> was used, a floating point register or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wh</itemformat></item>
</tableterm><tableitem><para>Floating point register if direct moves are available, or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wi</itemformat></item>
</tableterm><tableitem><para>FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wj</itemformat></item>
</tableterm><tableitem><para>FP or VSX register to hold 64-bit integers for direct moves or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wk</itemformat></item>
</tableterm><tableitem><para>FP or VSX register to hold 64-bit doubles for direct moves or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wl</itemformat></item>
</tableterm><tableitem><para>Floating point register if the LFIWAX instruction is enabled or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wm</itemformat></item>
</tableterm><tableitem><para>VSX register if direct move instructions are enabled, or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wn</itemformat></item>
</tableterm><tableitem><para>No register (NO_REGS).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wr</itemformat></item>
</tableterm><tableitem><para>General purpose register if 64-bit instructions are enabled or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ws</itemformat></item>
</tableterm><tableitem><para>VSX vector register to hold scalar double values or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wt</itemformat></item>
</tableterm><tableitem><para>VSX vector register to hold 128 bit integer or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wu</itemformat></item>
</tableterm><tableitem><para>Altivec register to use for float/32-bit int loads/stores  or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wv</itemformat></item>
</tableterm><tableitem><para>Altivec register to use for double loads/stores  or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ww</itemformat></item>
</tableterm><tableitem><para>FP or VSX register to perform float operations under <option>-mvsx</option> or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wx</itemformat></item>
</tableterm><tableitem><para>Floating point register if the STFIWX instruction is enabled or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wy</itemformat></item>
</tableterm><tableitem><para>FP or VSX register to perform ISA 2.07 float ops or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wz</itemformat></item>
</tableterm><tableitem><para>Floating point register if the LFIWZX instruction is enabled or NO_REGS.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wD</itemformat></item>
</tableterm><tableitem><para>Int constant that is the element number of the 64-bit scalar in a vector.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">wQ</itemformat></item>
</tableterm><tableitem><para>A memory address that will work with the <code>lq</code> and <code>stq</code>
instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">h</itemformat></item>
</tableterm><tableitem><para><samp>MQ</samp>, <samp>CTR</samp>, or <samp>LINK</samp> register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">q</itemformat></item>
</tableterm><tableitem><para><samp>MQ</samp> register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para><samp>CTR</samp> register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l</itemformat></item>
</tableterm><tableitem><para><samp>LINK</samp> register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">x</itemformat></item>
</tableterm><tableitem><para><samp>CR</samp> register (condition register) number 0
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">y</itemformat></item>
</tableterm><tableitem><para><samp>CR</samp> register (condition register)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">z</itemformat></item>
</tableterm><tableitem><para><samp>XER[CA]</samp> carry bit (part of the XER register)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Signed 16-bit constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Unsigned 16-bit constant shifted left 16 bits (use <samp>L</samp> instead for
<code>SImode</code> constants)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Unsigned 16-bit constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Signed 16-bit constant shifted left 16 bits
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>Constant larger than 31
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Exact power of 2
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>Zero
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>Constant whose negation is a signed 16-bit constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>Floating point constant that can be loaded into a register with one
instruction per word
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">H</itemformat></item>
</tableterm><tableitem><para>Integer/Floating point constant that can be loaded into a register using
three instructions
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">m</itemformat></item>
</tableterm><tableitem><para>Memory operand.
Normally, <code>m</code> does not allow addresses that update the base register.
If <samp>&lt;</samp> or <samp>&gt;</samp> constraint is also used, they are allowed and
therefore on PowerPC targets in that case it is only safe
to use <samp>m&lt;&gt;</samp> in an <code>asm</code> statement if that <code>asm</code> statement
accesses the operand exactly once.  The <code>asm</code> statement must also
use <samp>%U<var>&lt;opno&gt;</var></samp> as a placeholder for the &textldquo;update&textrdquo; flag in the
corresponding load or store instruction.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">asm (&quot;st%U0 %1,%0&quot; : &quot;=m&lt;&gt;&quot; (mem) : &quot;r&quot; (val));
</pre></smallexample>

<para>is correct but:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">asm (&quot;st %1,%0&quot; : &quot;=m&lt;&gt;&quot; (mem) : &quot;r&quot; (val));
</pre></smallexample>

<para>is not.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">es</itemformat></item>
</tableterm><tableitem><para>A &textldquo;stable&textrdquo; memory operand; that is, one which does not include any
automodification of the base register.  This used to be useful when
<samp>m</samp> allowed automodification of the base register, but as those are now only
allowed when <samp>&lt;</samp> or <samp>&gt;</samp> is used, <samp>es</samp> is basically the same
as <samp>m</samp> without <samp>&lt;</samp> and <samp>&gt;</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>Memory operand that is an offset from a register (it is usually better
to use <samp>m</samp> or <samp>es</samp> in <code>asm</code> statements)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Z</itemformat></item>
</tableterm><tableitem><para>Memory operand that is an indexed or indirect from a register (it is
usually better to use <samp>m</samp> or <samp>es</samp> in <code>asm</code> statements)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>AIX TOC entry
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>Address operand that is an indexed or indirect from a register (<samp>p</samp> is
preferable for <code>asm</code> statements)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>Constant suitable as a 64-bit mask operand
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">T</itemformat></item>
</tableterm><tableitem><para>Constant suitable as a 32-bit mask operand
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U</itemformat></item>
</tableterm><tableitem><para>System V Release 4 small data area reference
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">t</itemformat></item>
</tableterm><tableitem><para>AND masks that can be performed by two rldic&lbrace;l, r&rbrace; instructions
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">W</itemformat></item>
</tableterm><tableitem><para>Vector constant that does not require memory
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">j</itemformat></item>
</tableterm><tableitem><para>Vector constant that is all zeros.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">RL78&textmdash;<file>config/rl78/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">Int3</itemformat></item>
</tableterm><tableitem><para>An integer constant in the range 1 &dots; 7.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Int8</itemformat></item>
</tableterm><tableitem><para>An integer constant in the range 0 &dots; 255.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>An integer constant in the range &minus;255 &dots; 0
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>The integer constant 1.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>The integer constant -1.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>The integer constant 0.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>The integer constant 2.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>The integer constant -2.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>An integer constant in the range 1 &dots; 15.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Qbi</itemformat></item>
</tableterm><tableitem><para>The built-in compare types&textndash;eq, ne, gtu, ltu, geu, and leu.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Qsc</itemformat></item>
</tableterm><tableitem><para>The synthetic compare types&textndash;gt, lt, ge, and le.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Wab</itemformat></item>
</tableterm><tableitem><para>A memory reference with an absolute address.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Wbc</itemformat></item>
</tableterm><tableitem><para>A memory reference using <code>BC</code> as a base register, with an optional offset.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Wca</itemformat></item>
</tableterm><tableitem><para>A memory reference using <code>AX</code>, <code>BC</code>, <code>DE</code>, or <code>HL</code> for the address, for calls.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Wcv</itemformat></item>
</tableterm><tableitem><para>A memory reference using any 16-bit register pair for the address, for calls.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Wd2</itemformat></item>
</tableterm><tableitem><para>A memory reference using <code>DE</code> as a base register, with an optional offset.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Wde</itemformat></item>
</tableterm><tableitem><para>A memory reference using <code>DE</code> as a base register, without any offset.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Wfr</itemformat></item>
</tableterm><tableitem><para>Any memory reference to an address in the far address space.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Wh1</itemformat></item>
</tableterm><tableitem><para>A memory reference using <code>HL</code> as a base register, with an optional one-byte offset.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Whb</itemformat></item>
</tableterm><tableitem><para>A memory reference using <code>HL</code> as a base register, with <code>B</code> or <code>C</code> as the index register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Whl</itemformat></item>
</tableterm><tableitem><para>A memory reference using <code>HL</code> as a base register, without any offset.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Ws1</itemformat></item>
</tableterm><tableitem><para>A memory reference using <code>SP</code> as a base register, with an optional one-byte offset.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Y</itemformat></item>
</tableterm><tableitem><para>Any memory reference to an address in the near address space.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">A</itemformat></item>
</tableterm><tableitem><para>The <code>AX</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">B</itemformat></item>
</tableterm><tableitem><para>The <code>BC</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">D</itemformat></item>
</tableterm><tableitem><para>The <code>DE</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para><code>A</code> through <code>L</code> registers.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>The <code>SP</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">T</itemformat></item>
</tableterm><tableitem><para>The <code>HL</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Z08W</itemformat></item>
</tableterm><tableitem><para>The 16-bit <code>R8</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Z10W</itemformat></item>
</tableterm><tableitem><para>The 16-bit <code>R10</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Zint</itemformat></item>
</tableterm><tableitem><para>The registers reserved for interrupts (<code>R24</code> to <code>R31</code>).
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>The <code>A</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>The <code>B</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para>The <code>C</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>The <code>D</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">e</itemformat></item>
</tableterm><tableitem><para>The <code>E</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">h</itemformat></item>
</tableterm><tableitem><para>The <code>H</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l</itemformat></item>
</tableterm><tableitem><para>The <code>L</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v</itemformat></item>
</tableterm><tableitem><para>The virtual registers.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">w</itemformat></item>
</tableterm><tableitem><para>The <code>PSW</code> register.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">x</itemformat></item>
</tableterm><tableitem><para>The <code>X</code> register.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">RX&textmdash;<file>config/rx/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>An address which does not involve register indirect addressing or
pre/post increment/decrement addressing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Symbol</itemformat></item>
</tableterm><tableitem><para>A symbol reference.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Int08</itemformat></item>
</tableterm><tableitem><para>A constant in the range &minus;256 to 255, inclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Sint08</itemformat></item>
</tableterm><tableitem><para>A constant in the range &minus;128 to 127, inclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Sint16</itemformat></item>
</tableterm><tableitem><para>A constant in the range &minus;32768 to 32767, inclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Sint24</itemformat></item>
</tableterm><tableitem><para>A constant in the range &minus;8388608 to 8388607, inclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Uint04</itemformat></item>
</tableterm><tableitem><para>A constant in the range 0 to 15, inclusive.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">S/390 and zSeries&textmdash;<file>config/s390/s390.h</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>Address register (general purpose register except r0)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para>Condition code register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>Data register (arbitrary general purpose register)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>Floating-point register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Unsigned 8-bit constant (0&textndash;255)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Unsigned 12-bit constant (0&textndash;4095)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Signed 16-bit constant (&minus;32768&textndash;32767)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Value appropriate as displacement.
</para><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">(0..4095)</itemformat></item>
</tableterm><tableitem><para>for short displacement
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">(&minus;524288..524287)</itemformat></item>
</tableterm><tableitem><para>for long displacement
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>Constant integer with a value of 0x7fffffff.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Multiple letter constraint followed by 4 parameter letters.
</para><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">0..9:</itemformat></item>
</tableterm><tableitem><para>number of the part counting from most to least significant
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">H,Q:</itemformat></item>
</tableterm><tableitem><para>mode of the part
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">D,S,H:</itemformat></item>
</tableterm><tableitem><para>mode of the containing operand
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">0,F:</itemformat></item>
</tableterm><tableitem><para>value of the other parts (F&textmdash;all bits set)
</para></tableitem></tableentry></table>
<para>The constraint matches if the specified part of a constant
has a value different from its other parts.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>Memory reference without index register and with short displacement.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>Memory reference with index register and short displacement.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>Memory reference without index register but with long displacement.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">T</itemformat></item>
</tableterm><tableitem><para>Memory reference with index register and long displacement.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U</itemformat></item>
</tableterm><tableitem><para>Pointer with short displacement.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">W</itemformat></item>
</tableterm><tableitem><para>Pointer with long displacement.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Y</itemformat></item>
</tableterm><tableitem><para>Shift count operand.
</para>
</tableitem></tableentry></table>

<need value="1000" line=" 1000"></need>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">SPARC&textmdash;<file>config/sparc/sparc.h</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>Floating-point register on the SPARC-V8 architecture and
lower floating-point register on the SPARC-V9 architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">e</itemformat></item>
</tableterm><tableitem><para>Floating-point register.  It is equivalent to <samp>f</samp> on the
SPARC-V8 architecture and contains both lower and upper
floating-point registers on the SPARC-V9 architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para>Floating-point condition code register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>Lower floating-point register.  It is only valid on the SPARC-V9
architecture when the Visual Instruction Set is available.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>Floating-point register.  It is only valid on the SPARC-V9 architecture
when the Visual Instruction Set is available.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">h</itemformat></item>
</tableterm><tableitem><para>64-bit global or out register for the SPARC-V8+ architecture.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">C</itemformat></item>
</tableterm><tableitem><para>The constant all-ones, for floating-point.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">A</itemformat></item>
</tableterm><tableitem><para>Signed 5-bit constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">D</itemformat></item>
</tableterm><tableitem><para>A vector constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Signed 13-bit constant
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Zero
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>32-bit constant with the low 12 bits clear (a constant that can be
loaded with the <code>sethi</code> instruction)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>A constant in the range supported by <code>movcc</code> instructions (11-bit
signed immediate)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>A constant in the range supported by <code>movrcc</code> instructions (10-bit
signed immediate)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Same as <samp>K</samp>, except that it verifies that bits that are not in the
lower 32-bit range are all zero.  Must be used instead of <samp>K</samp> for
modes wider than <code>SImode</code>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>The constant 4096
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>Floating-point zero
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">H</itemformat></item>
</tableterm><tableitem><para>Signed 13-bit constant, sign-extended to 32 or 64 bits
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>The constant -1
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>Floating-point constant whose integral representation can
be moved into an integer register using a single sethi
instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>Floating-point constant whose integral representation can
be moved into an integer register using a single mov
instruction
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>Floating-point constant whose integral representation can
be moved into an integer register using a high/lo_sum
instruction sequence
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">T</itemformat></item>
</tableterm><tableitem><para>Memory address aligned to an 8-byte boundary
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U</itemformat></item>
</tableterm><tableitem><para>Even register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">W</itemformat></item>
</tableterm><tableitem><para>Memory address for <samp>e</samp> constraint registers
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">w</itemformat></item>
</tableterm><tableitem><para>Memory address with only a base register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Y</itemformat></item>
</tableterm><tableitem><para>Vector zero
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">SPU&textmdash;<file>config/spu/spu.h</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is treated as a 64 bit value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para>An immediate for and/xor/or instructions.  const_int is treated as a 64 bit value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>An immediate for the <code>iohl</code> instruction.  const_int is treated as a 64 bit value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>An immediate which can be loaded with <code>fsmbi</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">A</itemformat></item>
</tableterm><tableitem><para>An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is treated as a 32 bit value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">B</itemformat></item>
</tableterm><tableitem><para>An immediate for most arithmetic instructions.  const_int is treated as a 32 bit value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">C</itemformat></item>
</tableterm><tableitem><para>An immediate for and/xor/or instructions.  const_int is treated as a 32 bit value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">D</itemformat></item>
</tableterm><tableitem><para>An immediate for the <code>iohl</code> instruction.  const_int is treated as a 32 bit value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>A constant in the range [&minus;64, 63] for shift/rotate instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>An unsigned 7-bit constant for conversion/nop/channel instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>A signed 10-bit constant for most arithmetic instructions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>A signed 16 bit immediate for <code>stop</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>An unsigned 16-bit constant for <code>iohl</code> and <code>fsmbi</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>An unsigned 7-bit constant whose 3 least significant bits are 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>An unsigned 3-bit constant for 16-byte rotates and shifts
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>Call operand, reg, for indirect calls
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>Call operand, symbol, for relative calls.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">T</itemformat></item>
</tableterm><tableitem><para>Call operand, const_int, for absolute calls.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U</itemformat></item>
</tableterm><tableitem><para>An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is sign extended to 128 bit.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">W</itemformat></item>
</tableterm><tableitem><para>An immediate for shift and rotate instructions.  const_int is treated as a 32 bit value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Y</itemformat></item>
</tableterm><tableitem><para>An immediate for and/xor/or instructions.  const_int is sign extended as a 128 bit.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Z</itemformat></item>
</tableterm><tableitem><para>An immediate for the <code>iohl</code> instruction.  const_int is sign extended to 128 bit.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">TI C6X family&textmdash;<file>config/c6x/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>Register file A (A0&textndash;A31).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>Register file B (B0&textndash;B31).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">A</itemformat></item>
</tableterm><tableitem><para>Predicate registers in register file A (A0&textndash;A2 on C64X and
higher, A1 and A2 otherwise).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">B</itemformat></item>
</tableterm><tableitem><para>Predicate registers in register file B (B0&textndash;B2).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">C</itemformat></item>
</tableterm><tableitem><para>A call-used register in register file B (B0&textndash;B9, B16&textndash;B31).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Da</itemformat></item>
</tableterm><tableitem><para>Register file A, excluding predicate registers (A3&textndash;A31,
plus A0 if not C64X or higher).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Db</itemformat></item>
</tableterm><tableitem><para>Register file B, excluding predicate registers (B3&textndash;B31).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Iu4</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range 0 &dots; 15.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Iu5</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range 0 &dots; 31.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">In5</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range &minus;31 &dots; 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Is5</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range &minus;16 &dots; 15.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I5x</itemformat></item>
</tableterm><tableitem><para>Integer constant that can be the operand of an ADDA or a SUBA insn.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">IuB</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range 0 &dots; 65535.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">IsB</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range &minus;32768 &dots; 32767.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">IsC</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range <math>-2^{20}</math> &dots; <math>2^{20} - 1</math>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Jc</itemformat></item>
</tableterm><tableitem><para>Integer constant that is a valid mask for the clr instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Js</itemformat></item>
</tableterm><tableitem><para>Integer constant that is a valid mask for the set instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>Memory location with A base register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>Memory location with B base register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Z</itemformat></item>
</tableterm><tableitem><para>Register B14 (aka DP).
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">TILE-Gx&textmdash;<file>config/tilegx/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">R00</itemformat></item>
<itemx spaces=" "><itemformat command="code">R01</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R02</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R03</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R04</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R05</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R06</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R07</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R08</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R09</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R10</itemformat></itemx>
</tableterm><tableitem><para>Each of these represents a register constraint for an individual
register, from r0 to r10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Signed 8-bit integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Signed 16-bit integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Unsigned 16-bit integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Integer constant that fits in one signed byte when incremented by one
(&minus;129 &dots; 126).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">m</itemformat></item>
</tableterm><tableitem><para>Memory operand.  If used together with <samp>&lt;</samp> or <samp>&gt;</samp>, the
operand can have postincrement which requires printing with <samp>%In</samp>
and <samp>%in</samp> on TILE-Gx.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">asm (&quot;st_add %I0,%1,%i0&quot; : &quot;=m&lt;&gt;&quot; (*mem) : &quot;r&quot; (val));
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>A bit mask suitable for the BFINS instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Integer constant that is a byte tiled out eight times.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>The integer zero constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>Integer constant that is a sign-extended byte tiled out as four shorts.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>Integer constant that fits in one signed byte when incremented
(&minus;129 &dots; 126), but excluding -1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>Integer constant that has all 1 bits consecutive and starting at bit 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">T</itemformat></item>
</tableterm><tableitem><para>A 16-bit fragment of a got, tls, or pc-relative reference.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U</itemformat></item>
</tableterm><tableitem><para>Memory operand except postincrement.  This is roughly the same as
<samp>m</samp> when not used together with <samp>&lt;</samp> or <samp>&gt;</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">W</itemformat></item>
</tableterm><tableitem><para>An 8-element vector constant with identical elements.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Y</itemformat></item>
</tableterm><tableitem><para>A 4-element vector constant with identical elements.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Z0</itemformat></item>
</tableterm><tableitem><para>The integer constant 0xffffffff.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Z1</itemformat></item>
</tableterm><tableitem><para>The integer constant 0xffffffff00000000.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">TILEPro&textmdash;<file>config/tilepro/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">R00</itemformat></item>
<itemx spaces=" "><itemformat command="code">R01</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R02</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R03</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R04</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R05</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R06</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R07</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R08</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R09</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">R10</itemformat></itemx>
</tableterm><tableitem><para>Each of these represents a register constraint for an individual
register, from r0 to r10.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Signed 8-bit integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Signed 16-bit integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Nonzero integer constant with low 16 bits zero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Integer constant that fits in one signed byte when incremented by one
(&minus;129 &dots; 126).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">m</itemformat></item>
</tableterm><tableitem><para>Memory operand.  If used together with <samp>&lt;</samp> or <samp>&gt;</samp>, the
operand can have postincrement which requires printing with <samp>%In</samp>
and <samp>%in</samp> on TILEPro.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">asm (&quot;swadd %I0,%1,%i0&quot; : &quot;=m&lt;&gt;&quot; (mem) : &quot;r&quot; (val));
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>A bit mask suitable for the MM instruction.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Integer constant that is a byte tiled out four times.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>The integer zero constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>Integer constant that is a sign-extended byte tiled out as two shorts.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>Integer constant that fits in one signed byte when incremented
(&minus;129 &dots; 126), but excluding -1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">T</itemformat></item>
</tableterm><tableitem><para>A symbolic operand, or a 16-bit fragment of a got, tls, or pc-relative
reference.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U</itemformat></item>
</tableterm><tableitem><para>Memory operand except postincrement.  This is roughly the same as
<samp>m</samp> when not used together with <samp>&lt;</samp> or <samp>&gt;</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">W</itemformat></item>
</tableterm><tableitem><para>A 4-element vector constant with identical elements.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Y</itemformat></item>
</tableterm><tableitem><para>A 2-element vector constant with identical elements.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Visium&textmdash;<file>config/visium/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>EAM register <code>mdb</code>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para>EAM register <code>mdc</code>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>Floating point register
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">l</itemformat></item>
</tableterm><tableitem><para>General register, but not <code>r29</code>, <code>r30</code> and <code>r31</code>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">t</itemformat></item>
</tableterm><tableitem><para>Register <code>r1</code>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">u</itemformat></item>
</tableterm><tableitem><para>Register <code>r2</code>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v</itemformat></item>
</tableterm><tableitem><para>Register <code>r3</code>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>Floating-point constant 0.0
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range 0 .. 65535 (16-bit immediate)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range 1 .. 31 (5-bit immediate)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range &minus;65535 .. &minus;1 (16-bit negative immediate)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>Integer constant &minus;1
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>Integer constant 0
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>Integer constant 32
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">x86 family&textmdash;<file>config/i386/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>Legacy register&textmdash;the eight integer registers available on all
i386 processors (<code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>,
<code>si</code>, <code>di</code>, <code>bp</code>, <code>sp</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">q</itemformat></item>
</tableterm><tableitem><para>Any register accessible as <code><var>r</var>l</code>.  In 32-bit mode, <code>a</code>,
<code>b</code>, <code>c</code>, and <code>d</code>; in 64-bit mode, any integer register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>Any register accessible as <code><var>r</var>h</code>: <code>a</code>, <code>b</code>,
<code>c</code>, and <code>d</code>.
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>The <code>a</code> register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>The <code>b</code> register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para>The <code>c</code> register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>The <code>d</code> register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>The <code>si</code> register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">D</itemformat></item>
</tableterm><tableitem><para>The <code>di</code> register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">A</itemformat></item>
</tableterm><tableitem><para>The <code>a</code> and <code>d</code> registers.  This class is used for instructions
that return double word results in the <code>ax:dx</code> register pair.  Single
word values will be allocated either in <code>ax</code> or <code>dx</code>.
For example on i386 the following implements <code>rdtsc</code>:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">unsigned long long rdtsc (void)
&lbrace;
  unsigned long long tick;
  __asm__ __volatile__(&quot;rdtsc&quot;:&quot;=A&quot;(tick));
  return tick;
&rbrace;
</pre></smallexample>

<para>This is not correct on x86-64 as it would allocate tick in either <code>ax</code>
or <code>dx</code>.  You have to use the following variant instead:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">unsigned long long rdtsc (void)
&lbrace;
  unsigned int tickl, tickh;
  __asm__ __volatile__(&quot;rdtsc&quot;:&quot;=a&quot;(tickl),&quot;=d&quot;(tickh));
  return ((unsigned long long)tickh &lt;&lt; 32)|tickl;
&rbrace;
</pre></smallexample>


</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para>Any 80387 floating-point (stack) register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">t</itemformat></item>
</tableterm><tableitem><para>Top of 80387 floating-point stack (<code>%st(0)</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">u</itemformat></item>
</tableterm><tableitem><para>Second from top of 80387 floating-point stack (<code>%st(1)</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">y</itemformat></item>
</tableterm><tableitem><para>Any MMX register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">x</itemformat></item>
</tableterm><tableitem><para>Any SSE register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Yz</itemformat></item>
</tableterm><tableitem><para>First SSE register (<code>%xmm0</code>).
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range 0 &dots; 31, for 32-bit shifts.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Integer constant in the range 0 &dots; 63, for 64-bit shifts.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Signed 8-bit integer constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para><code>0xFF</code> or <code>0xFFFF</code>, for andsi as a zero-extending move.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>0, 1, 2, or 3 (shifts for the <code>lea</code> instruction).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>Unsigned 8-bit integer constant (for <code>in</code> and <code>out</code>
instructions).
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">G</itemformat></item>
</tableterm><tableitem><para>Standard 80387 floating point constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">C</itemformat></item>
</tableterm><tableitem><para>Standard SSE floating point constant.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">e</itemformat></item>
</tableterm><tableitem><para>32-bit signed integer constant, or a symbolic reference known
to fit that range (for immediate operands in sign-extending x86-64
instructions).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Z</itemformat></item>
</tableterm><tableitem><para>32-bit unsigned integer constant, or a symbolic reference known
to fit that range (for immediate operands in zero-extending x86-64
instructions).
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Xstormy16&textmdash;<file>config/stormy16/stormy16.h</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>Register r0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>Register r1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">c</itemformat></item>
</tableterm><tableitem><para>Register r2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">d</itemformat></item>
</tableterm><tableitem><para>Register r8.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">e</itemformat></item>
</tableterm><tableitem><para>Registers r0 through r7.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">t</itemformat></item>
</tableterm><tableitem><para>Registers r0 and r1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">y</itemformat></item>
</tableterm><tableitem><para>The carry register.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">z</itemformat></item>
</tableterm><tableitem><para>Registers r8 and r9.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>A constant between 0 and 3 inclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>A constant that has exactly one bit set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>A constant that has exactly one bit clear.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>A constant between 0 and 255 inclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">M</itemformat></item>
</tableterm><tableitem><para>A constant between &minus;255 and 0 inclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">N</itemformat></item>
</tableterm><tableitem><para>A constant between &minus;3 and 0 inclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">O</itemformat></item>
</tableterm><tableitem><para>A constant between 1 and 4 inclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">P</itemformat></item>
</tableterm><tableitem><para>A constant between &minus;4 and &minus;1 inclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Q</itemformat></item>
</tableterm><tableitem><para>A memory reference that is a stack push.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">R</itemformat></item>
</tableterm><tableitem><para>A memory reference that is a stack pop.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">S</itemformat></item>
</tableterm><tableitem><para>A memory reference that refers to a constant address of known value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">T</itemformat></item>
</tableterm><tableitem><para>The register indicated by Rx (not implemented yet).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">U</itemformat></item>
</tableterm><tableitem><para>A constant that is not between 2 and 15 inclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Z</itemformat></item>
</tableterm><tableitem><para>The constant 0.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="emph">Xtensa&textmdash;<file>config/xtensa/constraints.md</file></itemformat></item>
</tableterm><tableitem><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>General-purpose 32-bit register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">b</itemformat></item>
</tableterm><tableitem><para>One-bit boolean register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">A</itemformat></item>
</tableterm><tableitem><para>MAC16 40-bit accumulator register
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">I</itemformat></item>
</tableterm><tableitem><para>Signed 12-bit integer constant, for use in MOVI instructions
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">J</itemformat></item>
</tableterm><tableitem><para>Signed 8-bit integer constant, for use in ADDI instructions
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">K</itemformat></item>
</tableterm><tableitem><para>Integer constant valid for BccI instructions
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">L</itemformat></item>
</tableterm><tableitem><para>Unsigned constant valid for BccUI instructions
</para>
</tableitem></tableentry></table>

</tableitem></tableentry></table>


<!-- c Each of the following nodes are wrapped in separate -->
<!-- c "@ifset INTERNALS" to work around memory limits for the default -->
<!-- c configuration in older tetex distributions.  Known to not work: -->
<!-- c tetex-1.0.7, known to work: tetex-2.0.2. -->

<raisesections></raisesections>

</subsubsection>
</subsection>
<node name="Asm-Labels" spaces=" "><nodename>Asm Labels</nodename><nodenext automatic="on">Explicit Reg Vars</nodenext><nodeprev automatic="on">Constraints</nodeprev><nodeup automatic="on">Using Assembly Language with C</nodeup></node>
<subsection spaces=" "><sectiontitle>Controlling Names Used in Assembler Code</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="845">assembler names for identifiers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="846">names used in assembler code</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="847">identifiers, names in assembler code</indexterm></cindex>

<para>You can specify the name to be used in the assembler code for a C
function or variable by writing the <code>asm</code> (or <code>__asm__</code>)
keyword after the declarator as follows:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int foo asm (&quot;myfoo&quot;) = 2;
</pre></smallexample>

<noindent></noindent>
<para>This specifies that the name to be used for the variable <code>foo</code> in
the assembler code should be <samp>myfoo</samp> rather than the usual
<samp>_foo</samp>.
</para>
<para>On systems where an underscore is normally prepended to the name of a C
function or variable, this feature allows you to define names for the
linker that do not start with an underscore.
</para>
<para>It does not make sense to use this feature with a non-static local
variable since such variables do not have assembler names.  If you are
trying to put the variable in a particular register, see <ref label="Explicit-Reg-Vars"><xrefnodename>Explicit
Reg Vars</xrefnodename></ref>.  GCC presently accepts such code with a warning, but will
probably be changed to issue an error, rather than a warning, in the
future.
</para>
<para>You cannot use <code>asm</code> in this way in a function <emph>definition</emph>; but
you can get the same effect by writing a declaration for the function
before its definition and putting <code>asm</code> there, like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern func () asm (&quot;FUNC&quot;);

func (x, y)
     int x, y;
/* <r>&dots;</r> */
</pre></smallexample>

<para>It is up to you to make sure that the assembler names you choose do not
conflict with any other assembler symbols.  Also, you must not use a
register name; that would produce completely invalid assembler code.  GCC
does not as yet have the ability to store static variables in registers.
Perhaps that will be added.
</para>
</subsection>
<node name="Explicit-Reg-Vars" spaces=" "><nodename>Explicit Reg Vars</nodename><nodenext automatic="on">Size of an asm</nodenext><nodeprev automatic="on">Asm Labels</nodeprev><nodeup automatic="on">Using Assembly Language with C</nodeup></node>
<subsection spaces=" "><sectiontitle>Variables in Specified Registers</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="848">explicit register variables</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="849">variables in specified registers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="850">specified registers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="851">registers, global allocation</indexterm></cindex>

<para>GNU C allows you to put a few global variables into specified hardware
registers.  You can also specify the register in which an ordinary
register variable should be allocated.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Global register variables reserve registers throughout the program.
This may be useful in programs such as programming language
interpreters that have a couple of global variables that are accessed
very often.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Local register variables in specific registers do not reserve the
registers, except at the point where they are used as input or output
operands in an <code>asm</code> statement and the <code>asm</code> statement itself is
not deleted.  The compiler&textrsquo;s data flow analysis is capable of determining
where the specified registers contain live values, and where they are
available for other uses.  Stores into local register variables may be deleted
when they appear to be dead according to dataflow analysis.  References
to local register variables may be deleted or moved or simplified.
</para>
<para>These local variables are sometimes convenient for use with the extended
<code>asm</code> feature (<pxref label="Extended-Asm"><xrefnodename>Extended Asm</xrefnodename></pxref>), if you want to write one
output of the assembler instruction directly into a particular register.
(This works provided the register you specify fits the constraints
specified for that operand in the <code>asm</code>.)
</para></listitem></itemize>

<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Global Reg Vars</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Local Reg Vars</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="Global-Reg-Vars" spaces=" "><nodename>Global Reg Vars</nodename><nodenext automatic="on">Local Reg Vars</nodenext><nodeup automatic="on">Explicit Reg Vars</nodeup></node>
<subsubsection spaces=" "><sectiontitle>Defining Global Register Variables</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="852">global register variables</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="853">registers, global variables in</indexterm></cindex>

<para>You can define a global register variable in GNU C like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">register int *foo asm (&quot;a5&quot;);
</pre></smallexample>

<noindent></noindent>
<para>Here <code>a5</code> is the name of the register that should be used.  Choose a
register that is normally saved and restored by function calls on your
machine, so that library routines will not clobber it.
</para>
<para>Naturally the register name is CPU-dependent, so you need to
conditionalize your program according to CPU type.  The register
<code>a5</code> is a good choice on a 68000 for a variable of pointer
type.  On machines with register windows, be sure to choose a &textldquo;global&textrdquo;
register that is not affected magically by the function call mechanism.
</para>
<para>In addition, different operating systems on the same CPU may differ in how they
name the registers; then you need additional conditionals.  For
example, some 68000 operating systems call this register <code>%a5</code>.
</para>
<para>Eventually there may be a way of asking the compiler to choose a register
automatically, but first we need to figure out how it should choose and
how to enable you to guide the choice.  No solution is evident.
</para>
<para>Defining a global register variable in a certain register reserves that
register entirely for this use, at least within the current compilation.
The register is not allocated for any other purpose in the functions
in the current compilation, and is not saved and restored by
these functions.  Stores into this register are never deleted even if they
appear to be dead, but references may be deleted or moved or
simplified.
</para>
<para>It is not safe to access the global register variables from signal
handlers, or from more than one thread of control, because the system
library routines may temporarily use the register for other things (unless
you recompile them specially for the task at hand).
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="854"><code>qsort</code>, and global register variables</indexterm></cindex>
<para>It is not safe for one function that uses a global register variable to
call another such function <code>foo</code> by way of a third function
<code>lose</code> that is compiled without knowledge of this variable (i.e.&noeos; in a
different source file in which the variable isn&textrsquo;t declared).  This is
because <code>lose</code> might save the register and put some other value there.
For example, you can&textrsquo;t expect a global register variable to be available in
the comparison-function that you pass to <code>qsort</code>, since <code>qsort</code>
might have put something else in that register.  (If you are prepared to
recompile <code>qsort</code> with the same global register variable, you can
solve this problem.)
</para>
<para>If you want to recompile <code>qsort</code> or other source files that do not
actually use your global register variable, so that they do not use that
register for any other purpose, then it suffices to specify the compiler
option <option>-ffixed-<var>reg</var></option>.  You need not actually add a global
register declaration to their source code.
</para>
<para>A function that can alter the value of a global register variable cannot
safely be called from a function compiled without this variable, because it
could clobber the value the caller expects to find there on return.
Therefore, the function that is the entry point into the part of the
program that uses the global register variable must explicitly save and
restore the value that belongs to its caller.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="855">register variable after <code>longjmp</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="856">global register after <code>longjmp</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="857">value after <code>longjmp</code></indexterm></cindex>
<findex index="fn" spaces=" "><indexterm index="fn" number="22" mergedindex="cp">longjmp</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="23" mergedindex="cp">setjmp</indexterm></findex>
<para>On most machines, <code>longjmp</code> restores to each global register
variable the value it had at the time of the <code>setjmp</code>.  On some
machines, however, <code>longjmp</code> does not change the value of global
register variables.  To be portable, the function that called <code>setjmp</code>
should make other arrangements to save the values of the global register
variables, and to restore them in a <code>longjmp</code>.  This way, the same
thing happens regardless of what <code>longjmp</code> does.
</para>
<para>All global register variable declarations must precede all function
definitions.  If such a declaration could appear after function
definitions, the declaration would be too late to prevent the register from
being used for other purposes in the preceding functions.
</para>
<para>Global register variables may not have initial values, because an
executable file has no means to supply initial contents for a register.
</para>
<para>On the SPARC, there are reports that g3 &dots; g7 are suitable
registers, but certain library functions, such as <code>getwd</code>, as well
as the subroutines for division and remainder, modify g3 and g4.  g1 and
g2 are local temporaries.
</para>
<para>On the 68000, a2 &dots; a5 should be suitable, as should d2 &dots; d7.
Of course, it does not do to use more than a few of those.
</para>
</subsubsection>
<node name="Local-Reg-Vars" spaces=" "><nodename>Local Reg Vars</nodename><nodeprev automatic="on">Global Reg Vars</nodeprev><nodeup automatic="on">Explicit Reg Vars</nodeup></node>
<subsubsection spaces=" "><sectiontitle>Specifying Registers for Local Variables</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="858">local variables, specifying registers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="859">specifying registers for local variables</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="860">registers for local variables</indexterm></cindex>

<para>You can define a local register variable with a specified register
like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">register int *foo asm (&quot;a5&quot;);
</pre></smallexample>

<noindent></noindent>
<para>Here <code>a5</code> is the name of the register that should be used.  Note
that this is the same syntax used for defining global register
variables, but for a local variable it appears within a function.
</para>
<para>Naturally the register name is CPU-dependent, but this is not a
problem, since specific registers are most often useful with explicit
assembler instructions (<pxref label="Extended-Asm"><xrefnodename>Extended Asm</xrefnodename></pxref>).  Both of these things
generally require that you conditionalize your program according to
CPU type.
</para>
<para>In addition, operating systems on one type of CPU may differ in how they
name the registers; then you need additional conditionals.  For
example, some 68000 operating systems call this register <code>%a5</code>.
</para>
<para>Defining such a register variable does not reserve the register; it
remains available for other uses in places where flow control determines
the variable&textrsquo;s value is not live.
</para>
<para>This option does not guarantee that GCC generates code that has
this variable in the register you specify at all times.  You may not
code an explicit reference to this register in the assembler
instruction template part of an <code>asm</code> statement and assume it
always refers to this variable.
However, using the variable as an input or output operand to the <code>asm</code>
guarantees that the specified register is used for that operand.  
<xref label="Extended-Asm"><xrefnodename>Extended Asm</xrefnodename></xref>, for more information.
</para>
<para>Stores into local register variables may be deleted when they appear to be dead
according to dataflow analysis.  References to local register variables may
be deleted or moved or simplified.
</para>
<para>As with global register variables, it is recommended that you choose a
register that is normally saved and restored by function calls on
your machine, so that library routines will not clobber it.  
</para>
<para>Sometimes when writing inline <code>asm</code> code, you need to make an operand be a 
specific register, but there&textrsquo;s no matching constraint letter for that 
register. To force the operand into that register, create a local variable 
and specify the register in the variable&textrsquo;s declaration. Then use the local 
variable for the asm operand and specify any constraint letter that matches 
the register:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">register int *p1 asm (&quot;r0&quot;) = &dots;;
register int *p2 asm (&quot;r1&quot;) = &dots;;
register int *result asm (&quot;r0&quot;);
asm (&quot;sysint&quot; : &quot;=r&quot; (result) : &quot;0&quot; (p1), &quot;r&quot; (p2));
</pre></smallexample>

<para><emph>Warning:</emph> In the above example, be aware that a register (for example r0) can be 
call-clobbered by subsequent code, including function calls and library calls 
for arithmetic operators on other variables (for example the initialization 
of p2). In this case, use temporary variables for expressions between the 
register assignments:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int t1 = &dots;;
register int *p1 asm (&quot;r0&quot;) = &dots;;
register int *p2 asm (&quot;r1&quot;) = t1;
register int *result asm (&quot;r0&quot;);
asm (&quot;sysint&quot; : &quot;=r&quot; (result) : &quot;0&quot; (p1), &quot;r&quot; (p2));
</pre></smallexample>

</subsubsection>
</subsection>
<node name="Size-of-an-asm" spaces=" "><nodename>Size of an asm</nodename><nodeprev automatic="on">Explicit Reg Vars</nodeprev><nodeup automatic="on">Using Assembly Language with C</nodeup></node>
<subsection spaces=" "><sectiontitle>Size of an <code>asm</code></sectiontitle>

<para>Some targets require that GCC track the size of each instruction used
in order to generate correct code.  Because the final length of the
code produced by an <code>asm</code> statement is only known by the
assembler, GCC must make an estimate as to how big it will be.  It
does this by counting the number of instructions in the pattern of the
<code>asm</code> and multiplying that by the length of the longest
instruction supported by that processor.  (When working out the number
of instructions, it assumes that any occurrence of a newline or of
whatever statement separator character is supported by the assembler &textndash;
typically <samp>;</samp> &textmdash; indicates the end of an instruction.)
</para>
<para>Normally, GCC&textrsquo;s estimate is adequate to ensure that correct
code is generated, but it is possible to confuse the compiler if you use
pseudo instructions or assembler macros that expand into multiple real
instructions, or if you use assembler directives that expand to more
space in the object file than is needed for a single instruction.
If this happens then the assembler may produce a diagnostic saying that
a label is unreachable.
</para>
</subsection>
</section>
<node name="Alternate-Keywords" spaces=" "><nodename>Alternate Keywords</nodename><nodenext automatic="on">Incomplete Enums</nodenext><nodeprev automatic="on">Using Assembly Language with C</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Alternate Keywords</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="861">alternate keywords</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="862">keywords, alternate</indexterm></cindex>

<para><option>-ansi</option> and the various <option>-std</option> options disable certain
keywords.  This causes trouble when you want to use GNU C extensions, or
a general-purpose header file that should be usable by all programs,
including ISO C programs.  The keywords <code>asm</code>, <code>typeof</code> and
<code>inline</code> are not available in programs compiled with
<option>-ansi</option> or <option>-std</option> (although <code>inline</code> can be used in a
program compiled with <option>-std=c99</option> or <option>-std=c11</option>).  The
ISO C99 keyword
<code>restrict</code> is only available when <option>-std=gnu99</option> (which will
eventually be the default) or <option>-std=c99</option> (or the equivalent
<option>-std=iso9899:1999</option>), or an option for a later standard
version, is used.
</para>
<para>The way to solve these problems is to put <samp>__</samp> at the beginning and
end of each problematical keyword.  For example, use <code>__asm__</code>
instead of <code>asm</code>, and <code>__inline__</code> instead of <code>inline</code>.
</para>
<para>Other C compilers won&textrsquo;t accept these alternative keywords; if you want to
compile with another compiler, you can define the alternate keywords as
macros to replace them with the customary keywords.  It looks like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#ifndef __GNUC__
#define __asm__ asm
#endif
</pre></smallexample>

<findex index="fn" spaces=" "><indexterm index="fn" number="24" mergedindex="cp">__extension__</indexterm></findex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2624" incode="1">pedantic</indexterm></indexcommand>
<para><option>-pedantic</option> and other options cause warnings for many GNU C extensions.
You can
prevent such warnings within one expression by writing
<code>__extension__</code> before the expression.  <code>__extension__</code> has no
effect aside from this.
</para>
</section>
<node name="Incomplete-Enums" spaces=" "><nodename>Incomplete Enums</nodename><nodenext automatic="on">Function Names</nodenext><nodeprev automatic="on">Alternate Keywords</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Incomplete <code>enum</code> Types</sectiontitle>

<para>You can define an <code>enum</code> tag without specifying its possible values.
This results in an incomplete type, much like what you get if you write
<code>struct foo</code> without describing the elements.  A later declaration
that does specify the possible values completes the type.
</para>
<para>You can&textrsquo;t allocate variables or storage using the type while it is
incomplete.  However, you can work with pointers to that type.
</para>
<para>This extension may not be very useful, but it makes the handling of
<code>enum</code> more consistent with the way <code>struct</code> and <code>union</code>
are handled.
</para>
<para>This extension is not supported by GNU C++.
</para>
</section>
<node name="Function-Names" spaces=" "><nodename>Function Names</nodename><nodenext automatic="on">Return Address</nodenext><nodeprev automatic="on">Incomplete Enums</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Function Names as Strings</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="863"><code>__func__</code> identifier</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="864"><code>__FUNCTION__</code> identifier</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="865"><code>__PRETTY_FUNCTION__</code> identifier</indexterm></cindex>

<para>GCC provides three magic variables that hold the name of the current
function, as a string.  The first of these is <code>__func__</code>, which
is part of the C99 standard:
</para>
<para>The identifier <code>__func__</code> is implicitly declared by the translator
as if, immediately following the opening brace of each function
definition, the declaration
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">static const char __func__[] = &quot;function-name&quot;;
</pre></smallexample>

<noindent></noindent>
<para>appeared, where function-name is the name of the lexically-enclosing
function.  This name is the unadorned name of the function.
</para>
<para><code>__FUNCTION__</code> is another name for <code>__func__</code>, provided for
backward compatibility with old versions of GCC.
</para>
<para>In C, <code>__PRETTY_FUNCTION__</code> is yet another name for
<code>__func__</code>.  However, in C++, <code>__PRETTY_FUNCTION__</code> contains
the type signature of the function as well as its bare name.  For
example, this program:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern &quot;C&quot; &lbrace;
extern int printf (char *, ...);
&rbrace;

class a &lbrace;
 public:
  void sub (int i)
    &lbrace;
      printf (&quot;__FUNCTION__ = %s\n&quot;, __FUNCTION__);
      printf (&quot;__PRETTY_FUNCTION__ = %s\n&quot;, __PRETTY_FUNCTION__);
    &rbrace;
&rbrace;;

int
main (void)
&lbrace;
  a ax;
  ax.sub (0);
  return 0;
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>gives this output:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">__FUNCTION__ = sub
__PRETTY_FUNCTION__ = void a::sub(int)
</pre></smallexample>

<para>These identifiers are variables, not preprocessor macros, and may not
be used to initialize <code>char</code> arrays or be concatenated with other string
literals.
</para>
</section>
<node name="Return-Address" spaces=" "><nodename>Return Address</nodename><nodenext automatic="on">Vector Extensions</nodenext><nodeprev automatic="on">Function Names</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Getting the Return or Frame Address of a Function</sectiontitle>

<para>These functions may be used to get information about the callers of a
function.
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="25" mergedindex="cp">__builtin_return_address</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void *</deftype> <deffunction>__builtin_return_address</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>level</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function returns the return address of the current function, or of
one of its callers.  The <var>level</var> argument is number of frames to
scan up the call stack.  A value of <code>0</code> yields the return address
of the current function, a value of <code>1</code> yields the return address
of the caller of the current function, and so forth.  When inlining
the expected behavior is that the function returns the address of
the function that is returned to.  To work around this behavior use
the <code>noinline</code> function attribute.
</para>
<para>The <var>level</var> argument must be a constant integer.
</para>
<para>On some machines it may be impossible to determine the return address of
any function other than the current one; in such cases, or when the top
of the stack has been reached, this function returns <code>0</code> or a
random value.  In addition, <code>__builtin_frame_address</code> may be used
to determine if the top of the stack has been reached.
</para>
<para>Additional post-processing of the returned value may be needed, see
<code>__builtin_extract_return_addr</code>.
</para>
<para>This function should only be used with a nonzero argument for debugging
purposes.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="26" mergedindex="cp">__builtin_extract_return_addr</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void *</deftype> <deffunction>__builtin_extract_return_addr</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype> <defparam>*</defparam><defparam><var>addr</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>The address as returned by <code>__builtin_return_address</code> may have to be fed
through this function to get the actual encoded address.  For example, on the
31-bit S/390 platform the highest bit has to be masked out, or on SPARC
platforms an offset has to be added for the true next instruction to be
executed.
</para>
<para>If no fixup is needed, this function simply passes through <var>addr</var>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="27" mergedindex="cp">__builtin_frob_return_address</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void *</deftype> <deffunction>__builtin_frob_return_address</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype> <defparam>*</defparam><defparam><var>addr</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function does the reverse of <code>__builtin_extract_return_addr</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="28" mergedindex="cp">__builtin_frame_address</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void *</deftype> <deffunction>__builtin_frame_address</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>level</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function is similar to <code>__builtin_return_address</code>, but it
returns the address of the function frame rather than the return address
of the function.  Calling <code>__builtin_frame_address</code> with a value of
<code>0</code> yields the frame address of the current function, a value of
<code>1</code> yields the frame address of the caller of the current function,
and so forth.
</para>
<para>The frame is the area on the stack that holds local variables and saved
registers.  The frame address is normally the address of the first word
pushed on to the stack by the function.  However, the exact definition
depends upon the processor and the calling convention.  If the processor
has a dedicated frame pointer register, and the function has a frame,
then <code>__builtin_frame_address</code> returns the value of the frame
pointer register.
</para>
<para>On some machines it may be impossible to determine the frame address of
any function other than the current one; in such cases, or when the top
of the stack has been reached, this function returns <code>0</code> if
the first frame pointer is properly initialized by the startup code.
</para>
<para>This function should only be used with a nonzero argument for debugging
purposes.
</para></definitionitem></deftypefn>

</section>
<node name="Vector-Extensions" spaces=" "><nodename>Vector Extensions</nodename><nodenext automatic="on">Offsetof</nodenext><nodeprev automatic="on">Return Address</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Using Vector Instructions through Built-in Functions</sectiontitle>

<para>On some targets, the instruction set contains SIMD vector instructions which
operate on multiple values contained in one large register at the same time.
For example, on the x86 the MMX, 3DNow!&noeos; and SSE extensions can be used
this way.
</para>
<para>The first step in using these extensions is to provide the necessary data
types.  This should be done using an appropriate <code>typedef</code>:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef int v4si __attribute__ ((vector_size (16)));
</pre></smallexample>

<noindent></noindent>
<para>The <code>int</code> type specifies the base type, while the attribute specifies
the vector size for the variable, measured in bytes.  For example, the
declaration above causes the compiler to set the mode for the <code>v4si</code>
type to be 16 bytes wide and divided into <code>int</code> sized units.  For
a 32-bit <code>int</code> this means a vector of 4 units of 4 bytes, and the
corresponding mode of <code>foo</code> is <acronym><acronymword>V4SI</acronymword></acronym>.
</para>
<para>The <code>vector_size</code> attribute is only applicable to integral and
float scalars, although arrays, pointers, and function return values
are allowed in conjunction with this construct. Only sizes that are
a power of two are currently allowed.
</para>
<para>All the basic integer types can be used as base types, both as signed
and as unsigned: <code>char</code>, <code>short</code>, <code>int</code>, <code>long</code>,
<code>long long</code>.  In addition, <code>float</code> and <code>double</code> can be
used to build floating-point vector types.
</para>
<para>Specifying a combination that is not valid for the current architecture
causes GCC to synthesize the instructions using a narrower mode.
For example, if you specify a variable of type <code>V4SI</code> and your
architecture does not allow for this specific SIMD type, GCC
produces code that uses 4 <code>SIs</code>.
</para>
<para>The types defined in this manner can be used with a subset of normal C
operations.  Currently, GCC allows using the following operators
on these types: <code>+, -, *, /, unary minus, ^, |, &amp;, ~, %</code>&eosperiod;
</para>
<para>The operations behave like C++ <code>valarrays</code>.  Addition is defined as
the addition of the corresponding elements of the operands.  For
example, in the code below, each of the 4 elements in <var>a</var> is
added to the corresponding 4 elements in <var>b</var> and the resulting
vector is stored in <var>c</var>.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef int v4si __attribute__ ((vector_size (16)));

v4si a, b, c;

c = a + b;
</pre></smallexample>

<para>Subtraction, multiplication, division, and the logical operations
operate in a similar manner.  Likewise, the result of using the unary
minus or complement operators on a vector type is a vector whose
elements are the negative or complemented values of the corresponding
elements in the operand.
</para>
<para>It is possible to use shifting operators <code>&lt;&lt;</code>, <code>&gt;&gt;</code> on
integer-type vectors. The operation is defined as following: <code>&lbrace;a0,
a1, &dots;, an&rbrace; &gt;&gt; &lbrace;b0, b1, &dots;, bn&rbrace; == &lbrace;a0 &gt;&gt; b0, a1 &gt;&gt; b1,
&dots;, an &gt;&gt; bn&rbrace;</code>&eosperiod; Vector operands must have the same number of
elements. 
</para>
<para>For convenience, it is allowed to use a binary vector operation
where one operand is a scalar. In that case the compiler transforms
the scalar operand into a vector where each element is the scalar from
the operation. The transformation happens only if the scalar could be
safely converted to the vector-element type.
Consider the following code.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef int v4si __attribute__ ((vector_size (16)));

v4si a, b, c;
long l;

a = b + 1;    /* a = b + &lbrace;1,1,1,1&rbrace;; */
a = 2 * b;    /* a = &lbrace;2,2,2,2&rbrace; * b; */

a = l + a;    /* Error, cannot convert long to int. */
</pre></smallexample>

<para>Vectors can be subscripted as if the vector were an array with
the same number of elements and base type.  Out of bound accesses
invoke undefined behavior at run time.  Warnings for out of bound
accesses for vector subscription can be enabled with
<option>-Warray-bounds</option>.
</para>
<para>Vector comparison is supported with standard comparison
operators: <code>==, !=, &lt;, &lt;=, &gt;, &gt;=</code>. Comparison operands can be
vector expressions of integer-type or real-type. Comparison between
integer-type vectors and real-type vectors are not supported.  The
result of the comparison is a vector of the same width and number of
elements as the comparison operands with a signed integral element
type.
</para>
<para>Vectors are compared element-wise producing 0 when comparison is false
and -1 (constant of the appropriate type where all bits are set)
otherwise. Consider the following example.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef int v4si __attribute__ ((vector_size (16)));

v4si a = &lbrace;1,2,3,4&rbrace;;
v4si b = &lbrace;3,2,1,4&rbrace;;
v4si c;

c = a &gt;  b;     /* The result would be &lbrace;0, 0,-1, 0&rbrace;  */
c = a == b;     /* The result would be &lbrace;0,-1, 0,-1&rbrace;  */
</pre></smallexample>

<para>In C++, the ternary operator <code>?:</code> is available. <code>a?b:c</code>, where
<code>b</code> and <code>c</code> are vectors of the same type and <code>a</code> is an
integer vector with the same number of elements of the same size as <code>b</code>
and <code>c</code>, computes all three arguments and creates a vector
<code>&lbrace;a[0]?b[0]:c[0], a[1]?b[1]:c[1], &dots;&rbrace;</code>.  Note that unlike in
OpenCL, <code>a</code> is thus interpreted as <code>a != 0</code> and not <code>a &lt; 0</code>.
As in the case of binary operations, this syntax is also accepted when
one of <code>b</code> or <code>c</code> is a scalar that is then transformed into a
vector. If both <code>b</code> and <code>c</code> are scalars and the type of
<code>true?b:c</code> has the same size as the element type of <code>a</code>, then
<code>b</code> and <code>c</code> are converted to a vector type whose elements have
this type and with the same number of elements as <code>a</code>.
</para>
<para>In C++, the logic operators <code>!, &amp;&amp;, ||</code> are available for vectors.
<code>!v</code> is equivalent to <code>v == 0</code>, <code>a &amp;&amp; b</code> is equivalent to
<code>a!=0 &amp; b!=0</code> and <code>a || b</code> is equivalent to <code>a!=0 | b!=0</code>.
For mixed operations between a scalar <code>s</code> and a vector <code>v</code>,
<code>s &amp;&amp; v</code> is equivalent to <code>s?v!=0:0</code> (the evaluation is
short-circuit) and <code>v &amp;&amp; s</code> is equivalent to <code>v!=0 &amp; (s?-1:0)</code>.
</para>
<para>Vector shuffling is available using functions
<code>__builtin_shuffle (vec, mask)</code> and
<code>__builtin_shuffle (vec0, vec1, mask)</code>.
Both functions construct a permutation of elements from one or two
vectors and return a vector of the same type as the input vector(s).
The <var>mask</var> is an integral vector with the same width (<var>W</var>)
and element count (<var>N</var>) as the output vector.
</para>
<para>The elements of the input vectors are numbered in memory ordering of
<var>vec0</var> beginning at 0 and <var>vec1</var> beginning at <var>N</var>.  The
elements of <var>mask</var> are considered modulo <var>N</var> in the single-operand
case and modulo <math>2*<var>N</var></math> in the two-operand case.
</para>
<para>Consider the following example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef int v4si __attribute__ ((vector_size (16)));

v4si a = &lbrace;1,2,3,4&rbrace;;
v4si b = &lbrace;5,6,7,8&rbrace;;
v4si mask1 = &lbrace;0,1,1,3&rbrace;;
v4si mask2 = &lbrace;0,4,2,5&rbrace;;
v4si res;

res = __builtin_shuffle (a, mask1);       /* res is &lbrace;1,2,2,4&rbrace;  */
res = __builtin_shuffle (a, b, mask2);    /* res is &lbrace;1,5,3,6&rbrace;  */
</pre></smallexample>

<para>Note that <code>__builtin_shuffle</code> is intentionally semantically
compatible with the OpenCL <code>shuffle</code> and <code>shuffle2</code> functions.
</para>
<para>You can declare variables and use them in function calls and returns, as
well as in assignments and some casts.  You can specify a vector type as
a return type for a function.  Vector types can also be used as function
arguments.  It is possible to cast from one vector type to another,
provided they are of the same size (in fact, you can also cast vectors
to and from other datatypes of the same size).
</para>
<para>You cannot operate between vectors of different lengths or different
signedness without a cast.
</para>
</section>
<node name="Offsetof" spaces=" "><nodename>Offsetof</nodename><nodenext automatic="on">__sync Builtins</nodenext><nodeprev automatic="on">Vector Extensions</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Support for <code>offsetof</code></sectiontitle>
<findex index="fn" spaces=" "><indexterm index="fn" number="29" mergedindex="cp">__builtin_offsetof</indexterm></findex>

<para>GCC implements for both C and C++ a syntactic extension to implement
the <code>offsetof</code> macro.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">primary:
        &quot;__builtin_offsetof&quot; &quot;(&quot; <code>typename</code> &quot;,&quot; offsetof_member_designator &quot;)&quot;

offsetof_member_designator:
          <code>identifier</code>
        | offsetof_member_designator &quot;.&quot; <code>identifier</code>
        | offsetof_member_designator &quot;[&quot; <code>expr</code> &quot;]&quot;
</pre></smallexample>

<para>This extension is sufficient such that
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define offsetof(<var>type</var>, <var>member</var>)  __builtin_offsetof (<var>type</var>, <var>member</var>)
</pre></smallexample>

<noindent></noindent>
<para>is a suitable definition of the <code>offsetof</code> macro.  In C++, <var>type</var>
may be dependent.  In either case, <var>member</var> may consist of a single
identifier, or a sequence of member accesses and array references.
</para>
</section>
<node name="_005f_005fsync-Builtins" spaces=" "><nodename>__sync Builtins</nodename><nodenext automatic="on">__atomic Builtins</nodenext><nodeprev automatic="on">Offsetof</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Legacy <code>__sync</code> Built-in Functions for Atomic Memory Access</sectiontitle>

<para>The following built-in functions
are intended to be compatible with those described
in the <cite>Intel Itanium Processor-specific Application Binary Interface</cite>,
section 7.4.  As such, they depart from normal GCC practice by not using
the <samp>__builtin_</samp> prefix and also by being overloaded so that they
work on multiple types.
</para>
<para>The definition given in the Intel documentation allows only for the use of
the types <code>int</code>, <code>long</code>, <code>long long</code> or their unsigned
counterparts.  GCC allows any integral scalar or pointer type that is
1, 2, 4 or 8 bytes in length.
</para>
<para>These functions are implemented in terms of the <samp>__atomic</samp>
builtins (<pxref label="_005f_005fatomic-Builtins"><xrefnodename>__atomic Builtins</xrefnodename></pxref>).  They should not be used for new
code which should use the <samp>__atomic</samp> builtins instead.
</para>
<para>Not all operations are supported by all target processors.  If a particular
operation cannot be implemented on the target processor, a warning is
generated and a call to an external function is generated.  The external
function carries the same name as the built-in version,
with an additional suffix
<samp>_<var>n</var></samp> where <var>n</var> is the size of the data type.
</para>
<!-- c ??? Should we have a mechanism to suppress this warning?  This is almost -->
<!-- c useful for implementing the operation under the control of an external -->
<!-- c mutex. -->

<para>In most cases, these built-in functions are considered a <dfn>full barrier</dfn>.
That is,
no memory operand is moved across the operation, either forward or
backward.  Further, instructions are issued as necessary to prevent the
processor from speculating loads across the operation and from queuing stores
after the operation.
</para>
<para>All of the routines are described in the Intel documentation to take
&textldquo;an optional list of variables protected by the memory barrier&textrdquo;.  It&textrsquo;s
not clear what is meant by that; it could mean that <emph>only</emph> the
listed variables are protected, or it could mean a list of additional
variables to be protected.  The list is ignored by GCC which treats it as
empty.  GCC interprets an empty list as meaning that all globally
accessible variables should be protected.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code"><var>type</var> __sync_fetch_and_add (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></item>
<itemx spaces=" "><itemformat command="code"><var>type</var> __sync_fetch_and_sub (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>type</var> __sync_fetch_and_or (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>type</var> __sync_fetch_and_and (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>type</var> __sync_fetch_and_xor (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>type</var> __sync_fetch_and_nand (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></itemx>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="30" mergedindex="cp">__sync_fetch_and_add</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="31" mergedindex="cp">__sync_fetch_and_sub</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="32" mergedindex="cp">__sync_fetch_and_or</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="33" mergedindex="cp">__sync_fetch_and_and</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="34" mergedindex="cp">__sync_fetch_and_xor</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="35" mergedindex="cp">__sync_fetch_and_nand</indexterm></findex>
<para>These built-in functions perform the operation suggested by the name, and
returns the value that had previously been in memory.  That is,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">&lbrace; tmp = *ptr; *ptr <var>op</var>= value; return tmp; &rbrace;
&lbrace; tmp = *ptr; *ptr = ~(tmp &amp; value); return tmp; &rbrace;   // nand
</pre></smallexample>

<para><emph>Note:</emph> GCC 4.4 and later implement <code>__sync_fetch_and_nand</code>
as <code>*ptr = ~(tmp &amp; value)</code> instead of <code>*ptr = ~tmp &amp; value</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>type</var> __sync_add_and_fetch (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></item>
<itemx spaces=" "><itemformat command="code"><var>type</var> __sync_sub_and_fetch (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>type</var> __sync_or_and_fetch (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>type</var> __sync_and_and_fetch (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>type</var> __sync_xor_and_fetch (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code"><var>type</var> __sync_nand_and_fetch (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></itemx>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="36" mergedindex="cp">__sync_add_and_fetch</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="37" mergedindex="cp">__sync_sub_and_fetch</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="38" mergedindex="cp">__sync_or_and_fetch</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="39" mergedindex="cp">__sync_and_and_fetch</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="40" mergedindex="cp">__sync_xor_and_fetch</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="41" mergedindex="cp">__sync_nand_and_fetch</indexterm></findex>
<para>These built-in functions perform the operation suggested by the name, and
return the new value.  That is,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">&lbrace; *ptr <var>op</var>= value; return *ptr; &rbrace;
&lbrace; *ptr = ~(*ptr &amp; value); return *ptr; &rbrace;   // nand
</pre></smallexample>

<para><emph>Note:</emph> GCC 4.4 and later implement <code>__sync_nand_and_fetch</code>
as <code>*ptr = ~(*ptr &amp; value)</code> instead of
<code>*ptr = ~*ptr &amp; value</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">bool __sync_bool_compare_and_swap (<var>type</var> *ptr, <var>type</var> oldval, <var>type</var> newval, ...)</itemformat></item>
<itemx spaces=" "><itemformat command="code"><var>type</var> __sync_val_compare_and_swap (<var>type</var> *ptr, <var>type</var> oldval, <var>type</var> newval, ...)</itemformat></itemx>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="42" mergedindex="cp">__sync_bool_compare_and_swap</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="43" mergedindex="cp">__sync_val_compare_and_swap</indexterm></findex>
<para>These built-in functions perform an atomic compare and swap.
That is, if the current
value of <code>*<var>ptr</var></code> is <var>oldval</var>, then write <var>newval</var> into
<code>*<var>ptr</var></code>.
</para>
<para>The &textldquo;bool&textrdquo; version returns true if the comparison is successful and
<var>newval</var> is written.  The &textldquo;val&textrdquo; version returns the contents
of <code>*<var>ptr</var></code> before the operation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__sync_synchronize (...)</itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="44" mergedindex="cp">__sync_synchronize</indexterm></findex>
<para>This built-in function issues a full memory barrier.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code"><var>type</var> __sync_lock_test_and_set (<var>type</var> *ptr, <var>type</var> value, ...)</itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="45" mergedindex="cp">__sync_lock_test_and_set</indexterm></findex>
<para>This built-in function, as described by Intel, is not a traditional test-and-set
operation, but rather an atomic exchange operation.  It writes <var>value</var>
into <code>*<var>ptr</var></code>, and returns the previous contents of
<code>*<var>ptr</var></code>.
</para>
<para>Many targets have only minimal support for such locks, and do not support
a full exchange operation.  In this case, a target may support reduced
functionality here by which the <emph>only</emph> valid value to store is the
immediate constant 1.  The exact value actually stored in <code>*<var>ptr</var></code>
is implementation defined.
</para>
<para>This built-in function is not a full barrier,
but rather an <dfn>acquire barrier</dfn>.
This means that references after the operation cannot move to (or be
speculated to) before the operation, but previous memory stores may not
be globally visible yet, and previous memory loads may not yet be
satisfied.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __sync_lock_release (<var>type</var> *ptr, ...)</itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" number="46" mergedindex="cp">__sync_lock_release</indexterm></findex>
<para>This built-in function releases the lock acquired by
<code>__sync_lock_test_and_set</code>.
Normally this means writing the constant 0 to <code>*<var>ptr</var></code>.
</para>
<para>This built-in function is not a full barrier,
but rather a <dfn>release barrier</dfn>.
This means that all previous memory stores are globally visible, and all
previous memory loads have been satisfied, but following memory reads
are not prevented from being speculated to before the barrier.
</para></tableitem></tableentry></table>

</section>
<node name="_005f_005fatomic-Builtins" spaces=" "><nodename>__atomic Builtins</nodename><nodenext automatic="on">Integer Overflow Builtins</nodenext><nodeprev automatic="on">__sync Builtins</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Built-in Functions for Memory Model Aware Atomic Operations</sectiontitle>

<para>The following built-in functions approximately match the requirements
for C++11 concurrency and memory models.  They are all
identified by being prefixed with <samp>__atomic</samp> and most are
overloaded so that they work with multiple types.
</para>
<para>These functions are intended to replace the legacy <samp>__sync</samp>
builtins.  The main difference is that the memory model to be used is a
parameter to the functions.  New code should always use the
<samp>__atomic</samp> builtins rather than the <samp>__sync</samp> builtins.
</para>
<para>Note that the <samp>__atomic</samp> builtins assume that programs will
conform to the C++11 model for concurrency.  In particular, they assume
that programs are free of data races.  See the C++11 standard for
detailed definitions.
</para>
<para>The <samp>__atomic</samp> builtins can be used with any integral scalar or
pointer type that is 1, 2, 4, or 8 bytes in length.  16-byte integral
types are also allowed if <samp>__int128</samp> (<pxref label="_005f_005fint128"><xrefnodename>__int128</xrefnodename></pxref>) is
supported by the architecture.
</para>
<para>The four non-arithmetic functions (load, store, exchange, and 
compare_exchange) all have a generic version as well.  This generic
version works on any data type.  If the data type size maps to one
of the integral sizes that may have lock free support, the generic
version uses the lock free built-in function.  Otherwise an
external call is left to be resolved at run time.  This external call is
the same format with the addition of a <samp>size_t</samp> parameter inserted
as the first parameter indicating the size of the object being pointed to.
All objects must be the same size.
</para>
<para>There are 6 different memory models that can be specified.  These map
to the C++11 memory models with the same names, see the C++11 standard
or the <uref><urefurl>http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync</urefurl><urefdesc>GCC wiki
on atomic synchronization</urefdesc></uref> for detailed definitions.  Individual
targets may also support additional memory models for use on specific
architectures.  Refer to the target documentation for details of
these.
</para>
<para>The memory models integrate both barriers to code motion as well as
synchronization requirements with other threads.  They are listed here
in approximately ascending order of strength.
</para>
<table commandarg="code" spaces="  " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">__ATOMIC_RELAXED</itemformat></item>
</tableterm><tableitem><para>No barriers or synchronization.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__ATOMIC_CONSUME</itemformat></item>
</tableterm><tableitem><para>Data dependency only for both barrier and synchronization with another
thread.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__ATOMIC_ACQUIRE</itemformat></item>
</tableterm><tableitem><para>Barrier to hoisting of code and synchronizes with release (or stronger)
semantic stores from another thread.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__ATOMIC_RELEASE</itemformat></item>
</tableterm><tableitem><para>Barrier to sinking of code and synchronizes with acquire (or stronger)
semantic loads from another thread.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__ATOMIC_ACQ_REL</itemformat></item>
</tableterm><tableitem><para>Barrier in both directions and synchronizes with acquire loads and
release stores in another thread.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__ATOMIC_SEQ_CST</itemformat></item>
</tableterm><tableitem><para>Barrier in both directions and synchronizes with acquire loads and
release stores in all threads.
</para></tableitem></tableentry></table>

<para>Note that the scope of a C++11 memory model depends on whether or not
the function being called is a <emph>fence</emph> (such as
<samp>__atomic_thread_fence</samp>).  In a fence, all memory accesses are
subject to the restrictions of the memory model.  When the function is
an operation on a location, the restrictions apply only to those
memory accesses that could affect or that could depend on the
location.
</para>
<para>Target architectures are encouraged to provide their own patterns for
each of these built-in functions.  If no target is provided, the original
non-memory model set of <samp>__sync</samp> atomic built-in functions are
used, along with any required synchronization fences surrounding it in
order to achieve the proper behavior.  Execution in this case is subject
to the same restrictions as those built-in functions.
</para>
<para>If there is no pattern or mechanism to provide a lock free instruction
sequence, a call is made to an external routine with the same parameters
to be resolved at run time.
</para>
<para>When implementing patterns for these built-in functions, the memory model
parameter can be ignored as long as the pattern implements the most
restrictive <code>__ATOMIC_SEQ_CST</code> model.  Any of the other memory models
execute correctly with this memory model but they may not execute as
efficiently as they could with a more appropriate implementation of the
relaxed requirements.
</para>
<para>Note that the C++11 standard allows for the memory model parameter to be
determined at run time rather than at compile time.  These built-in
functions map any run-time value to <code>__ATOMIC_SEQ_CST</code> rather
than invoke a runtime library call or inline a switch statement.  This is
standard compliant, safe, and the simplest approach for now.
</para>
<para>The memory model parameter is a signed int, but only the lower 16 bits are
reserved for the memory model.  The remainder of the signed int is reserved
for target use and should be 0.  Use of the predefined atomic values
ensures proper usage.
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="47" mergedindex="cp">__atomic_load_n</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_load_n</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This built-in function implements an atomic load operation.  It returns the
contents of <code>*<var>ptr</var></code>.
</para>
<para>The valid memory model variants are
<code>__ATOMIC_RELAXED</code>, <code>__ATOMIC_SEQ_CST</code>, <code>__ATOMIC_ACQUIRE</code>,
and <code>__ATOMIC_CONSUME</code>.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="48" mergedindex="cp">__atomic_load</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__atomic_load</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>*ret</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This is the generic version of an atomic load.  It returns the
contents of <code>*<var>ptr</var></code> in <code>*<var>ret</var></code>.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="49" mergedindex="cp">__atomic_store_n</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__atomic_store_n</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This built-in function implements an atomic store operation.  It writes 
<code><var>val</var></code> into <code>*<var>ptr</var></code>.  
</para>
<para>The valid memory model variants are
<code>__ATOMIC_RELAXED</code>, <code>__ATOMIC_SEQ_CST</code>, and <code>__ATOMIC_RELEASE</code>.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="50" mergedindex="cp">__atomic_store</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__atomic_store</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>*val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This is the generic version of an atomic store.  It stores the value
of <code>*<var>val</var></code> into <code>*<var>ptr</var></code>.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="51" mergedindex="cp">__atomic_exchange_n</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_exchange_n</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This built-in function implements an atomic exchange operation.  It writes
<var>val</var> into <code>*<var>ptr</var></code>, and returns the previous contents of
<code>*<var>ptr</var></code>.
</para>
<para>The valid memory model variants are
<code>__ATOMIC_RELAXED</code>, <code>__ATOMIC_SEQ_CST</code>, <code>__ATOMIC_ACQUIRE</code>,
<code>__ATOMIC_RELEASE</code>, and <code>__ATOMIC_ACQ_REL</code>.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="52" mergedindex="cp">__atomic_exchange</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__atomic_exchange</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>*val</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>*ret</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This is the generic version of an atomic exchange.  It stores the
contents of <code>*<var>val</var></code> into <code>*<var>ptr</var></code>. The original value
of <code>*<var>ptr</var></code> is copied into <code>*<var>ret</var></code>.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="53" mergedindex="cp">__atomic_compare_exchange_n</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__atomic_compare_exchange_n</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>*expected</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>desired</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>bool</defparamtype> <defparam>weak</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>success_memmodel</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>failure_memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This built-in function implements an atomic compare and exchange operation.
This compares the contents of <code>*<var>ptr</var></code> with the contents of
<code>*<var>expected</var></code>. If equal, the operation is a <emph>read-modify-write</emph>
which writes <var>desired</var> into <code>*<var>ptr</var></code>.  If they are not
equal, the operation is a <emph>read</emph> and the current contents of
<code>*<var>ptr</var></code> is written into <code>*<var>expected</var></code>.  <var>weak</var> is true
for weak compare_exchange, and false for the strong variation.  Many targets 
only offer the strong variation and ignore the parameter.  When in doubt, use
the strong variation.
</para>
<para>True is returned if <var>desired</var> is written into
<code>*<var>ptr</var></code> and the operation is considered to conform to the
memory model specified by <var>success_memmodel</var>.  There are no
restrictions on what memory model can be used here.
</para>
<para>False is returned otherwise, and the operation is considered to conform
to <var>failure_memmodel</var>. This memory model cannot be
<code>__ATOMIC_RELEASE</code> nor <code>__ATOMIC_ACQ_REL</code>.  It also cannot be a
stronger model than that specified by <var>success_memmodel</var>.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="54" mergedindex="cp">__atomic_compare_exchange</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__atomic_compare_exchange</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>*expected</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>*desired</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>bool</defparamtype> <defparam>weak</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>success_memmodel</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>failure_memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This built-in function implements the generic version of
<code>__atomic_compare_exchange</code>.  The function is virtually identical to
<code>__atomic_compare_exchange_n</code>, except the desired value is also a
pointer.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="55" mergedindex="cp">__atomic_add_fetch</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_add_fetch</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="56" mergedindex="cp">__atomic_sub_fetch</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_sub_fetch</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="57" mergedindex="cp">__atomic_and_fetch</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_and_fetch</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="58" mergedindex="cp">__atomic_xor_fetch</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_xor_fetch</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="59" mergedindex="cp">__atomic_or_fetch</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_or_fetch</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="60" mergedindex="cp">__atomic_nand_fetch</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_nand_fetch</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<definitionitem><para>These built-in functions perform the operation suggested by the name, and
return the result of the operation. That is,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">&lbrace; *ptr <var>op</var>= val; return *ptr; &rbrace;
</pre></smallexample>

<para>All memory models are valid.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="61" mergedindex="cp">__atomic_fetch_add</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_fetch_add</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="62" mergedindex="cp">__atomic_fetch_sub</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_fetch_sub</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="63" mergedindex="cp">__atomic_fetch_and</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_fetch_and</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="64" mergedindex="cp">__atomic_fetch_xor</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_fetch_xor</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="65" mergedindex="cp">__atomic_fetch_or</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_fetch_or</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="66" mergedindex="cp">__atomic_fetch_nand</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__atomic_fetch_nand</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type</var></defparam> <defparamtype>*ptr</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type</var></defparam> <defparamtype>val</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<definitionitem><para>These built-in functions perform the operation suggested by the name, and
return the value that had previously been in <code>*<var>ptr</var></code>.  That is,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">&lbrace; tmp = *ptr; *ptr <var>op</var>= val; return tmp; &rbrace;
</pre></smallexample>

<para>All memory models are valid.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="67" mergedindex="cp">__atomic_test_and_set</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__atomic_test_and_set</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype> <defparam>*ptr</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function performs an atomic test-and-set operation on
the byte at <code>*<var>ptr</var></code>.  The byte is set to some implementation
defined nonzero &textldquo;set&textrdquo; value and the return value is <code>true</code> if and only
if the previous contents were &textldquo;set&textrdquo;.
It should be only used for operands of type <code>bool</code> or <code>char</code>. For 
other types only part of the value may be set.
</para>
<para>All memory models are valid.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="68" mergedindex="cp">__atomic_clear</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__atomic_clear</deffunction> <defdelimiter>(</defdelimiter><defparamtype>bool</defparamtype> <defparam>*ptr</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function performs an atomic clear operation on
<code>*<var>ptr</var></code>.  After the operation, <code>*<var>ptr</var></code> contains 0.
It should be only used for operands of type <code>bool</code> or <code>char</code> and 
in conjunction with <code>__atomic_test_and_set</code>.
For other types it may only clear partially. If the type is not <code>bool</code>
prefer using <code>__atomic_store</code>.
</para>
<para>The valid memory model variants are
<code>__ATOMIC_RELAXED</code>, <code>__ATOMIC_SEQ_CST</code>, and
<code>__ATOMIC_RELEASE</code>.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="69" mergedindex="cp">__atomic_thread_fence</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__atomic_thread_fence</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function acts as a synchronization fence between threads
based on the specified memory model.
</para>
<para>All memory orders are valid.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="70" mergedindex="cp">__atomic_signal_fence</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__atomic_signal_fence</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam>memmodel</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function acts as a synchronization fence between a thread
and signal handlers based in the same thread.
</para>
<para>All memory orders are valid.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="71" mergedindex="cp">__atomic_always_lock_free</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__atomic_always_lock_free</deffunction> <defdelimiter>(</defdelimiter><defparamtype>size_t</defparamtype> <defparam>size</defparam><defdelimiter>,</defdelimiter>  <defparamtype>void</defparamtype> <defparam>*ptr</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function returns true if objects of <var>size</var> bytes always
generate lock free atomic instructions for the target architecture.  
<var>size</var> must resolve to a compile-time constant and the result also
resolves to a compile-time constant.
</para>
<para><var>ptr</var> is an optional pointer to the object that may be used to determine
alignment.  A value of 0 indicates typical alignment should be used.  The 
compiler may also ignore this parameter.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">if (_atomic_always_lock_free (sizeof (long long), 0))
</pre></smallexample>

</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="72" mergedindex="cp">__atomic_is_lock_free</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__atomic_is_lock_free</deffunction> <defdelimiter>(</defdelimiter><defparamtype>size_t</defparamtype> <defparam>size</defparam><defdelimiter>,</defdelimiter> <defparamtype>void</defparamtype> <defparam>*ptr</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function returns true if objects of <var>size</var> bytes always
generate lock free atomic instructions for the target architecture.  If
it is not known to be lock free a call is made to a runtime routine named
<code>__atomic_is_lock_free</code>.
</para>
<para><var>ptr</var> is an optional pointer to the object that may be used to determine
alignment.  A value of 0 indicates typical alignment should be used.  The 
compiler may also ignore this parameter.
</para></definitionitem></deftypefn>

</section>
<node name="Integer-Overflow-Builtins" spaces=" "><nodename>Integer Overflow Builtins</nodename><nodenext automatic="on">x86 specific memory model extensions for transactional memory</nodenext><nodeprev automatic="on">__atomic Builtins</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Built-in Functions to Perform Arithmetic with Overflow Checking</sectiontitle>

<para>The following built-in functions allow performing simple arithmetic operations
together with checking whether the operations overflowed.
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="73" mergedindex="cp">__builtin_add_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_add_overflow</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type1</var></defparam> <defparamtype>a</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type2</var></defparam> <defparamtype>b</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type3</var></defparam> <defparamtype>*res</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="74" mergedindex="cp">__builtin_sadd_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_sadd_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam>a</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>b</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>*res</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="75" mergedindex="cp">__builtin_saddl_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_saddl_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>a</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>b</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>*res</defparamtype><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="76" mergedindex="cp">__builtin_saddll_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_saddll_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>long</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>a</defparam><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>b</defparam><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>*res</defparamtype><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="77" mergedindex="cp">__builtin_uadd_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_uadd_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>a</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>b</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>*res</defparamtype><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="78" mergedindex="cp">__builtin_uaddl_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_uaddl_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>a</defparam><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>b</defparam><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>*res</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="79" mergedindex="cp">__builtin_uaddll_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_uaddll_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>a</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>b</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>*res</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<definitionitem>
<para>These built-in functions promote the first two operands into infinite precision signed
type and perform addition on those promoted operands.  The result is then
cast to the type the third pointer argument points to and stored there.
If the stored result is equal to the infinite precision result, the built-in
functions return false, otherwise they return true.  As the addition is
performed in infinite signed precision, these built-in functions have fully defined
behavior for all argument values.
</para>
<para>The first built-in function allows arbitrary integral types for operands and
the result type must be pointer to some integer type, the rest of the built-in
functions have explicit integer types.
</para>
<para>The compiler will attempt to use hardware instructions to implement
these built-in functions where possible, like conditional jump on overflow
after addition, conditional jump on carry etc.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="80" mergedindex="cp">__builtin_sub_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_sub_overflow</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type1</var></defparam> <defparamtype>a</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type2</var></defparam> <defparamtype>b</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type3</var></defparam> <defparamtype>*res</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="81" mergedindex="cp">__builtin_ssub_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_ssub_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam>a</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>b</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>*res</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="82" mergedindex="cp">__builtin_ssubl_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_ssubl_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>a</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>b</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>*res</defparamtype><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="83" mergedindex="cp">__builtin_ssubll_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_ssubll_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>long</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>a</defparam><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>b</defparam><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>*res</defparamtype><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="84" mergedindex="cp">__builtin_usub_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_usub_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>a</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>b</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>*res</defparamtype><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="85" mergedindex="cp">__builtin_usubl_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_usubl_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>a</defparam><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>b</defparam><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>*res</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="86" mergedindex="cp">__builtin_usubll_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_usubll_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>a</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>b</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>*res</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<definitionitem>
<para>These built-in functions are similar to the add overflow checking built-in
functions above, except they perform subtraction, subtract the second argument
from the first one, instead of addition.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="87" mergedindex="cp">__builtin_mul_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_mul_overflow</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type1</var></defparam> <defparamtype>a</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type2</var></defparam> <defparamtype>b</defparamtype><defdelimiter>,</defdelimiter> <defparam><var>type3</var></defparam> <defparamtype>*res</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="88" mergedindex="cp">__builtin_smul_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_smul_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam>a</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>b</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>*res</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="89" mergedindex="cp">__builtin_smull_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_smull_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>a</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>b</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>*res</defparamtype><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="90" mergedindex="cp">__builtin_smulll_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_smulll_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>long</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>a</defparam><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>b</defparam><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>*res</defparamtype><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="91" mergedindex="cp">__builtin_umul_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_umul_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>a</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>b</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>*res</defparamtype><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="92" mergedindex="cp">__builtin_umull_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_umull_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>a</defparam><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>b</defparam><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>*res</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<deftypefnx spaces=" "><definitionterm><indexterm index="fn" number="93" mergedindex="cp">__builtin_umulll_overflow</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>bool</deftype> <deffunction>__builtin_umulll_overflow</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>a</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>long</defparamtype> <defparam>int</defparam> <defparamtype>b</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>int</defparamtype> <defparam>*res</defparam><defdelimiter>)</defdelimiter></definitionterm></deftypefnx>
<definitionitem>
<para>These built-in functions are similar to the add overflow checking built-in
functions above, except they perform multiplication, instead of addition.
</para>
</definitionitem></deftypefn>

</section>
<node name="x86-specific-memory-model-extensions-for-transactional-memory" spaces=" "><nodename>x86 specific memory model extensions for transactional memory</nodename><nodenext automatic="on">Object Size Checking</nodenext><nodeprev automatic="on">Integer Overflow Builtins</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>x86-Specific Memory Model Extensions for Transactional Memory</sectiontitle>

<para>The x86 architecture supports additional memory ordering flags
to mark lock critical sections for hardware lock elision. 
These must be specified in addition to an existing memory model to 
atomic intrinsics.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">__ATOMIC_HLE_ACQUIRE</itemformat></item>
</tableterm><tableitem><para>Start lock elision on a lock variable.
Memory model must be <code>__ATOMIC_ACQUIRE</code> or stronger.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__ATOMIC_HLE_RELEASE</itemformat></item>
</tableterm><tableitem><para>End lock elision on a lock variable.
Memory model must be <code>__ATOMIC_RELEASE</code> or stronger.
</para></tableitem></tableentry></table>

<para>When a lock acquire fails it is required for good performance to abort
the transaction quickly. This can be done with a <code>_mm_pause</code>
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#include &lt;immintrin.h&gt; // For _mm_pause

int lockvar;

/* Acquire lock with lock elision */
while (__atomic_exchange_n(&amp;lockvar, 1, __ATOMIC_ACQUIRE|__ATOMIC_HLE_ACQUIRE))
    _mm_pause(); /* Abort failed transaction */
...
/* Free lock with lock elision */
__atomic_store_n(&amp;lockvar, 0, __ATOMIC_RELEASE|__ATOMIC_HLE_RELEASE);
</pre></smallexample>

</section>
<node name="Object-Size-Checking" spaces=" "><nodename>Object Size Checking</nodename><nodenext automatic="on">Pointer Bounds Checker builtins</nodenext><nodeprev automatic="on">x86 specific memory model extensions for transactional memory</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Object Size Checking Built-in Functions</sectiontitle>
<findex index="fn" spaces=" "><indexterm index="fn" number="94" mergedindex="cp">__builtin_object_size</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="95" mergedindex="cp">__builtin___memcpy_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="96" mergedindex="cp">__builtin___mempcpy_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="97" mergedindex="cp">__builtin___memmove_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="98" mergedindex="cp">__builtin___memset_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="99" mergedindex="cp">__builtin___strcpy_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="100" mergedindex="cp">__builtin___stpcpy_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="101" mergedindex="cp">__builtin___strncpy_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="102" mergedindex="cp">__builtin___strcat_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="103" mergedindex="cp">__builtin___strncat_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="104" mergedindex="cp">__builtin___sprintf_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="105" mergedindex="cp">__builtin___snprintf_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="106" mergedindex="cp">__builtin___vsprintf_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="107" mergedindex="cp">__builtin___vsnprintf_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="108" mergedindex="cp">__builtin___printf_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="109" mergedindex="cp">__builtin___vprintf_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="110" mergedindex="cp">__builtin___fprintf_chk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="111" mergedindex="cp">__builtin___vfprintf_chk</indexterm></findex>

<para>GCC implements a limited buffer overflow protection mechanism
that can prevent some buffer overflow attacks.
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="112" mergedindex="cp">__builtin_object_size</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">size_t</deftype> <deffunction>__builtin_object_size</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype> <defparam>*</defparam> <defparam><var>ptr</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam><var>type</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>is a built-in construct that returns a constant number of bytes from
<var>ptr</var> to the end of the object <var>ptr</var> pointer points to
(if known at compile time).  <code>__builtin_object_size</code> never evaluates
its arguments for side-effects.  If there are any side-effects in them, it
returns <code>(size_t) -1</code> for <var>type</var> 0 or 1 and <code>(size_t) 0</code>
for <var>type</var> 2 or 3.  If there are multiple objects <var>ptr</var> can
point to and all of them are known at compile time, the returned number
is the maximum of remaining byte counts in those objects if <var>type</var> &amp; 2 is
0 and minimum if nonzero.  If it is not possible to determine which objects
<var>ptr</var> points to at compile time, <code>__builtin_object_size</code> should
return <code>(size_t) -1</code> for <var>type</var> 0 or 1 and <code>(size_t) 0</code>
for <var>type</var> 2 or 3.
</para>
<para><var>type</var> is an integer constant from 0 to 3.  If the least significant
bit is clear, objects are whole variables, if it is set, a closest
surrounding subobject is considered the object a pointer points to.
The second bit determines if maximum or minimum of remaining bytes
is computed.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct V &lbrace; char buf1[10]; int b; char buf2[10]; &rbrace; var;
char *p = &amp;var.buf1[1], *q = &amp;var.b;

/* Here the object p points to is var.  */
assert (__builtin_object_size (p, 0) == sizeof (var) - 1);
/* The subobject p points to is var.buf1.  */
assert (__builtin_object_size (p, 1) == sizeof (var.buf1) - 1);
/* The object q points to is var.  */
assert (__builtin_object_size (q, 0)
        == (char *) (&amp;var + 1) - (char *) &amp;var.b);
/* The subobject q points to is var.b.  */
assert (__builtin_object_size (q, 1) == sizeof (var.b));
</pre></smallexample>
</definitionitem></deftypefn>

<para>There are built-in functions added for many common string operation
functions, e.g., for <code>memcpy</code> <code>__builtin___memcpy_chk</code>
built-in is provided.  This built-in has an additional last argument,
which is the number of bytes remaining in object the <var>dest</var>
argument points to or <code>(size_t) -1</code> if the size is not known.
</para>
<para>The built-in functions are optimized into the normal string functions
like <code>memcpy</code> if the last argument is <code>(size_t) -1</code> or if
it is known at compile time that the destination object will not
be overflown.  If the compiler can determine at compile time the
object will be always overflown, it issues a warning.
</para>
<para>The intended use can be e.g.&noeos;
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#undef memcpy
#define bos0(dest) __builtin_object_size (dest, 0)
#define memcpy(dest, src, n) \
  __builtin___memcpy_chk (dest, src, n, bos0 (dest))

char *volatile p;
char buf[10];
/* It is unknown what object p points to, so this is optimized
   into plain memcpy - no checking is possible.  */
memcpy (p, &quot;abcde&quot;, n);
/* Destination is known and length too.  It is known at compile
   time there will be no overflow.  */
memcpy (&amp;buf[5], &quot;abcde&quot;, 5);
/* Destination is known, but the length is not known at compile time.
   This will result in __memcpy_chk call that can check for overflow
   at run time.  */
memcpy (&amp;buf[5], &quot;abcde&quot;, n);
/* Destination is known and it is known at compile time there will
   be overflow.  There will be a warning and __memcpy_chk call that
   will abort the program at run time.  */
memcpy (&amp;buf[6], &quot;abcde&quot;, 5);
</pre></smallexample>

<para>Such built-in functions are provided for <code>memcpy</code>, <code>mempcpy</code>,
<code>memmove</code>, <code>memset</code>, <code>strcpy</code>, <code>stpcpy</code>, <code>strncpy</code>,
<code>strcat</code> and <code>strncat</code>.
</para>
<para>There are also checking built-in functions for formatted output functions.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">int __builtin___sprintf_chk (char *s, int flag, size_t os, const char *fmt, ...);
int __builtin___snprintf_chk (char *s, size_t maxlen, int flag, size_t os,
                              const char *fmt, ...);
int __builtin___vsprintf_chk (char *s, int flag, size_t os, const char *fmt,
                              va_list ap);
int __builtin___vsnprintf_chk (char *s, size_t maxlen, int flag, size_t os,
                               const char *fmt, va_list ap);
</pre></smallexample>

<para>The added <var>flag</var> argument is passed unchanged to <code>__sprintf_chk</code>
etc.&noeos; functions and can contain implementation specific flags on what
additional security measures the checking function might take, such as
handling <code>%n</code> differently.
</para>
<para>The <var>os</var> argument is the object size <var>s</var> points to, like in the
other built-in functions.  There is a small difference in the behavior
though, if <var>os</var> is <code>(size_t) -1</code>, the built-in functions are
optimized into the non-checking functions only if <var>flag</var> is 0, otherwise
the checking function is called with <var>os</var> argument set to
<code>(size_t) -1</code>.
</para>
<para>In addition to this, there are checking built-in functions
<code>__builtin___printf_chk</code>, <code>__builtin___vprintf_chk</code>,
<code>__builtin___fprintf_chk</code> and <code>__builtin___vfprintf_chk</code>.
These have just one additional argument, <var>flag</var>, right before
format string <var>fmt</var>.  If the compiler is able to optimize them to
<code>fputc</code> etc.&noeos; functions, it does, otherwise the checking function
is called and the <var>flag</var> argument passed to it.
</para>
</section>
<node name="Pointer-Bounds-Checker-builtins" spaces=" "><nodename>Pointer Bounds Checker builtins</nodename><nodenext automatic="on">Cilk Plus Builtins</nodenext><nodeprev automatic="on">Object Size Checking</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Pointer Bounds Checker Built-in Functions</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="866">Pointer Bounds Checker builtins</indexterm></cindex>
<findex index="fn" spaces=" "><indexterm index="fn" number="113" mergedindex="cp">__builtin___bnd_set_ptr_bounds</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="114" mergedindex="cp">__builtin___bnd_narrow_ptr_bounds</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="115" mergedindex="cp">__builtin___bnd_copy_ptr_bounds</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="116" mergedindex="cp">__builtin___bnd_init_ptr_bounds</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="117" mergedindex="cp">__builtin___bnd_null_ptr_bounds</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="118" mergedindex="cp">__builtin___bnd_store_ptr_bounds</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="119" mergedindex="cp">__builtin___bnd_chk_ptr_lbounds</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="120" mergedindex="cp">__builtin___bnd_chk_ptr_ubounds</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="121" mergedindex="cp">__builtin___bnd_chk_ptr_bounds</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="122" mergedindex="cp">__builtin___bnd_get_ptr_lbound</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="123" mergedindex="cp">__builtin___bnd_get_ptr_ubound</indexterm></findex>

<para>GCC provides a set of built-in functions to control Pointer Bounds Checker
instrumentation.  Note that all Pointer Bounds Checker builtins can be used
even if you compile with Pointer Bounds Checker off
(<option>-fno-check-pointer-bounds</option>).
The behavior may differ in such case as documented below.
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="124" mergedindex="cp">__builtin___bnd_set_ptr_bounds</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void *</deftype> <deffunction>__builtin___bnd_set_ptr_bounds</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>q</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>size_t</defparamtype> <defparam><var>size</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function returns a new pointer with the value of <var>q</var>, and
associate it with the bounds [<var>q</var>, <var>q</var>+<var>size</var>-1].  With Pointer
Bounds Checker off, the built-in function just returns the first argument.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern void *__wrap_malloc (size_t n)
&lbrace;
  void *p = (void *)__real_malloc (n);
  if (!p) return __builtin___bnd_null_ptr_bounds (p);
  return __builtin___bnd_set_ptr_bounds (p, n);
&rbrace;
</pre></smallexample>

</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="125" mergedindex="cp">__builtin___bnd_narrow_ptr_bounds</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void *</deftype> <deffunction>__builtin___bnd_narrow_ptr_bounds</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>p</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>q</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>size_t</defparamtype>  <defparam><var>size</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function returns a new pointer with the value of <var>p</var>
and associates it with the narrowed bounds formed by the intersection
of bounds associated with <var>q</var> and the bounds
[<var>p</var>, <var>p</var> + <var>size</var> - 1].
With Pointer Bounds Checker off, the built-in function just returns the first
argument.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void init_objects (object *objs, size_t size)
&lbrace;
  size_t i;
  /* Initialize objects one-by-one passing pointers with bounds of 
     an object, not the full array of objects.  */
  for (i = 0; i &lt; size; i++)
    init_object (__builtin___bnd_narrow_ptr_bounds (objs + i, objs,
                                                    sizeof(object)));
&rbrace;
</pre></smallexample>

</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="126" mergedindex="cp">__builtin___bnd_copy_ptr_bounds</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void *</deftype> <deffunction>__builtin___bnd_copy_ptr_bounds</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>q</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>r</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function returns a new pointer with the value of <var>q</var>,
and associates it with the bounds already associated with pointer <var>r</var>.
With Pointer Bounds Checker off, the built-in function just returns the first
argument.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">/* Here is a way to get pointer to object's field but
   still with the full object's bounds.  */
int *field_ptr = __builtin___bnd_copy_ptr_bounds (&amp;objptr-&gt;int_field, 
                                                  objptr);
</pre></smallexample>

</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="127" mergedindex="cp">__builtin___bnd_init_ptr_bounds</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void *</deftype> <deffunction>__builtin___bnd_init_ptr_bounds</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>q</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function returns a new pointer with the value of <var>q</var>, and
associates it with INIT (allowing full memory access) bounds. With Pointer
Bounds Checker off, the built-in function just returns the first argument.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="128" mergedindex="cp">__builtin___bnd_null_ptr_bounds</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void *</deftype> <deffunction>__builtin___bnd_null_ptr_bounds</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>q</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function returns a new pointer with the value of <var>q</var>, and
associates it with NULL (allowing no memory access) bounds. With Pointer
Bounds Checker off, the built-in function just returns the first argument.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="129" mergedindex="cp">__builtin___bnd_store_ptr_bounds</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin___bnd_store_ptr_bounds</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>**</defparamtype><defparam><var>ptr_addr</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>ptr_val</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function stores the bounds associated with pointer <var>ptr_val</var>
and location <var>ptr_addr</var> into Bounds Table.  This can be useful to propagate
bounds from legacy code without touching the associated pointer&textrsquo;s memory when
pointers are copied as integers.  With Pointer Bounds Checker off, the built-in
function call is ignored.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="130" mergedindex="cp">__builtin___bnd_chk_ptr_lbounds</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin___bnd_chk_ptr_lbounds</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>q</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function checks if the pointer <var>q</var> is within the lower
bound of its associated bounds.  With Pointer Bounds Checker off, the built-in
function call is ignored.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern void *__wrap_memset (void *dst, int c, size_t len)
&lbrace;
  if (len &gt; 0)
    &lbrace;
      __builtin___bnd_chk_ptr_lbounds (dst);
      __builtin___bnd_chk_ptr_ubounds ((char *)dst + len - 1);
      __real_memset (dst, c, len);
    &rbrace;
  return dst;
&rbrace;
</pre></smallexample>

</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="131" mergedindex="cp">__builtin___bnd_chk_ptr_ubounds</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin___bnd_chk_ptr_ubounds</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>q</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function checks if the pointer <var>q</var> is within the upper
bound of its associated bounds.  With Pointer Bounds Checker off, the built-in
function call is ignored.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="132" mergedindex="cp">__builtin___bnd_chk_ptr_bounds</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin___bnd_chk_ptr_bounds</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>q</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>size_t</defparamtype> <defparam><var>size</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function checks if [<var>q</var>, <var>q</var> + <var>size</var> - 1] is within
the lower and upper bounds associated with <var>q</var>.  With Pointer Bounds Checker
off, the built-in function call is ignored.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern void *__wrap_memcpy (void *dst, const void *src, size_t n)
&lbrace;
  if (n &gt; 0)
    &lbrace;
      __bnd_chk_ptr_bounds (dst, n);
      __bnd_chk_ptr_bounds (src, n);
      __real_memcpy (dst, src, n);
    &rbrace;
  return dst;
&rbrace;
</pre></smallexample>

</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="133" mergedindex="cp">__builtin___bnd_get_ptr_lbound</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">const void *</deftype> <deffunction>__builtin___bnd_get_ptr_lbound</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>q</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function returns the lower bound associated
with the pointer <var>q</var>, as a pointer value.  
This is useful for debugging using <code>printf</code>.
With Pointer Bounds Checker off, the built-in function returns 0.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void *lb = __builtin___bnd_get_ptr_lbound (q);
void *ub = __builtin___bnd_get_ptr_ubound (q);
printf (&quot;q = %p  lb(q) = %p  ub(q) = %p&quot;, q, lb, ub);
</pre></smallexample>

</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="134" mergedindex="cp">__builtin___bnd_get_ptr_ubound</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">const void *</deftype> <deffunction>__builtin___bnd_get_ptr_ubound</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>q</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>This built-in function returns the upper bound (which is a pointer) associated
with the pointer <var>q</var>.  With Pointer Bounds Checker off,
the built-in function returns -1.
</para>
</definitionitem></deftypefn>

</section>
<node name="Cilk-Plus-Builtins" spaces=" "><nodename>Cilk Plus Builtins</nodename><nodenext automatic="on">Other Builtins</nodenext><nodeprev automatic="on">Pointer Bounds Checker builtins</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Cilk Plus C/C++ Language Extension Built-in Functions</sectiontitle>

<para>GCC provides support for the following built-in reduction functions if Cilk Plus
is enabled. Cilk Plus can be enabled using the <option>-fcilkplus</option> flag.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_implicit_index</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_reduce</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_reduce_add</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_reduce_all_nonzero</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_reduce_all_zero</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_reduce_any_nonzero</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_reduce_any_zero</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_reduce_max</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_reduce_min</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_reduce_max_ind</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_reduce_min_ind</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_reduce_mul</code>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>__sec_reduce_mutating</code>
</para></listitem></itemize>

<para>Further details and examples about these built-in functions are described 
in the Cilk Plus language manual which can be found at 
<uref><urefurl>http://www.cilkplus.org</urefurl></uref>.
</para>
</section>
<node name="Other-Builtins" spaces=" "><nodename>Other Builtins</nodename><nodenext automatic="on">Target Builtins</nodenext><nodeprev automatic="on">Cilk Plus Builtins</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Other Built-in Functions Provided by GCC</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="867">built-in functions</indexterm></cindex>
<findex index="fn" spaces=" "><indexterm index="fn" number="135" mergedindex="cp">__builtin_call_with_static_chain</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="136" mergedindex="cp">__builtin_fpclassify</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="137" mergedindex="cp">__builtin_isfinite</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="138" mergedindex="cp">__builtin_isnormal</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="139" mergedindex="cp">__builtin_isgreater</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="140" mergedindex="cp">__builtin_isgreaterequal</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="141" mergedindex="cp">__builtin_isinf_sign</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="142" mergedindex="cp">__builtin_isless</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="143" mergedindex="cp">__builtin_islessequal</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="144" mergedindex="cp">__builtin_islessgreater</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="145" mergedindex="cp">__builtin_isunordered</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="146" mergedindex="cp">__builtin_powi</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="147" mergedindex="cp">__builtin_powif</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="148" mergedindex="cp">__builtin_powil</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="149" mergedindex="cp">_Exit</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="150" mergedindex="cp">_exit</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="151" mergedindex="cp">abort</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="152" mergedindex="cp">abs</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="153" mergedindex="cp">acos</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="154" mergedindex="cp">acosf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="155" mergedindex="cp">acosh</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="156" mergedindex="cp">acoshf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="157" mergedindex="cp">acoshl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="158" mergedindex="cp">acosl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="159" mergedindex="cp">alloca</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="160" mergedindex="cp">asin</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="161" mergedindex="cp">asinf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="162" mergedindex="cp">asinh</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="163" mergedindex="cp">asinhf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="164" mergedindex="cp">asinhl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="165" mergedindex="cp">asinl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="166" mergedindex="cp">atan</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="167" mergedindex="cp">atan2</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="168" mergedindex="cp">atan2f</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="169" mergedindex="cp">atan2l</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="170" mergedindex="cp">atanf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="171" mergedindex="cp">atanh</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="172" mergedindex="cp">atanhf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="173" mergedindex="cp">atanhl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="174" mergedindex="cp">atanl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="175" mergedindex="cp">bcmp</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="176" mergedindex="cp">bzero</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="177" mergedindex="cp">cabs</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="178" mergedindex="cp">cabsf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="179" mergedindex="cp">cabsl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="180" mergedindex="cp">cacos</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="181" mergedindex="cp">cacosf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="182" mergedindex="cp">cacosh</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="183" mergedindex="cp">cacoshf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="184" mergedindex="cp">cacoshl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="185" mergedindex="cp">cacosl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="186" mergedindex="cp">calloc</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="187" mergedindex="cp">carg</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="188" mergedindex="cp">cargf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="189" mergedindex="cp">cargl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="190" mergedindex="cp">casin</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="191" mergedindex="cp">casinf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="192" mergedindex="cp">casinh</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="193" mergedindex="cp">casinhf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="194" mergedindex="cp">casinhl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="195" mergedindex="cp">casinl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="196" mergedindex="cp">catan</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="197" mergedindex="cp">catanf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="198" mergedindex="cp">catanh</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="199" mergedindex="cp">catanhf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="200" mergedindex="cp">catanhl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="201" mergedindex="cp">catanl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="202" mergedindex="cp">cbrt</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="203" mergedindex="cp">cbrtf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="204" mergedindex="cp">cbrtl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="205" mergedindex="cp">ccos</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="206" mergedindex="cp">ccosf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="207" mergedindex="cp">ccosh</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="208" mergedindex="cp">ccoshf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="209" mergedindex="cp">ccoshl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="210" mergedindex="cp">ccosl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="211" mergedindex="cp">ceil</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="212" mergedindex="cp">ceilf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="213" mergedindex="cp">ceill</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="214" mergedindex="cp">cexp</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="215" mergedindex="cp">cexpf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="216" mergedindex="cp">cexpl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="217" mergedindex="cp">cimag</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="218" mergedindex="cp">cimagf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="219" mergedindex="cp">cimagl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="220" mergedindex="cp">clog</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="221" mergedindex="cp">clogf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="222" mergedindex="cp">clogl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="223" mergedindex="cp">conj</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="224" mergedindex="cp">conjf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="225" mergedindex="cp">conjl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="226" mergedindex="cp">copysign</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="227" mergedindex="cp">copysignf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="228" mergedindex="cp">copysignl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="229" mergedindex="cp">cos</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="230" mergedindex="cp">cosf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="231" mergedindex="cp">cosh</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="232" mergedindex="cp">coshf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="233" mergedindex="cp">coshl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="234" mergedindex="cp">cosl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="235" mergedindex="cp">cpow</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="236" mergedindex="cp">cpowf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="237" mergedindex="cp">cpowl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="238" mergedindex="cp">cproj</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="239" mergedindex="cp">cprojf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="240" mergedindex="cp">cprojl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="241" mergedindex="cp">creal</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="242" mergedindex="cp">crealf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="243" mergedindex="cp">creall</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="244" mergedindex="cp">csin</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="245" mergedindex="cp">csinf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="246" mergedindex="cp">csinh</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="247" mergedindex="cp">csinhf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="248" mergedindex="cp">csinhl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="249" mergedindex="cp">csinl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="250" mergedindex="cp">csqrt</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="251" mergedindex="cp">csqrtf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="252" mergedindex="cp">csqrtl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="253" mergedindex="cp">ctan</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="254" mergedindex="cp">ctanf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="255" mergedindex="cp">ctanh</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="256" mergedindex="cp">ctanhf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="257" mergedindex="cp">ctanhl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="258" mergedindex="cp">ctanl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="259" mergedindex="cp">dcgettext</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="260" mergedindex="cp">dgettext</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="261" mergedindex="cp">drem</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="262" mergedindex="cp">dremf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="263" mergedindex="cp">dreml</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="264" mergedindex="cp">erf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="265" mergedindex="cp">erfc</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="266" mergedindex="cp">erfcf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="267" mergedindex="cp">erfcl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="268" mergedindex="cp">erff</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="269" mergedindex="cp">erfl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="270" mergedindex="cp">exit</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="271" mergedindex="cp">exp</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="272" mergedindex="cp">exp10</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="273" mergedindex="cp">exp10f</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="274" mergedindex="cp">exp10l</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="275" mergedindex="cp">exp2</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="276" mergedindex="cp">exp2f</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="277" mergedindex="cp">exp2l</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="278" mergedindex="cp">expf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="279" mergedindex="cp">expl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="280" mergedindex="cp">expm1</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="281" mergedindex="cp">expm1f</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="282" mergedindex="cp">expm1l</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="283" mergedindex="cp">fabs</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="284" mergedindex="cp">fabsf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="285" mergedindex="cp">fabsl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="286" mergedindex="cp">fdim</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="287" mergedindex="cp">fdimf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="288" mergedindex="cp">fdiml</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="289" mergedindex="cp">ffs</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="290" mergedindex="cp">floor</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="291" mergedindex="cp">floorf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="292" mergedindex="cp">floorl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="293" mergedindex="cp">fma</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="294" mergedindex="cp">fmaf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="295" mergedindex="cp">fmal</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="296" mergedindex="cp">fmax</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="297" mergedindex="cp">fmaxf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="298" mergedindex="cp">fmaxl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="299" mergedindex="cp">fmin</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="300" mergedindex="cp">fminf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="301" mergedindex="cp">fminl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="302" mergedindex="cp">fmod</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="303" mergedindex="cp">fmodf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="304" mergedindex="cp">fmodl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="305" mergedindex="cp">fprintf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="306" mergedindex="cp">fprintf_unlocked</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="307" mergedindex="cp">fputs</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="308" mergedindex="cp">fputs_unlocked</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="309" mergedindex="cp">frexp</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="310" mergedindex="cp">frexpf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="311" mergedindex="cp">frexpl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="312" mergedindex="cp">fscanf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="313" mergedindex="cp">gamma</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="314" mergedindex="cp">gammaf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="315" mergedindex="cp">gammal</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="316" mergedindex="cp">gamma_r</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="317" mergedindex="cp">gammaf_r</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="318" mergedindex="cp">gammal_r</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="319" mergedindex="cp">gettext</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="320" mergedindex="cp">hypot</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="321" mergedindex="cp">hypotf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="322" mergedindex="cp">hypotl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="323" mergedindex="cp">ilogb</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="324" mergedindex="cp">ilogbf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="325" mergedindex="cp">ilogbl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="326" mergedindex="cp">imaxabs</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="327" mergedindex="cp">index</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="328" mergedindex="cp">isalnum</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="329" mergedindex="cp">isalpha</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="330" mergedindex="cp">isascii</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="331" mergedindex="cp">isblank</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="332" mergedindex="cp">iscntrl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="333" mergedindex="cp">isdigit</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="334" mergedindex="cp">isgraph</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="335" mergedindex="cp">islower</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="336" mergedindex="cp">isprint</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="337" mergedindex="cp">ispunct</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="338" mergedindex="cp">isspace</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="339" mergedindex="cp">isupper</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="340" mergedindex="cp">iswalnum</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="341" mergedindex="cp">iswalpha</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="342" mergedindex="cp">iswblank</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="343" mergedindex="cp">iswcntrl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="344" mergedindex="cp">iswdigit</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="345" mergedindex="cp">iswgraph</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="346" mergedindex="cp">iswlower</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="347" mergedindex="cp">iswprint</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="348" mergedindex="cp">iswpunct</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="349" mergedindex="cp">iswspace</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="350" mergedindex="cp">iswupper</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="351" mergedindex="cp">iswxdigit</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="352" mergedindex="cp">isxdigit</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="353" mergedindex="cp">j0</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="354" mergedindex="cp">j0f</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="355" mergedindex="cp">j0l</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="356" mergedindex="cp">j1</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="357" mergedindex="cp">j1f</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="358" mergedindex="cp">j1l</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="359" mergedindex="cp">jn</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="360" mergedindex="cp">jnf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="361" mergedindex="cp">jnl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="362" mergedindex="cp">labs</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="363" mergedindex="cp">ldexp</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="364" mergedindex="cp">ldexpf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="365" mergedindex="cp">ldexpl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="366" mergedindex="cp">lgamma</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="367" mergedindex="cp">lgammaf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="368" mergedindex="cp">lgammal</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="369" mergedindex="cp">lgamma_r</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="370" mergedindex="cp">lgammaf_r</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="371" mergedindex="cp">lgammal_r</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="372" mergedindex="cp">llabs</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="373" mergedindex="cp">llrint</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="374" mergedindex="cp">llrintf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="375" mergedindex="cp">llrintl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="376" mergedindex="cp">llround</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="377" mergedindex="cp">llroundf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="378" mergedindex="cp">llroundl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="379" mergedindex="cp">log</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="380" mergedindex="cp">log10</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="381" mergedindex="cp">log10f</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="382" mergedindex="cp">log10l</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="383" mergedindex="cp">log1p</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="384" mergedindex="cp">log1pf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="385" mergedindex="cp">log1pl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="386" mergedindex="cp">log2</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="387" mergedindex="cp">log2f</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="388" mergedindex="cp">log2l</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="389" mergedindex="cp">logb</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="390" mergedindex="cp">logbf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="391" mergedindex="cp">logbl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="392" mergedindex="cp">logf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="393" mergedindex="cp">logl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="394" mergedindex="cp">lrint</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="395" mergedindex="cp">lrintf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="396" mergedindex="cp">lrintl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="397" mergedindex="cp">lround</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="398" mergedindex="cp">lroundf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="399" mergedindex="cp">lroundl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="400" mergedindex="cp">malloc</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="401" mergedindex="cp">memchr</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="402" mergedindex="cp">memcmp</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="403" mergedindex="cp">memcpy</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="404" mergedindex="cp">mempcpy</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="405" mergedindex="cp">memset</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="406" mergedindex="cp">modf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="407" mergedindex="cp">modff</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="408" mergedindex="cp">modfl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="409" mergedindex="cp">nearbyint</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="410" mergedindex="cp">nearbyintf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="411" mergedindex="cp">nearbyintl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="412" mergedindex="cp">nextafter</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="413" mergedindex="cp">nextafterf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="414" mergedindex="cp">nextafterl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="415" mergedindex="cp">nexttoward</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="416" mergedindex="cp">nexttowardf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="417" mergedindex="cp">nexttowardl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="418" mergedindex="cp">pow</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="419" mergedindex="cp">pow10</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="420" mergedindex="cp">pow10f</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="421" mergedindex="cp">pow10l</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="422" mergedindex="cp">powf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="423" mergedindex="cp">powl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="424" mergedindex="cp">printf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="425" mergedindex="cp">printf_unlocked</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="426" mergedindex="cp">putchar</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="427" mergedindex="cp">puts</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="428" mergedindex="cp">remainder</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="429" mergedindex="cp">remainderf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="430" mergedindex="cp">remainderl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="431" mergedindex="cp">remquo</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="432" mergedindex="cp">remquof</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="433" mergedindex="cp">remquol</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="434" mergedindex="cp">rindex</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="435" mergedindex="cp">rint</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="436" mergedindex="cp">rintf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="437" mergedindex="cp">rintl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="438" mergedindex="cp">round</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="439" mergedindex="cp">roundf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="440" mergedindex="cp">roundl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="441" mergedindex="cp">scalb</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="442" mergedindex="cp">scalbf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="443" mergedindex="cp">scalbl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="444" mergedindex="cp">scalbln</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="445" mergedindex="cp">scalblnf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="446" mergedindex="cp">scalblnf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="447" mergedindex="cp">scalbn</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="448" mergedindex="cp">scalbnf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="449" mergedindex="cp">scanfnl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="450" mergedindex="cp">signbit</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="451" mergedindex="cp">signbitf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="452" mergedindex="cp">signbitl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="453" mergedindex="cp">signbitd32</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="454" mergedindex="cp">signbitd64</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="455" mergedindex="cp">signbitd128</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="456" mergedindex="cp">significand</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="457" mergedindex="cp">significandf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="458" mergedindex="cp">significandl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="459" mergedindex="cp">sin</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="460" mergedindex="cp">sincos</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="461" mergedindex="cp">sincosf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="462" mergedindex="cp">sincosl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="463" mergedindex="cp">sinf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="464" mergedindex="cp">sinh</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="465" mergedindex="cp">sinhf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="466" mergedindex="cp">sinhl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="467" mergedindex="cp">sinl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="468" mergedindex="cp">snprintf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="469" mergedindex="cp">sprintf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="470" mergedindex="cp">sqrt</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="471" mergedindex="cp">sqrtf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="472" mergedindex="cp">sqrtl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="473" mergedindex="cp">sscanf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="474" mergedindex="cp">stpcpy</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="475" mergedindex="cp">stpncpy</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="476" mergedindex="cp">strcasecmp</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="477" mergedindex="cp">strcat</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="478" mergedindex="cp">strchr</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="479" mergedindex="cp">strcmp</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="480" mergedindex="cp">strcpy</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="481" mergedindex="cp">strcspn</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="482" mergedindex="cp">strdup</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="483" mergedindex="cp">strfmon</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="484" mergedindex="cp">strftime</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="485" mergedindex="cp">strlen</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="486" mergedindex="cp">strncasecmp</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="487" mergedindex="cp">strncat</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="488" mergedindex="cp">strncmp</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="489" mergedindex="cp">strncpy</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="490" mergedindex="cp">strndup</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="491" mergedindex="cp">strpbrk</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="492" mergedindex="cp">strrchr</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="493" mergedindex="cp">strspn</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="494" mergedindex="cp">strstr</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="495" mergedindex="cp">tan</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="496" mergedindex="cp">tanf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="497" mergedindex="cp">tanh</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="498" mergedindex="cp">tanhf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="499" mergedindex="cp">tanhl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="500" mergedindex="cp">tanl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="501" mergedindex="cp">tgamma</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="502" mergedindex="cp">tgammaf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="503" mergedindex="cp">tgammal</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="504" mergedindex="cp">toascii</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="505" mergedindex="cp">tolower</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="506" mergedindex="cp">toupper</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="507" mergedindex="cp">towlower</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="508" mergedindex="cp">towupper</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="509" mergedindex="cp">trunc</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="510" mergedindex="cp">truncf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="511" mergedindex="cp">truncl</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="512" mergedindex="cp">vfprintf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="513" mergedindex="cp">vfscanf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="514" mergedindex="cp">vprintf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="515" mergedindex="cp">vscanf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="516" mergedindex="cp">vsnprintf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="517" mergedindex="cp">vsprintf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="518" mergedindex="cp">vsscanf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="519" mergedindex="cp">y0</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="520" mergedindex="cp">y0f</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="521" mergedindex="cp">y0l</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="522" mergedindex="cp">y1</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="523" mergedindex="cp">y1f</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="524" mergedindex="cp">y1l</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="525" mergedindex="cp">yn</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="526" mergedindex="cp">ynf</indexterm></findex>
<findex index="fn" spaces=" "><indexterm index="fn" number="527" mergedindex="cp">ynl</indexterm></findex>

<para>GCC provides a large number of built-in functions other than the ones
mentioned above.  Some of these are for internal use in the processing
of exceptions or variable-length argument lists and are not
documented here because they may change from time to time; we do not
recommend general use of these functions.
</para>
<para>The remaining functions are provided for optimization purposes.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2625" incode="1">fno-builtin</indexterm></indexcommand>
<para>GCC includes built-in versions of many of the functions in the standard
C library.  The versions prefixed with <code>__builtin_</code> are always
treated as having the same meaning as the C library function even if you
specify the <option>-fno-builtin</option> option.  (<pxref label="C-Dialect-Options"><xrefnodename>C Dialect Options</xrefnodename></pxref>)
Many of these functions are only optimized in certain cases; if they are
not optimized in a particular case, a call to the library function is
emitted.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2626" incode="1">ansi</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2627" incode="1">std</indexterm></indexcommand>
<para>Outside strict ISO C mode (<option>-ansi</option>, <option>-std=c90</option>,
<option>-std=c99</option> or <option>-std=c11</option>), the functions
<code>_exit</code>, <code>alloca</code>, <code>bcmp</code>, <code>bzero</code>,
<code>dcgettext</code>, <code>dgettext</code>, <code>dremf</code>, <code>dreml</code>,
<code>drem</code>, <code>exp10f</code>, <code>exp10l</code>, <code>exp10</code>, <code>ffsll</code>,
<code>ffsl</code>, <code>ffs</code>, <code>fprintf_unlocked</code>,
<code>fputs_unlocked</code>, <code>gammaf</code>, <code>gammal</code>, <code>gamma</code>,
<code>gammaf_r</code>, <code>gammal_r</code>, <code>gamma_r</code>, <code>gettext</code>,
<code>index</code>, <code>isascii</code>, <code>j0f</code>, <code>j0l</code>, <code>j0</code>,
<code>j1f</code>, <code>j1l</code>, <code>j1</code>, <code>jnf</code>, <code>jnl</code>, <code>jn</code>,
<code>lgammaf_r</code>, <code>lgammal_r</code>, <code>lgamma_r</code>, <code>mempcpy</code>,
<code>pow10f</code>, <code>pow10l</code>, <code>pow10</code>, <code>printf_unlocked</code>,
<code>rindex</code>, <code>scalbf</code>, <code>scalbl</code>, <code>scalb</code>,
<code>signbit</code>, <code>signbitf</code>, <code>signbitl</code>, <code>signbitd32</code>,
<code>signbitd64</code>, <code>signbitd128</code>, <code>significandf</code>,
<code>significandl</code>, <code>significand</code>, <code>sincosf</code>,
<code>sincosl</code>, <code>sincos</code>, <code>stpcpy</code>, <code>stpncpy</code>,
<code>strcasecmp</code>, <code>strdup</code>, <code>strfmon</code>, <code>strncasecmp</code>,
<code>strndup</code>, <code>toascii</code>, <code>y0f</code>, <code>y0l</code>, <code>y0</code>,
<code>y1f</code>, <code>y1l</code>, <code>y1</code>, <code>ynf</code>, <code>ynl</code> and
<code>yn</code>
may be handled as built-in functions.
All these functions have corresponding versions
prefixed with <code>__builtin_</code>, which may be used even in strict C90
mode.
</para>
<para>The ISO C99 functions
<code>_Exit</code>, <code>acoshf</code>, <code>acoshl</code>, <code>acosh</code>, <code>asinhf</code>,
<code>asinhl</code>, <code>asinh</code>, <code>atanhf</code>, <code>atanhl</code>, <code>atanh</code>,
<code>cabsf</code>, <code>cabsl</code>, <code>cabs</code>, <code>cacosf</code>, <code>cacoshf</code>,
<code>cacoshl</code>, <code>cacosh</code>, <code>cacosl</code>, <code>cacos</code>,
<code>cargf</code>, <code>cargl</code>, <code>carg</code>, <code>casinf</code>, <code>casinhf</code>,
<code>casinhl</code>, <code>casinh</code>, <code>casinl</code>, <code>casin</code>,
<code>catanf</code>, <code>catanhf</code>, <code>catanhl</code>, <code>catanh</code>,
<code>catanl</code>, <code>catan</code>, <code>cbrtf</code>, <code>cbrtl</code>, <code>cbrt</code>,
<code>ccosf</code>, <code>ccoshf</code>, <code>ccoshl</code>, <code>ccosh</code>, <code>ccosl</code>,
<code>ccos</code>, <code>cexpf</code>, <code>cexpl</code>, <code>cexp</code>, <code>cimagf</code>,
<code>cimagl</code>, <code>cimag</code>, <code>clogf</code>, <code>clogl</code>, <code>clog</code>,
<code>conjf</code>, <code>conjl</code>, <code>conj</code>, <code>copysignf</code>, <code>copysignl</code>,
<code>copysign</code>, <code>cpowf</code>, <code>cpowl</code>, <code>cpow</code>, <code>cprojf</code>,
<code>cprojl</code>, <code>cproj</code>, <code>crealf</code>, <code>creall</code>, <code>creal</code>,
<code>csinf</code>, <code>csinhf</code>, <code>csinhl</code>, <code>csinh</code>, <code>csinl</code>,
<code>csin</code>, <code>csqrtf</code>, <code>csqrtl</code>, <code>csqrt</code>, <code>ctanf</code>,
<code>ctanhf</code>, <code>ctanhl</code>, <code>ctanh</code>, <code>ctanl</code>, <code>ctan</code>,
<code>erfcf</code>, <code>erfcl</code>, <code>erfc</code>, <code>erff</code>, <code>erfl</code>,
<code>erf</code>, <code>exp2f</code>, <code>exp2l</code>, <code>exp2</code>, <code>expm1f</code>,
<code>expm1l</code>, <code>expm1</code>, <code>fdimf</code>, <code>fdiml</code>, <code>fdim</code>,
<code>fmaf</code>, <code>fmal</code>, <code>fmaxf</code>, <code>fmaxl</code>, <code>fmax</code>,
<code>fma</code>, <code>fminf</code>, <code>fminl</code>, <code>fmin</code>, <code>hypotf</code>,
<code>hypotl</code>, <code>hypot</code>, <code>ilogbf</code>, <code>ilogbl</code>, <code>ilogb</code>,
<code>imaxabs</code>, <code>isblank</code>, <code>iswblank</code>, <code>lgammaf</code>,
<code>lgammal</code>, <code>lgamma</code>, <code>llabs</code>, <code>llrintf</code>, <code>llrintl</code>,
<code>llrint</code>, <code>llroundf</code>, <code>llroundl</code>, <code>llround</code>,
<code>log1pf</code>, <code>log1pl</code>, <code>log1p</code>, <code>log2f</code>, <code>log2l</code>,
<code>log2</code>, <code>logbf</code>, <code>logbl</code>, <code>logb</code>, <code>lrintf</code>,
<code>lrintl</code>, <code>lrint</code>, <code>lroundf</code>, <code>lroundl</code>,
<code>lround</code>, <code>nearbyintf</code>, <code>nearbyintl</code>, <code>nearbyint</code>,
<code>nextafterf</code>, <code>nextafterl</code>, <code>nextafter</code>,
<code>nexttowardf</code>, <code>nexttowardl</code>, <code>nexttoward</code>,
<code>remainderf</code>, <code>remainderl</code>, <code>remainder</code>, <code>remquof</code>,
<code>remquol</code>, <code>remquo</code>, <code>rintf</code>, <code>rintl</code>, <code>rint</code>,
<code>roundf</code>, <code>roundl</code>, <code>round</code>, <code>scalblnf</code>,
<code>scalblnl</code>, <code>scalbln</code>, <code>scalbnf</code>, <code>scalbnl</code>,
<code>scalbn</code>, <code>snprintf</code>, <code>tgammaf</code>, <code>tgammal</code>,
<code>tgamma</code>, <code>truncf</code>, <code>truncl</code>, <code>trunc</code>,
<code>vfscanf</code>, <code>vscanf</code>, <code>vsnprintf</code> and <code>vsscanf</code>
are handled as built-in functions
except in strict ISO C90 mode (<option>-ansi</option> or <option>-std=c90</option>).
</para>
<para>There are also built-in versions of the ISO C99 functions
<code>acosf</code>, <code>acosl</code>, <code>asinf</code>, <code>asinl</code>, <code>atan2f</code>,
<code>atan2l</code>, <code>atanf</code>, <code>atanl</code>, <code>ceilf</code>, <code>ceill</code>,
<code>cosf</code>, <code>coshf</code>, <code>coshl</code>, <code>cosl</code>, <code>expf</code>,
<code>expl</code>, <code>fabsf</code>, <code>fabsl</code>, <code>floorf</code>, <code>floorl</code>,
<code>fmodf</code>, <code>fmodl</code>, <code>frexpf</code>, <code>frexpl</code>, <code>ldexpf</code>,
<code>ldexpl</code>, <code>log10f</code>, <code>log10l</code>, <code>logf</code>, <code>logl</code>,
<code>modfl</code>, <code>modf</code>, <code>powf</code>, <code>powl</code>, <code>sinf</code>,
<code>sinhf</code>, <code>sinhl</code>, <code>sinl</code>, <code>sqrtf</code>, <code>sqrtl</code>,
<code>tanf</code>, <code>tanhf</code>, <code>tanhl</code> and <code>tanl</code>
that are recognized in any mode since ISO C90 reserves these names for
the purpose to which ISO C99 puts them.  All these functions have
corresponding versions prefixed with <code>__builtin_</code>.
</para>
<para>The ISO C94 functions
<code>iswalnum</code>, <code>iswalpha</code>, <code>iswcntrl</code>, <code>iswdigit</code>,
<code>iswgraph</code>, <code>iswlower</code>, <code>iswprint</code>, <code>iswpunct</code>,
<code>iswspace</code>, <code>iswupper</code>, <code>iswxdigit</code>, <code>towlower</code> and
<code>towupper</code>
are handled as built-in functions
except in strict ISO C90 mode (<option>-ansi</option> or <option>-std=c90</option>).
</para>
<para>The ISO C90 functions
<code>abort</code>, <code>abs</code>, <code>acos</code>, <code>asin</code>, <code>atan2</code>,
<code>atan</code>, <code>calloc</code>, <code>ceil</code>, <code>cosh</code>, <code>cos</code>,
<code>exit</code>, <code>exp</code>, <code>fabs</code>, <code>floor</code>, <code>fmod</code>,
<code>fprintf</code>, <code>fputs</code>, <code>frexp</code>, <code>fscanf</code>,
<code>isalnum</code>, <code>isalpha</code>, <code>iscntrl</code>, <code>isdigit</code>,
<code>isgraph</code>, <code>islower</code>, <code>isprint</code>, <code>ispunct</code>,
<code>isspace</code>, <code>isupper</code>, <code>isxdigit</code>, <code>tolower</code>,
<code>toupper</code>, <code>labs</code>, <code>ldexp</code>, <code>log10</code>, <code>log</code>,
<code>malloc</code>, <code>memchr</code>, <code>memcmp</code>, <code>memcpy</code>,
<code>memset</code>, <code>modf</code>, <code>pow</code>, <code>printf</code>, <code>putchar</code>,
<code>puts</code>, <code>scanf</code>, <code>sinh</code>, <code>sin</code>, <code>snprintf</code>,
<code>sprintf</code>, <code>sqrt</code>, <code>sscanf</code>, <code>strcat</code>,
<code>strchr</code>, <code>strcmp</code>, <code>strcpy</code>, <code>strcspn</code>,
<code>strlen</code>, <code>strncat</code>, <code>strncmp</code>, <code>strncpy</code>,
<code>strpbrk</code>, <code>strrchr</code>, <code>strspn</code>, <code>strstr</code>,
<code>tanh</code>, <code>tan</code>, <code>vfprintf</code>, <code>vprintf</code> and <code>vsprintf</code>
are all recognized as built-in functions unless
<option>-fno-builtin</option> is specified (or <option>-fno-builtin-<var>function</var></option>
is specified for an individual function).  All of these functions have
corresponding versions prefixed with <code>__builtin_</code>.
</para>
<para>GCC provides built-in versions of the ISO C99 floating-point comparison
macros that avoid raising exceptions for unordered operands.  They have
the same names as the standard macros ( <code>isgreater</code>,
<code>isgreaterequal</code>, <code>isless</code>, <code>islessequal</code>,
<code>islessgreater</code>, and <code>isunordered</code>) , with <code>__builtin_</code>
prefixed.  We intend for a library implementor to be able to simply
<code>#define</code> each standard macro to its built-in equivalent.
In the same fashion, GCC provides <code>fpclassify</code>, <code>isfinite</code>,
<code>isinf_sign</code> and <code>isnormal</code> built-ins used with
<code>__builtin_</code> prefixed.  The <code>isinf</code> and <code>isnan</code>
built-in functions appear both with and without the <code>__builtin_</code> prefix.
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="528" mergedindex="cp">__builtin_types_compatible_p</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_types_compatible_p</deffunction> <defdelimiter>(</defdelimiter><defparam><var>type1</var></defparam><defdelimiter>,</defdelimiter> <defparam><var>type2</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>You can use the built-in function <code>__builtin_types_compatible_p</code> to
determine whether two types are the same.
</para>
<para>This built-in function returns 1 if the unqualified versions of the
types <var>type1</var> and <var>type2</var> (which are types, not expressions) are
compatible, 0 otherwise.  The result of this built-in function can be
used in integer constant expressions.
</para>
<para>This built-in function ignores top level qualifiers (e.g., <code>const</code>,
<code>volatile</code>).  For example, <code>int</code> is equivalent to <code>const
int</code>.
</para>
<para>The type <code>int[]</code> and <code>int[5]</code> are compatible.  On the other
hand, <code>int</code> and <code>char *</code> are not compatible, even if the size
of their types, on the particular architecture are the same.  Also, the
amount of pointer indirection is taken into account when determining
similarity.  Consequently, <code>short *</code> is not similar to
<code>short **</code>.  Furthermore, two types that are typedefed are
considered compatible if their underlying types are compatible.
</para>
<para>An <code>enum</code> type is not considered to be compatible with another
<code>enum</code> type even if both are compatible with the same integer
type; this is what the C standard specifies.
For example, <code>enum &lbrace;foo, bar&rbrace;</code> is not similar to
<code>enum &lbrace;hot, dog&rbrace;</code>.
</para>
<para>You typically use this function in code whose execution varies
depending on the arguments&textrsquo; types.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define foo(x)                                                  \
  (&lbrace;                                                           \
    typeof (x) tmp = (x);                                       \
    if (__builtin_types_compatible_p (typeof (x), long double)) \
      tmp = foo_long_double (tmp);                              \
    else if (__builtin_types_compatible_p (typeof (x), double)) \
      tmp = foo_double (tmp);                                   \
    else if (__builtin_types_compatible_p (typeof (x), float))  \
      tmp = foo_float (tmp);                                    \
    else                                                        \
      abort ();                                                 \
    tmp;                                                        \
  &rbrace;)
</pre></smallexample>

<para><emph>Note:</emph> This construct is only available for C&eosperiod;
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="529" mergedindex="cp">__builtin_call_with_static_chain</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__builtin_call_with_static_chain</deffunction> <defdelimiter>(</defdelimiter><defparam><var>call_exp</var></defparam><defdelimiter>,</defdelimiter> <defparam><var>pointer_exp</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>The <var>call_exp</var> expression must be a function call, and the
<var>pointer_exp</var> expression must be a pointer.  The <var>pointer_exp</var>
is passed to the function call in the target&textrsquo;s static chain location.
The result of builtin is the result of the function call.
</para>
<para><emph>Note:</emph> This builtin is only available for C&eosperiod;
This builtin can be used to call Go closures from C.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="530" mergedindex="cp">__builtin_choose_expr</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__builtin_choose_expr</deffunction> <defdelimiter>(</defdelimiter><defparam><var>const_exp</var></defparam><defdelimiter>,</defdelimiter> <defparam><var>exp1</var></defparam><defdelimiter>,</defdelimiter> <defparam><var>exp2</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>You can use the built-in function <code>__builtin_choose_expr</code> to
evaluate code depending on the value of a constant expression.  This
built-in function returns <var>exp1</var> if <var>const_exp</var>, which is an
integer constant expression, is nonzero.  Otherwise it returns <var>exp2</var>.
</para>
<para>This built-in function is analogous to the <samp>? :</samp> operator in C,
except that the expression returned has its type unaltered by promotion
rules.  Also, the built-in function does not evaluate the expression
that is not chosen.  For example, if <var>const_exp</var> evaluates to true,
<var>exp2</var> is not evaluated even if it has side-effects.
</para>
<para>This built-in function can return an lvalue if the chosen argument is an
lvalue.
</para>
<para>If <var>exp1</var> is returned, the return type is the same as <var>exp1</var>&textrsquo;s
type.  Similarly, if <var>exp2</var> is returned, its return type is the same
as <var>exp2</var>.
</para>
<para>Example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define foo(x)                                                    \
  __builtin_choose_expr (                                         \
    __builtin_types_compatible_p (typeof (x), double),            \
    foo_double (x),                                               \
    __builtin_choose_expr (                                       \
      __builtin_types_compatible_p (typeof (x), float),           \
      foo_float (x),                                              \
      /* <r>The void expression results in a compile-time error</r>  \
         <r>when assigning the result to something.</r>  */          \
      (void)0))
</pre></smallexample>

<para><emph>Note:</emph> This construct is only available for C&eosperiod;  Furthermore, the
unused expression (<var>exp1</var> or <var>exp2</var> depending on the value of
<var>const_exp</var>) may still generate syntax errors.  This may change in
future revisions.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="531" mergedindex="cp">__builtin_complex</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype><var>type</var></deftype> <deffunction>__builtin_complex</deffunction> <defdelimiter>(</defdelimiter><defparam><var>real</var></defparam><defdelimiter>,</defdelimiter> <defparam><var>imag</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>The built-in function <code>__builtin_complex</code> is provided for use in
implementing the ISO C11 macros <code>CMPLXF</code>, <code>CMPLX</code> and
<code>CMPLXL</code>.  <var>real</var> and <var>imag</var> must have the same type, a
real binary floating-point type, and the result has the corresponding
complex type with real and imaginary parts <var>real</var> and <var>imag</var>.
Unlike <samp><var>real</var> + I * <var>imag</var></samp>, this works even when
infinities, NaNs and negative zeros are involved.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="532" mergedindex="cp">__builtin_constant_p</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_constant_p</deffunction> <defdelimiter>(</defdelimiter><defparam><var>exp</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>You can use the built-in function <code>__builtin_constant_p</code> to
determine if a value is known to be constant at compile time and hence
that GCC can perform constant-folding on expressions involving that
value.  The argument of the function is the value to test.  The function
returns the integer 1 if the argument is known to be a compile-time
constant and 0 if it is not known to be a compile-time constant.  A
return of 0 does not indicate that the value is <emph>not</emph> a constant,
but merely that GCC cannot prove it is a constant with the specified
value of the <option>-O</option> option.
</para>
<para>You typically use this function in an embedded application where
memory is a critical resource.  If you have some complex calculation,
you may want it to be folded if it involves constants, but need to call
a function if it does not.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define Scale_Value(X)      \
  (__builtin_constant_p (X) \
  ? ((X) * SCALE + OFFSET) : Scale (X))
</pre></smallexample>

<para>You may use this built-in function in either a macro or an inline
function.  However, if you use it in an inlined function and pass an
argument of the function as the argument to the built-in, GCC 
never returns 1 when you call the inline function with a string constant
or compound literal (<pxref label="Compound-Literals"><xrefnodename>Compound Literals</xrefnodename></pxref>) and does not return 1
when you pass a constant numeric value to the inline function unless you
specify the <option>-O</option> option.
</para>
<para>You may also use <code>__builtin_constant_p</code> in initializers for static
data.  For instance, you can write
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">static const int table[] = &lbrace;
   __builtin_constant_p (EXPRESSION) ? (EXPRESSION) : -1,
   /* <r>&dots;</r> */
&rbrace;;
</pre></smallexample>

<noindent></noindent>
<para>This is an acceptable initializer even if <var>EXPRESSION</var> is not a
constant expression, including the case where
<code>__builtin_constant_p</code> returns 1 because <var>EXPRESSION</var> can be
folded to a constant but <var>EXPRESSION</var> contains operands that are
not otherwise permitted in a static initializer (for example,
<code>0 &amp;&amp; foo ()</code>).  GCC must be more conservative about evaluating the
built-in in this case, because it has no opportunity to perform
optimization.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="533" mergedindex="cp">__builtin_expect</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>long</deftype> <deffunction>__builtin_expect</deffunction> <defdelimiter>(</defdelimiter><defparamtype>long</defparamtype> <defparam><var>exp</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>long</defparamtype> <defparam><var>c</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2628" incode="1">fprofile-arcs</indexterm></indexcommand>
<para>You may use <code>__builtin_expect</code> to provide the compiler with
branch prediction information.  In general, you should prefer to
use actual profile feedback for this (<option>-fprofile-arcs</option>), as
programmers are notoriously bad at predicting how their programs
actually perform.  However, there are applications in which this
data is hard to collect.
</para>
<para>The return value is the value of <var>exp</var>, which should be an integral
expression.  The semantics of the built-in are that it is expected that
<var>exp</var> == <var>c</var>.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">if (__builtin_expect (x, 0))
  foo ();
</pre></smallexample>

<noindent></noindent>
<para>indicates that we do not expect to call <code>foo</code>, since
we expect <code>x</code> to be zero.  Since you are limited to integral
expressions for <var>exp</var>, you should use constructions such as
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">if (__builtin_expect (ptr != NULL, 1))
  foo (*ptr);
</pre></smallexample>

<noindent></noindent>
<para>when testing pointer or floating-point values.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="534" mergedindex="cp">__builtin_trap</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_trap</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function causes the program to exit abnormally.  GCC implements
this function by using a target-dependent mechanism (such as
intentionally executing an illegal instruction) or by calling
<code>abort</code>.  The mechanism used may vary from release to release so
you should not rely on any particular implementation.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="535" mergedindex="cp">__builtin_unreachable</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_unreachable</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>If control flow reaches the point of the <code>__builtin_unreachable</code>,
the program is undefined.  It is useful in situations where the
compiler cannot deduce the unreachability of the code.
</para>
<para>One such case is immediately following an <code>asm</code> statement that
either never terminates, or one that transfers control elsewhere
and never returns.  In this example, without the
<code>__builtin_unreachable</code>, GCC issues a warning that control
reaches the end of a non-void function.  It also generates code
to return after the <code>asm</code>.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int f (int c, int v)
&lbrace;
  if (c)
    &lbrace;
      return v;
    &rbrace;
  else
    &lbrace;
      asm(&quot;jmp error_handler&quot;);
      __builtin_unreachable ();
    &rbrace;
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>Because the <code>asm</code> statement unconditionally transfers control out
of the function, control never reaches the end of the function
body.  The <code>__builtin_unreachable</code> is in fact unreachable and
communicates this fact to the compiler.
</para>
<para>Another use for <code>__builtin_unreachable</code> is following a call a
function that never returns but that is not declared
<code>__attribute__((noreturn))</code>, as in this example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void function_that_never_returns (void);

int g (int c)
&lbrace;
  if (c)
    &lbrace;
      return 1;
    &rbrace;
  else
    &lbrace;
      function_that_never_returns ();
      __builtin_unreachable ();
    &rbrace;
&rbrace;
</pre></smallexample>

</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="536" mergedindex="cp">*__builtin_assume_aligned</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>*__builtin_assume_aligned</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>exp</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>size_t</defparamtype> <defparam><var>align</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>...</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function returns its first argument, and allows the compiler
to assume that the returned pointer is at least <var>align</var> bytes
aligned.  This built-in can have either two or three arguments,
if it has three, the third argument should have integer type, and
if it is nonzero means misalignment offset.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void *x = __builtin_assume_aligned (arg, 16);
</pre></smallexample>

<noindent></noindent>
<para>means that the compiler can assume <code>x</code>, set to <code>arg</code>, is at least
16-byte aligned, while:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void *x = __builtin_assume_aligned (arg, 32, 8);
</pre></smallexample>

<noindent></noindent>
<para>means that the compiler can assume for <code>x</code>, set to <code>arg</code>, that
<code>(char *) x - 8</code> is 32-byte aligned.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="537" mergedindex="cp">__builtin_LINE</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_LINE</deffunction> <defdelimiter>(</defdelimiter><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function is the equivalent to the preprocessor <code>__LINE__</code>
macro and returns the line number of the invocation of the built-in.
In a C++ default argument for a function <var>F</var>, it gets the line number of
the call to <var>F</var>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="538" mergedindex="cp">__builtin_FUNCTION</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">const char *</deftype> <deffunction>__builtin_FUNCTION</deffunction> <defdelimiter>(</defdelimiter><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function is the equivalent to the preprocessor <code>__FUNCTION__</code>
macro and returns the function name the invocation of the built-in is in.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="539" mergedindex="cp">__builtin_FILE</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">const char *</deftype> <deffunction>__builtin_FILE</deffunction> <defdelimiter>(</defdelimiter><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function is the equivalent to the preprocessor <code>__FILE__</code>
macro and returns the file name the invocation of the built-in is in.
In a C++ default argument for a function <var>F</var>, it gets the file name of
the call to <var>F</var>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="540" mergedindex="cp">__builtin___clear_cache</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin___clear_cache</deffunction> <defdelimiter>(</defdelimiter><defparamtype>char</defparamtype> <defparam>*</defparam><defparam><var>begin</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>char</defparamtype> <defparam>*</defparam><defparam><var>end</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function is used to flush the processor&textrsquo;s instruction cache for
the region of memory between <var>begin</var> inclusive and <var>end</var>
exclusive.  Some targets require that the instruction cache be
flushed, after modifying memory containing code, in order to obtain
deterministic behavior.
</para>
<para>If the target does not require instruction cache flushes,
<code>__builtin___clear_cache</code> has no effect.  Otherwise either
instructions are emitted in-line to clear the instruction cache or a
call to the <code>__clear_cache</code> function in libgcc is made.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="541" mergedindex="cp">__builtin_prefetch</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_prefetch</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>void</defparam> <defparamtype>*</defparamtype><defparam><var>addr</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>...</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function is used to minimize cache-miss latency by moving data into
a cache before it is accessed.
You can insert calls to <code>__builtin_prefetch</code> into code for which
you know addresses of data in memory that is likely to be accessed soon.
If the target supports them, data prefetch instructions are generated.
If the prefetch is done early enough before the access then the data will
be in the cache by the time it is accessed.
</para>
<para>The value of <var>addr</var> is the address of the memory to prefetch.
There are two optional arguments, <var>rw</var> and <var>locality</var>.
The value of <var>rw</var> is a compile-time constant one or zero; one
means that the prefetch is preparing for a write to the memory address
and zero, the default, means that the prefetch is preparing for a read.
The value <var>locality</var> must be a compile-time constant integer between
zero and three.  A value of zero means that the data has no temporal
locality, so it need not be left in the cache after the access.  A value
of three means that the data has a high degree of temporal locality and
should be left in all levels of cache possible.  Values of one and two
mean, respectively, a low or moderate degree of temporal locality.  The
default is three.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">for (i = 0; i &lt; n; i++)
  &lbrace;
    a[i] = a[i] + b[i];
    __builtin_prefetch (&amp;a[i+j], 1, 1);
    __builtin_prefetch (&amp;b[i+j], 0, 1);
    /* <r>&dots;</r> */
  &rbrace;
</pre></smallexample>

<para>Data prefetch does not generate faults if <var>addr</var> is invalid, but
the address expression itself must be valid.  For example, a prefetch
of <code>p-&gt;next</code> does not fault if <code>p-&gt;next</code> is not a valid
address, but evaluation faults if <code>p</code> is not a valid address.
</para>
<para>If the target does not support data prefetch, the address expression
is evaluated if it includes side effects but no other code is generated
and GCC does not issue a warning.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="542" mergedindex="cp">__builtin_huge_val</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>double</deftype> <deffunction>__builtin_huge_val</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Returns a positive infinity, if supported by the floating-point format,
else <code>DBL_MAX</code>.  This function is suitable for implementing the
ISO C macro <code>HUGE_VAL</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="543" mergedindex="cp">__builtin_huge_valf</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>float</deftype> <deffunction>__builtin_huge_valf</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_huge_val</code>, except the return type is <code>float</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="544" mergedindex="cp">__builtin_huge_vall</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">long double</deftype> <deffunction>__builtin_huge_vall</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_huge_val</code>, except the return
type is <code>long double</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="545" mergedindex="cp">__builtin_fpclassify</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_fpclassify</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>...</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This built-in implements the C99 fpclassify functionality.  The first
five int arguments should be the target library&textrsquo;s notion of the
possible FP classes and are used for return values.  They must be
constant values and they must appear in this order: <code>FP_NAN</code>,
<code>FP_INFINITE</code>, <code>FP_NORMAL</code>, <code>FP_SUBNORMAL</code> and
<code>FP_ZERO</code>.  The ellipsis is for exactly one floating-point value
to classify.  GCC treats the last argument as type-generic, which
means it does not do default promotion from float to double.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="546" mergedindex="cp">__builtin_inf</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>double</deftype> <deffunction>__builtin_inf</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_huge_val</code>, except a warning is generated
if the target floating-point format does not support infinities.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="547" mergedindex="cp">__builtin_infd32</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>_Decimal32</deftype> <deffunction>__builtin_infd32</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_inf</code>, except the return type is <code>_Decimal32</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="548" mergedindex="cp">__builtin_infd64</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>_Decimal64</deftype> <deffunction>__builtin_infd64</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_inf</code>, except the return type is <code>_Decimal64</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="549" mergedindex="cp">__builtin_infd128</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>_Decimal128</deftype> <deffunction>__builtin_infd128</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_inf</code>, except the return type is <code>_Decimal128</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="550" mergedindex="cp">__builtin_inff</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>float</deftype> <deffunction>__builtin_inff</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_inf</code>, except the return type is <code>float</code>.
This function is suitable for implementing the ISO C99 macro <code>INFINITY</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="551" mergedindex="cp">__builtin_infl</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">long double</deftype> <deffunction>__builtin_infl</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_inf</code>, except the return
type is <code>long double</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="552" mergedindex="cp">__builtin_isinf_sign</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_isinf_sign</deffunction> <defdelimiter>(</defdelimiter><defparamtype>...</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>isinf</code>, except the return value is -1 for
an argument of <code>-Inf</code> and 1 for an argument of <code>+Inf</code>.
Note while the parameter list is an
ellipsis, this function only accepts exactly one floating-point
argument.  GCC treats this parameter as type-generic, which means it
does not do default promotion from float to double.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="553" mergedindex="cp">__builtin_nan</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>double</deftype> <deffunction>__builtin_nan</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>char</defparam> <defparamtype>*str</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This is an implementation of the ISO C99 function <code>nan</code>.
</para>
<para>Since ISO C99 defines this function in terms of <code>strtod</code>, which we
do not implement, a description of the parsing is in order.  The string
is parsed as by <code>strtol</code>; that is, the base is recognized by
leading <samp>0</samp> or <samp>0x</samp> prefixes.  The number parsed is placed
in the significand such that the least significant bit of the number
is at the least significant bit of the significand.  The number is
truncated to fit the significand field provided.  The significand is
forced to be a quiet NaN&eosperiod;
</para>
<para>This function, if given a string literal all of which would have been
consumed by <code>strtol</code>, is evaluated early enough that it is considered a
compile-time constant.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="554" mergedindex="cp">__builtin_nand32</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>_Decimal32</deftype> <deffunction>__builtin_nand32</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>char</defparam> <defparamtype>*str</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_nan</code>, except the return type is <code>_Decimal32</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="555" mergedindex="cp">__builtin_nand64</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>_Decimal64</deftype> <deffunction>__builtin_nand64</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>char</defparam> <defparamtype>*str</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_nan</code>, except the return type is <code>_Decimal64</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="556" mergedindex="cp">__builtin_nand128</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>_Decimal128</deftype> <deffunction>__builtin_nand128</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>char</defparam> <defparamtype>*str</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_nan</code>, except the return type is <code>_Decimal128</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="557" mergedindex="cp">__builtin_nanf</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>float</deftype> <deffunction>__builtin_nanf</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>char</defparam> <defparamtype>*str</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_nan</code>, except the return type is <code>float</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="558" mergedindex="cp">__builtin_nanl</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">long double</deftype> <deffunction>__builtin_nanl</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>char</defparam> <defparamtype>*str</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_nan</code>, except the return type is <code>long double</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="559" mergedindex="cp">__builtin_nans</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>double</deftype> <deffunction>__builtin_nans</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>char</defparam> <defparamtype>*str</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_nan</code>, except the significand is forced
to be a signaling NaN&eosperiod;  The <code>nans</code> function is proposed by
<uref><urefurl>http://www.open-std.org/jtc1/sc22/wg14/www/docs/n965.htm</urefurl><urefreplacement>WG14 N965</urefreplacement></uref>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="560" mergedindex="cp">__builtin_nansf</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>float</deftype> <deffunction>__builtin_nansf</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>char</defparam> <defparamtype>*str</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_nans</code>, except the return type is <code>float</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="561" mergedindex="cp">__builtin_nansl</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">long double</deftype> <deffunction>__builtin_nansl</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>char</defparam> <defparamtype>*str</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_nans</code>, except the return type is <code>long double</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="562" mergedindex="cp">__builtin_ffs</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_ffs</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam>x</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Returns one plus the index of the least significant 1-bit of <var>x</var>, or
if <var>x</var> is zero, returns zero.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="563" mergedindex="cp">__builtin_clz</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_clz</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>x</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Returns the number of leading 0-bits in <var>x</var>, starting at the most
significant bit position.  If <var>x</var> is 0, the result is undefined.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="564" mergedindex="cp">__builtin_ctz</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_ctz</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>x</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Returns the number of trailing 0-bits in <var>x</var>, starting at the least
significant bit position.  If <var>x</var> is 0, the result is undefined.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="565" mergedindex="cp">__builtin_clrsb</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_clrsb</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam>x</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Returns the number of leading redundant sign bits in <var>x</var>, i.e.&noeos; the
number of bits following the most significant bit that are identical
to it.  There are no special cases for 0 or other values. 
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="566" mergedindex="cp">__builtin_popcount</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_popcount</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>x</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Returns the number of 1-bits in <var>x</var>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="567" mergedindex="cp">__builtin_parity</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_parity</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparamtype>x</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Returns the parity of <var>x</var>, i.e.&noeos; the number of 1-bits in <var>x</var>
modulo 2.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="568" mergedindex="cp">__builtin_ffsl</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_ffsl</deffunction> <defdelimiter>(</defdelimiter><defparamtype>long</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_ffs</code>, except the argument type is
<code>long</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="569" mergedindex="cp">__builtin_clzl</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_clzl</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_clz</code>, except the argument type is
<code>unsigned long</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="570" mergedindex="cp">__builtin_ctzl</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_ctzl</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_ctz</code>, except the argument type is
<code>unsigned long</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="571" mergedindex="cp">__builtin_clrsbl</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_clrsbl</deffunction> <defdelimiter>(</defdelimiter><defparamtype>long</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_clrsb</code>, except the argument type is
<code>long</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="572" mergedindex="cp">__builtin_popcountl</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_popcountl</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_popcount</code>, except the argument type is
<code>unsigned long</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="573" mergedindex="cp">__builtin_parityl</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_parityl</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_parity</code>, except the argument type is
<code>unsigned long</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="574" mergedindex="cp">__builtin_ffsll</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_ffsll</deffunction> <defdelimiter>(</defdelimiter><defparamtype>long</defparamtype> <defparam>long</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_ffs</code>, except the argument type is
<code>long long</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="575" mergedindex="cp">__builtin_clzll</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_clzll</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>long</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_clz</code>, except the argument type is
<code>unsigned long long</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="576" mergedindex="cp">__builtin_ctzll</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_ctzll</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>long</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_ctz</code>, except the argument type is
<code>unsigned long long</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="577" mergedindex="cp">__builtin_clrsbll</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_clrsbll</deffunction> <defdelimiter>(</defdelimiter><defparamtype>long</defparamtype> <defparam>long</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_clrsb</code>, except the argument type is
<code>long long</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="578" mergedindex="cp">__builtin_popcountll</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_popcountll</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>long</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_popcount</code>, except the argument type is
<code>unsigned long long</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="579" mergedindex="cp">__builtin_parityll</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_parityll</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>long</defparam> <defparamtype>long</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_parity</code>, except the argument type is
<code>unsigned long long</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="580" mergedindex="cp">__builtin_powi</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>double</deftype> <deffunction>__builtin_powi</deffunction> <defdelimiter>(</defdelimiter><defparamtype>double</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Returns the first argument raised to the power of the second.  Unlike the
<code>pow</code> function no guarantees about precision and rounding are made.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="581" mergedindex="cp">__builtin_powif</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>float</deftype> <deffunction>__builtin_powif</deffunction> <defdelimiter>(</defdelimiter><defparamtype>float</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_powi</code>, except the argument and return types
are <code>float</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="582" mergedindex="cp">__builtin_powil</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">long double</deftype> <deffunction>__builtin_powil</deffunction> <defdelimiter>(</defdelimiter><defparamtype>long</defparamtype> <defparam>double</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_powi</code>, except the argument and return types
are <code>long double</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="583" mergedindex="cp">__builtin_bswap16</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>uint16_t</deftype> <deffunction>__builtin_bswap16</deffunction> <defdelimiter>(</defdelimiter><defparamtype>uint16_t</defparamtype> <defparam>x</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Returns <var>x</var> with the order of the bytes reversed; for example,
<code>0xaabb</code> becomes <code>0xbbaa</code>.  Byte here always means
exactly 8 bits.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="584" mergedindex="cp">__builtin_bswap32</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>uint32_t</deftype> <deffunction>__builtin_bswap32</deffunction> <defdelimiter>(</defdelimiter><defparamtype>uint32_t</defparamtype> <defparam>x</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_bswap16</code>, except the argument and return types
are 32 bit.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="585" mergedindex="cp">__builtin_bswap64</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>uint64_t</deftype> <deffunction>__builtin_bswap64</deffunction> <defdelimiter>(</defdelimiter><defparamtype>uint64_t</defparamtype> <defparam>x</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Similar to <code>__builtin_bswap32</code>, except the argument and return types
are 64 bit.
</para></definitionitem></deftypefn>

</section>
<node name="Target-Builtins" spaces=" "><nodename>Target Builtins</nodename><nodenext automatic="on">Target Format Checks</nodenext><nodeprev automatic="on">Other Builtins</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Built-in Functions Specific to Particular Target Machines</sectiontitle>

<para>On some target machines, GCC supports many built-in functions specific
to those machines.  Generally these generate calls to specific machine
instructions, but allow the compiler to schedule those calls.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">AArch64 Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Alpha Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Altera Nios II Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">ARC Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">ARC SIMD Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">ARM iWMMXt Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">ARM C Language Extensions (ACLE)</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">ARM Floating Point Status and Control Intrinsics</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">AVR Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Blackfin Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">FR-V Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MIPS DSP Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MIPS Paired-Single Support</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MIPS Loongson Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Other MIPS Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MSP430 Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">NDS32 Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">picoChip Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">PowerPC Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">PowerPC AltiVec/VSX Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">PowerPC Hardware Transactional Memory Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">RX Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">S/390 System z Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">SH Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">SPARC VIS Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">SPU Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">TI C6X Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">TILE-Gx Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">TILEPro Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">x86 Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">x86 transactional memory intrinsics</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="AArch64-Built_002din-Functions" spaces=" "><nodename>AArch64 Built-in Functions</nodename><nodenext automatic="on">Alpha Built-in Functions</nodenext><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>AArch64 Built-in Functions</sectiontitle>

<para>These built-in functions are available for the AArch64 family of
processors.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">unsigned int __builtin_aarch64_get_fpcr ()
void __builtin_aarch64_set_fpcr (unsigned int)
unsigned int __builtin_aarch64_get_fpsr ()
void __builtin_aarch64_set_fpsr (unsigned int)
</pre></smallexample>

</subsection>
<node name="Alpha-Built_002din-Functions" spaces=" "><nodename>Alpha Built-in Functions</nodename><nodenext automatic="on">Altera Nios II Built-in Functions</nodenext><nodeprev automatic="on">AArch64 Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>Alpha Built-in Functions</sectiontitle>

<para>These built-in functions are available for the Alpha family of
processors, depending on the command-line switches used.
</para>
<para>The following built-in functions are always available.  They
all generate the machine instruction that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">long __builtin_alpha_implver (void)
long __builtin_alpha_rpcc (void)
long __builtin_alpha_amask (long)
long __builtin_alpha_cmpbge (long, long)
long __builtin_alpha_extbl (long, long)
long __builtin_alpha_extwl (long, long)
long __builtin_alpha_extll (long, long)
long __builtin_alpha_extql (long, long)
long __builtin_alpha_extwh (long, long)
long __builtin_alpha_extlh (long, long)
long __builtin_alpha_extqh (long, long)
long __builtin_alpha_insbl (long, long)
long __builtin_alpha_inswl (long, long)
long __builtin_alpha_insll (long, long)
long __builtin_alpha_insql (long, long)
long __builtin_alpha_inswh (long, long)
long __builtin_alpha_inslh (long, long)
long __builtin_alpha_insqh (long, long)
long __builtin_alpha_mskbl (long, long)
long __builtin_alpha_mskwl (long, long)
long __builtin_alpha_mskll (long, long)
long __builtin_alpha_mskql (long, long)
long __builtin_alpha_mskwh (long, long)
long __builtin_alpha_msklh (long, long)
long __builtin_alpha_mskqh (long, long)
long __builtin_alpha_umulh (long, long)
long __builtin_alpha_zap (long, long)
long __builtin_alpha_zapnot (long, long)
</pre></smallexample>

<para>The following built-in functions are always with <option>-mmax</option>
or <option>-mcpu=<var>cpu</var></option> where <var>cpu</var> is <code>pca56</code> or
later.  They all generate the machine instruction that is part
of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">long __builtin_alpha_pklb (long)
long __builtin_alpha_pkwb (long)
long __builtin_alpha_unpkbl (long)
long __builtin_alpha_unpkbw (long)
long __builtin_alpha_minub8 (long, long)
long __builtin_alpha_minsb8 (long, long)
long __builtin_alpha_minuw4 (long, long)
long __builtin_alpha_minsw4 (long, long)
long __builtin_alpha_maxub8 (long, long)
long __builtin_alpha_maxsb8 (long, long)
long __builtin_alpha_maxuw4 (long, long)
long __builtin_alpha_maxsw4 (long, long)
long __builtin_alpha_perr (long, long)
</pre></smallexample>

<para>The following built-in functions are always with <option>-mcix</option>
or <option>-mcpu=<var>cpu</var></option> where <var>cpu</var> is <code>ev67</code> or
later.  They all generate the machine instruction that is part
of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">long __builtin_alpha_cttz (long)
long __builtin_alpha_ctlz (long)
long __builtin_alpha_ctpop (long)
</pre></smallexample>

<para>The following built-in functions are available on systems that use the OSF/1
PALcode.  Normally they invoke the <code>rduniq</code> and <code>wruniq</code>
PAL calls, but when invoked with <option>-mtls-kernel</option>, they invoke
<code>rdval</code> and <code>wrval</code>.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void *__builtin_thread_pointer (void)
void __builtin_set_thread_pointer (void *)
</pre></smallexample>

</subsection>
<node name="Altera-Nios-II-Built_002din-Functions" spaces=" "><nodename>Altera Nios II Built-in Functions</nodename><nodenext automatic="on">ARC Built-in Functions</nodenext><nodeprev automatic="on">Alpha Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>Altera Nios II Built-in Functions</sectiontitle>

<para>These built-in functions are available for the Altera Nios II
family of processors.
</para>
<para>The following built-in functions are always available.  They
all generate the machine instruction that is part of the name.
</para>
<example endspaces=" ">
<pre xml:space="preserve">int __builtin_ldbio (volatile const void *)
int __builtin_ldbuio (volatile const void *)
int __builtin_ldhio (volatile const void *)
int __builtin_ldhuio (volatile const void *)
int __builtin_ldwio (volatile const void *)
void __builtin_stbio (volatile void *, int)
void __builtin_sthio (volatile void *, int)
void __builtin_stwio (volatile void *, int)
void __builtin_sync (void)
int __builtin_rdctl (int) 
void __builtin_wrctl (int, int)
</pre></example>

<para>The following built-in functions are always available.  They
all generate a Nios II Custom Instruction. The name of the
function represents the types that the function takes and
returns. The letter before the <code>n</code> is the return type
or void if absent. The <code>n</code> represents the first parameter
to all the custom instructions, the custom instruction number.
The two letters after the <code>n</code> represent the up to two
parameters to the function.
</para>
<para>The letters represent the following data types:
</para><table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">&lt;no letter&gt;</itemformat></item>
</tableterm><tableitem><para><code>void</code> for return type and no parameter for parameter types.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">i</itemformat></item>
</tableterm><tableitem><para><code>int</code> for return type and parameter type
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">f</itemformat></item>
</tableterm><tableitem><para><code>float</code> for return type and parameter type
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">p</itemformat></item>
</tableterm><tableitem><para><code>void *</code> for return type and parameter type
</para>
</tableitem></tableentry></table>

<para>And the function names are:
</para><example endspaces=" ">
<pre xml:space="preserve">void __builtin_custom_n (void)
void __builtin_custom_ni (int)
void __builtin_custom_nf (float)
void __builtin_custom_np (void *)
void __builtin_custom_nii (int, int)
void __builtin_custom_nif (int, float)
void __builtin_custom_nip (int, void *)
void __builtin_custom_nfi (float, int)
void __builtin_custom_nff (float, float)
void __builtin_custom_nfp (float, void *)
void __builtin_custom_npi (void *, int)
void __builtin_custom_npf (void *, float)
void __builtin_custom_npp (void *, void *)
int __builtin_custom_in (void)
int __builtin_custom_ini (int)
int __builtin_custom_inf (float)
int __builtin_custom_inp (void *)
int __builtin_custom_inii (int, int)
int __builtin_custom_inif (int, float)
int __builtin_custom_inip (int, void *)
int __builtin_custom_infi (float, int)
int __builtin_custom_inff (float, float)
int __builtin_custom_infp (float, void *)
int __builtin_custom_inpi (void *, int)
int __builtin_custom_inpf (void *, float)
int __builtin_custom_inpp (void *, void *)
float __builtin_custom_fn (void)
float __builtin_custom_fni (int)
float __builtin_custom_fnf (float)
float __builtin_custom_fnp (void *)
float __builtin_custom_fnii (int, int)
float __builtin_custom_fnif (int, float)
float __builtin_custom_fnip (int, void *)
float __builtin_custom_fnfi (float, int)
float __builtin_custom_fnff (float, float)
float __builtin_custom_fnfp (float, void *)
float __builtin_custom_fnpi (void *, int)
float __builtin_custom_fnpf (void *, float)
float __builtin_custom_fnpp (void *, void *)
void * __builtin_custom_pn (void)
void * __builtin_custom_pni (int)
void * __builtin_custom_pnf (float)
void * __builtin_custom_pnp (void *)
void * __builtin_custom_pnii (int, int)
void * __builtin_custom_pnif (int, float)
void * __builtin_custom_pnip (int, void *)
void * __builtin_custom_pnfi (float, int)
void * __builtin_custom_pnff (float, float)
void * __builtin_custom_pnfp (float, void *)
void * __builtin_custom_pnpi (void *, int)
void * __builtin_custom_pnpf (void *, float)
void * __builtin_custom_pnpp (void *, void *)
</pre></example>

</subsection>
<node name="ARC-Built_002din-Functions" spaces=" "><nodename>ARC Built-in Functions</nodename><nodenext automatic="on">ARC SIMD Built-in Functions</nodenext><nodeprev automatic="on">Altera Nios II Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>ARC Built-in Functions</sectiontitle>

<para>The following built-in functions are provided for ARC targets.  The
built-ins generate the corresponding assembly instructions.  In the
examples given below, the generated code often requires an operand or
result to be in a register.  Where necessary further code will be
generated to ensure this is true, but for brevity this is not
described in each case.
</para>
<para><emph>Note:</emph> Using a built-in to generate an instruction not supported
by a target may cause problems. At present the compiler is not
guaranteed to detect such misuse, and as a result an internal compiler
error may be generated.
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="586" mergedindex="cp">__builtin_arc_aligned</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_arc_aligned</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype> <defparam>*</defparam><defparam><var>val</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam><var>alignval</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Return 1 if <var>val</var> is known to have the byte alignment given
by <var>alignval</var>, otherwise return 0.
Note that this is different from
</para><smallexample endspaces=" ">
<pre xml:space="preserve">__alignof__(*(char *)<var>val</var>) &gt;= alignval
</pre></smallexample>
<para>because __alignof__ sees only the type of the dereference, whereas
__builtin_arc_align uses alignment information from the pointer
as well as from the pointed-to type.
The information available will depend on optimization level.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="587" mergedindex="cp">__builtin_arc_brk</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_arc_brk</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates
</para><example endspaces=" ">
<pre xml:space="preserve">brk
</pre></example>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="588" mergedindex="cp">__builtin_arc_core_read</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">unsigned int</deftype> <deffunction>__builtin_arc_core_read</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>regno</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>The operand is the number of a register to be read.  Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">mov  <var>dest</var>, r<var>regno</var>
</pre></example>
<para>where the value in <var>dest</var> will be the result returned from the
built-in.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="589" mergedindex="cp">__builtin_arc_core_write</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_arc_core_write</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>regno</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>val</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>The first operand is the number of a register to be written, the
second operand is a compile time constant to write into that
register.  Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">mov  r<var>regno</var>, <var>val</var>
</pre></example>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="590" mergedindex="cp">__builtin_arc_divaw</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_arc_divaw</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam><var>a</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam><var>b</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Only available if either <option>-mcpu=ARC700</option> or <option>-meA</option> is set.
Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">divaw  <var>dest</var>, <var>a</var>, <var>b</var>
</pre></example>
<para>where the value in <var>dest</var> will be the result returned from the
built-in.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="591" mergedindex="cp">__builtin_arc_flag</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_arc_flag</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>a</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates
</para><example endspaces=" ">
<pre xml:space="preserve">flag  <var>a</var>
</pre></example>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="592" mergedindex="cp">__builtin_arc_lr</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">unsigned int</deftype> <deffunction>__builtin_arc_lr</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>auxr</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>The operand, <var>auxv</var>, is the address of an auxiliary register and
must be a compile time constant.  Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">lr  <var>dest</var>, [<var>auxr</var>]
</pre></example>
<para>Where the value in <var>dest</var> will be the result returned from the
built-in.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="593" mergedindex="cp">__builtin_arc_mul64</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_arc_mul64</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam><var>a</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam><var>b</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Only available with <option>-mmul64</option>.  Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">mul64  <var>a</var>, <var>b</var>
</pre></example>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="594" mergedindex="cp">__builtin_arc_mulu64</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_arc_mulu64</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>a</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>b</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Only available with <option>-mmul64</option>.  Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">mulu64  <var>a</var>, <var>b</var>
</pre></example>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="595" mergedindex="cp">__builtin_arc_nop</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_arc_nop</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">nop
</pre></example>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="596" mergedindex="cp">__builtin_arc_norm</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_arc_norm</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam><var>src</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Only valid if the <samp>norm</samp> instruction is available through the
<option>-mnorm</option> option or by default with <option>-mcpu=ARC700</option>.
Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">norm  <var>dest</var>, <var>src</var>
</pre></example>
<para>Where the value in <var>dest</var> will be the result returned from the
built-in.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="597" mergedindex="cp">__builtin_arc_normw</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype bracketed="on">short int</deftype> <deffunction>__builtin_arc_normw</deffunction> <defdelimiter>(</defdelimiter><defparamtype>short</defparamtype> <defparam>int</defparam> <defparam><var>src</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Only valid if the <samp>normw</samp> instruction is available through the
<option>-mnorm</option> option or by default with <option>-mcpu=ARC700</option>.
Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">normw  <var>dest</var>, <var>src</var>
</pre></example>
<para>Where the value in <var>dest</var> will be the result returned from the
built-in.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="598" mergedindex="cp">__builtin_arc_rtie</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_arc_rtie</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">rtie
</pre></example>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="599" mergedindex="cp">__builtin_arc_sleep</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_arc_sleep</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam><var>a</var></defparam></definitionterm>
<definitionitem><para>Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">sleep  <var>a</var>
</pre></example>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="600" mergedindex="cp">__builtin_arc_sr</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_arc_sr</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>auxr</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>val</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>The first argument, <var>auxv</var>, is the address of an auxiliary
register, the second argument, <var>val</var>, is a compile time constant
to be written to the register.  Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">sr  <var>auxr</var>, [<var>val</var>]
</pre></example>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="601" mergedindex="cp">__builtin_arc_swap</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>int</deftype> <deffunction>__builtin_arc_swap</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam><var>src</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Only valid with <option>-mswap</option>.  Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">swap  <var>dest</var>, <var>src</var>
</pre></example>
<para>Where the value in <var>dest</var> will be the result returned from the
built-in.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="602" mergedindex="cp">__builtin_arc_swi</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_arc_swi</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">swi
</pre></example>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="603" mergedindex="cp">__builtin_arc_sync</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_arc_sync</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Only available with <option>-mcpu=ARC700</option>.  Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">sync
</pre></example>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="604" mergedindex="cp">__builtin_arc_trap_s</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_arc_trap_s</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>c</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Only available with <option>-mcpu=ARC700</option>.  Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">trap_s  <var>c</var>
</pre></example>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="605" mergedindex="cp">__builtin_arc_unimp_s</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_arc_unimp_s</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Only available with <option>-mcpu=ARC700</option>.  Generates:
</para><example endspaces=" ">
<pre xml:space="preserve">unimp_s
</pre></example>
</definitionitem></deftypefn>

<para>The instructions generated by the following builtins are not
considered as candidates for scheduling.  They are not moved around by
the compiler during scheduling, and thus can be expected to appear
where they are put in the C code:
</para><example endspaces=" ">
<pre xml:space="preserve">__builtin_arc_brk()
__builtin_arc_core_read()
__builtin_arc_core_write()
__builtin_arc_flag()
__builtin_arc_lr()
__builtin_arc_sleep()
__builtin_arc_sr()
__builtin_arc_swi()
</pre></example>

</subsection>
<node name="ARC-SIMD-Built_002din-Functions" spaces=" "><nodename>ARC SIMD Built-in Functions</nodename><nodenext automatic="on">ARM iWMMXt Built-in Functions</nodenext><nodeprev automatic="on">ARC Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>ARC SIMD Built-in Functions</sectiontitle>

<para>SIMD builtins provided by the compiler can be used to generate the
vector instructions.  This section describes the available builtins
and their usage in programs.  With the <option>-msimd</option> option, the
compiler provides 128-bit vector types, which can be specified using
the <code>vector_size</code> attribute.  The header file <file>arc-simd.h</file>
can be included to use the following predefined types:
</para><example endspaces=" ">
<pre xml:space="preserve">typedef int __v4si   __attribute__((vector_size(16)));
typedef short __v8hi __attribute__((vector_size(16)));
</pre></example>

<para>These types can be used to define 128-bit variables.  The built-in
functions listed in the following section can be used on these
variables to generate the vector operations.
</para>
<para>For all builtins, <code>__builtin_arc_<var>someinsn</var></code>, the header file
<file>arc-simd.h</file> also provides equivalent macros called
<code>_<var>someinsn</var></code> that can be used for programming ease and
improved readability.  The following macros for DMA control are also
provided:
</para><example endspaces=" ">
<pre xml:space="preserve">#define _setup_dma_in_channel_reg _vdiwr
#define _setup_dma_out_channel_reg _vdowr
</pre></example>

<para>The following is a complete list of all the SIMD built-ins provided
for ARC, grouped by calling signature.
</para>
<para>The following take two <code>__v8hi</code> arguments and return a
<code>__v8hi</code> result:
</para><example endspaces=" ">
<pre xml:space="preserve">__v8hi __builtin_arc_vaddaw (__v8hi, __v8hi)
__v8hi __builtin_arc_vaddw (__v8hi, __v8hi)
__v8hi __builtin_arc_vand (__v8hi, __v8hi)
__v8hi __builtin_arc_vandaw (__v8hi, __v8hi)
__v8hi __builtin_arc_vavb (__v8hi, __v8hi)
__v8hi __builtin_arc_vavrb (__v8hi, __v8hi)
__v8hi __builtin_arc_vbic (__v8hi, __v8hi)
__v8hi __builtin_arc_vbicaw (__v8hi, __v8hi)
__v8hi __builtin_arc_vdifaw (__v8hi, __v8hi)
__v8hi __builtin_arc_vdifw (__v8hi, __v8hi)
__v8hi __builtin_arc_veqw (__v8hi, __v8hi)
__v8hi __builtin_arc_vh264f (__v8hi, __v8hi)
__v8hi __builtin_arc_vh264ft (__v8hi, __v8hi)
__v8hi __builtin_arc_vh264fw (__v8hi, __v8hi)
__v8hi __builtin_arc_vlew (__v8hi, __v8hi)
__v8hi __builtin_arc_vltw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmaxaw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmaxw (__v8hi, __v8hi)
__v8hi __builtin_arc_vminaw (__v8hi, __v8hi)
__v8hi __builtin_arc_vminw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr1aw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr1w (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr2aw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr2w (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr3aw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr3w (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr4aw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr4w (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr5aw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr5w (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr6aw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr6w (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr7aw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmr7w (__v8hi, __v8hi)
__v8hi __builtin_arc_vmrb (__v8hi, __v8hi)
__v8hi __builtin_arc_vmulaw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmulfaw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmulfw (__v8hi, __v8hi)
__v8hi __builtin_arc_vmulw (__v8hi, __v8hi)
__v8hi __builtin_arc_vnew (__v8hi, __v8hi)
__v8hi __builtin_arc_vor (__v8hi, __v8hi)
__v8hi __builtin_arc_vsubaw (__v8hi, __v8hi)
__v8hi __builtin_arc_vsubw (__v8hi, __v8hi)
__v8hi __builtin_arc_vsummw (__v8hi, __v8hi)
__v8hi __builtin_arc_vvc1f (__v8hi, __v8hi)
__v8hi __builtin_arc_vvc1ft (__v8hi, __v8hi)
__v8hi __builtin_arc_vxor (__v8hi, __v8hi)
__v8hi __builtin_arc_vxoraw (__v8hi, __v8hi)
</pre></example>

<para>The following take one <code>__v8hi</code> and one <code>int</code> argument and return a
<code>__v8hi</code> result:
</para>
<example endspaces=" ">
<pre xml:space="preserve">__v8hi __builtin_arc_vbaddw (__v8hi, int)
__v8hi __builtin_arc_vbmaxw (__v8hi, int)
__v8hi __builtin_arc_vbminw (__v8hi, int)
__v8hi __builtin_arc_vbmulaw (__v8hi, int)
__v8hi __builtin_arc_vbmulfw (__v8hi, int)
__v8hi __builtin_arc_vbmulw (__v8hi, int)
__v8hi __builtin_arc_vbrsubw (__v8hi, int)
__v8hi __builtin_arc_vbsubw (__v8hi, int)
</pre></example>

<para>The following take one <code>__v8hi</code> argument and one <code>int</code> argument which
must be a 3-bit compile time constant indicating a register number
I0-I7.  They return a <code>__v8hi</code> result.
</para><example endspaces=" ">
<pre xml:space="preserve">__v8hi __builtin_arc_vasrw (__v8hi, const int)
__v8hi __builtin_arc_vsr8 (__v8hi, const int)
__v8hi __builtin_arc_vsr8aw (__v8hi, const int)
</pre></example>

<para>The following take one <code>__v8hi</code> argument and one <code>int</code>
argument which must be a 6-bit compile time constant.  They return a
<code>__v8hi</code> result.
</para><example endspaces=" ">
<pre xml:space="preserve">__v8hi __builtin_arc_vasrpwbi (__v8hi, const int)
__v8hi __builtin_arc_vasrrpwbi (__v8hi, const int)
__v8hi __builtin_arc_vasrrwi (__v8hi, const int)
__v8hi __builtin_arc_vasrsrwi (__v8hi, const int)
__v8hi __builtin_arc_vasrwi (__v8hi, const int)
__v8hi __builtin_arc_vsr8awi (__v8hi, const int)
__v8hi __builtin_arc_vsr8i (__v8hi, const int)
</pre></example>

<para>The following take one <code>__v8hi</code> argument and one <code>int</code> argument which
must be a 8-bit compile time constant.  They return a <code>__v8hi</code>
result.
</para><example endspaces=" ">
<pre xml:space="preserve">__v8hi __builtin_arc_vd6tapf (__v8hi, const int)
__v8hi __builtin_arc_vmvaw (__v8hi, const int)
__v8hi __builtin_arc_vmvw (__v8hi, const int)
__v8hi __builtin_arc_vmvzw (__v8hi, const int)
</pre></example>

<para>The following take two <code>int</code> arguments, the second of which which
must be a 8-bit compile time constant.  They return a <code>__v8hi</code>
result:
</para><example endspaces=" ">
<pre xml:space="preserve">__v8hi __builtin_arc_vmovaw (int, const int)
__v8hi __builtin_arc_vmovw (int, const int)
__v8hi __builtin_arc_vmovzw (int, const int)
</pre></example>

<para>The following take a single <code>__v8hi</code> argument and return a
<code>__v8hi</code> result:
</para><example endspaces=" ">
<pre xml:space="preserve">__v8hi __builtin_arc_vabsaw (__v8hi)
__v8hi __builtin_arc_vabsw (__v8hi)
__v8hi __builtin_arc_vaddsuw (__v8hi)
__v8hi __builtin_arc_vexch1 (__v8hi)
__v8hi __builtin_arc_vexch2 (__v8hi)
__v8hi __builtin_arc_vexch4 (__v8hi)
__v8hi __builtin_arc_vsignw (__v8hi)
__v8hi __builtin_arc_vupbaw (__v8hi)
__v8hi __builtin_arc_vupbw (__v8hi)
__v8hi __builtin_arc_vupsbaw (__v8hi)
__v8hi __builtin_arc_vupsbw (__v8hi)
</pre></example>

<para>The following take two <code>int</code> arguments and return no result:
</para><example endspaces=" ">
<pre xml:space="preserve">void __builtin_arc_vdirun (int, int)
void __builtin_arc_vdorun (int, int)
</pre></example>

<para>The following take two <code>int</code> arguments and return no result.  The
first argument must a 3-bit compile time constant indicating one of
the DR0-DR7 DMA setup channels:
</para><example endspaces=" ">
<pre xml:space="preserve">void __builtin_arc_vdiwr (const int, int)
void __builtin_arc_vdowr (const int, int)
</pre></example>

<para>The following take an <code>int</code> argument and return no result:
</para><example endspaces=" ">
<pre xml:space="preserve">void __builtin_arc_vendrec (int)
void __builtin_arc_vrec (int)
void __builtin_arc_vrecrun (int)
void __builtin_arc_vrun (int)
</pre></example>

<para>The following take a <code>__v8hi</code> argument and two <code>int</code>
arguments and return a <code>__v8hi</code> result.  The second argument must
be a 3-bit compile time constants, indicating one the registers I0-I7,
and the third argument must be an 8-bit compile time constant.
</para>
<para><emph>Note:</emph> Although the equivalent hardware instructions do not take
an SIMD register as an operand, these builtins overwrite the relevant
bits of the <code>__v8hi</code> register provided as the first argument with
the value loaded from the <code>[Ib, u8]</code> location in the SDM.
</para>
<example endspaces=" ">
<pre xml:space="preserve">__v8hi __builtin_arc_vld32 (__v8hi, const int, const int)
__v8hi __builtin_arc_vld32wh (__v8hi, const int, const int)
__v8hi __builtin_arc_vld32wl (__v8hi, const int, const int)
__v8hi __builtin_arc_vld64 (__v8hi, const int, const int)
</pre></example>

<para>The following take two <code>int</code> arguments and return a <code>__v8hi</code>
result.  The first argument must be a 3-bit compile time constants,
indicating one the registers I0-I7, and the second argument must be an
8-bit compile time constant.
</para>
<example endspaces=" ">
<pre xml:space="preserve">__v8hi __builtin_arc_vld128 (const int, const int)
__v8hi __builtin_arc_vld64w (const int, const int)
</pre></example>

<para>The following take a <code>__v8hi</code> argument and two <code>int</code>
arguments and return no result.  The second argument must be a 3-bit
compile time constants, indicating one the registers I0-I7, and the
third argument must be an 8-bit compile time constant.
</para>
<example endspaces=" ">
<pre xml:space="preserve">void __builtin_arc_vst128 (__v8hi, const int, const int)
void __builtin_arc_vst64 (__v8hi, const int, const int)
</pre></example>

<para>The following take a <code>__v8hi</code> argument and three <code>int</code>
arguments and return no result.  The second argument must be a 3-bit
compile-time constant, identifying the 16-bit sub-register to be
stored, the third argument must be a 3-bit compile time constants,
indicating one the registers I0-I7, and the fourth argument must be an
8-bit compile time constant.
</para>
<example endspaces=" ">
<pre xml:space="preserve">void __builtin_arc_vst16_n (__v8hi, const int, const int, const int)
void __builtin_arc_vst32_n (__v8hi, const int, const int, const int)
</pre></example>

</subsection>
<node name="ARM-iWMMXt-Built_002din-Functions" spaces=" "><nodename>ARM iWMMXt Built-in Functions</nodename><nodenext automatic="on">ARM C Language Extensions (ACLE)</nodenext><nodeprev automatic="on">ARC SIMD Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>ARM iWMMXt Built-in Functions</sectiontitle>

<para>These built-in functions are available for the ARM family of
processors when the <option>-mcpu=iwmmxt</option> switch is used:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef int v2si __attribute__ ((vector_size (8)));
typedef short v4hi __attribute__ ((vector_size (8)));
typedef char v8qi __attribute__ ((vector_size (8)));

int __builtin_arm_getwcgr0 (void)
void __builtin_arm_setwcgr0 (int)
int __builtin_arm_getwcgr1 (void)
void __builtin_arm_setwcgr1 (int)
int __builtin_arm_getwcgr2 (void)
void __builtin_arm_setwcgr2 (int)
int __builtin_arm_getwcgr3 (void)
void __builtin_arm_setwcgr3 (int)
int __builtin_arm_textrmsb (v8qi, int)
int __builtin_arm_textrmsh (v4hi, int)
int __builtin_arm_textrmsw (v2si, int)
int __builtin_arm_textrmub (v8qi, int)
int __builtin_arm_textrmuh (v4hi, int)
int __builtin_arm_textrmuw (v2si, int)
v8qi __builtin_arm_tinsrb (v8qi, int, int)
v4hi __builtin_arm_tinsrh (v4hi, int, int)
v2si __builtin_arm_tinsrw (v2si, int, int)
long long __builtin_arm_tmia (long long, int, int)
long long __builtin_arm_tmiabb (long long, int, int)
long long __builtin_arm_tmiabt (long long, int, int)
long long __builtin_arm_tmiaph (long long, int, int)
long long __builtin_arm_tmiatb (long long, int, int)
long long __builtin_arm_tmiatt (long long, int, int)
int __builtin_arm_tmovmskb (v8qi)
int __builtin_arm_tmovmskh (v4hi)
int __builtin_arm_tmovmskw (v2si)
long long __builtin_arm_waccb (v8qi)
long long __builtin_arm_wacch (v4hi)
long long __builtin_arm_waccw (v2si)
v8qi __builtin_arm_waddb (v8qi, v8qi)
v8qi __builtin_arm_waddbss (v8qi, v8qi)
v8qi __builtin_arm_waddbus (v8qi, v8qi)
v4hi __builtin_arm_waddh (v4hi, v4hi)
v4hi __builtin_arm_waddhss (v4hi, v4hi)
v4hi __builtin_arm_waddhus (v4hi, v4hi)
v2si __builtin_arm_waddw (v2si, v2si)
v2si __builtin_arm_waddwss (v2si, v2si)
v2si __builtin_arm_waddwus (v2si, v2si)
v8qi __builtin_arm_walign (v8qi, v8qi, int)
long long __builtin_arm_wand(long long, long long)
long long __builtin_arm_wandn (long long, long long)
v8qi __builtin_arm_wavg2b (v8qi, v8qi)
v8qi __builtin_arm_wavg2br (v8qi, v8qi)
v4hi __builtin_arm_wavg2h (v4hi, v4hi)
v4hi __builtin_arm_wavg2hr (v4hi, v4hi)
v8qi __builtin_arm_wcmpeqb (v8qi, v8qi)
v4hi __builtin_arm_wcmpeqh (v4hi, v4hi)
v2si __builtin_arm_wcmpeqw (v2si, v2si)
v8qi __builtin_arm_wcmpgtsb (v8qi, v8qi)
v4hi __builtin_arm_wcmpgtsh (v4hi, v4hi)
v2si __builtin_arm_wcmpgtsw (v2si, v2si)
v8qi __builtin_arm_wcmpgtub (v8qi, v8qi)
v4hi __builtin_arm_wcmpgtuh (v4hi, v4hi)
v2si __builtin_arm_wcmpgtuw (v2si, v2si)
long long __builtin_arm_wmacs (long long, v4hi, v4hi)
long long __builtin_arm_wmacsz (v4hi, v4hi)
long long __builtin_arm_wmacu (long long, v4hi, v4hi)
long long __builtin_arm_wmacuz (v4hi, v4hi)
v4hi __builtin_arm_wmadds (v4hi, v4hi)
v4hi __builtin_arm_wmaddu (v4hi, v4hi)
v8qi __builtin_arm_wmaxsb (v8qi, v8qi)
v4hi __builtin_arm_wmaxsh (v4hi, v4hi)
v2si __builtin_arm_wmaxsw (v2si, v2si)
v8qi __builtin_arm_wmaxub (v8qi, v8qi)
v4hi __builtin_arm_wmaxuh (v4hi, v4hi)
v2si __builtin_arm_wmaxuw (v2si, v2si)
v8qi __builtin_arm_wminsb (v8qi, v8qi)
v4hi __builtin_arm_wminsh (v4hi, v4hi)
v2si __builtin_arm_wminsw (v2si, v2si)
v8qi __builtin_arm_wminub (v8qi, v8qi)
v4hi __builtin_arm_wminuh (v4hi, v4hi)
v2si __builtin_arm_wminuw (v2si, v2si)
v4hi __builtin_arm_wmulsm (v4hi, v4hi)
v4hi __builtin_arm_wmulul (v4hi, v4hi)
v4hi __builtin_arm_wmulum (v4hi, v4hi)
long long __builtin_arm_wor (long long, long long)
v2si __builtin_arm_wpackdss (long long, long long)
v2si __builtin_arm_wpackdus (long long, long long)
v8qi __builtin_arm_wpackhss (v4hi, v4hi)
v8qi __builtin_arm_wpackhus (v4hi, v4hi)
v4hi __builtin_arm_wpackwss (v2si, v2si)
v4hi __builtin_arm_wpackwus (v2si, v2si)
long long __builtin_arm_wrord (long long, long long)
long long __builtin_arm_wrordi (long long, int)
v4hi __builtin_arm_wrorh (v4hi, long long)
v4hi __builtin_arm_wrorhi (v4hi, int)
v2si __builtin_arm_wrorw (v2si, long long)
v2si __builtin_arm_wrorwi (v2si, int)
v2si __builtin_arm_wsadb (v2si, v8qi, v8qi)
v2si __builtin_arm_wsadbz (v8qi, v8qi)
v2si __builtin_arm_wsadh (v2si, v4hi, v4hi)
v2si __builtin_arm_wsadhz (v4hi, v4hi)
v4hi __builtin_arm_wshufh (v4hi, int)
long long __builtin_arm_wslld (long long, long long)
long long __builtin_arm_wslldi (long long, int)
v4hi __builtin_arm_wsllh (v4hi, long long)
v4hi __builtin_arm_wsllhi (v4hi, int)
v2si __builtin_arm_wsllw (v2si, long long)
v2si __builtin_arm_wsllwi (v2si, int)
long long __builtin_arm_wsrad (long long, long long)
long long __builtin_arm_wsradi (long long, int)
v4hi __builtin_arm_wsrah (v4hi, long long)
v4hi __builtin_arm_wsrahi (v4hi, int)
v2si __builtin_arm_wsraw (v2si, long long)
v2si __builtin_arm_wsrawi (v2si, int)
long long __builtin_arm_wsrld (long long, long long)
long long __builtin_arm_wsrldi (long long, int)
v4hi __builtin_arm_wsrlh (v4hi, long long)
v4hi __builtin_arm_wsrlhi (v4hi, int)
v2si __builtin_arm_wsrlw (v2si, long long)
v2si __builtin_arm_wsrlwi (v2si, int)
v8qi __builtin_arm_wsubb (v8qi, v8qi)
v8qi __builtin_arm_wsubbss (v8qi, v8qi)
v8qi __builtin_arm_wsubbus (v8qi, v8qi)
v4hi __builtin_arm_wsubh (v4hi, v4hi)
v4hi __builtin_arm_wsubhss (v4hi, v4hi)
v4hi __builtin_arm_wsubhus (v4hi, v4hi)
v2si __builtin_arm_wsubw (v2si, v2si)
v2si __builtin_arm_wsubwss (v2si, v2si)
v2si __builtin_arm_wsubwus (v2si, v2si)
v4hi __builtin_arm_wunpckehsb (v8qi)
v2si __builtin_arm_wunpckehsh (v4hi)
long long __builtin_arm_wunpckehsw (v2si)
v4hi __builtin_arm_wunpckehub (v8qi)
v2si __builtin_arm_wunpckehuh (v4hi)
long long __builtin_arm_wunpckehuw (v2si)
v4hi __builtin_arm_wunpckelsb (v8qi)
v2si __builtin_arm_wunpckelsh (v4hi)
long long __builtin_arm_wunpckelsw (v2si)
v4hi __builtin_arm_wunpckelub (v8qi)
v2si __builtin_arm_wunpckeluh (v4hi)
long long __builtin_arm_wunpckeluw (v2si)
v8qi __builtin_arm_wunpckihb (v8qi, v8qi)
v4hi __builtin_arm_wunpckihh (v4hi, v4hi)
v2si __builtin_arm_wunpckihw (v2si, v2si)
v8qi __builtin_arm_wunpckilb (v8qi, v8qi)
v4hi __builtin_arm_wunpckilh (v4hi, v4hi)
v2si __builtin_arm_wunpckilw (v2si, v2si)
long long __builtin_arm_wxor (long long, long long)
long long __builtin_arm_wzero ()
</pre></smallexample>


</subsection>
<node name="ARM-C-Language-Extensions-_0028ACLE_0029" spaces=" "><nodename>ARM C Language Extensions (ACLE)</nodename><nodenext automatic="on">ARM Floating Point Status and Control Intrinsics</nodenext><nodeprev automatic="on">ARM iWMMXt Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>ARM C Language Extensions (ACLE)</sectiontitle>

<para>GCC implements extensions for C as described in the ARM C Language
Extensions (ACLE) specification, which can be found at
<uref><urefurl>http://infocenter.arm.com/help/topic/com.arm.doc.ihi0053c/IHI0053C_acle_2_0.pdf</urefurl></uref>.
</para>
<para>As a part of ACLE, GCC implements extensions for Advanced SIMD as described in
the ARM C Language Extensions Specification.  The complete list of Advanced SIMD
intrinsics can be found at
<uref><urefurl>http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf</urefurl></uref>.
The built-in intrinsics for the Advanced SIMD extension are available when
NEON is enabled.
</para>
<para>Currently, ARM and AArch64 back ends do not support ACLE 2.0 fully.  Both
back ends support CRC32 intrinsics from <file>arm_acle.h</file>.  The ARM back end&textrsquo;s
16-bit floating-point Advanced SIMD intrinsics currently comply to ACLE v1.1.
AArch64&textrsquo;s back end does not have support for 16-bit floating point Advanced SIMD
intrinsics yet.
</para>
<para>See <ref label="ARM-Options"><xrefnodename>ARM Options</xrefnodename></ref> and <ref label="AArch64-Options"><xrefnodename>AArch64 Options</xrefnodename></ref> for more information on the
availability of extensions.
</para>
</subsection>
<node name="ARM-Floating-Point-Status-and-Control-Intrinsics" spaces=" "><nodename>ARM Floating Point Status and Control Intrinsics</nodename><nodenext automatic="on">AVR Built-in Functions</nodenext><nodeprev automatic="on">ARM C Language Extensions (ACLE)</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>ARM Floating Point Status and Control Intrinsics</sectiontitle>

<para>These built-in functions are available for the ARM family of
processors with floating-point unit.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">unsigned int __builtin_arm_get_fpscr ()
void __builtin_arm_set_fpscr (unsigned int)
</pre></smallexample>

</subsection>
<node name="AVR-Built_002din-Functions" spaces=" "><nodename>AVR Built-in Functions</nodename><nodenext automatic="on">Blackfin Built-in Functions</nodenext><nodeprev automatic="on">ARM Floating Point Status and Control Intrinsics</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>AVR Built-in Functions</sectiontitle>

<para>For each built-in function for AVR, there is an equally named,
uppercase built-in macro defined. That way users can easily query if
or if not a specific built-in is implemented or not. For example, if
<code>__builtin_avr_nop</code> is available the macro
<code>__BUILTIN_AVR_NOP</code> is defined to <code>1</code> and undefined otherwise.
</para>
<para>The following built-in functions map to the respective machine
instruction, i.e.&noeos; <code>nop</code>, <code>sei</code>, <code>cli</code>, <code>sleep</code>,
<code>wdr</code>, <code>swap</code>, <code>fmul</code>, <code>fmuls</code>
resp. <code>fmulsu</code>. The three <code>fmul*</code> built-ins are implemented
as library call if no hardware multiplier is available.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void __builtin_avr_nop (void)
void __builtin_avr_sei (void)
void __builtin_avr_cli (void)
void __builtin_avr_sleep (void)
void __builtin_avr_wdr (void)
unsigned char __builtin_avr_swap (unsigned char)
unsigned int __builtin_avr_fmul (unsigned char, unsigned char)
int __builtin_avr_fmuls (char, char)
int __builtin_avr_fmulsu (char, unsigned char)
</pre></smallexample>

<para>In order to delay execution for a specific number of cycles, GCC
implements
</para><smallexample endspaces=" ">
<pre xml:space="preserve">void __builtin_avr_delay_cycles (unsigned long ticks)
</pre></smallexample>

<noindent></noindent>
<para><code>ticks</code> is the number of ticks to delay execution. Note that this
built-in does not take into account the effect of interrupts that
might increase delay time. <code>ticks</code> must be a compile-time
integer constant; delays with a variable number of cycles are not supported.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">char __builtin_avr_flash_segment (const __memx void*)
</pre></smallexample>

<noindent></noindent>
<para>This built-in takes a byte address to the 24-bit
<ref label="AVR-Named-Address-Spaces"><xrefnodename>AVR Named Address Spaces</xrefnodename><xrefinfoname>address space</xrefinfoname></ref> <code>__memx</code> and returns
the number of the flash segment (the 64 KiB chunk) where the address
points to.  Counting starts at <code>0</code>.
If the address does not point to flash memory, return <code>-1</code>.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">unsigned char __builtin_avr_insert_bits (unsigned long map, unsigned char bits, unsigned char val)
</pre></smallexample>

<noindent></noindent>
<para>Insert bits from <var>bits</var> into <var>val</var> and return the resulting
value. The nibbles of <var>map</var> determine how the insertion is
performed: Let <var>X</var> be the <var>n</var>-th nibble of <var>map</var>
</para><enumerate first="1" endspaces=" ">
<listitem spaces=" "><para>If <var>X</var> is <code>0xf</code>,
then the <var>n</var>-th bit of <var>val</var> is returned unaltered.
</para>
</listitem><listitem spaces=" "><para>If X is in the range 0&dots;7,
then the <var>n</var>-th result bit is set to the <var>X</var>-th bit of <var>bits</var>
</para>
</listitem><listitem spaces=" "><para>If X is in the range 8&dots;<code>0xe</code>,
then the <var>n</var>-th result bit is undefined.
</para></listitem></enumerate>

<noindent></noindent>
<para>One typical use case for this built-in is adjusting input and
output values to non-contiguous port layouts. Some examples:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">// same as val, bits is unused
__builtin_avr_insert_bits (0xffffffff, bits, val)
</pre></smallexample>

<smallexample endspaces=" ">
<pre xml:space="preserve">// same as bits, val is unused
__builtin_avr_insert_bits (0x76543210, bits, val)
</pre></smallexample>

<smallexample endspaces=" ">
<pre xml:space="preserve">// same as rotating bits by 4
__builtin_avr_insert_bits (0x32107654, bits, 0)
</pre></smallexample>

<smallexample endspaces=" ">
<pre xml:space="preserve">// high nibble of result is the high nibble of val
// low nibble of result is the low nibble of bits
__builtin_avr_insert_bits (0xffff3210, bits, val)
</pre></smallexample>

<smallexample endspaces=" ">
<pre xml:space="preserve">// reverse the bit order of bits
__builtin_avr_insert_bits (0x01234567, bits, 0)
</pre></smallexample>

</subsection>
<node name="Blackfin-Built_002din-Functions" spaces=" "><nodename>Blackfin Built-in Functions</nodename><nodenext automatic="on">FR-V Built-in Functions</nodenext><nodeprev automatic="on">AVR Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>Blackfin Built-in Functions</sectiontitle>

<para>Currently, there are two Blackfin-specific built-in functions.  These are
used for generating <code>CSYNC</code> and <code>SSYNC</code> machine insns without
using inline assembly; by using these built-in functions the compiler can
automatically add workarounds for hardware errata involving these
instructions.  These functions are named as follows:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void __builtin_bfin_csync (void)
void __builtin_bfin_ssync (void)
</pre></smallexample>

</subsection>
<node name="FR_002dV-Built_002din-Functions" spaces=" "><nodename>FR-V Built-in Functions</nodename><nodenext automatic="on">MIPS DSP Built-in Functions</nodenext><nodeprev automatic="on">Blackfin Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>FR-V Built-in Functions</sectiontitle>

<para>GCC provides many FR-V-specific built-in functions.  In general,
these functions are intended to be compatible with those described
by <cite>FR-V Family, Softune C/C++ Compiler Manual (V6), Fujitsu
Semiconductor</cite>.  The two exceptions are <code>__MDUNPACKH</code> and
<code>__MBTOHE</code>, the GCC forms of which pass 128-bit values by
pointer rather than by value.
</para>
<para>Most of the functions are named after specific FR-V instructions.
Such functions are said to be &textldquo;directly mapped&textrdquo; and are summarized
here in tabular form.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Argument Types</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Directly-mapped Integer Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Directly-mapped Media Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Raw read/write Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Other Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="Argument-Types" spaces=" "><nodename>Argument Types</nodename><nodenext automatic="on">Directly-mapped Integer Functions</nodenext><nodeup automatic="on">FR-V Built-in Functions</nodeup></node>
<subsubsection spaces=" "><sectiontitle>Argument Types</sectiontitle>

<para>The arguments to the built-in functions can be divided into three groups:
register numbers, compile-time constants and run-time values.  In order
to make this classification clear at a glance, the arguments and return
values are given the following pseudo types:
</para>
<multitable spaces=" " endspaces=" "><columnfractions line=" .20 .30 .15 .35"><columnfraction value=".20"></columnfraction><columnfraction value=".30"></columnfraction><columnfraction value=".15"></columnfraction><columnfraction value=".35"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para>Pseudo type </para></entry><entry command="tab" spaces=" "><para>Real C type </para></entry><entry command="tab" spaces=" "><para>Constant? </para></entry><entry command="tab" spaces=" "><para>Description
</para></entry></row><row><entry command="item" spaces=" "><para><code>uh</code> </para></entry><entry command="tab" spaces=" "><para><code>unsigned short</code> </para></entry><entry command="tab" spaces=" "><para>No </para></entry><entry command="tab" spaces=" "><para>an unsigned halfword
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1</code> </para></entry><entry command="tab" spaces=" "><para><code>unsigned int</code> </para></entry><entry command="tab" spaces=" "><para>No </para></entry><entry command="tab" spaces=" "><para>an unsigned word
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1</code> </para></entry><entry command="tab" spaces=" "><para><code>int</code> </para></entry><entry command="tab" spaces=" "><para>No </para></entry><entry command="tab" spaces=" "><para>a signed word
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw2</code> </para></entry><entry command="tab" spaces=" "><para><code>unsigned long long</code> </para></entry><entry command="tab" spaces=" "><para>No
</para></entry><entry command="tab" spaces=" "><para>an unsigned doubleword
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw2</code> </para></entry><entry command="tab" spaces=" "><para><code>long long</code> </para></entry><entry command="tab" spaces=" "><para>No </para></entry><entry command="tab" spaces=" "><para>a signed doubleword
</para></entry></row><row><entry command="item" spaces=" "><para><code>const</code> </para></entry><entry command="tab" spaces=" "><para><code>int</code> </para></entry><entry command="tab" spaces=" "><para>Yes </para></entry><entry command="tab" spaces=" "><para>an integer constant
</para></entry></row><row><entry command="item" spaces=" "><para><code>acc</code> </para></entry><entry command="tab" spaces=" "><para><code>int</code> </para></entry><entry command="tab" spaces=" "><para>Yes </para></entry><entry command="tab" spaces=" "><para>an ACC register number
</para></entry></row><row><entry command="item" spaces=" "><para><code>iacc</code> </para></entry><entry command="tab" spaces=" "><para><code>int</code> </para></entry><entry command="tab" spaces=" "><para>Yes </para></entry><entry command="tab" spaces=" "><para>an IACC register number
</para></entry></row></tbody></multitable>

<para>These pseudo types are not defined by GCC, they are simply a notational
convenience used in this manual.
</para>
<para>Arguments of type <code>uh</code>, <code>uw1</code>, <code>sw1</code>, <code>uw2</code>
and <code>sw2</code> are evaluated at run time.  They correspond to
register operands in the underlying FR-V instructions.
</para>
<para><code>const</code> arguments represent immediate operands in the underlying
FR-V instructions.  They must be compile-time constants.
</para>
<para><code>acc</code> arguments are evaluated at compile time and specify the number
of an accumulator register.  For example, an <code>acc</code> argument of 2
selects the ACC2 register.
</para>
<para><code>iacc</code> arguments are similar to <code>acc</code> arguments but specify the
number of an IACC register.  See <pxref label="Other-Built_002din-Functions"><xrefnodename>Other Built-in Functions</xrefnodename></pxref>
for more details.
</para>
</subsubsection>
<node name="Directly_002dmapped-Integer-Functions" spaces=" "><nodename>Directly-mapped Integer Functions</nodename><nodenext automatic="on">Directly-mapped Media Functions</nodenext><nodeprev automatic="on">Argument Types</nodeprev><nodeup automatic="on">FR-V Built-in Functions</nodeup></node>
<subsubsection spaces=" "><sectiontitle>Directly-Mapped Integer Functions</sectiontitle>

<para>The functions listed below map directly to FR-V I-type instructions.
</para>
<multitable spaces=" " endspaces=" "><columnfractions line=" .45 .32 .23"><columnfraction value=".45"></columnfraction><columnfraction value=".32"></columnfraction><columnfraction value=".23"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para>Function prototype </para></entry><entry command="tab" spaces=" "><para>Example usage </para></entry><entry command="tab" spaces=" "><para>Assembly output
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1 __ADDSS (sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __ADDSS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>ADDSS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1 __SCAN (sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __SCAN (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>SCAN <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1 __SCUTSS (sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __SCUTSS (<var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>SCUTSS <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1 __SLASS (sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __SLASS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>SLASS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __SMASS (sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__SMASS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>SMASS <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __SMSSS (sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__SMSSS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>SMSSS <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __SMU (sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__SMU (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>SMU <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw2 __SMUL (sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __SMUL (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>SMUL <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1 __SUBSS (sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __SUBSS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>SUBSS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw2 __UMUL (uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __UMUL (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>UMUL <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row></tbody></multitable>

</subsubsection>
<node name="Directly_002dmapped-Media-Functions" spaces=" "><nodename>Directly-mapped Media Functions</nodename><nodenext automatic="on">Raw read/write Functions</nodenext><nodeprev automatic="on">Directly-mapped Integer Functions</nodeprev><nodeup automatic="on">FR-V Built-in Functions</nodeup></node>
<subsubsection spaces=" "><sectiontitle>Directly-Mapped Media Functions</sectiontitle>

<para>The functions listed below map directly to FR-V M-type instructions.
</para>
<multitable spaces=" " endspaces=" "><columnfractions line=" .45 .32 .23"><columnfraction value=".45"></columnfraction><columnfraction value=".32"></columnfraction><columnfraction value=".23"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para>Function prototype </para></entry><entry command="tab" spaces=" "><para>Example usage </para></entry><entry command="tab" spaces=" "><para>Assembly output
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MABSHS (sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __MABSHS (<var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MABSHS <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MADDACCS (acc, acc)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MADDACCS (<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MADDACCS <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1 __MADDHSS (sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MADDHSS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MADDHSS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MADDHUS (uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MADDHUS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MADDHUS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MAND (uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MAND (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MAND <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MASACCS (acc, acc)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MASACCS (<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MASACCS <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MAVEH (uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MAVEH (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MAVEH <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw2 __MBTOH (uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __MBTOH (<var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MBTOH <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MBTOHE (uw1 *, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MBTOHE (&amp;<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MBTOHE <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MCLRACC (acc)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MCLRACC (<var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MCLRACC <var>a</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MCLRACCA (void)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MCLRACCA ()</code>
</para></entry><entry command="tab" spaces=" "><para><code>MCLRACCA</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __Mcop1 (uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __Mcop1 (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>Mcop1 <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __Mcop2 (uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __Mcop2 (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>Mcop2 <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MCPLHI (uw2, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MCPLHI (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MCPLHI <var>a</var>,#<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MCPLI (uw2, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MCPLI (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MCPLI <var>a</var>,#<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MCPXIS (acc, sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MCPXIS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MCPXIS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MCPXIU (acc, uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MCPXIU (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MCPXIU <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MCPXRS (acc, sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MCPXRS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MCPXRS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MCPXRU (acc, uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MCPXRU (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MCPXRU <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MCUT (acc, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MCUT (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MCUT <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MCUTSS (acc, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MCUTSS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MCUTSS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MDADDACCS (acc, acc)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MDADDACCS (<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MDADDACCS <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MDASACCS (acc, acc)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MDASACCS (<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MDASACCS <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw2 __MDCUTSSI (acc, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MDCUTSSI (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MDCUTSSI <var>a</var>,#<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw2 __MDPACKH (uw2, uw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MDPACKH (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MDPACKH <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw2 __MDROTLI (uw2, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MDROTLI (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MDROTLI <var>a</var>,#<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MDSUBACCS (acc, acc)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MDSUBACCS (<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MDSUBACCS <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MDUNPACKH (uw1 *, uw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MDUNPACKH (&amp;<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MDUNPACKH <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw2 __MEXPDHD (uw1, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MEXPDHD (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MEXPDHD <var>a</var>,#<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MEXPDHW (uw1, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MEXPDHW (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MEXPDHW <var>a</var>,#<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MHDSETH (uw1, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MHDSETH (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MHDSETH <var>a</var>,#<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1 __MHDSETS (const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __MHDSETS (<var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MHDSETS #<var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MHSETHIH (uw1, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __MHSETHIH (<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MHSETHIH #<var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1 __MHSETHIS (sw1, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __MHSETHIS (<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MHSETHIS #<var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MHSETLOH (uw1, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __MHSETLOH (<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MHSETLOH #<var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1 __MHSETLOS (sw1, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __MHSETLOS (<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MHSETLOS #<var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MHTOB (uw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __MHTOB (<var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MHTOB <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MMACHS (acc, sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MMACHS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MMACHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MMACHU (acc, uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MMACHU (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MMACHU <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MMRDHS (acc, sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MMRDHS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MMRDHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MMRDHU (acc, uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MMRDHU (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MMRDHU <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MMULHS (acc, sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MMULHS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MMULHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MMULHU (acc, uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MMULHU (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MMULHU <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MMULXHS (acc, sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MMULXHS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MMULXHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MMULXHU (acc, uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MMULXHU (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MMULXHU <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MNOT (uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __MNOT (<var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MNOT <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MOR (uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MOR (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MOR <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MPACKH (uh, uh)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MPACKH (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MPACKH <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw2 __MQADDHSS (sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MQADDHSS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQADDHSS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw2 __MQADDHUS (uw2, uw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MQADDHUS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQADDHUS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQCPXIS (acc, sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQCPXIS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQCPXIS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQCPXIU (acc, uw2, uw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQCPXIU (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQCPXIU <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQCPXRS (acc, sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQCPXRS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQCPXRS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQCPXRU (acc, uw2, uw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQCPXRU (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQCPXRU <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw2 __MQLCLRHS (sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MQLCLRHS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQLCLRHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw2 __MQLMTHS (sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MQLMTHS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQLMTHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQMACHS (acc, sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQMACHS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQMACHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQMACHU (acc, uw2, uw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQMACHU (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQMACHU <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQMACXHS (acc, sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQMACXHS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQMACXHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQMULHS (acc, sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQMULHS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQMULHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQMULHU (acc, uw2, uw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQMULHU (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQMULHU <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQMULXHS (acc, sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQMULXHS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQMULXHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQMULXHU (acc, uw2, uw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQMULXHU (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQMULXHU <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw2 __MQSATHS (sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MQSATHS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQSATHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw2 __MQSLLHI (uw2, int)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MQSLLHI (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQSLLHI <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw2 __MQSRAHI (sw2, int)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MQSRAHI (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQSRAHI <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw2 __MQSUBHSS (sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MQSUBHSS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQSUBHSS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw2 __MQSUBHUS (uw2, uw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MQSUBHUS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQSUBHUS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQXMACHS (acc, sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQXMACHS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQXMACHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MQXMACXHS (acc, sw2, sw2)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MQXMACXHS (<var>c</var>, <var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MQXMACXHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MRDACC (acc)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __MRDACC (<var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MRDACC <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MRDACCG (acc)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __MRDACCG (<var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MRDACCG <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MROTLI (uw1, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MROTLI (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MROTLI <var>a</var>,#<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MROTRI (uw1, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MROTRI (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MROTRI <var>a</var>,#<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1 __MSATHS (sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MSATHS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MSATHS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MSATHU (uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MSATHU (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MSATHU <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MSLLHI (uw1, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MSLLHI (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MSLLHI <var>a</var>,#<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1 __MSRAHI (sw1, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MSRAHI (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MSRAHI <var>a</var>,#<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MSRLHI (uw1, const)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MSRLHI (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MSRLHI <var>a</var>,#<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MSUBACCS (acc, acc)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MSUBACCS (<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MSUBACCS <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>sw1 __MSUBHSS (sw1, sw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MSUBHSS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MSUBHSS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MSUBHUS (uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MSUBHUS (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MSUBHUS <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MTRAP (void)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MTRAP ()</code>
</para></entry><entry command="tab" spaces=" "><para><code>MTRAP</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw2 __MUNPACKH (uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>b</var> = __MUNPACKH (<var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MUNPACKH <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MWCUT (uw2, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MWCUT (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MWCUT <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MWTACC (acc, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MWTACC (<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MWTACC <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void __MWTACCG (acc, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code>__MWTACCG (<var>b</var>, <var>a</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MWTACCG <var>a</var>,<var>b</var></code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>uw1 __MXOR (uw1, uw1)</code>
</para></entry><entry command="tab" spaces=" "><para><code><var>c</var> = __MXOR (<var>a</var>, <var>b</var>)</code>
</para></entry><entry command="tab" spaces=" "><para><code>MXOR <var>a</var>,<var>b</var>,<var>c</var></code>
</para></entry></row></tbody></multitable>

</subsubsection>
<node name="Raw-read_002fwrite-Functions" spaces=" "><nodename>Raw read/write Functions</nodename><nodenext automatic="on">Other Built-in Functions</nodenext><nodeprev automatic="on">Directly-mapped Media Functions</nodeprev><nodeup automatic="on">FR-V Built-in Functions</nodeup></node>
<subsubsection spaces=" "><sectiontitle>Raw Read/Write Functions</sectiontitle>

<para>This sections describes built-in functions related to read and write
instructions to access memory.  These functions generate
<code>membar</code> instructions to flush the I/O load and stores where
appropriate, as described in Fujitsu&textrsquo;s manual described above.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">unsigned char __builtin_read8 (void *<var>data</var>)</itemformat></item>
</tableterm></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">unsigned short __builtin_read16 (void *<var>data</var>)</itemformat></item>
</tableterm></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">unsigned long __builtin_read32 (void *<var>data</var>)</itemformat></item>
</tableterm></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">unsigned long long __builtin_read64 (void *<var>data</var>)</itemformat></item>
</tableterm><tableitem>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __builtin_write8 (void *<var>data</var>, unsigned char <var>datum</var>)</itemformat></item>
</tableterm></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __builtin_write16 (void *<var>data</var>, unsigned short <var>datum</var>)</itemformat></item>
</tableterm></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __builtin_write32 (void *<var>data</var>, unsigned long <var>datum</var>)</itemformat></item>
</tableterm></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __builtin_write64 (void *<var>data</var>, unsigned long long <var>datum</var>)</itemformat></item>
</tableterm></tableentry></table>

</subsubsection>
<node name="Other-Built_002din-Functions" spaces=" "><nodename>Other Built-in Functions</nodename><nodeprev automatic="on">Raw read/write Functions</nodeprev><nodeup automatic="on">FR-V Built-in Functions</nodeup></node>
<subsubsection spaces=" "><sectiontitle>Other Built-in Functions</sectiontitle>

<para>This section describes built-in functions that are not named after
a specific FR-V instruction.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">sw2 __IACCreadll (iacc <var>reg</var>)</itemformat></item>
</tableterm><tableitem><para>Return the full 64-bit value of IACC0&eosperiod;  The <var>reg</var> argument is reserved
for future expansion and must be 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">sw1 __IACCreadl (iacc <var>reg</var>)</itemformat></item>
</tableterm><tableitem><para>Return the value of IACC0H if <var>reg</var> is 0 and IACC0L if <var>reg</var> is 1.
Other values of <var>reg</var> are rejected as invalid.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __IACCsetll (iacc <var>reg</var>, sw2 <var>x</var>)</itemformat></item>
</tableterm><tableitem><para>Set the full 64-bit value of IACC0 to <var>x</var>.  The <var>reg</var> argument
is reserved for future expansion and must be 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __IACCsetl (iacc <var>reg</var>, sw1 <var>x</var>)</itemformat></item>
</tableterm><tableitem><para>Set IACC0H to <var>x</var> if <var>reg</var> is 0 and IACC0L to <var>x</var> if <var>reg</var>
is 1.  Other values of <var>reg</var> are rejected as invalid.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __data_prefetch0 (const void *<var>x</var>)</itemformat></item>
</tableterm><tableitem><para>Use the <code>dcpl</code> instruction to load the contents of address <var>x</var>
into the data cache.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __data_prefetch (const void *<var>x</var>)</itemformat></item>
</tableterm><tableitem><para>Use the <code>nldub</code> instruction to load the contents of address <var>x</var>
into the data cache.  The instruction is issued in slot I1&eosperiod;
</para></tableitem></tableentry></table>

</subsubsection>
</subsection>
<node name="MIPS-DSP-Built_002din-Functions" spaces=" "><nodename>MIPS DSP Built-in Functions</nodename><nodenext automatic="on">MIPS Paired-Single Support</nodenext><nodeprev automatic="on">FR-V Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>MIPS DSP Built-in Functions</sectiontitle>

<para>The MIPS DSP Application-Specific Extension (ASE) includes new
instructions that are designed to improve the performance of DSP and
media applications.  It provides instructions that operate on packed
8-bit/16-bit integer data, Q7, Q15 and Q31 fractional data.
</para>
<para>GCC supports MIPS DSP operations using both the generic
vector extensions (<pxref label="Vector-Extensions"><xrefnodename>Vector Extensions</xrefnodename></pxref>) and a collection of
MIPS-specific built-in functions.  Both kinds of support are
enabled by the <option>-mdsp</option> command-line option.
</para>
<para>Revision 2 of the ASE was introduced in the second half of 2006.
This revision adds extra instructions to the original ASE, but is
otherwise backwards-compatible with it.  You can select revision 2
using the command-line option <option>-mdspr2</option>; this option implies
<option>-mdsp</option>.
</para>
<para>The SCOUNT and POS bits of the DSP control register are global.  The
WRDSP, EXTPDP, EXTPDPV and MTHLIP instructions modify the SCOUNT and
POS bits.  During optimization, the compiler does not delete these
instructions and it does not delete calls to functions containing
these instructions.
</para>
<para>At present, GCC only provides support for operations on 32-bit
vectors.  The vector type associated with 8-bit integer data is
usually called <code>v4i8</code>, the vector type associated with Q7
is usually called <code>v4q7</code>, the vector type associated with 16-bit
integer data is usually called <code>v2i16</code>, and the vector type
associated with Q15 is usually called <code>v2q15</code>.  They can be
defined in C as follows:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef signed char v4i8 __attribute__ ((vector_size(4)));
typedef signed char v4q7 __attribute__ ((vector_size(4)));
typedef short v2i16 __attribute__ ((vector_size(4)));
typedef short v2q15 __attribute__ ((vector_size(4)));
</pre></smallexample>

<para><code>v4i8</code>, <code>v4q7</code>, <code>v2i16</code> and <code>v2q15</code> values are
initialized in the same way as aggregates.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v4i8 a = &lbrace;1, 2, 3, 4&rbrace;;
v4i8 b;
b = (v4i8) &lbrace;5, 6, 7, 8&rbrace;;

v2q15 c = &lbrace;0x0fcb, 0x3a75&rbrace;;
v2q15 d;
d = (v2q15) &lbrace;0.1234 * 0x1.0p15, 0.4567 * 0x1.0p15&rbrace;;
</pre></smallexample>

<para><emph>Note:</emph> The CPU&textrsquo;s endianness determines the order in which values
are packed.  On little-endian targets, the first value is the least
significant and the last value is the most significant.  The opposite
order applies to big-endian targets.  For example, the code above
sets the lowest byte of <code>a</code> to <code>1</code> on little-endian targets
and <code>4</code> on big-endian targets.
</para>
<para><emph>Note:</emph> Q7, Q15 and Q31 values must be initialized with their integer
representation.  As shown in this example, the integer representation
of a Q7 value can be obtained by multiplying the fractional value by
<code>0x1.0p7</code>.  The equivalent for Q15 values is to multiply by
<code>0x1.0p15</code>.  The equivalent for Q31 values is to multiply by
<code>0x1.0p31</code>.
</para>
<para>The table below lists the <code>v4i8</code> and <code>v2q15</code> operations for which
hardware support exists.  <code>a</code> and <code>b</code> are <code>v4i8</code> values,
and <code>c</code> and <code>d</code> are <code>v2q15</code> values.
</para>
<multitable spaces=" " endspaces=" "><columnfractions line=" .50 .50"><columnfraction value=".50"></columnfraction><columnfraction value=".50"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para>C code </para></entry><entry command="tab" spaces=" "><para>MIPS instruction
</para></entry></row><row><entry command="item" spaces=" "><para><code>a + b</code> </para></entry><entry command="tab" spaces=" "><para><code>addu.qb</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>c + d</code> </para></entry><entry command="tab" spaces=" "><para><code>addq.ph</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>a - b</code> </para></entry><entry command="tab" spaces=" "><para><code>subu.qb</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>c - d</code> </para></entry><entry command="tab" spaces=" "><para><code>subq.ph</code>
</para></entry></row></tbody></multitable>

<para>The table below lists the <code>v2i16</code> operation for which
hardware support exists for the DSP ASE REV 2.  <code>e</code> and <code>f</code> are
<code>v2i16</code> values.
</para>
<multitable spaces=" " endspaces=" "><columnfractions line=" .50 .50"><columnfraction value=".50"></columnfraction><columnfraction value=".50"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para>C code </para></entry><entry command="tab" spaces=" "><para>MIPS instruction
</para></entry></row><row><entry command="item" spaces=" "><para><code>e * f</code> </para></entry><entry command="tab" spaces=" "><para><code>mul.ph</code>
</para></entry></row></tbody></multitable>

<para>It is easier to describe the DSP built-in functions if we first define
the following types:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef int q31;
typedef int i32;
typedef unsigned int ui32;
typedef long long a64;
</pre></smallexample>

<para><code>q31</code> and <code>i32</code> are actually the same as <code>int</code>, but we
use <code>q31</code> to indicate a Q31 fractional value and <code>i32</code> to
indicate a 32-bit integer value.  Similarly, <code>a64</code> is the same as
<code>long long</code>, but we use <code>a64</code> to indicate values that are
placed in one of the four DSP accumulators (<code>$ac0</code>,
<code>$ac1</code>, <code>$ac2</code> or <code>$ac3</code>).
</para>
<para>Also, some built-in functions prefer or require immediate numbers as
parameters, because the corresponding DSP instructions accept both immediate
numbers and register operands, or accept immediate numbers only.  The
immediate parameters are listed as follows.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">imm0_3: 0 to 3.
imm0_7: 0 to 7.
imm0_15: 0 to 15.
imm0_31: 0 to 31.
imm0_63: 0 to 63.
imm0_255: 0 to 255.
imm_n32_31: -32 to 31.
imm_n512_511: -512 to 511.
</pre></smallexample>

<para>The following built-in functions map directly to a particular MIPS DSP
instruction.  Please refer to the architecture specification
for details on what each instruction does.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v2q15 __builtin_mips_addq_ph (v2q15, v2q15)
v2q15 __builtin_mips_addq_s_ph (v2q15, v2q15)
q31 __builtin_mips_addq_s_w (q31, q31)
v4i8 __builtin_mips_addu_qb (v4i8, v4i8)
v4i8 __builtin_mips_addu_s_qb (v4i8, v4i8)
v2q15 __builtin_mips_subq_ph (v2q15, v2q15)
v2q15 __builtin_mips_subq_s_ph (v2q15, v2q15)
q31 __builtin_mips_subq_s_w (q31, q31)
v4i8 __builtin_mips_subu_qb (v4i8, v4i8)
v4i8 __builtin_mips_subu_s_qb (v4i8, v4i8)
i32 __builtin_mips_addsc (i32, i32)
i32 __builtin_mips_addwc (i32, i32)
i32 __builtin_mips_modsub (i32, i32)
i32 __builtin_mips_raddu_w_qb (v4i8)
v2q15 __builtin_mips_absq_s_ph (v2q15)
q31 __builtin_mips_absq_s_w (q31)
v4i8 __builtin_mips_precrq_qb_ph (v2q15, v2q15)
v2q15 __builtin_mips_precrq_ph_w (q31, q31)
v2q15 __builtin_mips_precrq_rs_ph_w (q31, q31)
v4i8 __builtin_mips_precrqu_s_qb_ph (v2q15, v2q15)
q31 __builtin_mips_preceq_w_phl (v2q15)
q31 __builtin_mips_preceq_w_phr (v2q15)
v2q15 __builtin_mips_precequ_ph_qbl (v4i8)
v2q15 __builtin_mips_precequ_ph_qbr (v4i8)
v2q15 __builtin_mips_precequ_ph_qbla (v4i8)
v2q15 __builtin_mips_precequ_ph_qbra (v4i8)
v2q15 __builtin_mips_preceu_ph_qbl (v4i8)
v2q15 __builtin_mips_preceu_ph_qbr (v4i8)
v2q15 __builtin_mips_preceu_ph_qbla (v4i8)
v2q15 __builtin_mips_preceu_ph_qbra (v4i8)
v4i8 __builtin_mips_shll_qb (v4i8, imm0_7)
v4i8 __builtin_mips_shll_qb (v4i8, i32)
v2q15 __builtin_mips_shll_ph (v2q15, imm0_15)
v2q15 __builtin_mips_shll_ph (v2q15, i32)
v2q15 __builtin_mips_shll_s_ph (v2q15, imm0_15)
v2q15 __builtin_mips_shll_s_ph (v2q15, i32)
q31 __builtin_mips_shll_s_w (q31, imm0_31)
q31 __builtin_mips_shll_s_w (q31, i32)
v4i8 __builtin_mips_shrl_qb (v4i8, imm0_7)
v4i8 __builtin_mips_shrl_qb (v4i8, i32)
v2q15 __builtin_mips_shra_ph (v2q15, imm0_15)
v2q15 __builtin_mips_shra_ph (v2q15, i32)
v2q15 __builtin_mips_shra_r_ph (v2q15, imm0_15)
v2q15 __builtin_mips_shra_r_ph (v2q15, i32)
q31 __builtin_mips_shra_r_w (q31, imm0_31)
q31 __builtin_mips_shra_r_w (q31, i32)
v2q15 __builtin_mips_muleu_s_ph_qbl (v4i8, v2q15)
v2q15 __builtin_mips_muleu_s_ph_qbr (v4i8, v2q15)
v2q15 __builtin_mips_mulq_rs_ph (v2q15, v2q15)
q31 __builtin_mips_muleq_s_w_phl (v2q15, v2q15)
q31 __builtin_mips_muleq_s_w_phr (v2q15, v2q15)
a64 __builtin_mips_dpau_h_qbl (a64, v4i8, v4i8)
a64 __builtin_mips_dpau_h_qbr (a64, v4i8, v4i8)
a64 __builtin_mips_dpsu_h_qbl (a64, v4i8, v4i8)
a64 __builtin_mips_dpsu_h_qbr (a64, v4i8, v4i8)
a64 __builtin_mips_dpaq_s_w_ph (a64, v2q15, v2q15)
a64 __builtin_mips_dpaq_sa_l_w (a64, q31, q31)
a64 __builtin_mips_dpsq_s_w_ph (a64, v2q15, v2q15)
a64 __builtin_mips_dpsq_sa_l_w (a64, q31, q31)
a64 __builtin_mips_mulsaq_s_w_ph (a64, v2q15, v2q15)
a64 __builtin_mips_maq_s_w_phl (a64, v2q15, v2q15)
a64 __builtin_mips_maq_s_w_phr (a64, v2q15, v2q15)
a64 __builtin_mips_maq_sa_w_phl (a64, v2q15, v2q15)
a64 __builtin_mips_maq_sa_w_phr (a64, v2q15, v2q15)
i32 __builtin_mips_bitrev (i32)
i32 __builtin_mips_insv (i32, i32)
v4i8 __builtin_mips_repl_qb (imm0_255)
v4i8 __builtin_mips_repl_qb (i32)
v2q15 __builtin_mips_repl_ph (imm_n512_511)
v2q15 __builtin_mips_repl_ph (i32)
void __builtin_mips_cmpu_eq_qb (v4i8, v4i8)
void __builtin_mips_cmpu_lt_qb (v4i8, v4i8)
void __builtin_mips_cmpu_le_qb (v4i8, v4i8)
i32 __builtin_mips_cmpgu_eq_qb (v4i8, v4i8)
i32 __builtin_mips_cmpgu_lt_qb (v4i8, v4i8)
i32 __builtin_mips_cmpgu_le_qb (v4i8, v4i8)
void __builtin_mips_cmp_eq_ph (v2q15, v2q15)
void __builtin_mips_cmp_lt_ph (v2q15, v2q15)
void __builtin_mips_cmp_le_ph (v2q15, v2q15)
v4i8 __builtin_mips_pick_qb (v4i8, v4i8)
v2q15 __builtin_mips_pick_ph (v2q15, v2q15)
v2q15 __builtin_mips_packrl_ph (v2q15, v2q15)
i32 __builtin_mips_extr_w (a64, imm0_31)
i32 __builtin_mips_extr_w (a64, i32)
i32 __builtin_mips_extr_r_w (a64, imm0_31)
i32 __builtin_mips_extr_s_h (a64, i32)
i32 __builtin_mips_extr_rs_w (a64, imm0_31)
i32 __builtin_mips_extr_rs_w (a64, i32)
i32 __builtin_mips_extr_s_h (a64, imm0_31)
i32 __builtin_mips_extr_r_w (a64, i32)
i32 __builtin_mips_extp (a64, imm0_31)
i32 __builtin_mips_extp (a64, i32)
i32 __builtin_mips_extpdp (a64, imm0_31)
i32 __builtin_mips_extpdp (a64, i32)
a64 __builtin_mips_shilo (a64, imm_n32_31)
a64 __builtin_mips_shilo (a64, i32)
a64 __builtin_mips_mthlip (a64, i32)
void __builtin_mips_wrdsp (i32, imm0_63)
i32 __builtin_mips_rddsp (imm0_63)
i32 __builtin_mips_lbux (void *, i32)
i32 __builtin_mips_lhx (void *, i32)
i32 __builtin_mips_lwx (void *, i32)
a64 __builtin_mips_ldx (void *, i32) [MIPS64 only]
i32 __builtin_mips_bposge32 (void)
a64 __builtin_mips_madd (a64, i32, i32);
a64 __builtin_mips_maddu (a64, ui32, ui32);
a64 __builtin_mips_msub (a64, i32, i32);
a64 __builtin_mips_msubu (a64, ui32, ui32);
a64 __builtin_mips_mult (i32, i32);
a64 __builtin_mips_multu (ui32, ui32);
</pre></smallexample>

<para>The following built-in functions map directly to a particular MIPS DSP REV 2
instruction.  Please refer to the architecture specification
for details on what each instruction does.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v4q7 __builtin_mips_absq_s_qb (v4q7);
v2i16 __builtin_mips_addu_ph (v2i16, v2i16);
v2i16 __builtin_mips_addu_s_ph (v2i16, v2i16);
v4i8 __builtin_mips_adduh_qb (v4i8, v4i8);
v4i8 __builtin_mips_adduh_r_qb (v4i8, v4i8);
i32 __builtin_mips_append (i32, i32, imm0_31);
i32 __builtin_mips_balign (i32, i32, imm0_3);
i32 __builtin_mips_cmpgdu_eq_qb (v4i8, v4i8);
i32 __builtin_mips_cmpgdu_lt_qb (v4i8, v4i8);
i32 __builtin_mips_cmpgdu_le_qb (v4i8, v4i8);
a64 __builtin_mips_dpa_w_ph (a64, v2i16, v2i16);
a64 __builtin_mips_dps_w_ph (a64, v2i16, v2i16);
v2i16 __builtin_mips_mul_ph (v2i16, v2i16);
v2i16 __builtin_mips_mul_s_ph (v2i16, v2i16);
q31 __builtin_mips_mulq_rs_w (q31, q31);
v2q15 __builtin_mips_mulq_s_ph (v2q15, v2q15);
q31 __builtin_mips_mulq_s_w (q31, q31);
a64 __builtin_mips_mulsa_w_ph (a64, v2i16, v2i16);
v4i8 __builtin_mips_precr_qb_ph (v2i16, v2i16);
v2i16 __builtin_mips_precr_sra_ph_w (i32, i32, imm0_31);
v2i16 __builtin_mips_precr_sra_r_ph_w (i32, i32, imm0_31);
i32 __builtin_mips_prepend (i32, i32, imm0_31);
v4i8 __builtin_mips_shra_qb (v4i8, imm0_7);
v4i8 __builtin_mips_shra_r_qb (v4i8, imm0_7);
v4i8 __builtin_mips_shra_qb (v4i8, i32);
v4i8 __builtin_mips_shra_r_qb (v4i8, i32);
v2i16 __builtin_mips_shrl_ph (v2i16, imm0_15);
v2i16 __builtin_mips_shrl_ph (v2i16, i32);
v2i16 __builtin_mips_subu_ph (v2i16, v2i16);
v2i16 __builtin_mips_subu_s_ph (v2i16, v2i16);
v4i8 __builtin_mips_subuh_qb (v4i8, v4i8);
v4i8 __builtin_mips_subuh_r_qb (v4i8, v4i8);
v2q15 __builtin_mips_addqh_ph (v2q15, v2q15);
v2q15 __builtin_mips_addqh_r_ph (v2q15, v2q15);
q31 __builtin_mips_addqh_w (q31, q31);
q31 __builtin_mips_addqh_r_w (q31, q31);
v2q15 __builtin_mips_subqh_ph (v2q15, v2q15);
v2q15 __builtin_mips_subqh_r_ph (v2q15, v2q15);
q31 __builtin_mips_subqh_w (q31, q31);
q31 __builtin_mips_subqh_r_w (q31, q31);
a64 __builtin_mips_dpax_w_ph (a64, v2i16, v2i16);
a64 __builtin_mips_dpsx_w_ph (a64, v2i16, v2i16);
a64 __builtin_mips_dpaqx_s_w_ph (a64, v2q15, v2q15);
a64 __builtin_mips_dpaqx_sa_w_ph (a64, v2q15, v2q15);
a64 __builtin_mips_dpsqx_s_w_ph (a64, v2q15, v2q15);
a64 __builtin_mips_dpsqx_sa_w_ph (a64, v2q15, v2q15);
</pre></smallexample>


</subsection>
<node name="MIPS-Paired_002dSingle-Support" spaces=" "><nodename>MIPS Paired-Single Support</nodename><nodenext automatic="on">MIPS Loongson Built-in Functions</nodenext><nodeprev automatic="on">MIPS DSP Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>MIPS Paired-Single Support</sectiontitle>

<para>The MIPS64 architecture includes a number of instructions that
operate on pairs of single-precision floating-point values.
Each pair is packed into a 64-bit floating-point register,
with one element being designated the &textldquo;upper half&textrdquo; and
the other being designated the &textldquo;lower half&textrdquo;.
</para>
<para>GCC supports paired-single operations using both the generic
vector extensions (<pxref label="Vector-Extensions"><xrefnodename>Vector Extensions</xrefnodename></pxref>) and a collection of
MIPS-specific built-in functions.  Both kinds of support are
enabled by the <option>-mpaired-single</option> command-line option.
</para>
<para>The vector type associated with paired-single values is usually
called <code>v2sf</code>.  It can be defined in C as follows:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef float v2sf __attribute__ ((vector_size (8)));
</pre></smallexample>

<para><code>v2sf</code> values are initialized in the same way as aggregates.
For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v2sf a = &lbrace;1.5, 9.1&rbrace;;
v2sf b;
float e, f;
b = (v2sf) &lbrace;e, f&rbrace;;
</pre></smallexample>

<para><emph>Note:</emph> The CPU&textrsquo;s endianness determines which value is stored in
the upper half of a register and which value is stored in the lower half.
On little-endian targets, the first value is the lower one and the second
value is the upper one.  The opposite order applies to big-endian targets.
For example, the code above sets the lower half of <code>a</code> to
<code>1.5</code> on little-endian targets and <code>9.1</code> on big-endian targets.
</para>
</subsection>
<node name="MIPS-Loongson-Built_002din-Functions" spaces=" "><nodename>MIPS Loongson Built-in Functions</nodename><nodenext automatic="on">Other MIPS Built-in Functions</nodenext><nodeprev automatic="on">MIPS Paired-Single Support</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>MIPS Loongson Built-in Functions</sectiontitle>

<para>GCC provides intrinsics to access the SIMD instructions provided by the
ST Microelectronics Loongson-2E and -2F processors.  These intrinsics,
available after inclusion of the <code>loongson.h</code> header file,
operate on the following 64-bit vector types:
</para>
<itemize commandarg="bullet" endspaces=" ">
<listitem spaces=" "><prepend>&bullet;</prepend><para><code>uint8x8_t</code>, a vector of eight unsigned 8-bit integers;
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>uint16x4_t</code>, a vector of four unsigned 16-bit integers;
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>uint32x2_t</code>, a vector of two unsigned 32-bit integers;
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>int8x8_t</code>, a vector of eight signed 8-bit integers;
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>int16x4_t</code>, a vector of four signed 16-bit integers;
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>int32x2_t</code>, a vector of two signed 32-bit integers.
</para></listitem></itemize>

<para>The intrinsics provided are listed below; each is named after the
machine instruction to which it corresponds, with suffixes added as
appropriate to distinguish intrinsics that expand to the same machine
instruction yet have different argument types.  Refer to the architecture
documentation for a description of the functionality of each
instruction.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int16x4_t packsswh (int32x2_t s, int32x2_t t);
int8x8_t packsshb (int16x4_t s, int16x4_t t);
uint8x8_t packushb (uint16x4_t s, uint16x4_t t);
uint32x2_t paddw_u (uint32x2_t s, uint32x2_t t);
uint16x4_t paddh_u (uint16x4_t s, uint16x4_t t);
uint8x8_t paddb_u (uint8x8_t s, uint8x8_t t);
int32x2_t paddw_s (int32x2_t s, int32x2_t t);
int16x4_t paddh_s (int16x4_t s, int16x4_t t);
int8x8_t paddb_s (int8x8_t s, int8x8_t t);
uint64_t paddd_u (uint64_t s, uint64_t t);
int64_t paddd_s (int64_t s, int64_t t);
int16x4_t paddsh (int16x4_t s, int16x4_t t);
int8x8_t paddsb (int8x8_t s, int8x8_t t);
uint16x4_t paddush (uint16x4_t s, uint16x4_t t);
uint8x8_t paddusb (uint8x8_t s, uint8x8_t t);
uint64_t pandn_ud (uint64_t s, uint64_t t);
uint32x2_t pandn_uw (uint32x2_t s, uint32x2_t t);
uint16x4_t pandn_uh (uint16x4_t s, uint16x4_t t);
uint8x8_t pandn_ub (uint8x8_t s, uint8x8_t t);
int64_t pandn_sd (int64_t s, int64_t t);
int32x2_t pandn_sw (int32x2_t s, int32x2_t t);
int16x4_t pandn_sh (int16x4_t s, int16x4_t t);
int8x8_t pandn_sb (int8x8_t s, int8x8_t t);
uint16x4_t pavgh (uint16x4_t s, uint16x4_t t);
uint8x8_t pavgb (uint8x8_t s, uint8x8_t t);
uint32x2_t pcmpeqw_u (uint32x2_t s, uint32x2_t t);
uint16x4_t pcmpeqh_u (uint16x4_t s, uint16x4_t t);
uint8x8_t pcmpeqb_u (uint8x8_t s, uint8x8_t t);
int32x2_t pcmpeqw_s (int32x2_t s, int32x2_t t);
int16x4_t pcmpeqh_s (int16x4_t s, int16x4_t t);
int8x8_t pcmpeqb_s (int8x8_t s, int8x8_t t);
uint32x2_t pcmpgtw_u (uint32x2_t s, uint32x2_t t);
uint16x4_t pcmpgth_u (uint16x4_t s, uint16x4_t t);
uint8x8_t pcmpgtb_u (uint8x8_t s, uint8x8_t t);
int32x2_t pcmpgtw_s (int32x2_t s, int32x2_t t);
int16x4_t pcmpgth_s (int16x4_t s, int16x4_t t);
int8x8_t pcmpgtb_s (int8x8_t s, int8x8_t t);
uint16x4_t pextrh_u (uint16x4_t s, int field);
int16x4_t pextrh_s (int16x4_t s, int field);
uint16x4_t pinsrh_0_u (uint16x4_t s, uint16x4_t t);
uint16x4_t pinsrh_1_u (uint16x4_t s, uint16x4_t t);
uint16x4_t pinsrh_2_u (uint16x4_t s, uint16x4_t t);
uint16x4_t pinsrh_3_u (uint16x4_t s, uint16x4_t t);
int16x4_t pinsrh_0_s (int16x4_t s, int16x4_t t);
int16x4_t pinsrh_1_s (int16x4_t s, int16x4_t t);
int16x4_t pinsrh_2_s (int16x4_t s, int16x4_t t);
int16x4_t pinsrh_3_s (int16x4_t s, int16x4_t t);
int32x2_t pmaddhw (int16x4_t s, int16x4_t t);
int16x4_t pmaxsh (int16x4_t s, int16x4_t t);
uint8x8_t pmaxub (uint8x8_t s, uint8x8_t t);
int16x4_t pminsh (int16x4_t s, int16x4_t t);
uint8x8_t pminub (uint8x8_t s, uint8x8_t t);
uint8x8_t pmovmskb_u (uint8x8_t s);
int8x8_t pmovmskb_s (int8x8_t s);
uint16x4_t pmulhuh (uint16x4_t s, uint16x4_t t);
int16x4_t pmulhh (int16x4_t s, int16x4_t t);
int16x4_t pmullh (int16x4_t s, int16x4_t t);
int64_t pmuluw (uint32x2_t s, uint32x2_t t);
uint8x8_t pasubub (uint8x8_t s, uint8x8_t t);
uint16x4_t biadd (uint8x8_t s);
uint16x4_t psadbh (uint8x8_t s, uint8x8_t t);
uint16x4_t pshufh_u (uint16x4_t dest, uint16x4_t s, uint8_t order);
int16x4_t pshufh_s (int16x4_t dest, int16x4_t s, uint8_t order);
uint16x4_t psllh_u (uint16x4_t s, uint8_t amount);
int16x4_t psllh_s (int16x4_t s, uint8_t amount);
uint32x2_t psllw_u (uint32x2_t s, uint8_t amount);
int32x2_t psllw_s (int32x2_t s, uint8_t amount);
uint16x4_t psrlh_u (uint16x4_t s, uint8_t amount);
int16x4_t psrlh_s (int16x4_t s, uint8_t amount);
uint32x2_t psrlw_u (uint32x2_t s, uint8_t amount);
int32x2_t psrlw_s (int32x2_t s, uint8_t amount);
uint16x4_t psrah_u (uint16x4_t s, uint8_t amount);
int16x4_t psrah_s (int16x4_t s, uint8_t amount);
uint32x2_t psraw_u (uint32x2_t s, uint8_t amount);
int32x2_t psraw_s (int32x2_t s, uint8_t amount);
uint32x2_t psubw_u (uint32x2_t s, uint32x2_t t);
uint16x4_t psubh_u (uint16x4_t s, uint16x4_t t);
uint8x8_t psubb_u (uint8x8_t s, uint8x8_t t);
int32x2_t psubw_s (int32x2_t s, int32x2_t t);
int16x4_t psubh_s (int16x4_t s, int16x4_t t);
int8x8_t psubb_s (int8x8_t s, int8x8_t t);
uint64_t psubd_u (uint64_t s, uint64_t t);
int64_t psubd_s (int64_t s, int64_t t);
int16x4_t psubsh (int16x4_t s, int16x4_t t);
int8x8_t psubsb (int8x8_t s, int8x8_t t);
uint16x4_t psubush (uint16x4_t s, uint16x4_t t);
uint8x8_t psubusb (uint8x8_t s, uint8x8_t t);
uint32x2_t punpckhwd_u (uint32x2_t s, uint32x2_t t);
uint16x4_t punpckhhw_u (uint16x4_t s, uint16x4_t t);
uint8x8_t punpckhbh_u (uint8x8_t s, uint8x8_t t);
int32x2_t punpckhwd_s (int32x2_t s, int32x2_t t);
int16x4_t punpckhhw_s (int16x4_t s, int16x4_t t);
int8x8_t punpckhbh_s (int8x8_t s, int8x8_t t);
uint32x2_t punpcklwd_u (uint32x2_t s, uint32x2_t t);
uint16x4_t punpcklhw_u (uint16x4_t s, uint16x4_t t);
uint8x8_t punpcklbh_u (uint8x8_t s, uint8x8_t t);
int32x2_t punpcklwd_s (int32x2_t s, int32x2_t t);
int16x4_t punpcklhw_s (int16x4_t s, int16x4_t t);
int8x8_t punpcklbh_s (int8x8_t s, int8x8_t t);
</pre></smallexample>

<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Paired-Single Arithmetic</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Paired-Single Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MIPS-3D Built-in Functions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="Paired_002dSingle-Arithmetic" spaces=" "><nodename>Paired-Single Arithmetic</nodename><nodenext automatic="on">Paired-Single Built-in Functions</nodenext><nodeup automatic="on">MIPS Loongson Built-in Functions</nodeup></node>
<subsubsection spaces=" "><sectiontitle>Paired-Single Arithmetic</sectiontitle>

<para>The table below lists the <code>v2sf</code> operations for which hardware
support exists.  <code>a</code>, <code>b</code> and <code>c</code> are <code>v2sf</code>
values and <code>x</code> is an integral value.
</para>
<multitable spaces=" " endspaces=" "><columnfractions line=" .50 .50"><columnfraction value=".50"></columnfraction><columnfraction value=".50"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para>C code </para></entry><entry command="tab" spaces=" "><para>MIPS instruction
</para></entry></row><row><entry command="item" spaces=" "><para><code>a + b</code> </para></entry><entry command="tab" spaces=" "><para><code>add.ps</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>a - b</code> </para></entry><entry command="tab" spaces=" "><para><code>sub.ps</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>-a</code> </para></entry><entry command="tab" spaces=" "><para><code>neg.ps</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>a * b</code> </para></entry><entry command="tab" spaces=" "><para><code>mul.ps</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>a * b + c</code> </para></entry><entry command="tab" spaces=" "><para><code>madd.ps</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>a * b - c</code> </para></entry><entry command="tab" spaces=" "><para><code>msub.ps</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>-(a * b + c)</code> </para></entry><entry command="tab" spaces=" "><para><code>nmadd.ps</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>-(a * b - c)</code> </para></entry><entry command="tab" spaces=" "><para><code>nmsub.ps</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>x ? a : b</code> </para></entry><entry command="tab" spaces=" "><para><code>movn.ps</code>/<code>movz.ps</code>
</para></entry></row></tbody></multitable>

<para>Note that the multiply-accumulate instructions can be disabled
using the command-line option <code>-mno-fused-madd</code>.
</para>
</subsubsection>
<node name="Paired_002dSingle-Built_002din-Functions" spaces=" "><nodename>Paired-Single Built-in Functions</nodename><nodenext automatic="on">MIPS-3D Built-in Functions</nodenext><nodeprev automatic="on">Paired-Single Arithmetic</nodeprev><nodeup automatic="on">MIPS Loongson Built-in Functions</nodeup></node>
<subsubsection spaces=" "><sectiontitle>Paired-Single Built-in Functions</sectiontitle>

<para>The following paired-single functions map directly to a particular
MIPS instruction.  Please refer to the architecture specification
for details on what each instruction does.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_pll_ps (v2sf, v2sf)</itemformat></item>
</tableterm><tableitem><para>Pair lower lower (<code>pll.ps</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_pul_ps (v2sf, v2sf)</itemformat></item>
</tableterm><tableitem><para>Pair upper lower (<code>pul.ps</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_plu_ps (v2sf, v2sf)</itemformat></item>
</tableterm><tableitem><para>Pair lower upper (<code>plu.ps</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_puu_ps (v2sf, v2sf)</itemformat></item>
</tableterm><tableitem><para>Pair upper upper (<code>puu.ps</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_cvt_ps_s (float, float)</itemformat></item>
</tableterm><tableitem><para>Convert pair to paired single (<code>cvt.ps.s</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">float __builtin_mips_cvt_s_pl (v2sf)</itemformat></item>
</tableterm><tableitem><para>Convert pair lower to single (<code>cvt.s.pl</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">float __builtin_mips_cvt_s_pu (v2sf)</itemformat></item>
</tableterm><tableitem><para>Convert pair upper to single (<code>cvt.s.pu</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_abs_ps (v2sf)</itemformat></item>
</tableterm><tableitem><para>Absolute value (<code>abs.ps</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_alnv_ps (v2sf, v2sf, int)</itemformat></item>
</tableterm><tableitem><para>Align variable (<code>alnv.ps</code>).
</para>
<para><emph>Note:</emph> The value of the third parameter must be 0 or 4
modulo 8, otherwise the result is unpredictable.  Please read the
instruction description for details.
</para></tableitem></tableentry></table>

<para>The following multi-instruction functions are also available.
In each case, <var>cond</var> can be any of the 16 floating-point conditions:
<code>f</code>, <code>un</code>, <code>eq</code>, <code>ueq</code>, <code>olt</code>, <code>ult</code>,
<code>ole</code>, <code>ule</code>, <code>sf</code>, <code>ngle</code>, <code>seq</code>, <code>ngl</code>,
<code>lt</code>, <code>nge</code>, <code>le</code> or <code>ngt</code>.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_movt_c_<var>cond</var>_ps (v2sf <var>a</var>, v2sf <var>b</var>, v2sf <var>c</var>, v2sf <var>d</var>)</itemformat></item>
<itemx spaces=" "><itemformat command="code">v2sf __builtin_mips_movf_c_<var>cond</var>_ps (v2sf <var>a</var>, v2sf <var>b</var>, v2sf <var>c</var>, v2sf <var>d</var>)</itemformat></itemx>
</tableterm><tableitem><para>Conditional move based on floating-point comparison (<code>c.<var>cond</var>.ps</code>,
<code>movt.ps</code>/<code>movf.ps</code>).
</para>
<para>The <code>movt</code> functions return the value <var>x</var> computed by:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">c.<var>cond</var>.ps <var>cc</var>,<var>a</var>,<var>b</var>
mov.ps <var>x</var>,<var>c</var>
movt.ps <var>x</var>,<var>d</var>,<var>cc</var>
</pre></smallexample>

<para>The <code>movf</code> functions are similar but use <code>movf.ps</code> instead
of <code>movt.ps</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_mips_upper_c_<var>cond</var>_ps (v2sf <var>a</var>, v2sf <var>b</var>)</itemformat></item>
<itemx spaces=" "><itemformat command="code">int __builtin_mips_lower_c_<var>cond</var>_ps (v2sf <var>a</var>, v2sf <var>b</var>)</itemformat></itemx>
</tableterm><tableitem><para>Comparison of two paired-single values (<code>c.<var>cond</var>.ps</code>,
<code>bc1t</code>/<code>bc1f</code>).
</para>
<para>These functions compare <var>a</var> and <var>b</var> using <code>c.<var>cond</var>.ps</code>
and return either the upper or lower half of the result.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v2sf a, b;
if (__builtin_mips_upper_c_eq_ps (a, b))
  upper_halves_are_equal ();
else
  upper_halves_are_unequal ();

if (__builtin_mips_lower_c_eq_ps (a, b))
  lower_halves_are_equal ();
else
  lower_halves_are_unequal ();
</pre></smallexample>
</tableitem></tableentry></table>

</subsubsection>
<node name="MIPS_002d3D-Built_002din-Functions" spaces=" "><nodename>MIPS-3D Built-in Functions</nodename><nodeprev automatic="on">Paired-Single Built-in Functions</nodeprev><nodeup automatic="on">MIPS Loongson Built-in Functions</nodeup></node>
<subsubsection spaces=" "><sectiontitle>MIPS-3D Built-in Functions</sectiontitle>

<para>The MIPS-3D Application-Specific Extension (ASE) includes additional
paired-single instructions that are designed to improve the performance
of 3D graphics operations.  Support for these instructions is controlled
by the <option>-mips3d</option> command-line option.
</para>
<para>The functions listed below map directly to a particular MIPS-3D
instruction.  Please refer to the architecture specification for
more details on what each instruction does.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_addr_ps (v2sf, v2sf)</itemformat></item>
</tableterm><tableitem><para>Reduction add (<code>addr.ps</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_mulr_ps (v2sf, v2sf)</itemformat></item>
</tableterm><tableitem><para>Reduction multiply (<code>mulr.ps</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_cvt_pw_ps (v2sf)</itemformat></item>
</tableterm><tableitem><para>Convert paired single to paired word (<code>cvt.pw.ps</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_cvt_ps_pw (v2sf)</itemformat></item>
</tableterm><tableitem><para>Convert paired word to paired single (<code>cvt.ps.pw</code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">float __builtin_mips_recip1_s (float)</itemformat></item>
<itemx spaces=" "><itemformat command="code">double __builtin_mips_recip1_d (double)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">v2sf __builtin_mips_recip1_ps (v2sf)</itemformat></itemx>
</tableterm><tableitem><para>Reduced-precision reciprocal (sequence step 1) (<code>recip1.<var>fmt</var></code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">float __builtin_mips_recip2_s (float, float)</itemformat></item>
<itemx spaces=" "><itemformat command="code">double __builtin_mips_recip2_d (double, double)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">v2sf __builtin_mips_recip2_ps (v2sf, v2sf)</itemformat></itemx>
</tableterm><tableitem><para>Reduced-precision reciprocal (sequence step 2) (<code>recip2.<var>fmt</var></code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">float __builtin_mips_rsqrt1_s (float)</itemformat></item>
<itemx spaces=" "><itemformat command="code">double __builtin_mips_rsqrt1_d (double)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">v2sf __builtin_mips_rsqrt1_ps (v2sf)</itemformat></itemx>
</tableterm><tableitem><para>Reduced-precision reciprocal square root (sequence step 1)
(<code>rsqrt1.<var>fmt</var></code>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">float __builtin_mips_rsqrt2_s (float, float)</itemformat></item>
<itemx spaces=" "><itemformat command="code">double __builtin_mips_rsqrt2_d (double, double)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">v2sf __builtin_mips_rsqrt2_ps (v2sf, v2sf)</itemformat></itemx>
</tableterm><tableitem><para>Reduced-precision reciprocal square root (sequence step 2)
(<code>rsqrt2.<var>fmt</var></code>).
</para></tableitem></tableentry></table>

<para>The following multi-instruction functions are also available.
In each case, <var>cond</var> can be any of the 16 floating-point conditions:
<code>f</code>, <code>un</code>, <code>eq</code>, <code>ueq</code>, <code>olt</code>, <code>ult</code>,
<code>ole</code>, <code>ule</code>, <code>sf</code>, <code>ngle</code>, <code>seq</code>,
<code>ngl</code>, <code>lt</code>, <code>nge</code>, <code>le</code> or <code>ngt</code>.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_mips_cabs_<var>cond</var>_s (float <var>a</var>, float <var>b</var>)</itemformat></item>
<itemx spaces=" "><itemformat command="code">int __builtin_mips_cabs_<var>cond</var>_d (double <var>a</var>, double <var>b</var>)</itemformat></itemx>
</tableterm><tableitem><para>Absolute comparison of two scalar values (<code>cabs.<var>cond</var>.<var>fmt</var></code>,
<code>bc1t</code>/<code>bc1f</code>).
</para>
<para>These functions compare <var>a</var> and <var>b</var> using <code>cabs.<var>cond</var>.s</code>
or <code>cabs.<var>cond</var>.d</code> and return the result as a boolean value.
For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">float a, b;
if (__builtin_mips_cabs_eq_s (a, b))
  true ();
else
  false ();
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_mips_upper_cabs_<var>cond</var>_ps (v2sf <var>a</var>, v2sf <var>b</var>)</itemformat></item>
<itemx spaces=" "><itemformat command="code">int __builtin_mips_lower_cabs_<var>cond</var>_ps (v2sf <var>a</var>, v2sf <var>b</var>)</itemformat></itemx>
</tableterm><tableitem><para>Absolute comparison of two paired-single values (<code>cabs.<var>cond</var>.ps</code>,
<code>bc1t</code>/<code>bc1f</code>).
</para>
<para>These functions compare <var>a</var> and <var>b</var> using <code>cabs.<var>cond</var>.ps</code>
and return either the upper or lower half of the result.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v2sf a, b;
if (__builtin_mips_upper_cabs_eq_ps (a, b))
  upper_halves_are_equal ();
else
  upper_halves_are_unequal ();

if (__builtin_mips_lower_cabs_eq_ps (a, b))
  lower_halves_are_equal ();
else
  lower_halves_are_unequal ();
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v2sf __builtin_mips_movt_cabs_<var>cond</var>_ps (v2sf <var>a</var>, v2sf <var>b</var>, v2sf <var>c</var>, v2sf <var>d</var>)</itemformat></item>
<itemx spaces=" "><itemformat command="code">v2sf __builtin_mips_movf_cabs_<var>cond</var>_ps (v2sf <var>a</var>, v2sf <var>b</var>, v2sf <var>c</var>, v2sf <var>d</var>)</itemformat></itemx>
</tableterm><tableitem><para>Conditional move based on absolute comparison (<code>cabs.<var>cond</var>.ps</code>,
<code>movt.ps</code>/<code>movf.ps</code>).
</para>
<para>The <code>movt</code> functions return the value <var>x</var> computed by:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">cabs.<var>cond</var>.ps <var>cc</var>,<var>a</var>,<var>b</var>
mov.ps <var>x</var>,<var>c</var>
movt.ps <var>x</var>,<var>d</var>,<var>cc</var>
</pre></smallexample>

<para>The <code>movf</code> functions are similar but use <code>movf.ps</code> instead
of <code>movt.ps</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_mips_any_c_<var>cond</var>_ps (v2sf <var>a</var>, v2sf <var>b</var>)</itemformat></item>
<itemx spaces=" "><itemformat command="code">int __builtin_mips_all_c_<var>cond</var>_ps (v2sf <var>a</var>, v2sf <var>b</var>)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">int __builtin_mips_any_cabs_<var>cond</var>_ps (v2sf <var>a</var>, v2sf <var>b</var>)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">int __builtin_mips_all_cabs_<var>cond</var>_ps (v2sf <var>a</var>, v2sf <var>b</var>)</itemformat></itemx>
</tableterm><tableitem><para>Comparison of two paired-single values
(<code>c.<var>cond</var>.ps</code>/<code>cabs.<var>cond</var>.ps</code>,
<code>bc1any2t</code>/<code>bc1any2f</code>).
</para>
<para>These functions compare <var>a</var> and <var>b</var> using <code>c.<var>cond</var>.ps</code>
or <code>cabs.<var>cond</var>.ps</code>.  The <code>any</code> forms return true if either
result is true and the <code>all</code> forms return true if both results are true.
For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v2sf a, b;
if (__builtin_mips_any_c_eq_ps (a, b))
  one_is_true ();
else
  both_are_false ();

if (__builtin_mips_all_c_eq_ps (a, b))
  both_are_true ();
else
  one_is_false ();
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_mips_any_c_<var>cond</var>_4s (v2sf <var>a</var>, v2sf <var>b</var>, v2sf <var>c</var>, v2sf <var>d</var>)</itemformat></item>
<itemx spaces=" "><itemformat command="code">int __builtin_mips_all_c_<var>cond</var>_4s (v2sf <var>a</var>, v2sf <var>b</var>, v2sf <var>c</var>, v2sf <var>d</var>)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">int __builtin_mips_any_cabs_<var>cond</var>_4s (v2sf <var>a</var>, v2sf <var>b</var>, v2sf <var>c</var>, v2sf <var>d</var>)</itemformat></itemx>
<itemx spaces=" "><itemformat command="code">int __builtin_mips_all_cabs_<var>cond</var>_4s (v2sf <var>a</var>, v2sf <var>b</var>, v2sf <var>c</var>, v2sf <var>d</var>)</itemformat></itemx>
</tableterm><tableitem><para>Comparison of four paired-single values
(<code>c.<var>cond</var>.ps</code>/<code>cabs.<var>cond</var>.ps</code>,
<code>bc1any4t</code>/<code>bc1any4f</code>).
</para>
<para>These functions use <code>c.<var>cond</var>.ps</code> or <code>cabs.<var>cond</var>.ps</code>
to compare <var>a</var> with <var>b</var> and to compare <var>c</var> with <var>d</var>.
The <code>any</code> forms return true if any of the four results are true
and the <code>all</code> forms return true if all four results are true.
For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v2sf a, b, c, d;
if (__builtin_mips_any_c_eq_4s (a, b, c, d))
  some_are_true ();
else
  all_are_false ();

if (__builtin_mips_all_c_eq_4s (a, b, c, d))
  all_are_true ();
else
  some_are_false ();
</pre></smallexample>
</tableitem></tableentry></table>

</subsubsection>
</subsection>
<node name="Other-MIPS-Built_002din-Functions" spaces=" "><nodename>Other MIPS Built-in Functions</nodename><nodenext automatic="on">MSP430 Built-in Functions</nodenext><nodeprev automatic="on">MIPS Loongson Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>Other MIPS Built-in Functions</sectiontitle>

<para>GCC provides other MIPS-specific built-in functions:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">void __builtin_mips_cache (int <var>op</var>, const volatile void *<var>addr</var>)</itemformat></item>
</tableterm><tableitem><para>Insert a <samp>cache</samp> instruction with operands <var>op</var> and <var>addr</var>.
GCC defines the preprocessor macro <code>___GCC_HAVE_BUILTIN_MIPS_CACHE</code>
when this function is available.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">unsigned int __builtin_mips_get_fcsr (void)</itemformat></item>
<itemx spaces=" "><itemformat command="code">void __builtin_mips_set_fcsr (unsigned int <var>value</var>)</itemformat></itemx>
</tableterm><tableitem><para>Get and set the contents of the floating-point control and status register
(FPU control register 31).  These functions are only available in hard-float
code but can be called in both MIPS16 and non-MIPS16 contexts.
</para>
<para><code>__builtin_mips_set_fcsr</code> can be used to change any bit of the
register except the condition codes, which GCC assumes are preserved.
</para></tableitem></tableentry></table>

</subsection>
<node name="MSP430-Built_002din-Functions" spaces=" "><nodename>MSP430 Built-in Functions</nodename><nodenext automatic="on">NDS32 Built-in Functions</nodenext><nodeprev automatic="on">Other MIPS Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>MSP430 Built-in Functions</sectiontitle>

<para>GCC provides a couple of special builtin functions to aid in the
writing of interrupt handlers in C.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">__bic_SR_register_on_exit (int <var>mask</var>)</itemformat></item>
</tableterm><tableitem><para>This clears the indicated bits in the saved copy of the status register
currently residing on the stack.  This only works inside interrupt
handlers and the changes to the status register will only take affect
once the handler returns.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__bis_SR_register_on_exit (int <var>mask</var>)</itemformat></item>
</tableterm><tableitem><para>This sets the indicated bits in the saved copy of the status register
currently residing on the stack.  This only works inside interrupt
handlers and the changes to the status register will only take affect
once the handler returns.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__delay_cycles (long long <var>cycles</var>)</itemformat></item>
</tableterm><tableitem><para>This inserts an instruction sequence that takes exactly <var>cycles</var>
cycles (between 0 and about 17E9) to complete.  The inserted sequence
may use jumps, loops, or no-ops, and does not interfere with any other
instructions.  Note that <var>cycles</var> must be a compile-time constant
integer - that is, you must pass a number, not a variable that may be
optimized to a constant later.  The number of cycles delayed by this
builtin is exact.
</para></tableitem></tableentry></table>

</subsection>
<node name="NDS32-Built_002din-Functions" spaces=" "><nodename>NDS32 Built-in Functions</nodename><nodenext automatic="on">picoChip Built-in Functions</nodenext><nodeprev automatic="on">MSP430 Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>NDS32 Built-in Functions</sectiontitle>

<para>These built-in functions are available for the NDS32 target:
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="606" mergedindex="cp">__builtin_nds32_isync</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_nds32_isync</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam>*</defparam><defparam><var>addr</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Insert an ISYNC instruction into the instruction stream where
<var>addr</var> is an instruction address for serialization.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="607" mergedindex="cp">__builtin_nds32_isb</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_nds32_isb</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Insert an ISB instruction into the instruction stream.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="608" mergedindex="cp">__builtin_nds32_mfsr</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_nds32_mfsr</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam><var>sr</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Return the content of a system register which is mapped by <var>sr</var>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="609" mergedindex="cp">__builtin_nds32_mfusr</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_nds32_mfusr</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam><var>usr</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Return the content of a user space register which is mapped by <var>usr</var>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="610" mergedindex="cp">__builtin_nds32_mtsr</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_nds32_mtsr</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam><var>value</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam><var>sr</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Move the <var>value</var> to a system register which is mapped by <var>sr</var>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="611" mergedindex="cp">__builtin_nds32_mtusr</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_nds32_mtusr</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam><var>value</var></defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam><var>usr</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Move the <var>value</var> to a user space register which is mapped by <var>usr</var>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="612" mergedindex="cp">__builtin_nds32_setgie_en</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_nds32_setgie_en</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Enable global interrupt.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="613" mergedindex="cp">__builtin_nds32_setgie_dis</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_nds32_setgie_dis</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Disable global interrupt.
</para></definitionitem></deftypefn>

</subsection>
<node name="picoChip-Built_002din-Functions" spaces=" "><nodename>picoChip Built-in Functions</nodename><nodenext automatic="on">PowerPC Built-in Functions</nodenext><nodeprev automatic="on">NDS32 Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>picoChip Built-in Functions</sectiontitle>

<para>GCC provides an interface to selected machine instructions from the
picoChip instruction set.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_sbc (int <var>value</var>)</itemformat></item>
</tableterm><tableitem><para>Sign bit count.  Return the number of consecutive bits in <var>value</var>
that have the same value as the sign bit.  The result is the number of
leading sign bits minus one, giving the number of redundant sign bits in
<var>value</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_byteswap (int <var>value</var>)</itemformat></item>
</tableterm><tableitem><para>Byte swap.  Return the result of swapping the upper and lower bytes of
<var>value</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_brev (int <var>value</var>)</itemformat></item>
</tableterm><tableitem><para>Bit reversal.  Return the result of reversing the bits in
<var>value</var>.  Bit 15 is swapped with bit 0, bit 14 is swapped with bit 1,
and so on.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_adds (int <var>x</var>, int <var>y</var>)</itemformat></item>
</tableterm><tableitem><para>Saturating addition.  Return the result of adding <var>x</var> and <var>y</var>,
storing the value 32767 if the result overflows.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_subs (int <var>x</var>, int <var>y</var>)</itemformat></item>
</tableterm><tableitem><para>Saturating subtraction.  Return the result of subtracting <var>y</var> from
<var>x</var>, storing the value &minus;32768 if the result overflows.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __builtin_halt (void)</itemformat></item>
</tableterm><tableitem><para>Halt.  The processor stops execution.  This built-in is useful for
implementing assertions.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="PowerPC-Built_002din-Functions" spaces=" "><nodename>PowerPC Built-in Functions</nodename><nodenext automatic="on">PowerPC AltiVec/VSX Built-in Functions</nodenext><nodeprev automatic="on">picoChip Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>PowerPC Built-in Functions</sectiontitle>

<para>These built-in functions are available for the PowerPC family of
processors:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">float __builtin_recipdivf (float, float);
float __builtin_rsqrtf (float);
double __builtin_recipdiv (double, double);
double __builtin_rsqrt (double);
uint64_t __builtin_ppc_get_timebase ();
unsigned long __builtin_ppc_mftb ();
double __builtin_unpack_longdouble (long double, int);
long double __builtin_pack_longdouble (double, double);
</pre></smallexample>

<para>The <code>vec_rsqrt</code>, <code>__builtin_rsqrt</code>, and
<code>__builtin_rsqrtf</code> functions generate multiple instructions to
implement the reciprocal sqrt functionality using reciprocal sqrt
estimate instructions.
</para>
<para>The <code>__builtin_recipdiv</code>, and <code>__builtin_recipdivf</code>
functions generate multiple instructions to implement division using
the reciprocal estimate instructions.
</para>
<para>The <code>__builtin_ppc_get_timebase</code> and <code>__builtin_ppc_mftb</code>
functions generate instructions to read the Time Base Register.  The
<code>__builtin_ppc_get_timebase</code> function may generate multiple
instructions and always returns the 64 bits of the Time Base Register.
The <code>__builtin_ppc_mftb</code> function always generates one instruction and
returns the Time Base Register value as an unsigned long, throwing away
the most significant word on 32-bit environments.
</para>
<para>The following built-in functions are available for the PowerPC family
of processors, starting with ISA 2.06 or later (<option>-mcpu=power7</option>
or <option>-mpopcntd</option>):
</para><smallexample endspaces=" ">
<pre xml:space="preserve">long __builtin_bpermd (long, long);
int __builtin_divwe (int, int);
int __builtin_divweo (int, int);
unsigned int __builtin_divweu (unsigned int, unsigned int);
unsigned int __builtin_divweuo (unsigned int, unsigned int);
long __builtin_divde (long, long);
long __builtin_divdeo (long, long);
unsigned long __builtin_divdeu (unsigned long, unsigned long);
unsigned long __builtin_divdeuo (unsigned long, unsigned long);
unsigned int cdtbcd (unsigned int);
unsigned int cbcdtd (unsigned int);
unsigned int addg6s (unsigned int, unsigned int);
</pre></smallexample>

<para>The <code>__builtin_divde</code>, <code>__builtin_divdeo</code>,
<code>__builtin_divdeu</code>, <code>__builtin_divdeou</code> functions require a
64-bit environment support ISA 2.06 or later.
</para>
<para>The following built-in functions are available for the PowerPC family
of processors when hardware decimal floating point
(<option>-mhard-dfp</option>) is available:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">_Decimal64 __builtin_dxex (_Decimal64);
_Decimal128 __builtin_dxexq (_Decimal128);
_Decimal64 __builtin_ddedpd (int, _Decimal64);
_Decimal128 __builtin_ddedpdq (int, _Decimal128);
_Decimal64 __builtin_denbcd (int, _Decimal64);
_Decimal128 __builtin_denbcdq (int, _Decimal128);
_Decimal64 __builtin_diex (_Decimal64, _Decimal64);
_Decimal128 _builtin_diexq (_Decimal128, _Decimal128);
_Decimal64 __builtin_dscli (_Decimal64, int);
_Decimal128 __builtin_dscliq (_Decimal128, int);
_Decimal64 __builtin_dscri (_Decimal64, int);
_Decimal128 __builtin_dscriq (_Decimal128, int);
unsigned long long __builtin_unpack_dec128 (_Decimal128, int);
_Decimal128 __builtin_pack_dec128 (unsigned long long, unsigned long long);
</pre></smallexample>

<para>The following built-in functions are available for the PowerPC family
of processors when the Vector Scalar (vsx) instruction set is
available:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">unsigned long long __builtin_unpack_vector_int128 (vector __int128_t, int);
vector __int128_t __builtin_pack_vector_int128 (unsigned long long,
                                                unsigned long long);
</pre></smallexample>

</subsection>
<node name="PowerPC-AltiVec_002fVSX-Built_002din-Functions" spaces=" "><nodename>PowerPC AltiVec/VSX Built-in Functions</nodename><nodenext automatic="on">PowerPC Hardware Transactional Memory Built-in Functions</nodenext><nodeprev automatic="on">PowerPC Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>PowerPC AltiVec Built-in Functions</sectiontitle>

<para>GCC provides an interface for the PowerPC family of processors to access
the AltiVec operations described in Motorola&textrsquo;s AltiVec Programming
Interface Manual.  The interface is made available by including
<code>&lt;altivec.h&gt;</code> and using <option>-maltivec</option> and
<option>-mabi=altivec</option>.  The interface supports the following vector
types.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">vector unsigned char
vector signed char
vector bool char

vector unsigned short
vector signed short
vector bool short
vector pixel

vector unsigned int
vector signed int
vector bool int
vector float
</pre></smallexample>

<para>If <option>-mvsx</option> is used the following additional vector types are
implemented.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">vector unsigned long
vector signed long
vector double
</pre></smallexample>

<para>The long types are only implemented for 64-bit code generation, and
the long type is only used in the floating point/integer conversion
instructions.
</para>
<para>GCC&textrsquo;s implementation of the high-level language interface available from
C and C++ code differs from Motorola&textrsquo;s documentation in several ways.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>A vector constant is a list of constant expressions within curly braces.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>A vector initializer requires no cast if the vector constant is of the
same type as the variable it is initializing.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If <code>signed</code> or <code>unsigned</code> is omitted, the signedness of the
vector type is the default signedness of the base type.  The default
varies depending on the operating system, so a portable program should
always specify the signedness.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Compiling with <option>-maltivec</option> adds keywords <code>__vector</code>,
<code>vector</code>, <code>__pixel</code>, <code>pixel</code>, <code>__bool</code> and
<code>bool</code>.  When compiling ISO C, the context-sensitive substitution
of the keywords <code>vector</code>, <code>pixel</code> and <code>bool</code> is
disabled.  To use them, you must include <code>&lt;altivec.h&gt;</code> instead.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>GCC allows using a <code>typedef</code> name as the type specifier for a
vector type.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>For C, overloaded functions are implemented with macros so the following
does not work:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  vec_add ((vector signed int)&lbrace;1, 2, 3, 4&rbrace;, foo);
</pre></smallexample>

<noindent></noindent>
<para>Since <code>vec_add</code> is a macro, the vector constant in the example
is treated as four separate arguments.  Wrap the entire argument in
parentheses for this to work.
</para></listitem></itemize>

<para><emph>Note:</emph> Only the <code>&lt;altivec.h&gt;</code> interface is supported.
Internally, GCC uses built-in functions to achieve the functionality in
the aforementioned header file, but they are not supported and are
subject to change without notice.
</para>
<para>The following interfaces are supported for the generic and specific
AltiVec operations and the AltiVec predicates.  In cases where there
is a direct mapping between generic and specific operations, only the
generic names are shown here, although the specific operations can also
be used.
</para>
<para>Arguments that are documented as <code>const int</code> require literal
integral values within the range required for that operation.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">vector signed char vec_abs (vector signed char);
vector signed short vec_abs (vector signed short);
vector signed int vec_abs (vector signed int);
vector float vec_abs (vector float);

vector signed char vec_abss (vector signed char);
vector signed short vec_abss (vector signed short);
vector signed int vec_abss (vector signed int);

vector signed char vec_add (vector bool char, vector signed char);
vector signed char vec_add (vector signed char, vector bool char);
vector signed char vec_add (vector signed char, vector signed char);
vector unsigned char vec_add (vector bool char, vector unsigned char);
vector unsigned char vec_add (vector unsigned char, vector bool char);
vector unsigned char vec_add (vector unsigned char,
                              vector unsigned char);
vector signed short vec_add (vector bool short, vector signed short);
vector signed short vec_add (vector signed short, vector bool short);
vector signed short vec_add (vector signed short, vector signed short);
vector unsigned short vec_add (vector bool short,
                               vector unsigned short);
vector unsigned short vec_add (vector unsigned short,
                               vector bool short);
vector unsigned short vec_add (vector unsigned short,
                               vector unsigned short);
vector signed int vec_add (vector bool int, vector signed int);
vector signed int vec_add (vector signed int, vector bool int);
vector signed int vec_add (vector signed int, vector signed int);
vector unsigned int vec_add (vector bool int, vector unsigned int);
vector unsigned int vec_add (vector unsigned int, vector bool int);
vector unsigned int vec_add (vector unsigned int, vector unsigned int);
vector float vec_add (vector float, vector float);

vector float vec_vaddfp (vector float, vector float);

vector signed int vec_vadduwm (vector bool int, vector signed int);
vector signed int vec_vadduwm (vector signed int, vector bool int);
vector signed int vec_vadduwm (vector signed int, vector signed int);
vector unsigned int vec_vadduwm (vector bool int, vector unsigned int);
vector unsigned int vec_vadduwm (vector unsigned int, vector bool int);
vector unsigned int vec_vadduwm (vector unsigned int,
                                 vector unsigned int);

vector signed short vec_vadduhm (vector bool short,
                                 vector signed short);
vector signed short vec_vadduhm (vector signed short,
                                 vector bool short);
vector signed short vec_vadduhm (vector signed short,
                                 vector signed short);
vector unsigned short vec_vadduhm (vector bool short,
                                   vector unsigned short);
vector unsigned short vec_vadduhm (vector unsigned short,
                                   vector bool short);
vector unsigned short vec_vadduhm (vector unsigned short,
                                   vector unsigned short);

vector signed char vec_vaddubm (vector bool char, vector signed char);
vector signed char vec_vaddubm (vector signed char, vector bool char);
vector signed char vec_vaddubm (vector signed char, vector signed char);
vector unsigned char vec_vaddubm (vector bool char,
                                  vector unsigned char);
vector unsigned char vec_vaddubm (vector unsigned char,
                                  vector bool char);
vector unsigned char vec_vaddubm (vector unsigned char,
                                  vector unsigned char);

vector unsigned int vec_addc (vector unsigned int, vector unsigned int);

vector unsigned char vec_adds (vector bool char, vector unsigned char);
vector unsigned char vec_adds (vector unsigned char, vector bool char);
vector unsigned char vec_adds (vector unsigned char,
                               vector unsigned char);
vector signed char vec_adds (vector bool char, vector signed char);
vector signed char vec_adds (vector signed char, vector bool char);
vector signed char vec_adds (vector signed char, vector signed char);
vector unsigned short vec_adds (vector bool short,
                                vector unsigned short);
vector unsigned short vec_adds (vector unsigned short,
                                vector bool short);
vector unsigned short vec_adds (vector unsigned short,
                                vector unsigned short);
vector signed short vec_adds (vector bool short, vector signed short);
vector signed short vec_adds (vector signed short, vector bool short);
vector signed short vec_adds (vector signed short, vector signed short);
vector unsigned int vec_adds (vector bool int, vector unsigned int);
vector unsigned int vec_adds (vector unsigned int, vector bool int);
vector unsigned int vec_adds (vector unsigned int, vector unsigned int);
vector signed int vec_adds (vector bool int, vector signed int);
vector signed int vec_adds (vector signed int, vector bool int);
vector signed int vec_adds (vector signed int, vector signed int);

vector signed int vec_vaddsws (vector bool int, vector signed int);
vector signed int vec_vaddsws (vector signed int, vector bool int);
vector signed int vec_vaddsws (vector signed int, vector signed int);

vector unsigned int vec_vadduws (vector bool int, vector unsigned int);
vector unsigned int vec_vadduws (vector unsigned int, vector bool int);
vector unsigned int vec_vadduws (vector unsigned int,
                                 vector unsigned int);

vector signed short vec_vaddshs (vector bool short,
                                 vector signed short);
vector signed short vec_vaddshs (vector signed short,
                                 vector bool short);
vector signed short vec_vaddshs (vector signed short,
                                 vector signed short);

vector unsigned short vec_vadduhs (vector bool short,
                                   vector unsigned short);
vector unsigned short vec_vadduhs (vector unsigned short,
                                   vector bool short);
vector unsigned short vec_vadduhs (vector unsigned short,
                                   vector unsigned short);

vector signed char vec_vaddsbs (vector bool char, vector signed char);
vector signed char vec_vaddsbs (vector signed char, vector bool char);
vector signed char vec_vaddsbs (vector signed char, vector signed char);

vector unsigned char vec_vaddubs (vector bool char,
                                  vector unsigned char);
vector unsigned char vec_vaddubs (vector unsigned char,
                                  vector bool char);
vector unsigned char vec_vaddubs (vector unsigned char,
                                  vector unsigned char);

vector float vec_and (vector float, vector float);
vector float vec_and (vector float, vector bool int);
vector float vec_and (vector bool int, vector float);
vector bool int vec_and (vector bool int, vector bool int);
vector signed int vec_and (vector bool int, vector signed int);
vector signed int vec_and (vector signed int, vector bool int);
vector signed int vec_and (vector signed int, vector signed int);
vector unsigned int vec_and (vector bool int, vector unsigned int);
vector unsigned int vec_and (vector unsigned int, vector bool int);
vector unsigned int vec_and (vector unsigned int, vector unsigned int);
vector bool short vec_and (vector bool short, vector bool short);
vector signed short vec_and (vector bool short, vector signed short);
vector signed short vec_and (vector signed short, vector bool short);
vector signed short vec_and (vector signed short, vector signed short);
vector unsigned short vec_and (vector bool short,
                               vector unsigned short);
vector unsigned short vec_and (vector unsigned short,
                               vector bool short);
vector unsigned short vec_and (vector unsigned short,
                               vector unsigned short);
vector signed char vec_and (vector bool char, vector signed char);
vector bool char vec_and (vector bool char, vector bool char);
vector signed char vec_and (vector signed char, vector bool char);
vector signed char vec_and (vector signed char, vector signed char);
vector unsigned char vec_and (vector bool char, vector unsigned char);
vector unsigned char vec_and (vector unsigned char, vector bool char);
vector unsigned char vec_and (vector unsigned char,
                              vector unsigned char);

vector float vec_andc (vector float, vector float);
vector float vec_andc (vector float, vector bool int);
vector float vec_andc (vector bool int, vector float);
vector bool int vec_andc (vector bool int, vector bool int);
vector signed int vec_andc (vector bool int, vector signed int);
vector signed int vec_andc (vector signed int, vector bool int);
vector signed int vec_andc (vector signed int, vector signed int);
vector unsigned int vec_andc (vector bool int, vector unsigned int);
vector unsigned int vec_andc (vector unsigned int, vector bool int);
vector unsigned int vec_andc (vector unsigned int, vector unsigned int);
vector bool short vec_andc (vector bool short, vector bool short);
vector signed short vec_andc (vector bool short, vector signed short);
vector signed short vec_andc (vector signed short, vector bool short);
vector signed short vec_andc (vector signed short, vector signed short);
vector unsigned short vec_andc (vector bool short,
                                vector unsigned short);
vector unsigned short vec_andc (vector unsigned short,
                                vector bool short);
vector unsigned short vec_andc (vector unsigned short,
                                vector unsigned short);
vector signed char vec_andc (vector bool char, vector signed char);
vector bool char vec_andc (vector bool char, vector bool char);
vector signed char vec_andc (vector signed char, vector bool char);
vector signed char vec_andc (vector signed char, vector signed char);
vector unsigned char vec_andc (vector bool char, vector unsigned char);
vector unsigned char vec_andc (vector unsigned char, vector bool char);
vector unsigned char vec_andc (vector unsigned char,
                               vector unsigned char);

vector unsigned char vec_avg (vector unsigned char,
                              vector unsigned char);
vector signed char vec_avg (vector signed char, vector signed char);
vector unsigned short vec_avg (vector unsigned short,
                               vector unsigned short);
vector signed short vec_avg (vector signed short, vector signed short);
vector unsigned int vec_avg (vector unsigned int, vector unsigned int);
vector signed int vec_avg (vector signed int, vector signed int);

vector signed int vec_vavgsw (vector signed int, vector signed int);

vector unsigned int vec_vavguw (vector unsigned int,
                                vector unsigned int);

vector signed short vec_vavgsh (vector signed short,
                                vector signed short);

vector unsigned short vec_vavguh (vector unsigned short,
                                  vector unsigned short);

vector signed char vec_vavgsb (vector signed char, vector signed char);

vector unsigned char vec_vavgub (vector unsigned char,
                                 vector unsigned char);

vector float vec_copysign (vector float);

vector float vec_ceil (vector float);

vector signed int vec_cmpb (vector float, vector float);

vector bool char vec_cmpeq (vector signed char, vector signed char);
vector bool char vec_cmpeq (vector unsigned char, vector unsigned char);
vector bool short vec_cmpeq (vector signed short, vector signed short);
vector bool short vec_cmpeq (vector unsigned short,
                             vector unsigned short);
vector bool int vec_cmpeq (vector signed int, vector signed int);
vector bool int vec_cmpeq (vector unsigned int, vector unsigned int);
vector bool int vec_cmpeq (vector float, vector float);

vector bool int vec_vcmpeqfp (vector float, vector float);

vector bool int vec_vcmpequw (vector signed int, vector signed int);
vector bool int vec_vcmpequw (vector unsigned int, vector unsigned int);

vector bool short vec_vcmpequh (vector signed short,
                                vector signed short);
vector bool short vec_vcmpequh (vector unsigned short,
                                vector unsigned short);

vector bool char vec_vcmpequb (vector signed char, vector signed char);
vector bool char vec_vcmpequb (vector unsigned char,
                               vector unsigned char);

vector bool int vec_cmpge (vector float, vector float);

vector bool char vec_cmpgt (vector unsigned char, vector unsigned char);
vector bool char vec_cmpgt (vector signed char, vector signed char);
vector bool short vec_cmpgt (vector unsigned short,
                             vector unsigned short);
vector bool short vec_cmpgt (vector signed short, vector signed short);
vector bool int vec_cmpgt (vector unsigned int, vector unsigned int);
vector bool int vec_cmpgt (vector signed int, vector signed int);
vector bool int vec_cmpgt (vector float, vector float);

vector bool int vec_vcmpgtfp (vector float, vector float);

vector bool int vec_vcmpgtsw (vector signed int, vector signed int);

vector bool int vec_vcmpgtuw (vector unsigned int, vector unsigned int);

vector bool short vec_vcmpgtsh (vector signed short,
                                vector signed short);

vector bool short vec_vcmpgtuh (vector unsigned short,
                                vector unsigned short);

vector bool char vec_vcmpgtsb (vector signed char, vector signed char);

vector bool char vec_vcmpgtub (vector unsigned char,
                               vector unsigned char);

vector bool int vec_cmple (vector float, vector float);

vector bool char vec_cmplt (vector unsigned char, vector unsigned char);
vector bool char vec_cmplt (vector signed char, vector signed char);
vector bool short vec_cmplt (vector unsigned short,
                             vector unsigned short);
vector bool short vec_cmplt (vector signed short, vector signed short);
vector bool int vec_cmplt (vector unsigned int, vector unsigned int);
vector bool int vec_cmplt (vector signed int, vector signed int);
vector bool int vec_cmplt (vector float, vector float);

vector float vec_cpsgn (vector float, vector float);

vector float vec_ctf (vector unsigned int, const int);
vector float vec_ctf (vector signed int, const int);
vector double vec_ctf (vector unsigned long, const int);
vector double vec_ctf (vector signed long, const int);

vector float vec_vcfsx (vector signed int, const int);

vector float vec_vcfux (vector unsigned int, const int);

vector signed int vec_cts (vector float, const int);
vector signed long vec_cts (vector double, const int);

vector unsigned int vec_ctu (vector float, const int);
vector unsigned long vec_ctu (vector double, const int);

void vec_dss (const int);

void vec_dssall (void);

void vec_dst (const vector unsigned char *, int, const int);
void vec_dst (const vector signed char *, int, const int);
void vec_dst (const vector bool char *, int, const int);
void vec_dst (const vector unsigned short *, int, const int);
void vec_dst (const vector signed short *, int, const int);
void vec_dst (const vector bool short *, int, const int);
void vec_dst (const vector pixel *, int, const int);
void vec_dst (const vector unsigned int *, int, const int);
void vec_dst (const vector signed int *, int, const int);
void vec_dst (const vector bool int *, int, const int);
void vec_dst (const vector float *, int, const int);
void vec_dst (const unsigned char *, int, const int);
void vec_dst (const signed char *, int, const int);
void vec_dst (const unsigned short *, int, const int);
void vec_dst (const short *, int, const int);
void vec_dst (const unsigned int *, int, const int);
void vec_dst (const int *, int, const int);
void vec_dst (const unsigned long *, int, const int);
void vec_dst (const long *, int, const int);
void vec_dst (const float *, int, const int);

void vec_dstst (const vector unsigned char *, int, const int);
void vec_dstst (const vector signed char *, int, const int);
void vec_dstst (const vector bool char *, int, const int);
void vec_dstst (const vector unsigned short *, int, const int);
void vec_dstst (const vector signed short *, int, const int);
void vec_dstst (const vector bool short *, int, const int);
void vec_dstst (const vector pixel *, int, const int);
void vec_dstst (const vector unsigned int *, int, const int);
void vec_dstst (const vector signed int *, int, const int);
void vec_dstst (const vector bool int *, int, const int);
void vec_dstst (const vector float *, int, const int);
void vec_dstst (const unsigned char *, int, const int);
void vec_dstst (const signed char *, int, const int);
void vec_dstst (const unsigned short *, int, const int);
void vec_dstst (const short *, int, const int);
void vec_dstst (const unsigned int *, int, const int);
void vec_dstst (const int *, int, const int);
void vec_dstst (const unsigned long *, int, const int);
void vec_dstst (const long *, int, const int);
void vec_dstst (const float *, int, const int);

void vec_dststt (const vector unsigned char *, int, const int);
void vec_dststt (const vector signed char *, int, const int);
void vec_dststt (const vector bool char *, int, const int);
void vec_dststt (const vector unsigned short *, int, const int);
void vec_dststt (const vector signed short *, int, const int);
void vec_dststt (const vector bool short *, int, const int);
void vec_dststt (const vector pixel *, int, const int);
void vec_dststt (const vector unsigned int *, int, const int);
void vec_dststt (const vector signed int *, int, const int);
void vec_dststt (const vector bool int *, int, const int);
void vec_dststt (const vector float *, int, const int);
void vec_dststt (const unsigned char *, int, const int);
void vec_dststt (const signed char *, int, const int);
void vec_dststt (const unsigned short *, int, const int);
void vec_dststt (const short *, int, const int);
void vec_dststt (const unsigned int *, int, const int);
void vec_dststt (const int *, int, const int);
void vec_dststt (const unsigned long *, int, const int);
void vec_dststt (const long *, int, const int);
void vec_dststt (const float *, int, const int);

void vec_dstt (const vector unsigned char *, int, const int);
void vec_dstt (const vector signed char *, int, const int);
void vec_dstt (const vector bool char *, int, const int);
void vec_dstt (const vector unsigned short *, int, const int);
void vec_dstt (const vector signed short *, int, const int);
void vec_dstt (const vector bool short *, int, const int);
void vec_dstt (const vector pixel *, int, const int);
void vec_dstt (const vector unsigned int *, int, const int);
void vec_dstt (const vector signed int *, int, const int);
void vec_dstt (const vector bool int *, int, const int);
void vec_dstt (const vector float *, int, const int);
void vec_dstt (const unsigned char *, int, const int);
void vec_dstt (const signed char *, int, const int);
void vec_dstt (const unsigned short *, int, const int);
void vec_dstt (const short *, int, const int);
void vec_dstt (const unsigned int *, int, const int);
void vec_dstt (const int *, int, const int);
void vec_dstt (const unsigned long *, int, const int);
void vec_dstt (const long *, int, const int);
void vec_dstt (const float *, int, const int);

vector float vec_expte (vector float);

vector float vec_floor (vector float);

vector float vec_ld (int, const vector float *);
vector float vec_ld (int, const float *);
vector bool int vec_ld (int, const vector bool int *);
vector signed int vec_ld (int, const vector signed int *);
vector signed int vec_ld (int, const int *);
vector signed int vec_ld (int, const long *);
vector unsigned int vec_ld (int, const vector unsigned int *);
vector unsigned int vec_ld (int, const unsigned int *);
vector unsigned int vec_ld (int, const unsigned long *);
vector bool short vec_ld (int, const vector bool short *);
vector pixel vec_ld (int, const vector pixel *);
vector signed short vec_ld (int, const vector signed short *);
vector signed short vec_ld (int, const short *);
vector unsigned short vec_ld (int, const vector unsigned short *);
vector unsigned short vec_ld (int, const unsigned short *);
vector bool char vec_ld (int, const vector bool char *);
vector signed char vec_ld (int, const vector signed char *);
vector signed char vec_ld (int, const signed char *);
vector unsigned char vec_ld (int, const vector unsigned char *);
vector unsigned char vec_ld (int, const unsigned char *);

vector signed char vec_lde (int, const signed char *);
vector unsigned char vec_lde (int, const unsigned char *);
vector signed short vec_lde (int, const short *);
vector unsigned short vec_lde (int, const unsigned short *);
vector float vec_lde (int, const float *);
vector signed int vec_lde (int, const int *);
vector unsigned int vec_lde (int, const unsigned int *);
vector signed int vec_lde (int, const long *);
vector unsigned int vec_lde (int, const unsigned long *);

vector float vec_lvewx (int, float *);
vector signed int vec_lvewx (int, int *);
vector unsigned int vec_lvewx (int, unsigned int *);
vector signed int vec_lvewx (int, long *);
vector unsigned int vec_lvewx (int, unsigned long *);

vector signed short vec_lvehx (int, short *);
vector unsigned short vec_lvehx (int, unsigned short *);

vector signed char vec_lvebx (int, char *);
vector unsigned char vec_lvebx (int, unsigned char *);

vector float vec_ldl (int, const vector float *);
vector float vec_ldl (int, const float *);
vector bool int vec_ldl (int, const vector bool int *);
vector signed int vec_ldl (int, const vector signed int *);
vector signed int vec_ldl (int, const int *);
vector signed int vec_ldl (int, const long *);
vector unsigned int vec_ldl (int, const vector unsigned int *);
vector unsigned int vec_ldl (int, const unsigned int *);
vector unsigned int vec_ldl (int, const unsigned long *);
vector bool short vec_ldl (int, const vector bool short *);
vector pixel vec_ldl (int, const vector pixel *);
vector signed short vec_ldl (int, const vector signed short *);
vector signed short vec_ldl (int, const short *);
vector unsigned short vec_ldl (int, const vector unsigned short *);
vector unsigned short vec_ldl (int, const unsigned short *);
vector bool char vec_ldl (int, const vector bool char *);
vector signed char vec_ldl (int, const vector signed char *);
vector signed char vec_ldl (int, const signed char *);
vector unsigned char vec_ldl (int, const vector unsigned char *);
vector unsigned char vec_ldl (int, const unsigned char *);

vector float vec_loge (vector float);

vector unsigned char vec_lvsl (int, const volatile unsigned char *);
vector unsigned char vec_lvsl (int, const volatile signed char *);
vector unsigned char vec_lvsl (int, const volatile unsigned short *);
vector unsigned char vec_lvsl (int, const volatile short *);
vector unsigned char vec_lvsl (int, const volatile unsigned int *);
vector unsigned char vec_lvsl (int, const volatile int *);
vector unsigned char vec_lvsl (int, const volatile unsigned long *);
vector unsigned char vec_lvsl (int, const volatile long *);
vector unsigned char vec_lvsl (int, const volatile float *);

vector unsigned char vec_lvsr (int, const volatile unsigned char *);
vector unsigned char vec_lvsr (int, const volatile signed char *);
vector unsigned char vec_lvsr (int, const volatile unsigned short *);
vector unsigned char vec_lvsr (int, const volatile short *);
vector unsigned char vec_lvsr (int, const volatile unsigned int *);
vector unsigned char vec_lvsr (int, const volatile int *);
vector unsigned char vec_lvsr (int, const volatile unsigned long *);
vector unsigned char vec_lvsr (int, const volatile long *);
vector unsigned char vec_lvsr (int, const volatile float *);

vector float vec_madd (vector float, vector float, vector float);

vector signed short vec_madds (vector signed short,
                               vector signed short,
                               vector signed short);

vector unsigned char vec_max (vector bool char, vector unsigned char);
vector unsigned char vec_max (vector unsigned char, vector bool char);
vector unsigned char vec_max (vector unsigned char,
                              vector unsigned char);
vector signed char vec_max (vector bool char, vector signed char);
vector signed char vec_max (vector signed char, vector bool char);
vector signed char vec_max (vector signed char, vector signed char);
vector unsigned short vec_max (vector bool short,
                               vector unsigned short);
vector unsigned short vec_max (vector unsigned short,
                               vector bool short);
vector unsigned short vec_max (vector unsigned short,
                               vector unsigned short);
vector signed short vec_max (vector bool short, vector signed short);
vector signed short vec_max (vector signed short, vector bool short);
vector signed short vec_max (vector signed short, vector signed short);
vector unsigned int vec_max (vector bool int, vector unsigned int);
vector unsigned int vec_max (vector unsigned int, vector bool int);
vector unsigned int vec_max (vector unsigned int, vector unsigned int);
vector signed int vec_max (vector bool int, vector signed int);
vector signed int vec_max (vector signed int, vector bool int);
vector signed int vec_max (vector signed int, vector signed int);
vector float vec_max (vector float, vector float);

vector float vec_vmaxfp (vector float, vector float);

vector signed int vec_vmaxsw (vector bool int, vector signed int);
vector signed int vec_vmaxsw (vector signed int, vector bool int);
vector signed int vec_vmaxsw (vector signed int, vector signed int);

vector unsigned int vec_vmaxuw (vector bool int, vector unsigned int);
vector unsigned int vec_vmaxuw (vector unsigned int, vector bool int);
vector unsigned int vec_vmaxuw (vector unsigned int,
                                vector unsigned int);

vector signed short vec_vmaxsh (vector bool short, vector signed short);
vector signed short vec_vmaxsh (vector signed short, vector bool short);
vector signed short vec_vmaxsh (vector signed short,
                                vector signed short);

vector unsigned short vec_vmaxuh (vector bool short,
                                  vector unsigned short);
vector unsigned short vec_vmaxuh (vector unsigned short,
                                  vector bool short);
vector unsigned short vec_vmaxuh (vector unsigned short,
                                  vector unsigned short);

vector signed char vec_vmaxsb (vector bool char, vector signed char);
vector signed char vec_vmaxsb (vector signed char, vector bool char);
vector signed char vec_vmaxsb (vector signed char, vector signed char);

vector unsigned char vec_vmaxub (vector bool char,
                                 vector unsigned char);
vector unsigned char vec_vmaxub (vector unsigned char,
                                 vector bool char);
vector unsigned char vec_vmaxub (vector unsigned char,
                                 vector unsigned char);

vector bool char vec_mergeh (vector bool char, vector bool char);
vector signed char vec_mergeh (vector signed char, vector signed char);
vector unsigned char vec_mergeh (vector unsigned char,
                                 vector unsigned char);
vector bool short vec_mergeh (vector bool short, vector bool short);
vector pixel vec_mergeh (vector pixel, vector pixel);
vector signed short vec_mergeh (vector signed short,
                                vector signed short);
vector unsigned short vec_mergeh (vector unsigned short,
                                  vector unsigned short);
vector float vec_mergeh (vector float, vector float);
vector bool int vec_mergeh (vector bool int, vector bool int);
vector signed int vec_mergeh (vector signed int, vector signed int);
vector unsigned int vec_mergeh (vector unsigned int,
                                vector unsigned int);

vector float vec_vmrghw (vector float, vector float);
vector bool int vec_vmrghw (vector bool int, vector bool int);
vector signed int vec_vmrghw (vector signed int, vector signed int);
vector unsigned int vec_vmrghw (vector unsigned int,
                                vector unsigned int);

vector bool short vec_vmrghh (vector bool short, vector bool short);
vector signed short vec_vmrghh (vector signed short,
                                vector signed short);
vector unsigned short vec_vmrghh (vector unsigned short,
                                  vector unsigned short);
vector pixel vec_vmrghh (vector pixel, vector pixel);

vector bool char vec_vmrghb (vector bool char, vector bool char);
vector signed char vec_vmrghb (vector signed char, vector signed char);
vector unsigned char vec_vmrghb (vector unsigned char,
                                 vector unsigned char);

vector bool char vec_mergel (vector bool char, vector bool char);
vector signed char vec_mergel (vector signed char, vector signed char);
vector unsigned char vec_mergel (vector unsigned char,
                                 vector unsigned char);
vector bool short vec_mergel (vector bool short, vector bool short);
vector pixel vec_mergel (vector pixel, vector pixel);
vector signed short vec_mergel (vector signed short,
                                vector signed short);
vector unsigned short vec_mergel (vector unsigned short,
                                  vector unsigned short);
vector float vec_mergel (vector float, vector float);
vector bool int vec_mergel (vector bool int, vector bool int);
vector signed int vec_mergel (vector signed int, vector signed int);
vector unsigned int vec_mergel (vector unsigned int,
                                vector unsigned int);

vector float vec_vmrglw (vector float, vector float);
vector signed int vec_vmrglw (vector signed int, vector signed int);
vector unsigned int vec_vmrglw (vector unsigned int,
                                vector unsigned int);
vector bool int vec_vmrglw (vector bool int, vector bool int);

vector bool short vec_vmrglh (vector bool short, vector bool short);
vector signed short vec_vmrglh (vector signed short,
                                vector signed short);
vector unsigned short vec_vmrglh (vector unsigned short,
                                  vector unsigned short);
vector pixel vec_vmrglh (vector pixel, vector pixel);

vector bool char vec_vmrglb (vector bool char, vector bool char);
vector signed char vec_vmrglb (vector signed char, vector signed char);
vector unsigned char vec_vmrglb (vector unsigned char,
                                 vector unsigned char);

vector unsigned short vec_mfvscr (void);

vector unsigned char vec_min (vector bool char, vector unsigned char);
vector unsigned char vec_min (vector unsigned char, vector bool char);
vector unsigned char vec_min (vector unsigned char,
                              vector unsigned char);
vector signed char vec_min (vector bool char, vector signed char);
vector signed char vec_min (vector signed char, vector bool char);
vector signed char vec_min (vector signed char, vector signed char);
vector unsigned short vec_min (vector bool short,
                               vector unsigned short);
vector unsigned short vec_min (vector unsigned short,
                               vector bool short);
vector unsigned short vec_min (vector unsigned short,
                               vector unsigned short);
vector signed short vec_min (vector bool short, vector signed short);
vector signed short vec_min (vector signed short, vector bool short);
vector signed short vec_min (vector signed short, vector signed short);
vector unsigned int vec_min (vector bool int, vector unsigned int);
vector unsigned int vec_min (vector unsigned int, vector bool int);
vector unsigned int vec_min (vector unsigned int, vector unsigned int);
vector signed int vec_min (vector bool int, vector signed int);
vector signed int vec_min (vector signed int, vector bool int);
vector signed int vec_min (vector signed int, vector signed int);
vector float vec_min (vector float, vector float);

vector float vec_vminfp (vector float, vector float);

vector signed int vec_vminsw (vector bool int, vector signed int);
vector signed int vec_vminsw (vector signed int, vector bool int);
vector signed int vec_vminsw (vector signed int, vector signed int);

vector unsigned int vec_vminuw (vector bool int, vector unsigned int);
vector unsigned int vec_vminuw (vector unsigned int, vector bool int);
vector unsigned int vec_vminuw (vector unsigned int,
                                vector unsigned int);

vector signed short vec_vminsh (vector bool short, vector signed short);
vector signed short vec_vminsh (vector signed short, vector bool short);
vector signed short vec_vminsh (vector signed short,
                                vector signed short);

vector unsigned short vec_vminuh (vector bool short,
                                  vector unsigned short);
vector unsigned short vec_vminuh (vector unsigned short,
                                  vector bool short);
vector unsigned short vec_vminuh (vector unsigned short,
                                  vector unsigned short);

vector signed char vec_vminsb (vector bool char, vector signed char);
vector signed char vec_vminsb (vector signed char, vector bool char);
vector signed char vec_vminsb (vector signed char, vector signed char);

vector unsigned char vec_vminub (vector bool char,
                                 vector unsigned char);
vector unsigned char vec_vminub (vector unsigned char,
                                 vector bool char);
vector unsigned char vec_vminub (vector unsigned char,
                                 vector unsigned char);

vector signed short vec_mladd (vector signed short,
                               vector signed short,
                               vector signed short);
vector signed short vec_mladd (vector signed short,
                               vector unsigned short,
                               vector unsigned short);
vector signed short vec_mladd (vector unsigned short,
                               vector signed short,
                               vector signed short);
vector unsigned short vec_mladd (vector unsigned short,
                                 vector unsigned short,
                                 vector unsigned short);

vector signed short vec_mradds (vector signed short,
                                vector signed short,
                                vector signed short);

vector unsigned int vec_msum (vector unsigned char,
                              vector unsigned char,
                              vector unsigned int);
vector signed int vec_msum (vector signed char,
                            vector unsigned char,
                            vector signed int);
vector unsigned int vec_msum (vector unsigned short,
                              vector unsigned short,
                              vector unsigned int);
vector signed int vec_msum (vector signed short,
                            vector signed short,
                            vector signed int);

vector signed int vec_vmsumshm (vector signed short,
                                vector signed short,
                                vector signed int);

vector unsigned int vec_vmsumuhm (vector unsigned short,
                                  vector unsigned short,
                                  vector unsigned int);

vector signed int vec_vmsummbm (vector signed char,
                                vector unsigned char,
                                vector signed int);

vector unsigned int vec_vmsumubm (vector unsigned char,
                                  vector unsigned char,
                                  vector unsigned int);

vector unsigned int vec_msums (vector unsigned short,
                               vector unsigned short,
                               vector unsigned int);
vector signed int vec_msums (vector signed short,
                             vector signed short,
                             vector signed int);

vector signed int vec_vmsumshs (vector signed short,
                                vector signed short,
                                vector signed int);

vector unsigned int vec_vmsumuhs (vector unsigned short,
                                  vector unsigned short,
                                  vector unsigned int);

void vec_mtvscr (vector signed int);
void vec_mtvscr (vector unsigned int);
void vec_mtvscr (vector bool int);
void vec_mtvscr (vector signed short);
void vec_mtvscr (vector unsigned short);
void vec_mtvscr (vector bool short);
void vec_mtvscr (vector pixel);
void vec_mtvscr (vector signed char);
void vec_mtvscr (vector unsigned char);
void vec_mtvscr (vector bool char);

vector unsigned short vec_mule (vector unsigned char,
                                vector unsigned char);
vector signed short vec_mule (vector signed char,
                              vector signed char);
vector unsigned int vec_mule (vector unsigned short,
                              vector unsigned short);
vector signed int vec_mule (vector signed short, vector signed short);

vector signed int vec_vmulesh (vector signed short,
                               vector signed short);

vector unsigned int vec_vmuleuh (vector unsigned short,
                                 vector unsigned short);

vector signed short vec_vmulesb (vector signed char,
                                 vector signed char);

vector unsigned short vec_vmuleub (vector unsigned char,
                                  vector unsigned char);

vector unsigned short vec_mulo (vector unsigned char,
                                vector unsigned char);
vector signed short vec_mulo (vector signed char, vector signed char);
vector unsigned int vec_mulo (vector unsigned short,
                              vector unsigned short);
vector signed int vec_mulo (vector signed short, vector signed short);

vector signed int vec_vmulosh (vector signed short,
                               vector signed short);

vector unsigned int vec_vmulouh (vector unsigned short,
                                 vector unsigned short);

vector signed short vec_vmulosb (vector signed char,
                                 vector signed char);

vector unsigned short vec_vmuloub (vector unsigned char,
                                   vector unsigned char);

vector float vec_nmsub (vector float, vector float, vector float);

vector float vec_nor (vector float, vector float);
vector signed int vec_nor (vector signed int, vector signed int);
vector unsigned int vec_nor (vector unsigned int, vector unsigned int);
vector bool int vec_nor (vector bool int, vector bool int);
vector signed short vec_nor (vector signed short, vector signed short);
vector unsigned short vec_nor (vector unsigned short,
                               vector unsigned short);
vector bool short vec_nor (vector bool short, vector bool short);
vector signed char vec_nor (vector signed char, vector signed char);
vector unsigned char vec_nor (vector unsigned char,
                              vector unsigned char);
vector bool char vec_nor (vector bool char, vector bool char);

vector float vec_or (vector float, vector float);
vector float vec_or (vector float, vector bool int);
vector float vec_or (vector bool int, vector float);
vector bool int vec_or (vector bool int, vector bool int);
vector signed int vec_or (vector bool int, vector signed int);
vector signed int vec_or (vector signed int, vector bool int);
vector signed int vec_or (vector signed int, vector signed int);
vector unsigned int vec_or (vector bool int, vector unsigned int);
vector unsigned int vec_or (vector unsigned int, vector bool int);
vector unsigned int vec_or (vector unsigned int, vector unsigned int);
vector bool short vec_or (vector bool short, vector bool short);
vector signed short vec_or (vector bool short, vector signed short);
vector signed short vec_or (vector signed short, vector bool short);
vector signed short vec_or (vector signed short, vector signed short);
vector unsigned short vec_or (vector bool short, vector unsigned short);
vector unsigned short vec_or (vector unsigned short, vector bool short);
vector unsigned short vec_or (vector unsigned short,
                              vector unsigned short);
vector signed char vec_or (vector bool char, vector signed char);
vector bool char vec_or (vector bool char, vector bool char);
vector signed char vec_or (vector signed char, vector bool char);
vector signed char vec_or (vector signed char, vector signed char);
vector unsigned char vec_or (vector bool char, vector unsigned char);
vector unsigned char vec_or (vector unsigned char, vector bool char);
vector unsigned char vec_or (vector unsigned char,
                             vector unsigned char);

vector signed char vec_pack (vector signed short, vector signed short);
vector unsigned char vec_pack (vector unsigned short,
                               vector unsigned short);
vector bool char vec_pack (vector bool short, vector bool short);
vector signed short vec_pack (vector signed int, vector signed int);
vector unsigned short vec_pack (vector unsigned int,
                                vector unsigned int);
vector bool short vec_pack (vector bool int, vector bool int);

vector bool short vec_vpkuwum (vector bool int, vector bool int);
vector signed short vec_vpkuwum (vector signed int, vector signed int);
vector unsigned short vec_vpkuwum (vector unsigned int,
                                   vector unsigned int);

vector bool char vec_vpkuhum (vector bool short, vector bool short);
vector signed char vec_vpkuhum (vector signed short,
                                vector signed short);
vector unsigned char vec_vpkuhum (vector unsigned short,
                                  vector unsigned short);

vector pixel vec_packpx (vector unsigned int, vector unsigned int);

vector unsigned char vec_packs (vector unsigned short,
                                vector unsigned short);
vector signed char vec_packs (vector signed short, vector signed short);
vector unsigned short vec_packs (vector unsigned int,
                                 vector unsigned int);
vector signed short vec_packs (vector signed int, vector signed int);

vector signed short vec_vpkswss (vector signed int, vector signed int);

vector unsigned short vec_vpkuwus (vector unsigned int,
                                   vector unsigned int);

vector signed char vec_vpkshss (vector signed short,
                                vector signed short);

vector unsigned char vec_vpkuhus (vector unsigned short,
                                  vector unsigned short);

vector unsigned char vec_packsu (vector unsigned short,
                                 vector unsigned short);
vector unsigned char vec_packsu (vector signed short,
                                 vector signed short);
vector unsigned short vec_packsu (vector unsigned int,
                                  vector unsigned int);
vector unsigned short vec_packsu (vector signed int, vector signed int);

vector unsigned short vec_vpkswus (vector signed int,
                                   vector signed int);

vector unsigned char vec_vpkshus (vector signed short,
                                  vector signed short);

vector float vec_perm (vector float,
                       vector float,
                       vector unsigned char);
vector signed int vec_perm (vector signed int,
                            vector signed int,
                            vector unsigned char);
vector unsigned int vec_perm (vector unsigned int,
                              vector unsigned int,
                              vector unsigned char);
vector bool int vec_perm (vector bool int,
                          vector bool int,
                          vector unsigned char);
vector signed short vec_perm (vector signed short,
                              vector signed short,
                              vector unsigned char);
vector unsigned short vec_perm (vector unsigned short,
                                vector unsigned short,
                                vector unsigned char);
vector bool short vec_perm (vector bool short,
                            vector bool short,
                            vector unsigned char);
vector pixel vec_perm (vector pixel,
                       vector pixel,
                       vector unsigned char);
vector signed char vec_perm (vector signed char,
                             vector signed char,
                             vector unsigned char);
vector unsigned char vec_perm (vector unsigned char,
                               vector unsigned char,
                               vector unsigned char);
vector bool char vec_perm (vector bool char,
                           vector bool char,
                           vector unsigned char);

vector float vec_re (vector float);

vector signed char vec_rl (vector signed char,
                           vector unsigned char);
vector unsigned char vec_rl (vector unsigned char,
                             vector unsigned char);
vector signed short vec_rl (vector signed short, vector unsigned short);
vector unsigned short vec_rl (vector unsigned short,
                              vector unsigned short);
vector signed int vec_rl (vector signed int, vector unsigned int);
vector unsigned int vec_rl (vector unsigned int, vector unsigned int);

vector signed int vec_vrlw (vector signed int, vector unsigned int);
vector unsigned int vec_vrlw (vector unsigned int, vector unsigned int);

vector signed short vec_vrlh (vector signed short,
                              vector unsigned short);
vector unsigned short vec_vrlh (vector unsigned short,
                                vector unsigned short);

vector signed char vec_vrlb (vector signed char, vector unsigned char);
vector unsigned char vec_vrlb (vector unsigned char,
                               vector unsigned char);

vector float vec_round (vector float);

vector float vec_recip (vector float, vector float);

vector float vec_rsqrt (vector float);

vector float vec_rsqrte (vector float);

vector float vec_sel (vector float, vector float, vector bool int);
vector float vec_sel (vector float, vector float, vector unsigned int);
vector signed int vec_sel (vector signed int,
                           vector signed int,
                           vector bool int);
vector signed int vec_sel (vector signed int,
                           vector signed int,
                           vector unsigned int);
vector unsigned int vec_sel (vector unsigned int,
                             vector unsigned int,
                             vector bool int);
vector unsigned int vec_sel (vector unsigned int,
                             vector unsigned int,
                             vector unsigned int);
vector bool int vec_sel (vector bool int,
                         vector bool int,
                         vector bool int);
vector bool int vec_sel (vector bool int,
                         vector bool int,
                         vector unsigned int);
vector signed short vec_sel (vector signed short,
                             vector signed short,
                             vector bool short);
vector signed short vec_sel (vector signed short,
                             vector signed short,
                             vector unsigned short);
vector unsigned short vec_sel (vector unsigned short,
                               vector unsigned short,
                               vector bool short);
vector unsigned short vec_sel (vector unsigned short,
                               vector unsigned short,
                               vector unsigned short);
vector bool short vec_sel (vector bool short,
                           vector bool short,
                           vector bool short);
vector bool short vec_sel (vector bool short,
                           vector bool short,
                           vector unsigned short);
vector signed char vec_sel (vector signed char,
                            vector signed char,
                            vector bool char);
vector signed char vec_sel (vector signed char,
                            vector signed char,
                            vector unsigned char);
vector unsigned char vec_sel (vector unsigned char,
                              vector unsigned char,
                              vector bool char);
vector unsigned char vec_sel (vector unsigned char,
                              vector unsigned char,
                              vector unsigned char);
vector bool char vec_sel (vector bool char,
                          vector bool char,
                          vector bool char);
vector bool char vec_sel (vector bool char,
                          vector bool char,
                          vector unsigned char);

vector signed char vec_sl (vector signed char,
                           vector unsigned char);
vector unsigned char vec_sl (vector unsigned char,
                             vector unsigned char);
vector signed short vec_sl (vector signed short, vector unsigned short);
vector unsigned short vec_sl (vector unsigned short,
                              vector unsigned short);
vector signed int vec_sl (vector signed int, vector unsigned int);
vector unsigned int vec_sl (vector unsigned int, vector unsigned int);

vector signed int vec_vslw (vector signed int, vector unsigned int);
vector unsigned int vec_vslw (vector unsigned int, vector unsigned int);

vector signed short vec_vslh (vector signed short,
                              vector unsigned short);
vector unsigned short vec_vslh (vector unsigned short,
                                vector unsigned short);

vector signed char vec_vslb (vector signed char, vector unsigned char);
vector unsigned char vec_vslb (vector unsigned char,
                               vector unsigned char);

vector float vec_sld (vector float, vector float, const int);
vector signed int vec_sld (vector signed int,
                           vector signed int,
                           const int);
vector unsigned int vec_sld (vector unsigned int,
                             vector unsigned int,
                             const int);
vector bool int vec_sld (vector bool int,
                         vector bool int,
                         const int);
vector signed short vec_sld (vector signed short,
                             vector signed short,
                             const int);
vector unsigned short vec_sld (vector unsigned short,
                               vector unsigned short,
                               const int);
vector bool short vec_sld (vector bool short,
                           vector bool short,
                           const int);
vector pixel vec_sld (vector pixel,
                      vector pixel,
                      const int);
vector signed char vec_sld (vector signed char,
                            vector signed char,
                            const int);
vector unsigned char vec_sld (vector unsigned char,
                              vector unsigned char,
                              const int);
vector bool char vec_sld (vector bool char,
                          vector bool char,
                          const int);

vector signed int vec_sll (vector signed int,
                           vector unsigned int);
vector signed int vec_sll (vector signed int,
                           vector unsigned short);
vector signed int vec_sll (vector signed int,
                           vector unsigned char);
vector unsigned int vec_sll (vector unsigned int,
                             vector unsigned int);
vector unsigned int vec_sll (vector unsigned int,
                             vector unsigned short);
vector unsigned int vec_sll (vector unsigned int,
                             vector unsigned char);
vector bool int vec_sll (vector bool int,
                         vector unsigned int);
vector bool int vec_sll (vector bool int,
                         vector unsigned short);
vector bool int vec_sll (vector bool int,
                         vector unsigned char);
vector signed short vec_sll (vector signed short,
                             vector unsigned int);
vector signed short vec_sll (vector signed short,
                             vector unsigned short);
vector signed short vec_sll (vector signed short,
                             vector unsigned char);
vector unsigned short vec_sll (vector unsigned short,
                               vector unsigned int);
vector unsigned short vec_sll (vector unsigned short,
                               vector unsigned short);
vector unsigned short vec_sll (vector unsigned short,
                               vector unsigned char);
vector bool short vec_sll (vector bool short, vector unsigned int);
vector bool short vec_sll (vector bool short, vector unsigned short);
vector bool short vec_sll (vector bool short, vector unsigned char);
vector pixel vec_sll (vector pixel, vector unsigned int);
vector pixel vec_sll (vector pixel, vector unsigned short);
vector pixel vec_sll (vector pixel, vector unsigned char);
vector signed char vec_sll (vector signed char, vector unsigned int);
vector signed char vec_sll (vector signed char, vector unsigned short);
vector signed char vec_sll (vector signed char, vector unsigned char);
vector unsigned char vec_sll (vector unsigned char,
                              vector unsigned int);
vector unsigned char vec_sll (vector unsigned char,
                              vector unsigned short);
vector unsigned char vec_sll (vector unsigned char,
                              vector unsigned char);
vector bool char vec_sll (vector bool char, vector unsigned int);
vector bool char vec_sll (vector bool char, vector unsigned short);
vector bool char vec_sll (vector bool char, vector unsigned char);

vector float vec_slo (vector float, vector signed char);
vector float vec_slo (vector float, vector unsigned char);
vector signed int vec_slo (vector signed int, vector signed char);
vector signed int vec_slo (vector signed int, vector unsigned char);
vector unsigned int vec_slo (vector unsigned int, vector signed char);
vector unsigned int vec_slo (vector unsigned int, vector unsigned char);
vector signed short vec_slo (vector signed short, vector signed char);
vector signed short vec_slo (vector signed short, vector unsigned char);
vector unsigned short vec_slo (vector unsigned short,
                               vector signed char);
vector unsigned short vec_slo (vector unsigned short,
                               vector unsigned char);
vector pixel vec_slo (vector pixel, vector signed char);
vector pixel vec_slo (vector pixel, vector unsigned char);
vector signed char vec_slo (vector signed char, vector signed char);
vector signed char vec_slo (vector signed char, vector unsigned char);
vector unsigned char vec_slo (vector unsigned char, vector signed char);
vector unsigned char vec_slo (vector unsigned char,
                              vector unsigned char);

vector signed char vec_splat (vector signed char, const int);
vector unsigned char vec_splat (vector unsigned char, const int);
vector bool char vec_splat (vector bool char, const int);
vector signed short vec_splat (vector signed short, const int);
vector unsigned short vec_splat (vector unsigned short, const int);
vector bool short vec_splat (vector bool short, const int);
vector pixel vec_splat (vector pixel, const int);
vector float vec_splat (vector float, const int);
vector signed int vec_splat (vector signed int, const int);
vector unsigned int vec_splat (vector unsigned int, const int);
vector bool int vec_splat (vector bool int, const int);
vector signed long vec_splat (vector signed long, const int);
vector unsigned long vec_splat (vector unsigned long, const int);

vector signed char vec_splats (signed char);
vector unsigned char vec_splats (unsigned char);
vector signed short vec_splats (signed short);
vector unsigned short vec_splats (unsigned short);
vector signed int vec_splats (signed int);
vector unsigned int vec_splats (unsigned int);
vector float vec_splats (float);

vector float vec_vspltw (vector float, const int);
vector signed int vec_vspltw (vector signed int, const int);
vector unsigned int vec_vspltw (vector unsigned int, const int);
vector bool int vec_vspltw (vector bool int, const int);

vector bool short vec_vsplth (vector bool short, const int);
vector signed short vec_vsplth (vector signed short, const int);
vector unsigned short vec_vsplth (vector unsigned short, const int);
vector pixel vec_vsplth (vector pixel, const int);

vector signed char vec_vspltb (vector signed char, const int);
vector unsigned char vec_vspltb (vector unsigned char, const int);
vector bool char vec_vspltb (vector bool char, const int);

vector signed char vec_splat_s8 (const int);

vector signed short vec_splat_s16 (const int);

vector signed int vec_splat_s32 (const int);

vector unsigned char vec_splat_u8 (const int);

vector unsigned short vec_splat_u16 (const int);

vector unsigned int vec_splat_u32 (const int);

vector signed char vec_sr (vector signed char, vector unsigned char);
vector unsigned char vec_sr (vector unsigned char,
                             vector unsigned char);
vector signed short vec_sr (vector signed short,
                            vector unsigned short);
vector unsigned short vec_sr (vector unsigned short,
                              vector unsigned short);
vector signed int vec_sr (vector signed int, vector unsigned int);
vector unsigned int vec_sr (vector unsigned int, vector unsigned int);

vector signed int vec_vsrw (vector signed int, vector unsigned int);
vector unsigned int vec_vsrw (vector unsigned int, vector unsigned int);

vector signed short vec_vsrh (vector signed short,
                              vector unsigned short);
vector unsigned short vec_vsrh (vector unsigned short,
                                vector unsigned short);

vector signed char vec_vsrb (vector signed char, vector unsigned char);
vector unsigned char vec_vsrb (vector unsigned char,
                               vector unsigned char);

vector signed char vec_sra (vector signed char, vector unsigned char);
vector unsigned char vec_sra (vector unsigned char,
                              vector unsigned char);
vector signed short vec_sra (vector signed short,
                             vector unsigned short);
vector unsigned short vec_sra (vector unsigned short,
                               vector unsigned short);
vector signed int vec_sra (vector signed int, vector unsigned int);
vector unsigned int vec_sra (vector unsigned int, vector unsigned int);

vector signed int vec_vsraw (vector signed int, vector unsigned int);
vector unsigned int vec_vsraw (vector unsigned int,
                               vector unsigned int);

vector signed short vec_vsrah (vector signed short,
                               vector unsigned short);
vector unsigned short vec_vsrah (vector unsigned short,
                                 vector unsigned short);

vector signed char vec_vsrab (vector signed char, vector unsigned char);
vector unsigned char vec_vsrab (vector unsigned char,
                                vector unsigned char);

vector signed int vec_srl (vector signed int, vector unsigned int);
vector signed int vec_srl (vector signed int, vector unsigned short);
vector signed int vec_srl (vector signed int, vector unsigned char);
vector unsigned int vec_srl (vector unsigned int, vector unsigned int);
vector unsigned int vec_srl (vector unsigned int,
                             vector unsigned short);
vector unsigned int vec_srl (vector unsigned int, vector unsigned char);
vector bool int vec_srl (vector bool int, vector unsigned int);
vector bool int vec_srl (vector bool int, vector unsigned short);
vector bool int vec_srl (vector bool int, vector unsigned char);
vector signed short vec_srl (vector signed short, vector unsigned int);
vector signed short vec_srl (vector signed short,
                             vector unsigned short);
vector signed short vec_srl (vector signed short, vector unsigned char);
vector unsigned short vec_srl (vector unsigned short,
                               vector unsigned int);
vector unsigned short vec_srl (vector unsigned short,
                               vector unsigned short);
vector unsigned short vec_srl (vector unsigned short,
                               vector unsigned char);
vector bool short vec_srl (vector bool short, vector unsigned int);
vector bool short vec_srl (vector bool short, vector unsigned short);
vector bool short vec_srl (vector bool short, vector unsigned char);
vector pixel vec_srl (vector pixel, vector unsigned int);
vector pixel vec_srl (vector pixel, vector unsigned short);
vector pixel vec_srl (vector pixel, vector unsigned char);
vector signed char vec_srl (vector signed char, vector unsigned int);
vector signed char vec_srl (vector signed char, vector unsigned short);
vector signed char vec_srl (vector signed char, vector unsigned char);
vector unsigned char vec_srl (vector unsigned char,
                              vector unsigned int);
vector unsigned char vec_srl (vector unsigned char,
                              vector unsigned short);
vector unsigned char vec_srl (vector unsigned char,
                              vector unsigned char);
vector bool char vec_srl (vector bool char, vector unsigned int);
vector bool char vec_srl (vector bool char, vector unsigned short);
vector bool char vec_srl (vector bool char, vector unsigned char);

vector float vec_sro (vector float, vector signed char);
vector float vec_sro (vector float, vector unsigned char);
vector signed int vec_sro (vector signed int, vector signed char);
vector signed int vec_sro (vector signed int, vector unsigned char);
vector unsigned int vec_sro (vector unsigned int, vector signed char);
vector unsigned int vec_sro (vector unsigned int, vector unsigned char);
vector signed short vec_sro (vector signed short, vector signed char);
vector signed short vec_sro (vector signed short, vector unsigned char);
vector unsigned short vec_sro (vector unsigned short,
                               vector signed char);
vector unsigned short vec_sro (vector unsigned short,
                               vector unsigned char);
vector pixel vec_sro (vector pixel, vector signed char);
vector pixel vec_sro (vector pixel, vector unsigned char);
vector signed char vec_sro (vector signed char, vector signed char);
vector signed char vec_sro (vector signed char, vector unsigned char);
vector unsigned char vec_sro (vector unsigned char, vector signed char);
vector unsigned char vec_sro (vector unsigned char,
                              vector unsigned char);

void vec_st (vector float, int, vector float *);
void vec_st (vector float, int, float *);
void vec_st (vector signed int, int, vector signed int *);
void vec_st (vector signed int, int, int *);
void vec_st (vector unsigned int, int, vector unsigned int *);
void vec_st (vector unsigned int, int, unsigned int *);
void vec_st (vector bool int, int, vector bool int *);
void vec_st (vector bool int, int, unsigned int *);
void vec_st (vector bool int, int, int *);
void vec_st (vector signed short, int, vector signed short *);
void vec_st (vector signed short, int, short *);
void vec_st (vector unsigned short, int, vector unsigned short *);
void vec_st (vector unsigned short, int, unsigned short *);
void vec_st (vector bool short, int, vector bool short *);
void vec_st (vector bool short, int, unsigned short *);
void vec_st (vector pixel, int, vector pixel *);
void vec_st (vector pixel, int, unsigned short *);
void vec_st (vector pixel, int, short *);
void vec_st (vector bool short, int, short *);
void vec_st (vector signed char, int, vector signed char *);
void vec_st (vector signed char, int, signed char *);
void vec_st (vector unsigned char, int, vector unsigned char *);
void vec_st (vector unsigned char, int, unsigned char *);
void vec_st (vector bool char, int, vector bool char *);
void vec_st (vector bool char, int, unsigned char *);
void vec_st (vector bool char, int, signed char *);

void vec_ste (vector signed char, int, signed char *);
void vec_ste (vector unsigned char, int, unsigned char *);
void vec_ste (vector bool char, int, signed char *);
void vec_ste (vector bool char, int, unsigned char *);
void vec_ste (vector signed short, int, short *);
void vec_ste (vector unsigned short, int, unsigned short *);
void vec_ste (vector bool short, int, short *);
void vec_ste (vector bool short, int, unsigned short *);
void vec_ste (vector pixel, int, short *);
void vec_ste (vector pixel, int, unsigned short *);
void vec_ste (vector float, int, float *);
void vec_ste (vector signed int, int, int *);
void vec_ste (vector unsigned int, int, unsigned int *);
void vec_ste (vector bool int, int, int *);
void vec_ste (vector bool int, int, unsigned int *);

void vec_stvewx (vector float, int, float *);
void vec_stvewx (vector signed int, int, int *);
void vec_stvewx (vector unsigned int, int, unsigned int *);
void vec_stvewx (vector bool int, int, int *);
void vec_stvewx (vector bool int, int, unsigned int *);

void vec_stvehx (vector signed short, int, short *);
void vec_stvehx (vector unsigned short, int, unsigned short *);
void vec_stvehx (vector bool short, int, short *);
void vec_stvehx (vector bool short, int, unsigned short *);
void vec_stvehx (vector pixel, int, short *);
void vec_stvehx (vector pixel, int, unsigned short *);

void vec_stvebx (vector signed char, int, signed char *);
void vec_stvebx (vector unsigned char, int, unsigned char *);
void vec_stvebx (vector bool char, int, signed char *);
void vec_stvebx (vector bool char, int, unsigned char *);

void vec_stl (vector float, int, vector float *);
void vec_stl (vector float, int, float *);
void vec_stl (vector signed int, int, vector signed int *);
void vec_stl (vector signed int, int, int *);
void vec_stl (vector unsigned int, int, vector unsigned int *);
void vec_stl (vector unsigned int, int, unsigned int *);
void vec_stl (vector bool int, int, vector bool int *);
void vec_stl (vector bool int, int, unsigned int *);
void vec_stl (vector bool int, int, int *);
void vec_stl (vector signed short, int, vector signed short *);
void vec_stl (vector signed short, int, short *);
void vec_stl (vector unsigned short, int, vector unsigned short *);
void vec_stl (vector unsigned short, int, unsigned short *);
void vec_stl (vector bool short, int, vector bool short *);
void vec_stl (vector bool short, int, unsigned short *);
void vec_stl (vector bool short, int, short *);
void vec_stl (vector pixel, int, vector pixel *);
void vec_stl (vector pixel, int, unsigned short *);
void vec_stl (vector pixel, int, short *);
void vec_stl (vector signed char, int, vector signed char *);
void vec_stl (vector signed char, int, signed char *);
void vec_stl (vector unsigned char, int, vector unsigned char *);
void vec_stl (vector unsigned char, int, unsigned char *);
void vec_stl (vector bool char, int, vector bool char *);
void vec_stl (vector bool char, int, unsigned char *);
void vec_stl (vector bool char, int, signed char *);

vector signed char vec_sub (vector bool char, vector signed char);
vector signed char vec_sub (vector signed char, vector bool char);
vector signed char vec_sub (vector signed char, vector signed char);
vector unsigned char vec_sub (vector bool char, vector unsigned char);
vector unsigned char vec_sub (vector unsigned char, vector bool char);
vector unsigned char vec_sub (vector unsigned char,
                              vector unsigned char);
vector signed short vec_sub (vector bool short, vector signed short);
vector signed short vec_sub (vector signed short, vector bool short);
vector signed short vec_sub (vector signed short, vector signed short);
vector unsigned short vec_sub (vector bool short,
                               vector unsigned short);
vector unsigned short vec_sub (vector unsigned short,
                               vector bool short);
vector unsigned short vec_sub (vector unsigned short,
                               vector unsigned short);
vector signed int vec_sub (vector bool int, vector signed int);
vector signed int vec_sub (vector signed int, vector bool int);
vector signed int vec_sub (vector signed int, vector signed int);
vector unsigned int vec_sub (vector bool int, vector unsigned int);
vector unsigned int vec_sub (vector unsigned int, vector bool int);
vector unsigned int vec_sub (vector unsigned int, vector unsigned int);
vector float vec_sub (vector float, vector float);

vector float vec_vsubfp (vector float, vector float);

vector signed int vec_vsubuwm (vector bool int, vector signed int);
vector signed int vec_vsubuwm (vector signed int, vector bool int);
vector signed int vec_vsubuwm (vector signed int, vector signed int);
vector unsigned int vec_vsubuwm (vector bool int, vector unsigned int);
vector unsigned int vec_vsubuwm (vector unsigned int, vector bool int);
vector unsigned int vec_vsubuwm (vector unsigned int,
                                 vector unsigned int);

vector signed short vec_vsubuhm (vector bool short,
                                 vector signed short);
vector signed short vec_vsubuhm (vector signed short,
                                 vector bool short);
vector signed short vec_vsubuhm (vector signed short,
                                 vector signed short);
vector unsigned short vec_vsubuhm (vector bool short,
                                   vector unsigned short);
vector unsigned short vec_vsubuhm (vector unsigned short,
                                   vector bool short);
vector unsigned short vec_vsubuhm (vector unsigned short,
                                   vector unsigned short);

vector signed char vec_vsububm (vector bool char, vector signed char);
vector signed char vec_vsububm (vector signed char, vector bool char);
vector signed char vec_vsububm (vector signed char, vector signed char);
vector unsigned char vec_vsububm (vector bool char,
                                  vector unsigned char);
vector unsigned char vec_vsububm (vector unsigned char,
                                  vector bool char);
vector unsigned char vec_vsububm (vector unsigned char,
                                  vector unsigned char);

vector unsigned int vec_subc (vector unsigned int, vector unsigned int);

vector unsigned char vec_subs (vector bool char, vector unsigned char);
vector unsigned char vec_subs (vector unsigned char, vector bool char);
vector unsigned char vec_subs (vector unsigned char,
                               vector unsigned char);
vector signed char vec_subs (vector bool char, vector signed char);
vector signed char vec_subs (vector signed char, vector bool char);
vector signed char vec_subs (vector signed char, vector signed char);
vector unsigned short vec_subs (vector bool short,
                                vector unsigned short);
vector unsigned short vec_subs (vector unsigned short,
                                vector bool short);
vector unsigned short vec_subs (vector unsigned short,
                                vector unsigned short);
vector signed short vec_subs (vector bool short, vector signed short);
vector signed short vec_subs (vector signed short, vector bool short);
vector signed short vec_subs (vector signed short, vector signed short);
vector unsigned int vec_subs (vector bool int, vector unsigned int);
vector unsigned int vec_subs (vector unsigned int, vector bool int);
vector unsigned int vec_subs (vector unsigned int, vector unsigned int);
vector signed int vec_subs (vector bool int, vector signed int);
vector signed int vec_subs (vector signed int, vector bool int);
vector signed int vec_subs (vector signed int, vector signed int);

vector signed int vec_vsubsws (vector bool int, vector signed int);
vector signed int vec_vsubsws (vector signed int, vector bool int);
vector signed int vec_vsubsws (vector signed int, vector signed int);

vector unsigned int vec_vsubuws (vector bool int, vector unsigned int);
vector unsigned int vec_vsubuws (vector unsigned int, vector bool int);
vector unsigned int vec_vsubuws (vector unsigned int,
                                 vector unsigned int);

vector signed short vec_vsubshs (vector bool short,
                                 vector signed short);
vector signed short vec_vsubshs (vector signed short,
                                 vector bool short);
vector signed short vec_vsubshs (vector signed short,
                                 vector signed short);

vector unsigned short vec_vsubuhs (vector bool short,
                                   vector unsigned short);
vector unsigned short vec_vsubuhs (vector unsigned short,
                                   vector bool short);
vector unsigned short vec_vsubuhs (vector unsigned short,
                                   vector unsigned short);

vector signed char vec_vsubsbs (vector bool char, vector signed char);
vector signed char vec_vsubsbs (vector signed char, vector bool char);
vector signed char vec_vsubsbs (vector signed char, vector signed char);

vector unsigned char vec_vsububs (vector bool char,
                                  vector unsigned char);
vector unsigned char vec_vsububs (vector unsigned char,
                                  vector bool char);
vector unsigned char vec_vsububs (vector unsigned char,
                                  vector unsigned char);

vector unsigned int vec_sum4s (vector unsigned char,
                               vector unsigned int);
vector signed int vec_sum4s (vector signed char, vector signed int);
vector signed int vec_sum4s (vector signed short, vector signed int);

vector signed int vec_vsum4shs (vector signed short, vector signed int);

vector signed int vec_vsum4sbs (vector signed char, vector signed int);

vector unsigned int vec_vsum4ubs (vector unsigned char,
                                  vector unsigned int);

vector signed int vec_sum2s (vector signed int, vector signed int);

vector signed int vec_sums (vector signed int, vector signed int);

vector float vec_trunc (vector float);

vector signed short vec_unpackh (vector signed char);
vector bool short vec_unpackh (vector bool char);
vector signed int vec_unpackh (vector signed short);
vector bool int vec_unpackh (vector bool short);
vector unsigned int vec_unpackh (vector pixel);

vector bool int vec_vupkhsh (vector bool short);
vector signed int vec_vupkhsh (vector signed short);

vector unsigned int vec_vupkhpx (vector pixel);

vector bool short vec_vupkhsb (vector bool char);
vector signed short vec_vupkhsb (vector signed char);

vector signed short vec_unpackl (vector signed char);
vector bool short vec_unpackl (vector bool char);
vector unsigned int vec_unpackl (vector pixel);
vector signed int vec_unpackl (vector signed short);
vector bool int vec_unpackl (vector bool short);

vector unsigned int vec_vupklpx (vector pixel);

vector bool int vec_vupklsh (vector bool short);
vector signed int vec_vupklsh (vector signed short);

vector bool short vec_vupklsb (vector bool char);
vector signed short vec_vupklsb (vector signed char);

vector float vec_xor (vector float, vector float);
vector float vec_xor (vector float, vector bool int);
vector float vec_xor (vector bool int, vector float);
vector bool int vec_xor (vector bool int, vector bool int);
vector signed int vec_xor (vector bool int, vector signed int);
vector signed int vec_xor (vector signed int, vector bool int);
vector signed int vec_xor (vector signed int, vector signed int);
vector unsigned int vec_xor (vector bool int, vector unsigned int);
vector unsigned int vec_xor (vector unsigned int, vector bool int);
vector unsigned int vec_xor (vector unsigned int, vector unsigned int);
vector bool short vec_xor (vector bool short, vector bool short);
vector signed short vec_xor (vector bool short, vector signed short);
vector signed short vec_xor (vector signed short, vector bool short);
vector signed short vec_xor (vector signed short, vector signed short);
vector unsigned short vec_xor (vector bool short,
                               vector unsigned short);
vector unsigned short vec_xor (vector unsigned short,
                               vector bool short);
vector unsigned short vec_xor (vector unsigned short,
                               vector unsigned short);
vector signed char vec_xor (vector bool char, vector signed char);
vector bool char vec_xor (vector bool char, vector bool char);
vector signed char vec_xor (vector signed char, vector bool char);
vector signed char vec_xor (vector signed char, vector signed char);
vector unsigned char vec_xor (vector bool char, vector unsigned char);
vector unsigned char vec_xor (vector unsigned char, vector bool char);
vector unsigned char vec_xor (vector unsigned char,
                              vector unsigned char);

int vec_all_eq (vector signed char, vector bool char);
int vec_all_eq (vector signed char, vector signed char);
int vec_all_eq (vector unsigned char, vector bool char);
int vec_all_eq (vector unsigned char, vector unsigned char);
int vec_all_eq (vector bool char, vector bool char);
int vec_all_eq (vector bool char, vector unsigned char);
int vec_all_eq (vector bool char, vector signed char);
int vec_all_eq (vector signed short, vector bool short);
int vec_all_eq (vector signed short, vector signed short);
int vec_all_eq (vector unsigned short, vector bool short);
int vec_all_eq (vector unsigned short, vector unsigned short);
int vec_all_eq (vector bool short, vector bool short);
int vec_all_eq (vector bool short, vector unsigned short);
int vec_all_eq (vector bool short, vector signed short);
int vec_all_eq (vector pixel, vector pixel);
int vec_all_eq (vector signed int, vector bool int);
int vec_all_eq (vector signed int, vector signed int);
int vec_all_eq (vector unsigned int, vector bool int);
int vec_all_eq (vector unsigned int, vector unsigned int);
int vec_all_eq (vector bool int, vector bool int);
int vec_all_eq (vector bool int, vector unsigned int);
int vec_all_eq (vector bool int, vector signed int);
int vec_all_eq (vector float, vector float);

int vec_all_ge (vector bool char, vector unsigned char);
int vec_all_ge (vector unsigned char, vector bool char);
int vec_all_ge (vector unsigned char, vector unsigned char);
int vec_all_ge (vector bool char, vector signed char);
int vec_all_ge (vector signed char, vector bool char);
int vec_all_ge (vector signed char, vector signed char);
int vec_all_ge (vector bool short, vector unsigned short);
int vec_all_ge (vector unsigned short, vector bool short);
int vec_all_ge (vector unsigned short, vector unsigned short);
int vec_all_ge (vector signed short, vector signed short);
int vec_all_ge (vector bool short, vector signed short);
int vec_all_ge (vector signed short, vector bool short);
int vec_all_ge (vector bool int, vector unsigned int);
int vec_all_ge (vector unsigned int, vector bool int);
int vec_all_ge (vector unsigned int, vector unsigned int);
int vec_all_ge (vector bool int, vector signed int);
int vec_all_ge (vector signed int, vector bool int);
int vec_all_ge (vector signed int, vector signed int);
int vec_all_ge (vector float, vector float);

int vec_all_gt (vector bool char, vector unsigned char);
int vec_all_gt (vector unsigned char, vector bool char);
int vec_all_gt (vector unsigned char, vector unsigned char);
int vec_all_gt (vector bool char, vector signed char);
int vec_all_gt (vector signed char, vector bool char);
int vec_all_gt (vector signed char, vector signed char);
int vec_all_gt (vector bool short, vector unsigned short);
int vec_all_gt (vector unsigned short, vector bool short);
int vec_all_gt (vector unsigned short, vector unsigned short);
int vec_all_gt (vector bool short, vector signed short);
int vec_all_gt (vector signed short, vector bool short);
int vec_all_gt (vector signed short, vector signed short);
int vec_all_gt (vector bool int, vector unsigned int);
int vec_all_gt (vector unsigned int, vector bool int);
int vec_all_gt (vector unsigned int, vector unsigned int);
int vec_all_gt (vector bool int, vector signed int);
int vec_all_gt (vector signed int, vector bool int);
int vec_all_gt (vector signed int, vector signed int);
int vec_all_gt (vector float, vector float);

int vec_all_in (vector float, vector float);

int vec_all_le (vector bool char, vector unsigned char);
int vec_all_le (vector unsigned char, vector bool char);
int vec_all_le (vector unsigned char, vector unsigned char);
int vec_all_le (vector bool char, vector signed char);
int vec_all_le (vector signed char, vector bool char);
int vec_all_le (vector signed char, vector signed char);
int vec_all_le (vector bool short, vector unsigned short);
int vec_all_le (vector unsigned short, vector bool short);
int vec_all_le (vector unsigned short, vector unsigned short);
int vec_all_le (vector bool short, vector signed short);
int vec_all_le (vector signed short, vector bool short);
int vec_all_le (vector signed short, vector signed short);
int vec_all_le (vector bool int, vector unsigned int);
int vec_all_le (vector unsigned int, vector bool int);
int vec_all_le (vector unsigned int, vector unsigned int);
int vec_all_le (vector bool int, vector signed int);
int vec_all_le (vector signed int, vector bool int);
int vec_all_le (vector signed int, vector signed int);
int vec_all_le (vector float, vector float);

int vec_all_lt (vector bool char, vector unsigned char);
int vec_all_lt (vector unsigned char, vector bool char);
int vec_all_lt (vector unsigned char, vector unsigned char);
int vec_all_lt (vector bool char, vector signed char);
int vec_all_lt (vector signed char, vector bool char);
int vec_all_lt (vector signed char, vector signed char);
int vec_all_lt (vector bool short, vector unsigned short);
int vec_all_lt (vector unsigned short, vector bool short);
int vec_all_lt (vector unsigned short, vector unsigned short);
int vec_all_lt (vector bool short, vector signed short);
int vec_all_lt (vector signed short, vector bool short);
int vec_all_lt (vector signed short, vector signed short);
int vec_all_lt (vector bool int, vector unsigned int);
int vec_all_lt (vector unsigned int, vector bool int);
int vec_all_lt (vector unsigned int, vector unsigned int);
int vec_all_lt (vector bool int, vector signed int);
int vec_all_lt (vector signed int, vector bool int);
int vec_all_lt (vector signed int, vector signed int);
int vec_all_lt (vector float, vector float);

int vec_all_nan (vector float);

int vec_all_ne (vector signed char, vector bool char);
int vec_all_ne (vector signed char, vector signed char);
int vec_all_ne (vector unsigned char, vector bool char);
int vec_all_ne (vector unsigned char, vector unsigned char);
int vec_all_ne (vector bool char, vector bool char);
int vec_all_ne (vector bool char, vector unsigned char);
int vec_all_ne (vector bool char, vector signed char);
int vec_all_ne (vector signed short, vector bool short);
int vec_all_ne (vector signed short, vector signed short);
int vec_all_ne (vector unsigned short, vector bool short);
int vec_all_ne (vector unsigned short, vector unsigned short);
int vec_all_ne (vector bool short, vector bool short);
int vec_all_ne (vector bool short, vector unsigned short);
int vec_all_ne (vector bool short, vector signed short);
int vec_all_ne (vector pixel, vector pixel);
int vec_all_ne (vector signed int, vector bool int);
int vec_all_ne (vector signed int, vector signed int);
int vec_all_ne (vector unsigned int, vector bool int);
int vec_all_ne (vector unsigned int, vector unsigned int);
int vec_all_ne (vector bool int, vector bool int);
int vec_all_ne (vector bool int, vector unsigned int);
int vec_all_ne (vector bool int, vector signed int);
int vec_all_ne (vector float, vector float);

int vec_all_nge (vector float, vector float);

int vec_all_ngt (vector float, vector float);

int vec_all_nle (vector float, vector float);

int vec_all_nlt (vector float, vector float);

int vec_all_numeric (vector float);

int vec_any_eq (vector signed char, vector bool char);
int vec_any_eq (vector signed char, vector signed char);
int vec_any_eq (vector unsigned char, vector bool char);
int vec_any_eq (vector unsigned char, vector unsigned char);
int vec_any_eq (vector bool char, vector bool char);
int vec_any_eq (vector bool char, vector unsigned char);
int vec_any_eq (vector bool char, vector signed char);
int vec_any_eq (vector signed short, vector bool short);
int vec_any_eq (vector signed short, vector signed short);
int vec_any_eq (vector unsigned short, vector bool short);
int vec_any_eq (vector unsigned short, vector unsigned short);
int vec_any_eq (vector bool short, vector bool short);
int vec_any_eq (vector bool short, vector unsigned short);
int vec_any_eq (vector bool short, vector signed short);
int vec_any_eq (vector pixel, vector pixel);
int vec_any_eq (vector signed int, vector bool int);
int vec_any_eq (vector signed int, vector signed int);
int vec_any_eq (vector unsigned int, vector bool int);
int vec_any_eq (vector unsigned int, vector unsigned int);
int vec_any_eq (vector bool int, vector bool int);
int vec_any_eq (vector bool int, vector unsigned int);
int vec_any_eq (vector bool int, vector signed int);
int vec_any_eq (vector float, vector float);

int vec_any_ge (vector signed char, vector bool char);
int vec_any_ge (vector unsigned char, vector bool char);
int vec_any_ge (vector unsigned char, vector unsigned char);
int vec_any_ge (vector signed char, vector signed char);
int vec_any_ge (vector bool char, vector unsigned char);
int vec_any_ge (vector bool char, vector signed char);
int vec_any_ge (vector unsigned short, vector bool short);
int vec_any_ge (vector unsigned short, vector unsigned short);
int vec_any_ge (vector signed short, vector signed short);
int vec_any_ge (vector signed short, vector bool short);
int vec_any_ge (vector bool short, vector unsigned short);
int vec_any_ge (vector bool short, vector signed short);
int vec_any_ge (vector signed int, vector bool int);
int vec_any_ge (vector unsigned int, vector bool int);
int vec_any_ge (vector unsigned int, vector unsigned int);
int vec_any_ge (vector signed int, vector signed int);
int vec_any_ge (vector bool int, vector unsigned int);
int vec_any_ge (vector bool int, vector signed int);
int vec_any_ge (vector float, vector float);

int vec_any_gt (vector bool char, vector unsigned char);
int vec_any_gt (vector unsigned char, vector bool char);
int vec_any_gt (vector unsigned char, vector unsigned char);
int vec_any_gt (vector bool char, vector signed char);
int vec_any_gt (vector signed char, vector bool char);
int vec_any_gt (vector signed char, vector signed char);
int vec_any_gt (vector bool short, vector unsigned short);
int vec_any_gt (vector unsigned short, vector bool short);
int vec_any_gt (vector unsigned short, vector unsigned short);
int vec_any_gt (vector bool short, vector signed short);
int vec_any_gt (vector signed short, vector bool short);
int vec_any_gt (vector signed short, vector signed short);
int vec_any_gt (vector bool int, vector unsigned int);
int vec_any_gt (vector unsigned int, vector bool int);
int vec_any_gt (vector unsigned int, vector unsigned int);
int vec_any_gt (vector bool int, vector signed int);
int vec_any_gt (vector signed int, vector bool int);
int vec_any_gt (vector signed int, vector signed int);
int vec_any_gt (vector float, vector float);

int vec_any_le (vector bool char, vector unsigned char);
int vec_any_le (vector unsigned char, vector bool char);
int vec_any_le (vector unsigned char, vector unsigned char);
int vec_any_le (vector bool char, vector signed char);
int vec_any_le (vector signed char, vector bool char);
int vec_any_le (vector signed char, vector signed char);
int vec_any_le (vector bool short, vector unsigned short);
int vec_any_le (vector unsigned short, vector bool short);
int vec_any_le (vector unsigned short, vector unsigned short);
int vec_any_le (vector bool short, vector signed short);
int vec_any_le (vector signed short, vector bool short);
int vec_any_le (vector signed short, vector signed short);
int vec_any_le (vector bool int, vector unsigned int);
int vec_any_le (vector unsigned int, vector bool int);
int vec_any_le (vector unsigned int, vector unsigned int);
int vec_any_le (vector bool int, vector signed int);
int vec_any_le (vector signed int, vector bool int);
int vec_any_le (vector signed int, vector signed int);
int vec_any_le (vector float, vector float);

int vec_any_lt (vector bool char, vector unsigned char);
int vec_any_lt (vector unsigned char, vector bool char);
int vec_any_lt (vector unsigned char, vector unsigned char);
int vec_any_lt (vector bool char, vector signed char);
int vec_any_lt (vector signed char, vector bool char);
int vec_any_lt (vector signed char, vector signed char);
int vec_any_lt (vector bool short, vector unsigned short);
int vec_any_lt (vector unsigned short, vector bool short);
int vec_any_lt (vector unsigned short, vector unsigned short);
int vec_any_lt (vector bool short, vector signed short);
int vec_any_lt (vector signed short, vector bool short);
int vec_any_lt (vector signed short, vector signed short);
int vec_any_lt (vector bool int, vector unsigned int);
int vec_any_lt (vector unsigned int, vector bool int);
int vec_any_lt (vector unsigned int, vector unsigned int);
int vec_any_lt (vector bool int, vector signed int);
int vec_any_lt (vector signed int, vector bool int);
int vec_any_lt (vector signed int, vector signed int);
int vec_any_lt (vector float, vector float);

int vec_any_nan (vector float);

int vec_any_ne (vector signed char, vector bool char);
int vec_any_ne (vector signed char, vector signed char);
int vec_any_ne (vector unsigned char, vector bool char);
int vec_any_ne (vector unsigned char, vector unsigned char);
int vec_any_ne (vector bool char, vector bool char);
int vec_any_ne (vector bool char, vector unsigned char);
int vec_any_ne (vector bool char, vector signed char);
int vec_any_ne (vector signed short, vector bool short);
int vec_any_ne (vector signed short, vector signed short);
int vec_any_ne (vector unsigned short, vector bool short);
int vec_any_ne (vector unsigned short, vector unsigned short);
int vec_any_ne (vector bool short, vector bool short);
int vec_any_ne (vector bool short, vector unsigned short);
int vec_any_ne (vector bool short, vector signed short);
int vec_any_ne (vector pixel, vector pixel);
int vec_any_ne (vector signed int, vector bool int);
int vec_any_ne (vector signed int, vector signed int);
int vec_any_ne (vector unsigned int, vector bool int);
int vec_any_ne (vector unsigned int, vector unsigned int);
int vec_any_ne (vector bool int, vector bool int);
int vec_any_ne (vector bool int, vector unsigned int);
int vec_any_ne (vector bool int, vector signed int);
int vec_any_ne (vector float, vector float);

int vec_any_nge (vector float, vector float);

int vec_any_ngt (vector float, vector float);

int vec_any_nle (vector float, vector float);

int vec_any_nlt (vector float, vector float);

int vec_any_numeric (vector float);

int vec_any_out (vector float, vector float);
</pre></smallexample>

<para>If the vector/scalar (VSX) instruction set is available, the following
additional functions are available:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">vector double vec_abs (vector double);
vector double vec_add (vector double, vector double);
vector double vec_and (vector double, vector double);
vector double vec_and (vector double, vector bool long);
vector double vec_and (vector bool long, vector double);
vector long vec_and (vector long, vector long);
vector long vec_and (vector long, vector bool long);
vector long vec_and (vector bool long, vector long);
vector unsigned long vec_and (vector unsigned long, vector unsigned long);
vector unsigned long vec_and (vector unsigned long, vector bool long);
vector unsigned long vec_and (vector bool long, vector unsigned long);
vector double vec_andc (vector double, vector double);
vector double vec_andc (vector double, vector bool long);
vector double vec_andc (vector bool long, vector double);
vector long vec_andc (vector long, vector long);
vector long vec_andc (vector long, vector bool long);
vector long vec_andc (vector bool long, vector long);
vector unsigned long vec_andc (vector unsigned long, vector unsigned long);
vector unsigned long vec_andc (vector unsigned long, vector bool long);
vector unsigned long vec_andc (vector bool long, vector unsigned long);
vector double vec_ceil (vector double);
vector bool long vec_cmpeq (vector double, vector double);
vector bool long vec_cmpge (vector double, vector double);
vector bool long vec_cmpgt (vector double, vector double);
vector bool long vec_cmple (vector double, vector double);
vector bool long vec_cmplt (vector double, vector double);
vector double vec_cpsgn (vector double, vector double);
vector float vec_div (vector float, vector float);
vector double vec_div (vector double, vector double);
vector long vec_div (vector long, vector long);
vector unsigned long vec_div (vector unsigned long, vector unsigned long);
vector double vec_floor (vector double);
vector double vec_ld (int, const vector double *);
vector double vec_ld (int, const double *);
vector double vec_ldl (int, const vector double *);
vector double vec_ldl (int, const double *);
vector unsigned char vec_lvsl (int, const volatile double *);
vector unsigned char vec_lvsr (int, const volatile double *);
vector double vec_madd (vector double, vector double, vector double);
vector double vec_max (vector double, vector double);
vector signed long vec_mergeh (vector signed long, vector signed long);
vector signed long vec_mergeh (vector signed long, vector bool long);
vector signed long vec_mergeh (vector bool long, vector signed long);
vector unsigned long vec_mergeh (vector unsigned long, vector unsigned long);
vector unsigned long vec_mergeh (vector unsigned long, vector bool long);
vector unsigned long vec_mergeh (vector bool long, vector unsigned long);
vector signed long vec_mergel (vector signed long, vector signed long);
vector signed long vec_mergel (vector signed long, vector bool long);
vector signed long vec_mergel (vector bool long, vector signed long);
vector unsigned long vec_mergel (vector unsigned long, vector unsigned long);
vector unsigned long vec_mergel (vector unsigned long, vector bool long);
vector unsigned long vec_mergel (vector bool long, vector unsigned long);
vector double vec_min (vector double, vector double);
vector float vec_msub (vector float, vector float, vector float);
vector double vec_msub (vector double, vector double, vector double);
vector float vec_mul (vector float, vector float);
vector double vec_mul (vector double, vector double);
vector long vec_mul (vector long, vector long);
vector unsigned long vec_mul (vector unsigned long, vector unsigned long);
vector float vec_nearbyint (vector float);
vector double vec_nearbyint (vector double);
vector float vec_nmadd (vector float, vector float, vector float);
vector double vec_nmadd (vector double, vector double, vector double);
vector double vec_nmsub (vector double, vector double, vector double);
vector double vec_nor (vector double, vector double);
vector long vec_nor (vector long, vector long);
vector long vec_nor (vector long, vector bool long);
vector long vec_nor (vector bool long, vector long);
vector unsigned long vec_nor (vector unsigned long, vector unsigned long);
vector unsigned long vec_nor (vector unsigned long, vector bool long);
vector unsigned long vec_nor (vector bool long, vector unsigned long);
vector double vec_or (vector double, vector double);
vector double vec_or (vector double, vector bool long);
vector double vec_or (vector bool long, vector double);
vector long vec_or (vector long, vector long);
vector long vec_or (vector long, vector bool long);
vector long vec_or (vector bool long, vector long);
vector unsigned long vec_or (vector unsigned long, vector unsigned long);
vector unsigned long vec_or (vector unsigned long, vector bool long);
vector unsigned long vec_or (vector bool long, vector unsigned long);
vector double vec_perm (vector double, vector double, vector unsigned char);
vector long vec_perm (vector long, vector long, vector unsigned char);
vector unsigned long vec_perm (vector unsigned long, vector unsigned long,
                               vector unsigned char);
vector double vec_rint (vector double);
vector double vec_recip (vector double, vector double);
vector double vec_rsqrt (vector double);
vector double vec_rsqrte (vector double);
vector double vec_sel (vector double, vector double, vector bool long);
vector double vec_sel (vector double, vector double, vector unsigned long);
vector long vec_sel (vector long, vector long, vector long);
vector long vec_sel (vector long, vector long, vector unsigned long);
vector long vec_sel (vector long, vector long, vector bool long);
vector unsigned long vec_sel (vector unsigned long, vector unsigned long,
                              vector long);
vector unsigned long vec_sel (vector unsigned long, vector unsigned long,
                              vector unsigned long);
vector unsigned long vec_sel (vector unsigned long, vector unsigned long,
                              vector bool long);
vector double vec_splats (double);
vector signed long vec_splats (signed long);
vector unsigned long vec_splats (unsigned long);
vector float vec_sqrt (vector float);
vector double vec_sqrt (vector double);
void vec_st (vector double, int, vector double *);
void vec_st (vector double, int, double *);
vector double vec_sub (vector double, vector double);
vector double vec_trunc (vector double);
vector double vec_xor (vector double, vector double);
vector double vec_xor (vector double, vector bool long);
vector double vec_xor (vector bool long, vector double);
vector long vec_xor (vector long, vector long);
vector long vec_xor (vector long, vector bool long);
vector long vec_xor (vector bool long, vector long);
vector unsigned long vec_xor (vector unsigned long, vector unsigned long);
vector unsigned long vec_xor (vector unsigned long, vector bool long);
vector unsigned long vec_xor (vector bool long, vector unsigned long);
int vec_all_eq (vector double, vector double);
int vec_all_ge (vector double, vector double);
int vec_all_gt (vector double, vector double);
int vec_all_le (vector double, vector double);
int vec_all_lt (vector double, vector double);
int vec_all_nan (vector double);
int vec_all_ne (vector double, vector double);
int vec_all_nge (vector double, vector double);
int vec_all_ngt (vector double, vector double);
int vec_all_nle (vector double, vector double);
int vec_all_nlt (vector double, vector double);
int vec_all_numeric (vector double);
int vec_any_eq (vector double, vector double);
int vec_any_ge (vector double, vector double);
int vec_any_gt (vector double, vector double);
int vec_any_le (vector double, vector double);
int vec_any_lt (vector double, vector double);
int vec_any_nan (vector double);
int vec_any_ne (vector double, vector double);
int vec_any_nge (vector double, vector double);
int vec_any_ngt (vector double, vector double);
int vec_any_nle (vector double, vector double);
int vec_any_nlt (vector double, vector double);
int vec_any_numeric (vector double);

vector double vec_vsx_ld (int, const vector double *);
vector double vec_vsx_ld (int, const double *);
vector float vec_vsx_ld (int, const vector float *);
vector float vec_vsx_ld (int, const float *);
vector bool int vec_vsx_ld (int, const vector bool int *);
vector signed int vec_vsx_ld (int, const vector signed int *);
vector signed int vec_vsx_ld (int, const int *);
vector signed int vec_vsx_ld (int, const long *);
vector unsigned int vec_vsx_ld (int, const vector unsigned int *);
vector unsigned int vec_vsx_ld (int, const unsigned int *);
vector unsigned int vec_vsx_ld (int, const unsigned long *);
vector bool short vec_vsx_ld (int, const vector bool short *);
vector pixel vec_vsx_ld (int, const vector pixel *);
vector signed short vec_vsx_ld (int, const vector signed short *);
vector signed short vec_vsx_ld (int, const short *);
vector unsigned short vec_vsx_ld (int, const vector unsigned short *);
vector unsigned short vec_vsx_ld (int, const unsigned short *);
vector bool char vec_vsx_ld (int, const vector bool char *);
vector signed char vec_vsx_ld (int, const vector signed char *);
vector signed char vec_vsx_ld (int, const signed char *);
vector unsigned char vec_vsx_ld (int, const vector unsigned char *);
vector unsigned char vec_vsx_ld (int, const unsigned char *);

void vec_vsx_st (vector double, int, vector double *);
void vec_vsx_st (vector double, int, double *);
void vec_vsx_st (vector float, int, vector float *);
void vec_vsx_st (vector float, int, float *);
void vec_vsx_st (vector signed int, int, vector signed int *);
void vec_vsx_st (vector signed int, int, int *);
void vec_vsx_st (vector unsigned int, int, vector unsigned int *);
void vec_vsx_st (vector unsigned int, int, unsigned int *);
void vec_vsx_st (vector bool int, int, vector bool int *);
void vec_vsx_st (vector bool int, int, unsigned int *);
void vec_vsx_st (vector bool int, int, int *);
void vec_vsx_st (vector signed short, int, vector signed short *);
void vec_vsx_st (vector signed short, int, short *);
void vec_vsx_st (vector unsigned short, int, vector unsigned short *);
void vec_vsx_st (vector unsigned short, int, unsigned short *);
void vec_vsx_st (vector bool short, int, vector bool short *);
void vec_vsx_st (vector bool short, int, unsigned short *);
void vec_vsx_st (vector pixel, int, vector pixel *);
void vec_vsx_st (vector pixel, int, unsigned short *);
void vec_vsx_st (vector pixel, int, short *);
void vec_vsx_st (vector bool short, int, short *);
void vec_vsx_st (vector signed char, int, vector signed char *);
void vec_vsx_st (vector signed char, int, signed char *);
void vec_vsx_st (vector unsigned char, int, vector unsigned char *);
void vec_vsx_st (vector unsigned char, int, unsigned char *);
void vec_vsx_st (vector bool char, int, vector bool char *);
void vec_vsx_st (vector bool char, int, unsigned char *);
void vec_vsx_st (vector bool char, int, signed char *);

vector double vec_xxpermdi (vector double, vector double, int);
vector float vec_xxpermdi (vector float, vector float, int);
vector long long vec_xxpermdi (vector long long, vector long long, int);
vector unsigned long long vec_xxpermdi (vector unsigned long long,
                                        vector unsigned long long, int);
vector int vec_xxpermdi (vector int, vector int, int);
vector unsigned int vec_xxpermdi (vector unsigned int,
                                  vector unsigned int, int);
vector short vec_xxpermdi (vector short, vector short, int);
vector unsigned short vec_xxpermdi (vector unsigned short,
                                    vector unsigned short, int);
vector signed char vec_xxpermdi (vector signed char, vector signed char, int);
vector unsigned char vec_xxpermdi (vector unsigned char,
                                   vector unsigned char, int);

vector double vec_xxsldi (vector double, vector double, int);
vector float vec_xxsldi (vector float, vector float, int);
vector long long vec_xxsldi (vector long long, vector long long, int);
vector unsigned long long vec_xxsldi (vector unsigned long long,
                                      vector unsigned long long, int);
vector int vec_xxsldi (vector int, vector int, int);
vector unsigned int vec_xxsldi (vector unsigned int, vector unsigned int, int);
vector short vec_xxsldi (vector short, vector short, int);
vector unsigned short vec_xxsldi (vector unsigned short,
                                  vector unsigned short, int);
vector signed char vec_xxsldi (vector signed char, vector signed char, int);
vector unsigned char vec_xxsldi (vector unsigned char,
                                 vector unsigned char, int);
</pre></smallexample>

<para>Note that the <samp>vec_ld</samp> and <samp>vec_st</samp> built-in functions always
generate the AltiVec <samp>LVX</samp> and <samp>STVX</samp> instructions even
if the VSX instruction set is available.  The <samp>vec_vsx_ld</samp> and
<samp>vec_vsx_st</samp> built-in functions always generate the VSX <samp>LXVD2X</samp>,
<samp>LXVW4X</samp>, <samp>STXVD2X</samp>, and <samp>STXVW4X</samp> instructions.
</para>
<para>If the ISA 2.07 additions to the vector/scalar (power8-vector)
instruction set is available, the following additional functions are
available for both 32-bit and 64-bit targets.  For 64-bit targets, you
can use <var>vector long</var> instead of <var>vector long long</var>,
<var>vector bool long</var> instead of <var>vector bool long long</var>, and
<var>vector unsigned long</var> instead of <var>vector unsigned long long</var>.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">vector long long vec_abs (vector long long);

vector long long vec_add (vector long long, vector long long);
vector unsigned long long vec_add (vector unsigned long long,
                                   vector unsigned long long);

int vec_all_eq (vector long long, vector long long);
int vec_all_eq (vector unsigned long long, vector unsigned long long);
int vec_all_ge (vector long long, vector long long);
int vec_all_ge (vector unsigned long long, vector unsigned long long);
int vec_all_gt (vector long long, vector long long);
int vec_all_gt (vector unsigned long long, vector unsigned long long);
int vec_all_le (vector long long, vector long long);
int vec_all_le (vector unsigned long long, vector unsigned long long);
int vec_all_lt (vector long long, vector long long);
int vec_all_lt (vector unsigned long long, vector unsigned long long);
int vec_all_ne (vector long long, vector long long);
int vec_all_ne (vector unsigned long long, vector unsigned long long);

int vec_any_eq (vector long long, vector long long);
int vec_any_eq (vector unsigned long long, vector unsigned long long);
int vec_any_ge (vector long long, vector long long);
int vec_any_ge (vector unsigned long long, vector unsigned long long);
int vec_any_gt (vector long long, vector long long);
int vec_any_gt (vector unsigned long long, vector unsigned long long);
int vec_any_le (vector long long, vector long long);
int vec_any_le (vector unsigned long long, vector unsigned long long);
int vec_any_lt (vector long long, vector long long);
int vec_any_lt (vector unsigned long long, vector unsigned long long);
int vec_any_ne (vector long long, vector long long);
int vec_any_ne (vector unsigned long long, vector unsigned long long);

vector long long vec_eqv (vector long long, vector long long);
vector long long vec_eqv (vector bool long long, vector long long);
vector long long vec_eqv (vector long long, vector bool long long);
vector unsigned long long vec_eqv (vector unsigned long long,
                                   vector unsigned long long);
vector unsigned long long vec_eqv (vector bool long long,
                                   vector unsigned long long);
vector unsigned long long vec_eqv (vector unsigned long long,
                                   vector bool long long);
vector int vec_eqv (vector int, vector int);
vector int vec_eqv (vector bool int, vector int);
vector int vec_eqv (vector int, vector bool int);
vector unsigned int vec_eqv (vector unsigned int, vector unsigned int);
vector unsigned int vec_eqv (vector bool unsigned int,
                             vector unsigned int);
vector unsigned int vec_eqv (vector unsigned int,
                             vector bool unsigned int);
vector short vec_eqv (vector short, vector short);
vector short vec_eqv (vector bool short, vector short);
vector short vec_eqv (vector short, vector bool short);
vector unsigned short vec_eqv (vector unsigned short, vector unsigned short);
vector unsigned short vec_eqv (vector bool unsigned short,
                               vector unsigned short);
vector unsigned short vec_eqv (vector unsigned short,
                               vector bool unsigned short);
vector signed char vec_eqv (vector signed char, vector signed char);
vector signed char vec_eqv (vector bool signed char, vector signed char);
vector signed char vec_eqv (vector signed char, vector bool signed char);
vector unsigned char vec_eqv (vector unsigned char, vector unsigned char);
vector unsigned char vec_eqv (vector bool unsigned char, vector unsigned char);
vector unsigned char vec_eqv (vector unsigned char, vector bool unsigned char);

vector long long vec_max (vector long long, vector long long);
vector unsigned long long vec_max (vector unsigned long long,
                                   vector unsigned long long);

vector signed int vec_mergee (vector signed int, vector signed int);
vector unsigned int vec_mergee (vector unsigned int, vector unsigned int);
vector bool int vec_mergee (vector bool int, vector bool int);

vector signed int vec_mergeo (vector signed int, vector signed int);
vector unsigned int vec_mergeo (vector unsigned int, vector unsigned int);
vector bool int vec_mergeo (vector bool int, vector bool int);

vector long long vec_min (vector long long, vector long long);
vector unsigned long long vec_min (vector unsigned long long,
                                   vector unsigned long long);

vector long long vec_nand (vector long long, vector long long);
vector long long vec_nand (vector bool long long, vector long long);
vector long long vec_nand (vector long long, vector bool long long);
vector unsigned long long vec_nand (vector unsigned long long,
                                    vector unsigned long long);
vector unsigned long long vec_nand (vector bool long long,
                                   vector unsigned long long);
vector unsigned long long vec_nand (vector unsigned long long,
                                    vector bool long long);
vector int vec_nand (vector int, vector int);
vector int vec_nand (vector bool int, vector int);
vector int vec_nand (vector int, vector bool int);
vector unsigned int vec_nand (vector unsigned int, vector unsigned int);
vector unsigned int vec_nand (vector bool unsigned int,
                              vector unsigned int);
vector unsigned int vec_nand (vector unsigned int,
                              vector bool unsigned int);
vector short vec_nand (vector short, vector short);
vector short vec_nand (vector bool short, vector short);
vector short vec_nand (vector short, vector bool short);
vector unsigned short vec_nand (vector unsigned short, vector unsigned short);
vector unsigned short vec_nand (vector bool unsigned short,
                                vector unsigned short);
vector unsigned short vec_nand (vector unsigned short,
                                vector bool unsigned short);
vector signed char vec_nand (vector signed char, vector signed char);
vector signed char vec_nand (vector bool signed char, vector signed char);
vector signed char vec_nand (vector signed char, vector bool signed char);
vector unsigned char vec_nand (vector unsigned char, vector unsigned char);
vector unsigned char vec_nand (vector bool unsigned char, vector unsigned char);
vector unsigned char vec_nand (vector unsigned char, vector bool unsigned char);

vector long long vec_orc (vector long long, vector long long);
vector long long vec_orc (vector bool long long, vector long long);
vector long long vec_orc (vector long long, vector bool long long);
vector unsigned long long vec_orc (vector unsigned long long,
                                   vector unsigned long long);
vector unsigned long long vec_orc (vector bool long long,
                                   vector unsigned long long);
vector unsigned long long vec_orc (vector unsigned long long,
                                   vector bool long long);
vector int vec_orc (vector int, vector int);
vector int vec_orc (vector bool int, vector int);
vector int vec_orc (vector int, vector bool int);
vector unsigned int vec_orc (vector unsigned int, vector unsigned int);
vector unsigned int vec_orc (vector bool unsigned int,
                             vector unsigned int);
vector unsigned int vec_orc (vector unsigned int,
                             vector bool unsigned int);
vector short vec_orc (vector short, vector short);
vector short vec_orc (vector bool short, vector short);
vector short vec_orc (vector short, vector bool short);
vector unsigned short vec_orc (vector unsigned short, vector unsigned short);
vector unsigned short vec_orc (vector bool unsigned short,
                               vector unsigned short);
vector unsigned short vec_orc (vector unsigned short,
                               vector bool unsigned short);
vector signed char vec_orc (vector signed char, vector signed char);
vector signed char vec_orc (vector bool signed char, vector signed char);
vector signed char vec_orc (vector signed char, vector bool signed char);
vector unsigned char vec_orc (vector unsigned char, vector unsigned char);
vector unsigned char vec_orc (vector bool unsigned char, vector unsigned char);
vector unsigned char vec_orc (vector unsigned char, vector bool unsigned char);

vector int vec_pack (vector long long, vector long long);
vector unsigned int vec_pack (vector unsigned long long,
                              vector unsigned long long);
vector bool int vec_pack (vector bool long long, vector bool long long);

vector int vec_packs (vector long long, vector long long);
vector unsigned int vec_packs (vector unsigned long long,
                               vector unsigned long long);

vector unsigned int vec_packsu (vector long long, vector long long);
vector unsigned int vec_packsu (vector unsigned long long,
                                vector unsigned long long);

vector long long vec_rl (vector long long,
                         vector unsigned long long);
vector long long vec_rl (vector unsigned long long,
                         vector unsigned long long);

vector long long vec_sl (vector long long, vector unsigned long long);
vector long long vec_sl (vector unsigned long long,
                         vector unsigned long long);

vector long long vec_sr (vector long long, vector unsigned long long);
vector unsigned long long char vec_sr (vector unsigned long long,
                                       vector unsigned long long);

vector long long vec_sra (vector long long, vector unsigned long long);
vector unsigned long long vec_sra (vector unsigned long long,
                                   vector unsigned long long);

vector long long vec_sub (vector long long, vector long long);
vector unsigned long long vec_sub (vector unsigned long long,
                                   vector unsigned long long);

vector long long vec_unpackh (vector int);
vector unsigned long long vec_unpackh (vector unsigned int);

vector long long vec_unpackl (vector int);
vector unsigned long long vec_unpackl (vector unsigned int);

vector long long vec_vaddudm (vector long long, vector long long);
vector long long vec_vaddudm (vector bool long long, vector long long);
vector long long vec_vaddudm (vector long long, vector bool long long);
vector unsigned long long vec_vaddudm (vector unsigned long long,
                                       vector unsigned long long);
vector unsigned long long vec_vaddudm (vector bool unsigned long long,
                                       vector unsigned long long);
vector unsigned long long vec_vaddudm (vector unsigned long long,
                                       vector bool unsigned long long);

vector long long vec_vbpermq (vector signed char, vector signed char);
vector long long vec_vbpermq (vector unsigned char, vector unsigned char);

vector long long vec_cntlz (vector long long);
vector unsigned long long vec_cntlz (vector unsigned long long);
vector int vec_cntlz (vector int);
vector unsigned int vec_cntlz (vector int);
vector short vec_cntlz (vector short);
vector unsigned short vec_cntlz (vector unsigned short);
vector signed char vec_cntlz (vector signed char);
vector unsigned char vec_cntlz (vector unsigned char);

vector long long vec_vclz (vector long long);
vector unsigned long long vec_vclz (vector unsigned long long);
vector int vec_vclz (vector int);
vector unsigned int vec_vclz (vector int);
vector short vec_vclz (vector short);
vector unsigned short vec_vclz (vector unsigned short);
vector signed char vec_vclz (vector signed char);
vector unsigned char vec_vclz (vector unsigned char);

vector signed char vec_vclzb (vector signed char);
vector unsigned char vec_vclzb (vector unsigned char);

vector long long vec_vclzd (vector long long);
vector unsigned long long vec_vclzd (vector unsigned long long);

vector short vec_vclzh (vector short);
vector unsigned short vec_vclzh (vector unsigned short);

vector int vec_vclzw (vector int);
vector unsigned int vec_vclzw (vector int);

vector signed char vec_vgbbd (vector signed char);
vector unsigned char vec_vgbbd (vector unsigned char);

vector long long vec_vmaxsd (vector long long, vector long long);

vector unsigned long long vec_vmaxud (vector unsigned long long,
                                      unsigned vector long long);

vector long long vec_vminsd (vector long long, vector long long);

vector unsigned long long vec_vminud (vector long long,
                                      vector long long);

vector int vec_vpksdss (vector long long, vector long long);
vector unsigned int vec_vpksdss (vector long long, vector long long);

vector unsigned int vec_vpkudus (vector unsigned long long,
                                 vector unsigned long long);

vector int vec_vpkudum (vector long long, vector long long);
vector unsigned int vec_vpkudum (vector unsigned long long,
                                 vector unsigned long long);
vector bool int vec_vpkudum (vector bool long long, vector bool long long);

vector long long vec_vpopcnt (vector long long);
vector unsigned long long vec_vpopcnt (vector unsigned long long);
vector int vec_vpopcnt (vector int);
vector unsigned int vec_vpopcnt (vector int);
vector short vec_vpopcnt (vector short);
vector unsigned short vec_vpopcnt (vector unsigned short);
vector signed char vec_vpopcnt (vector signed char);
vector unsigned char vec_vpopcnt (vector unsigned char);

vector signed char vec_vpopcntb (vector signed char);
vector unsigned char vec_vpopcntb (vector unsigned char);

vector long long vec_vpopcntd (vector long long);
vector unsigned long long vec_vpopcntd (vector unsigned long long);

vector short vec_vpopcnth (vector short);
vector unsigned short vec_vpopcnth (vector unsigned short);

vector int vec_vpopcntw (vector int);
vector unsigned int vec_vpopcntw (vector int);

vector long long vec_vrld (vector long long, vector unsigned long long);
vector unsigned long long vec_vrld (vector unsigned long long,
                                    vector unsigned long long);

vector long long vec_vsld (vector long long, vector unsigned long long);
vector long long vec_vsld (vector unsigned long long,
                           vector unsigned long long);

vector long long vec_vsrad (vector long long, vector unsigned long long);
vector unsigned long long vec_vsrad (vector unsigned long long,
                                     vector unsigned long long);

vector long long vec_vsrd (vector long long, vector unsigned long long);
vector unsigned long long char vec_vsrd (vector unsigned long long,
                                         vector unsigned long long);

vector long long vec_vsubudm (vector long long, vector long long);
vector long long vec_vsubudm (vector bool long long, vector long long);
vector long long vec_vsubudm (vector long long, vector bool long long);
vector unsigned long long vec_vsubudm (vector unsigned long long,
                                       vector unsigned long long);
vector unsigned long long vec_vsubudm (vector bool long long,
                                       vector unsigned long long);
vector unsigned long long vec_vsubudm (vector unsigned long long,
                                       vector bool long long);

vector long long vec_vupkhsw (vector int);
vector unsigned long long vec_vupkhsw (vector unsigned int);

vector long long vec_vupklsw (vector int);
vector unsigned long long vec_vupklsw (vector int);
</pre></smallexample>

<para>If the ISA 2.07 additions to the vector/scalar (power8-vector)
instruction set is available, the following additional functions are
available for 64-bit targets.  New vector types
(<var>vector __int128_t</var> and <var>vector __uint128_t</var>) are available
to hold the <var>__int128_t</var> and <var>__uint128_t</var> types to use these
builtins.
</para>
<para>The normal vector extract, and set operations work on
<var>vector __int128_t</var> and <var>vector __uint128_t</var> types,
but the index value must be 0.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">vector __int128_t vec_vaddcuq (vector __int128_t, vector __int128_t);
vector __uint128_t vec_vaddcuq (vector __uint128_t, vector __uint128_t);

vector __int128_t vec_vadduqm (vector __int128_t, vector __int128_t);
vector __uint128_t vec_vadduqm (vector __uint128_t, vector __uint128_t);

vector __int128_t vec_vaddecuq (vector __int128_t, vector __int128_t,
                                vector __int128_t);
vector __uint128_t vec_vaddecuq (vector __uint128_t, vector __uint128_t, 
                                 vector __uint128_t);

vector __int128_t vec_vaddeuqm (vector __int128_t, vector __int128_t,
                                vector __int128_t);
vector __uint128_t vec_vaddeuqm (vector __uint128_t, vector __uint128_t, 
                                 vector __uint128_t);

vector __int128_t vec_vsubecuq (vector __int128_t, vector __int128_t,
                                vector __int128_t);
vector __uint128_t vec_vsubecuq (vector __uint128_t, vector __uint128_t, 
                                 vector __uint128_t);

vector __int128_t vec_vsubeuqm (vector __int128_t, vector __int128_t,
                                vector __int128_t);
vector __uint128_t vec_vsubeuqm (vector __uint128_t, vector __uint128_t,
                                 vector __uint128_t);

vector __int128_t vec_vsubcuq (vector __int128_t, vector __int128_t);
vector __uint128_t vec_vsubcuq (vector __uint128_t, vector __uint128_t);

__int128_t vec_vsubuqm (__int128_t, __int128_t);
__uint128_t vec_vsubuqm (__uint128_t, __uint128_t);

vector __int128_t __builtin_bcdadd (vector __int128_t, vector__int128_t);
int __builtin_bcdadd_lt (vector __int128_t, vector__int128_t);
int __builtin_bcdadd_eq (vector __int128_t, vector__int128_t);
int __builtin_bcdadd_gt (vector __int128_t, vector__int128_t);
int __builtin_bcdadd_ov (vector __int128_t, vector__int128_t);
vector __int128_t bcdsub (vector __int128_t, vector__int128_t);
int __builtin_bcdsub_lt (vector __int128_t, vector__int128_t);
int __builtin_bcdsub_eq (vector __int128_t, vector__int128_t);
int __builtin_bcdsub_gt (vector __int128_t, vector__int128_t);
int __builtin_bcdsub_ov (vector __int128_t, vector__int128_t);
</pre></smallexample>

<para>If the cryptographic instructions are enabled (<option>-mcrypto</option> or
<option>-mcpu=power8</option>), the following builtins are enabled.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">vector unsigned long long __builtin_crypto_vsbox (vector unsigned long long);

vector unsigned long long __builtin_crypto_vcipher (vector unsigned long long,
                                                    vector unsigned long long);

vector unsigned long long __builtin_crypto_vcipherlast
                                     (vector unsigned long long,
                                      vector unsigned long long);

vector unsigned long long __builtin_crypto_vncipher (vector unsigned long long,
                                                     vector unsigned long long);

vector unsigned long long __builtin_crypto_vncipherlast
                                     (vector unsigned long long,
                                      vector unsigned long long);

vector unsigned char __builtin_crypto_vpermxor (vector unsigned char,
                                                vector unsigned char,
                                                vector unsigned char);

vector unsigned short __builtin_crypto_vpermxor (vector unsigned short,
                                                 vector unsigned short,
                                                 vector unsigned short);

vector unsigned int __builtin_crypto_vpermxor (vector unsigned int,
                                               vector unsigned int,
                                               vector unsigned int);

vector unsigned long long __builtin_crypto_vpermxor (vector unsigned long long,
                                                     vector unsigned long long,
                                                     vector unsigned long long);

vector unsigned char __builtin_crypto_vpmsumb (vector unsigned char,
                                               vector unsigned char);

vector unsigned short __builtin_crypto_vpmsumb (vector unsigned short,
                                                vector unsigned short);

vector unsigned int __builtin_crypto_vpmsumb (vector unsigned int,
                                              vector unsigned int);

vector unsigned long long __builtin_crypto_vpmsumb (vector unsigned long long,
                                                    vector unsigned long long);

vector unsigned long long __builtin_crypto_vshasigmad
                               (vector unsigned long long, int, int);

vector unsigned int __builtin_crypto_vshasigmaw (vector unsigned int,
                                                 int, int);
</pre></smallexample>

<para>The second argument to the <var>__builtin_crypto_vshasigmad</var> and
<var>__builtin_crypto_vshasigmaw</var> builtin functions must be a constant
integer that is 0 or 1.  The third argument to these builtin functions
must be a constant integer in the range of 0 to 15.
</para>
</subsection>
<node name="PowerPC-Hardware-Transactional-Memory-Built_002din-Functions" spaces=" "><nodename>PowerPC Hardware Transactional Memory Built-in Functions</nodename><nodenext automatic="on">RX Built-in Functions</nodenext><nodeprev automatic="on">PowerPC AltiVec/VSX Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>PowerPC Hardware Transactional Memory Built-in Functions</sectiontitle>
<para>GCC provides two interfaces for accessing the Hardware Transactional
Memory (HTM) instructions available on some of the PowerPC family
of processors (eg, POWER8).  The two interfaces come in a low level
interface, consisting of built-in functions specific to PowerPC and a
higher level interface consisting of inline functions that are common
between PowerPC and S/390.
</para>
<subsubsection spaces=" "><sectiontitle>PowerPC HTM Low Level Built-in Functions</sectiontitle>

<para>The following low level built-in functions are available with
<option>-mhtm</option> or <option>-mcpu=CPU</option> where CPU is &textlsquo;power8&textrsquo; or later.
They all generate the machine instruction that is part of the name.
</para>
<para>The HTM builtins (with the exception of <code>__builtin_tbegin</code>) return
the full 4-bit condition register value set by their associated hardware
instruction.  The header file <code>htmintrin.h</code> defines some macros that can
be used to decipher the return value.  The <code>__builtin_tbegin</code> builtin
returns a simple true or false value depending on whether a transaction was
successfully started or not.  The arguments of the builtins match exactly the
type and order of the associated hardware instruction&textrsquo;s operands, except for
the <code>__builtin_tcheck</code> builtin, which does not take any input arguments.
Refer to the ISA manual for a description of each instruction&textrsquo;s operands.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">unsigned int __builtin_tbegin (unsigned int)
unsigned int __builtin_tend (unsigned int)

unsigned int __builtin_tabort (unsigned int)
unsigned int __builtin_tabortdc (unsigned int, unsigned int, unsigned int)
unsigned int __builtin_tabortdci (unsigned int, unsigned int, int)
unsigned int __builtin_tabortwc (unsigned int, unsigned int, unsigned int)
unsigned int __builtin_tabortwci (unsigned int, unsigned int, int)

unsigned int __builtin_tcheck (void)
unsigned int __builtin_treclaim (unsigned int)
unsigned int __builtin_trechkpt (void)
unsigned int __builtin_tsr (unsigned int)
</pre></smallexample>

<para>In addition to the above HTM built-ins, we have added built-ins for
some common extended mnemonics of the HTM instructions:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">unsigned int __builtin_tendall (void)
unsigned int __builtin_tresume (void)
unsigned int __builtin_tsuspend (void)
</pre></smallexample>

<para>The following set of built-in functions are available to gain access
to the HTM specific special purpose registers.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">unsigned long __builtin_get_texasr (void)
unsigned long __builtin_get_texasru (void)
unsigned long __builtin_get_tfhar (void)
unsigned long __builtin_get_tfiar (void)

void __builtin_set_texasr (unsigned long);
void __builtin_set_texasru (unsigned long);
void __builtin_set_tfhar (unsigned long);
void __builtin_set_tfiar (unsigned long);
</pre></smallexample>

<para>Example usage of these low level built-in functions may look like:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#include &lt;htmintrin.h&gt;

int num_retries = 10;

while (1)
  &lbrace;
    if (__builtin_tbegin (0))
      &lbrace;
        /* Transaction State Initiated.  */
        if (is_locked (lock))
          __builtin_tabort (0);
        ... transaction code...
        __builtin_tend (0);
        break;
      &rbrace;
    else
      &lbrace;
        /* Transaction State Failed.  Use locks if the transaction
           failure is &quot;persistent&quot; or we've tried too many times.  */
        if (num_retries-- &lt;= 0
            || _TEXASRU_FAILURE_PERSISTENT (__builtin_get_texasru ()))
          &lbrace;
            acquire_lock (lock);
            ... non transactional fallback path...
            release_lock (lock);
            break;
          &rbrace;
      &rbrace;
  &rbrace;
</pre></smallexample>

<para>One final built-in function has been added that returns the value of
the 2-bit Transaction State field of the Machine Status Register (MSR)
as stored in <code>CR0</code>.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">unsigned long __builtin_ttest (void)
</pre></smallexample>

<para>This built-in can be used to determine the current transaction state
using the following code example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#include &lt;htmintrin.h&gt;

unsigned char tx_state = _HTM_STATE (__builtin_ttest ());

if (tx_state == _HTM_TRANSACTIONAL)
  &lbrace;
    /* Code to use in transactional state.  */
  &rbrace;
else if (tx_state == _HTM_NONTRANSACTIONAL)
  &lbrace;
    /* Code to use in non-transactional state.  */
  &rbrace;
else if (tx_state == _HTM_SUSPENDED)
  &lbrace;
    /* Code to use in transaction suspended state.  */
  &rbrace;
</pre></smallexample>

</subsubsection>
<subsubsection spaces=" "><sectiontitle>PowerPC HTM High Level Inline Functions</sectiontitle>

<para>The following high level HTM interface is made available by including
<code>&lt;htmxlintrin.h&gt;</code> and using <option>-mhtm</option> or <option>-mcpu=CPU</option>
where CPU is &textlsquo;power8&textrsquo; or later.  This interface is common between PowerPC
and S/390, allowing users to write one HTM source implementation that
can be compiled and executed on either system.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">long __TM_simple_begin (void)
long __TM_begin (void* const TM_buff)
long __TM_end (void)
void __TM_abort (void)
void __TM_named_abort (unsigned char const code)
void __TM_resume (void)
void __TM_suspend (void)

long __TM_is_user_abort (void* const TM_buff)
long __TM_is_named_user_abort (void* const TM_buff, unsigned char *code)
long __TM_is_illegal (void* const TM_buff)
long __TM_is_footprint_exceeded (void* const TM_buff)
long __TM_nesting_depth (void* const TM_buff)
long __TM_is_nested_too_deep(void* const TM_buff)
long __TM_is_conflict(void* const TM_buff)
long __TM_is_failure_persistent(void* const TM_buff)
long __TM_failure_address(void* const TM_buff)
long long __TM_failure_code(void* const TM_buff)
</pre></smallexample>

<para>Using these common set of HTM inline functions, we can create
a more portable version of the HTM example in the previous
section that will work on either PowerPC or S/390:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#include &lt;htmxlintrin.h&gt;

int num_retries = 10;
TM_buff_type TM_buff;

while (1)
  &lbrace;
    if (__TM_begin (TM_buff) == _HTM_TBEGIN_STARTED)
      &lbrace;
        /* Transaction State Initiated.  */
        if (is_locked (lock))
          __TM_abort ();
        ... transaction code...
        __TM_end ();
        break;
      &rbrace;
    else
      &lbrace;
        /* Transaction State Failed.  Use locks if the transaction
           failure is &quot;persistent&quot; or we've tried too many times.  */
        if (num_retries-- &lt;= 0
            || __TM_is_failure_persistent (TM_buff))
          &lbrace;
            acquire_lock (lock);
            ... non transactional fallback path...
            release_lock (lock);
            break;
          &rbrace;
      &rbrace;
  &rbrace;
</pre></smallexample>

</subsubsection>
</subsection>
<node name="RX-Built_002din-Functions" spaces=" "><nodename>RX Built-in Functions</nodename><nodenext automatic="on">S/390 System z Built-in Functions</nodenext><nodeprev automatic="on">PowerPC Hardware Transactional Memory Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>RX Built-in Functions</sectiontitle>
<para>GCC supports some of the RX instructions which cannot be expressed in
the C programming language via the use of built-in functions.  The
following functions are supported:
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="614" mergedindex="cp">__builtin_rx_brk</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_brk</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>brk</code> machine instruction.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="615" mergedindex="cp">__builtin_rx_clrpsw</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_clrpsw</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>clrpsw</code> machine instruction to clear the specified
bit in the processor status word.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="616" mergedindex="cp">__builtin_rx_int</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_int</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>int</code> machine instruction to generate an interrupt
with the specified value.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="617" mergedindex="cp">__builtin_rx_machi</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_machi</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>machi</code> machine instruction to add the result of
multiplying the top 16 bits of the two arguments into the
accumulator.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="618" mergedindex="cp">__builtin_rx_maclo</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_maclo</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>maclo</code> machine instruction to add the result of
multiplying the bottom 16 bits of the two arguments into the
accumulator.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="619" mergedindex="cp">__builtin_rx_mulhi</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_mulhi</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>mulhi</code> machine instruction to place the result of
multiplying the top 16 bits of the two arguments into the
accumulator.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="620" mergedindex="cp">__builtin_rx_mullo</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_mullo</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>mullo</code> machine instruction to place the result of
multiplying the bottom 16 bits of the two arguments into the
accumulator.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="621" mergedindex="cp">__builtin_rx_mvfachi</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>int</deftype>  <deffunction>__builtin_rx_mvfachi</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>mvfachi</code> machine instruction to read the top
32 bits of the accumulator.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="622" mergedindex="cp">__builtin_rx_mvfacmi</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>int</deftype>  <deffunction>__builtin_rx_mvfacmi</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>mvfacmi</code> machine instruction to read the middle
32 bits of the accumulator.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="623" mergedindex="cp">__builtin_rx_mvfc</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>int</deftype> <deffunction>__builtin_rx_mvfc</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>mvfc</code> machine instruction which reads the control
register specified in its argument and returns its value.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="624" mergedindex="cp">__builtin_rx_mvtachi</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_mvtachi</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>mvtachi</code> machine instruction to set the top
32 bits of the accumulator.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="625" mergedindex="cp">__builtin_rx_mvtaclo</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_mvtaclo</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>mvtaclo</code> machine instruction to set the bottom
32 bits of the accumulator.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="626" mergedindex="cp">__builtin_rx_mvtc</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_mvtc</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype> <defparam>reg</defparam><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype> <defparam>val</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>mvtc</code> machine instruction which sets control
register number <code>reg</code> to <code>val</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="627" mergedindex="cp">__builtin_rx_mvtipl</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_mvtipl</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>mvtipl</code> machine instruction set the interrupt
priority level.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="628" mergedindex="cp">__builtin_rx_racw</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_racw</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>racw</code> machine instruction to round the accumulator
according to the specified mode.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="629" mergedindex="cp">__builtin_rx_revw</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>int</deftype> <deffunction>__builtin_rx_revw</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>revw</code> machine instruction which swaps the bytes in
the argument so that bits 0&textndash;7 now occupy bits 8&textndash;15 and vice versa,
and also bits 16&textndash;23 occupy bits 24&textndash;31 and vice versa.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="630" mergedindex="cp">__builtin_rx_rmpa</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_rmpa</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>rmpa</code> machine instruction which initiates a
repeated multiply and accumulate sequence.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="631" mergedindex="cp">__builtin_rx_round</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_round</deffunction> <defdelimiter>(</defdelimiter><defparamtype>float</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>round</code> machine instruction which returns the
floating-point argument rounded according to the current rounding mode
set in the floating-point status word register.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="632" mergedindex="cp">__builtin_rx_sat</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>int</deftype> <deffunction>__builtin_rx_sat</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>sat</code> machine instruction which returns the
saturated value of the argument.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="633" mergedindex="cp">__builtin_rx_setpsw</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_setpsw</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>setpsw</code> machine instruction to set the specified
bit in the processor status word.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="634" mergedindex="cp">__builtin_rx_wait</indexterm><defcategory bracketed="on">Built-in Function</defcategory>  <deftype>void</deftype> <deffunction>__builtin_rx_wait</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>wait</code> machine instruction.
</para></definitionitem></deftypefn>

</subsection>
<node name="S_002f390-System-z-Built_002din-Functions" spaces=" "><nodename>S/390 System z Built-in Functions</nodename><nodenext automatic="on">SH Built-in Functions</nodenext><nodeprev automatic="on">RX Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>S/390 System z Built-in Functions</sectiontitle>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="635" mergedindex="cp">__builtin_tbegin</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_tbegin</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void*</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>tbegin</code> machine instruction starting a
non-constraint hardware transaction.  If the parameter is non-NULL the
memory area is used to store the transaction diagnostic buffer and
will be passed as first operand to <code>tbegin</code>.  This buffer can be
defined using the <code>struct __htm_tdb</code> C struct defined in
<code>htmintrin.h</code> and must reside on a double-word boundary.  The
second tbegin operand is set to <code>0xff0c</code>. This enables
save/restore of all GPRs and disables aborts for FPR and AR
manipulations inside the transaction body.  The condition code set by
the tbegin instruction is returned as integer value.  The tbegin
instruction by definition overwrites the content of all FPRs.  The
compiler will generate code which saves and restores the FPRs.  For
soft-float code it is recommended to used the <code>*_nofloat</code>
variant.  In order to prevent a TDB from being written it is required
to pass an constant zero value as parameter.  Passing the zero value
through a variable is not sufficient.  Although modifications of
access registers inside the transaction will not trigger an
transaction abort it is not supported to actually modify them.  Access
registers do not get saved when entering a transaction. They will have
undefined state when reaching the abort code.
</para></definitionitem></deftypefn>

<para>Macros for the possible return codes of tbegin are defined in the
<code>htmintrin.h</code> header file:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">_HTM_TBEGIN_STARTED</itemformat></item>
</tableterm><tableitem><para><code>tbegin</code> has been executed as part of normal processing.  The
transaction body is supposed to be executed.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">_HTM_TBEGIN_INDETERMINATE</itemformat></item>
</tableterm><tableitem><para>The transaction was aborted due to an indeterminate condition which
might be persistent.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">_HTM_TBEGIN_TRANSIENT</itemformat></item>
</tableterm><tableitem><para>The transaction aborted due to a transient failure.  The transaction
should be re-executed in that case.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">_HTM_TBEGIN_PERSISTENT</itemformat></item>
</tableterm><tableitem><para>The transaction aborted due to a persistent failure.  Re-execution
under same circumstances will not be productive.
</para></tableitem></tableentry></table>

<defmac spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="636" mergedindex="cp">_HTM_FIRST_USER_ABORT_CODE</indexterm><defcategory automatic="on">Macro</defcategory> <deffunction>_HTM_FIRST_USER_ABORT_CODE</deffunction></definitionterm>
<definitionitem><para>The <code>_HTM_FIRST_USER_ABORT_CODE</code> defined in <code>htmintrin.h</code>
specifies the first abort code which can be used for
<code>__builtin_tabort</code>.  Values below this threshold are reserved for
machine use.
</para></definitionitem></defmac>

<deftp spaces=" " endspaces=" "><definitionterm><indexterm index="tp" number="1" mergedindex="cp">struct __htm_tdb</indexterm><defcategory bracketed="on">Data type</defcategory> <defdatatype bracketed="on">struct __htm_tdb</defdatatype></definitionterm>
<definitionitem><para>The <code>struct __htm_tdb</code> defined in <code>htmintrin.h</code> describes
the structure of the transaction diagnostic block as specified in the
Principles of Operation manual chapter 5-91.
</para></definitionitem></deftp>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="637" mergedindex="cp">__builtin_tbegin_nofloat</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_tbegin_nofloat</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void*</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Same as <code>__builtin_tbegin</code> but without FPR saves and restores.
Using this variant in code making use of FPRs will leave the FPRs in
undefined state when entering the transaction abort handler code.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="638" mergedindex="cp">__builtin_tbegin_retry</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_tbegin_retry</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void*</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>In addition to <code>__builtin_tbegin</code> a loop for transient failures
is generated.  If tbegin returns a condition code of 2 the transaction
will be retried as often as specified in the second argument.  The
perform processor assist instruction is used to tell the CPU about the
number of fails so far.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="639" mergedindex="cp">__builtin_tbegin_retry_nofloat</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_tbegin_retry_nofloat</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void*</defparamtype><defdelimiter>,</defdelimiter> <defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Same as <code>__builtin_tbegin_retry</code> but without FPR saves and
restores.  Using this variant in code making use of FPRs will leave
the FPRs in undefined state when entering the transaction abort
handler code.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="640" mergedindex="cp">__builtin_tbeginc</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_tbeginc</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>tbeginc</code> machine instruction starting a constraint
hardware transaction.  The second operand is set to <code>0xff08</code>.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="641" mergedindex="cp">__builtin_tend</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_tend</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>tend</code> machine instruction finishing a transaction
and making the changes visible to other threads.  The condition code
generated by tend is returned as integer value.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="642" mergedindex="cp">__builtin_tabort</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_tabort</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>tabort</code> machine instruction with the specified
abort code.  Abort codes from 0 through 255 are reserved and will
result in an error message.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="643" mergedindex="cp">__builtin_tx_assist</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_tx_assist</deffunction> <defdelimiter>(</defdelimiter><defparamtype>int</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>ppa rX,rY,1</code> machine instruction.  Where the
integer parameter is loaded into rX and a value of zero is loaded into
rY.  The integer parameter specifies the number of times the
transaction repeatedly aborted.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="644" mergedindex="cp">__builtin_tx_nesting_depth</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_tx_nesting_depth</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Generates the <code>etnd</code> machine instruction.  The current nesting
depth is returned as integer value.  For a nesting depth of 0 the code
is not executed as part of an transaction.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="645" mergedindex="cp">__builtin_non_tx_store</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_non_tx_store</deffunction> <defdelimiter>(</defdelimiter><defparamtype>uint64_t</defparamtype> <defparam>*</defparam><defdelimiter>,</defdelimiter> <defparamtype>uint64_t</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem>
<para>Generates the <code>ntstg</code> machine instruction.  The second argument
is written to the first arguments location.  The store operation will
not be rolled-back in case of an transaction abort.
</para></definitionitem></deftypefn>

</subsection>
<node name="SH-Built_002din-Functions" spaces=" "><nodename>SH Built-in Functions</nodename><nodenext automatic="on">SPARC VIS Built-in Functions</nodenext><nodeprev automatic="on">S/390 System z Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>SH Built-in Functions</sectiontitle>
<para>The following built-in functions are supported on the SH1, SH2, SH3 and SH4
families of processors:
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="646" mergedindex="cp">__builtin_set_thread_pointer</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void</deftype> <deffunction>__builtin_set_thread_pointer</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype> <defparam>*</defparam><defparam><var>ptr</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Sets the <samp>GBR</samp> register to the specified value <var>ptr</var>.  This is usually
used by system code that manages threads and execution contexts.  The compiler
normally does not generate code that modifies the contents of <samp>GBR</samp> and
thus the value is preserved across function calls.  Changing the <samp>GBR</samp>
value in user code must be done with caution, since the compiler might use
<samp>GBR</samp> in order to access thread local variables.
</para>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="647" mergedindex="cp">__builtin_thread_pointer</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void *</deftype> <deffunction>__builtin_thread_pointer</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Returns the value that is currently set in the <samp>GBR</samp> register.
Memory loads and stores that use the thread pointer as a base address are
turned into <samp>GBR</samp> based displacement loads and stores, if possible.
For example:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">struct my_tcb
&lbrace;
   int a, b, c, d, e;
&rbrace;;

int get_tcb_value (void)
&lbrace;
  // Generate <samp>mov.l &arobase;(8,gbr),r0</samp> instruction
  return ((my_tcb*)__builtin_thread_pointer ())-&gt;c;
&rbrace;

</pre></smallexample>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="648" mergedindex="cp">__builtin_sh_get_fpscr</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">unsigned int</deftype> <deffunction>__builtin_sh_get_fpscr</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Returns the value that is currently set in the <samp>FPSCR</samp> register.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="649" mergedindex="cp">__builtin_sh_set_fpscr</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype bracketed="on">void</deftype> <deffunction>__builtin_sh_set_fpscr</deffunction> <defdelimiter>(</defdelimiter><defparamtype>unsigned</defparamtype> <defparam>int</defparam> <defparam><var>val</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Sets the <samp>FPSCR</samp> register to the specified value <var>val</var>, while
preserving the current values of the FR, SZ and PR bits.
</para></definitionitem></deftypefn>

</subsection>
<node name="SPARC-VIS-Built_002din-Functions" spaces=" "><nodename>SPARC VIS Built-in Functions</nodename><nodenext automatic="on">SPU Built-in Functions</nodenext><nodeprev automatic="on">SH Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>SPARC VIS Built-in Functions</sectiontitle>

<para>GCC supports SIMD operations on the SPARC using both the generic vector
extensions (<pxref label="Vector-Extensions"><xrefnodename>Vector Extensions</xrefnodename></pxref>) as well as built-in functions for
the SPARC Visual Instruction Set (VIS).  When you use the <option>-mvis</option>
switch, the VIS extension is exposed as the following built-in functions:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef int v1si __attribute__ ((vector_size (4)));
typedef int v2si __attribute__ ((vector_size (8)));
typedef short v4hi __attribute__ ((vector_size (8)));
typedef short v2hi __attribute__ ((vector_size (4)));
typedef unsigned char v8qi __attribute__ ((vector_size (8)));
typedef unsigned char v4qi __attribute__ ((vector_size (4)));

void __builtin_vis_write_gsr (int64_t);
int64_t __builtin_vis_read_gsr (void);

void * __builtin_vis_alignaddr (void *, long);
void * __builtin_vis_alignaddrl (void *, long);
int64_t __builtin_vis_faligndatadi (int64_t, int64_t);
v2si __builtin_vis_faligndatav2si (v2si, v2si);
v4hi __builtin_vis_faligndatav4hi (v4si, v4si);
v8qi __builtin_vis_faligndatav8qi (v8qi, v8qi);

v4hi __builtin_vis_fexpand (v4qi);

v4hi __builtin_vis_fmul8x16 (v4qi, v4hi);
v4hi __builtin_vis_fmul8x16au (v4qi, v2hi);
v4hi __builtin_vis_fmul8x16al (v4qi, v2hi);
v4hi __builtin_vis_fmul8sux16 (v8qi, v4hi);
v4hi __builtin_vis_fmul8ulx16 (v8qi, v4hi);
v2si __builtin_vis_fmuld8sux16 (v4qi, v2hi);
v2si __builtin_vis_fmuld8ulx16 (v4qi, v2hi);

v4qi __builtin_vis_fpack16 (v4hi);
v8qi __builtin_vis_fpack32 (v2si, v8qi);
v2hi __builtin_vis_fpackfix (v2si);
v8qi __builtin_vis_fpmerge (v4qi, v4qi);

int64_t __builtin_vis_pdist (v8qi, v8qi, int64_t);

long __builtin_vis_edge8 (void *, void *);
long __builtin_vis_edge8l (void *, void *);
long __builtin_vis_edge16 (void *, void *);
long __builtin_vis_edge16l (void *, void *);
long __builtin_vis_edge32 (void *, void *);
long __builtin_vis_edge32l (void *, void *);

long __builtin_vis_fcmple16 (v4hi, v4hi);
long __builtin_vis_fcmple32 (v2si, v2si);
long __builtin_vis_fcmpne16 (v4hi, v4hi);
long __builtin_vis_fcmpne32 (v2si, v2si);
long __builtin_vis_fcmpgt16 (v4hi, v4hi);
long __builtin_vis_fcmpgt32 (v2si, v2si);
long __builtin_vis_fcmpeq16 (v4hi, v4hi);
long __builtin_vis_fcmpeq32 (v2si, v2si);

v4hi __builtin_vis_fpadd16 (v4hi, v4hi);
v2hi __builtin_vis_fpadd16s (v2hi, v2hi);
v2si __builtin_vis_fpadd32 (v2si, v2si);
v1si __builtin_vis_fpadd32s (v1si, v1si);
v4hi __builtin_vis_fpsub16 (v4hi, v4hi);
v2hi __builtin_vis_fpsub16s (v2hi, v2hi);
v2si __builtin_vis_fpsub32 (v2si, v2si);
v1si __builtin_vis_fpsub32s (v1si, v1si);

long __builtin_vis_array8 (long, long);
long __builtin_vis_array16 (long, long);
long __builtin_vis_array32 (long, long);
</pre></smallexample>

<para>When you use the <option>-mvis2</option> switch, the VIS version 2.0 built-in
functions also become available:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">long __builtin_vis_bmask (long, long);
int64_t __builtin_vis_bshuffledi (int64_t, int64_t);
v2si __builtin_vis_bshufflev2si (v2si, v2si);
v4hi __builtin_vis_bshufflev2si (v4hi, v4hi);
v8qi __builtin_vis_bshufflev2si (v8qi, v8qi);

long __builtin_vis_edge8n (void *, void *);
long __builtin_vis_edge8ln (void *, void *);
long __builtin_vis_edge16n (void *, void *);
long __builtin_vis_edge16ln (void *, void *);
long __builtin_vis_edge32n (void *, void *);
long __builtin_vis_edge32ln (void *, void *);
</pre></smallexample>

<para>When you use the <option>-mvis3</option> switch, the VIS version 3.0 built-in
functions also become available:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void __builtin_vis_cmask8 (long);
void __builtin_vis_cmask16 (long);
void __builtin_vis_cmask32 (long);

v4hi __builtin_vis_fchksm16 (v4hi, v4hi);

v4hi __builtin_vis_fsll16 (v4hi, v4hi);
v4hi __builtin_vis_fslas16 (v4hi, v4hi);
v4hi __builtin_vis_fsrl16 (v4hi, v4hi);
v4hi __builtin_vis_fsra16 (v4hi, v4hi);
v2si __builtin_vis_fsll16 (v2si, v2si);
v2si __builtin_vis_fslas16 (v2si, v2si);
v2si __builtin_vis_fsrl16 (v2si, v2si);
v2si __builtin_vis_fsra16 (v2si, v2si);

long __builtin_vis_pdistn (v8qi, v8qi);

v4hi __builtin_vis_fmean16 (v4hi, v4hi);

int64_t __builtin_vis_fpadd64 (int64_t, int64_t);
int64_t __builtin_vis_fpsub64 (int64_t, int64_t);

v4hi __builtin_vis_fpadds16 (v4hi, v4hi);
v2hi __builtin_vis_fpadds16s (v2hi, v2hi);
v4hi __builtin_vis_fpsubs16 (v4hi, v4hi);
v2hi __builtin_vis_fpsubs16s (v2hi, v2hi);
v2si __builtin_vis_fpadds32 (v2si, v2si);
v1si __builtin_vis_fpadds32s (v1si, v1si);
v2si __builtin_vis_fpsubs32 (v2si, v2si);
v1si __builtin_vis_fpsubs32s (v1si, v1si);

long __builtin_vis_fucmple8 (v8qi, v8qi);
long __builtin_vis_fucmpne8 (v8qi, v8qi);
long __builtin_vis_fucmpgt8 (v8qi, v8qi);
long __builtin_vis_fucmpeq8 (v8qi, v8qi);

float __builtin_vis_fhadds (float, float);
double __builtin_vis_fhaddd (double, double);
float __builtin_vis_fhsubs (float, float);
double __builtin_vis_fhsubd (double, double);
float __builtin_vis_fnhadds (float, float);
double __builtin_vis_fnhaddd (double, double);

int64_t __builtin_vis_umulxhi (int64_t, int64_t);
int64_t __builtin_vis_xmulx (int64_t, int64_t);
int64_t __builtin_vis_xmulxhi (int64_t, int64_t);
</pre></smallexample>

</subsection>
<node name="SPU-Built_002din-Functions" spaces=" "><nodename>SPU Built-in Functions</nodename><nodenext automatic="on">TI C6X Built-in Functions</nodenext><nodeprev automatic="on">SPARC VIS Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>SPU Built-in Functions</sectiontitle>

<para>GCC provides extensions for the SPU processor as described in the
Sony/Toshiba/IBM SPU Language Extensions Specification, which can be
found at <uref><urefurl>http://cell.scei.co.jp/</urefurl></uref> or
<uref><urefurl>http://www.ibm.com/developerworks/power/cell/</urefurl></uref>.  GCC&textrsquo;s
implementation differs in several ways.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>The optional extension of specifying vector constants in parentheses is
not supported.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>A vector initializer requires no cast if the vector constant is of the
same type as the variable it is initializing.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If <code>signed</code> or <code>unsigned</code> is omitted, the signedness of the
vector type is the default signedness of the base type.  The default
varies depending on the operating system, so a portable program should
always specify the signedness.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>By default, the keyword <code>__vector</code> is added. The macro
<code>vector</code> is defined in <code>&lt;spu_intrinsics.h&gt;</code> and can be
undefined.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>GCC allows using a <code>typedef</code> name as the type specifier for a
vector type.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>For C, overloaded functions are implemented with macros so the following
does not work:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  spu_add ((vector signed int)&lbrace;1, 2, 3, 4&rbrace;, foo);
</pre></smallexample>

<noindent></noindent>
<para>Since <code>spu_add</code> is a macro, the vector constant in the example
is treated as four separate arguments.  Wrap the entire argument in
parentheses for this to work.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The extended version of <code>__builtin_expect</code> is not supported.
</para>
</listitem></itemize>

<para><emph>Note:</emph> Only the interface described in the aforementioned
specification is supported. Internally, GCC uses built-in functions to
implement the required functionality, but these are not supported and
are subject to change without notice.
</para>
</subsection>
<node name="TI-C6X-Built_002din-Functions" spaces=" "><nodename>TI C6X Built-in Functions</nodename><nodenext automatic="on">TILE-Gx Built-in Functions</nodenext><nodeprev automatic="on">SPU Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>TI C6X Built-in Functions</sectiontitle>

<para>GCC provides intrinsics to access certain instructions of the TI C6X
processors.  These intrinsics, listed below, are available after
inclusion of the <code>c6x_intrinsics.h</code> header file.  They map directly
to C6X instructions.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">
int _sadd (int, int)
int _ssub (int, int)
int _sadd2 (int, int)
int _ssub2 (int, int)
long long _mpy2 (int, int)
long long _smpy2 (int, int)
int _add4 (int, int)
int _sub4 (int, int)
int _saddu4 (int, int)

int _smpy (int, int)
int _smpyh (int, int)
int _smpyhl (int, int)
int _smpylh (int, int)

int _sshl (int, int)
int _subc (int, int)

int _avg2 (int, int)
int _avgu4 (int, int)

int _clrr (int, int)
int _extr (int, int)
int _extru (int, int)
int _abs (int)
int _abs2 (int)

</pre></smallexample>

</subsection>
<node name="TILE_002dGx-Built_002din-Functions" spaces=" "><nodename>TILE-Gx Built-in Functions</nodename><nodenext automatic="on">TILEPro Built-in Functions</nodenext><nodeprev automatic="on">TI C6X Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>TILE-Gx Built-in Functions</sectiontitle>

<para>GCC provides intrinsics to access every instruction of the TILE-Gx
processor.  The intrinsics are of the form:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">
unsigned long long __insn_<var>op</var> (...)

</pre></smallexample>

<para>Where <var>op</var> is the name of the instruction.  Refer to the ISA manual
for the complete list of instructions.
</para>
<para>GCC also provides intrinsics to directly access the network registers.
The intrinsics are:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">
unsigned long long __tile_idn0_receive (void)
unsigned long long __tile_idn1_receive (void)
unsigned long long __tile_udn0_receive (void)
unsigned long long __tile_udn1_receive (void)
unsigned long long __tile_udn2_receive (void)
unsigned long long __tile_udn3_receive (void)
void __tile_idn_send (unsigned long long)
void __tile_udn_send (unsigned long long)

</pre></smallexample>

<para>The intrinsic <code>void __tile_network_barrier (void)</code> is used to
guarantee that no network operations before it are reordered with
those after it.
</para>
</subsection>
<node name="TILEPro-Built_002din-Functions" spaces=" "><nodename>TILEPro Built-in Functions</nodename><nodenext automatic="on">x86 Built-in Functions</nodenext><nodeprev automatic="on">TILE-Gx Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>TILEPro Built-in Functions</sectiontitle>

<para>GCC provides intrinsics to access every instruction of the TILEPro
processor.  The intrinsics are of the form:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">
unsigned __insn_<var>op</var> (...)

</pre></smallexample>

<noindent></noindent>
<para>where <var>op</var> is the name of the instruction.  Refer to the ISA manual
for the complete list of instructions.
</para>
<para>GCC also provides intrinsics to directly access the network registers.
The intrinsics are:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">
unsigned __tile_idn0_receive (void)
unsigned __tile_idn1_receive (void)
unsigned __tile_sn_receive (void)
unsigned __tile_udn0_receive (void)
unsigned __tile_udn1_receive (void)
unsigned __tile_udn2_receive (void)
unsigned __tile_udn3_receive (void)
void __tile_idn_send (unsigned)
void __tile_sn_send (unsigned)
void __tile_udn_send (unsigned)

</pre></smallexample>

<para>The intrinsic <code>void __tile_network_barrier (void)</code> is used to
guarantee that no network operations before it are reordered with
those after it.
</para>
</subsection>
<node name="x86-Built_002din-Functions" spaces=" "><nodename>x86 Built-in Functions</nodename><nodenext automatic="on">x86 transactional memory intrinsics</nodenext><nodeprev automatic="on">TILEPro Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>x86 Built-in Functions</sectiontitle>

<para>These built-in functions are available for the x86-32 and x86-64 family
of computers, depending on the command-line switches used.
</para>
<para>If you specify command-line switches such as <option>-msse</option>,
the compiler could use the extended instruction sets even if the built-ins
are not used explicitly in the program.  For this reason, applications
that perform run-time CPU detection must compile separate files for each
supported architecture, using the appropriate flags.  In particular,
the file containing the CPU detection code should be compiled without
these options.
</para>
<para>The following machine modes are available for use with MMX built-in functions
(<pxref label="Vector-Extensions"><xrefnodename>Vector Extensions</xrefnodename></pxref>): <code>V2SI</code> for a vector of two 32-bit integers,
<code>V4HI</code> for a vector of four 16-bit integers, and <code>V8QI</code> for a
vector of eight 8-bit integers.  Some of the built-in functions operate on
MMX registers as a whole 64-bit entity, these use <code>V1DI</code> as their mode.
</para>
<para>If 3DNow!&noeos; extensions are enabled, <code>V2SF</code> is used as a mode for a vector
of two 32-bit floating-point values.
</para>
<para>If SSE extensions are enabled, <code>V4SF</code> is used for a vector of four 32-bit
floating-point values.  Some instructions use a vector of four 32-bit
integers, these use <code>V4SI</code>.  Finally, some instructions operate on an
entire vector register, interpreting it as a 128-bit integer, these use mode
<code>TI</code>.
</para>
<para>In 64-bit mode, the x86-64 family of processors uses additional built-in
functions for efficient use of <code>TF</code> (<code>__float128</code>) 128-bit
floating point and <code>TC</code> 128-bit complex floating-point values.
</para>
<para>The following floating-point built-in functions are available in 64-bit
mode.  All of them implement the function that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">__float128 __builtin_fabsq (__float128)
__float128 __builtin_copysignq (__float128, __float128)
</pre></smallexample>

<para>The following built-in function is always available.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">void __builtin_ia32_pause (void)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>pause</code> machine instruction with a compiler memory
barrier.
</para></tableitem></tableentry></table>

<para>The following floating-point built-in functions are made available in the
64-bit mode.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">__float128 __builtin_infq (void)</itemformat></item>
</tableterm><tableitem><para>Similar to <code>__builtin_inf</code>, except the return type is <code>__float128</code>.
<findex index="fn" spaces=" "><indexterm index="fn" number="650" mergedindex="cp">__builtin_infq</indexterm></findex>
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__float128 __builtin_huge_valq (void)</itemformat></item>
</tableterm><tableitem><para>Similar to <code>__builtin_huge_val</code>, except the return type is <code>__float128</code>.
<findex index="fn" spaces=" "><indexterm index="fn" number="651" mergedindex="cp">__builtin_huge_valq</indexterm></findex>
</para></tableitem></tableentry></table>

<para>The following built-in functions are always available and can be used to
check the target platform type.
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="652" mergedindex="cp">__builtin_cpu_init</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>void</deftype> <deffunction>__builtin_cpu_init</deffunction> <defdelimiter>(</defdelimiter><defparamtype>void</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function runs the CPU detection code to check the type of CPU and the
features supported.  This built-in function needs to be invoked along with the built-in functions
to check CPU type and features, <code>__builtin_cpu_is</code> and
<code>__builtin_cpu_supports</code>, only when used in a function that is
executed before any constructors are called.  The CPU detection code is
automatically executed in a very high priority constructor.
</para>
<para>For example, this function has to be used in <code>ifunc</code> resolvers that
check for CPU type using the built-in functions <code>__builtin_cpu_is</code>
and <code>__builtin_cpu_supports</code>, or in constructors on targets that
don&textrsquo;t support constructor priority.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">
static void (*resolve_memcpy (void)) (void)
&lbrace;
  // ifunc resolvers fire before constructors, explicitly call the init
  // function.
  __builtin_cpu_init ();
  if (__builtin_cpu_supports (&quot;ssse3&quot;))
    return ssse3_memcpy; // super fast memcpy with ssse3 instructions.
  else
    return default_memcpy;
&rbrace;

void *memcpy (void *, const void *, size_t)
     __attribute__ ((ifunc (&quot;resolve_memcpy&quot;)));
</pre></smallexample>

</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="653" mergedindex="cp">__builtin_cpu_is</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_cpu_is</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>char</defparam> <defparamtype>*</defparamtype><defparam><var>cpuname</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function returns a positive integer if the run-time CPU
is of type <var>cpuname</var>
and returns <code>0</code> otherwise. The following CPU names can be detected:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">intel</itemformat></item>
</tableterm><tableitem><para>Intel CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">atom</itemformat></item>
</tableterm><tableitem><para>Intel Atom CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">core2</itemformat></item>
</tableterm><tableitem><para>Intel Core 2 CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">corei7</itemformat></item>
</tableterm><tableitem><para>Intel Core i7 CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">nehalem</itemformat></item>
</tableterm><tableitem><para>Intel Core i7 Nehalem CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">westmere</itemformat></item>
</tableterm><tableitem><para>Intel Core i7 Westmere CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sandybridge</itemformat></item>
</tableterm><tableitem><para>Intel Core i7 Sandy Bridge CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">amd</itemformat></item>
</tableterm><tableitem><para>AMD CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">amdfam10h</itemformat></item>
</tableterm><tableitem><para>AMD Family 10h CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">barcelona</itemformat></item>
</tableterm><tableitem><para>AMD Family 10h Barcelona CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">shanghai</itemformat></item>
</tableterm><tableitem><para>AMD Family 10h Shanghai CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">istanbul</itemformat></item>
</tableterm><tableitem><para>AMD Family 10h Istanbul CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">btver1</itemformat></item>
</tableterm><tableitem><para>AMD Family 14h CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">amdfam15h</itemformat></item>
</tableterm><tableitem><para>AMD Family 15h CPU.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">bdver1</itemformat></item>
</tableterm><tableitem><para>AMD Family 15h Bulldozer version 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">bdver2</itemformat></item>
</tableterm><tableitem><para>AMD Family 15h Bulldozer version 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">bdver3</itemformat></item>
</tableterm><tableitem><para>AMD Family 15h Bulldozer version 3.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">bdver4</itemformat></item>
</tableterm><tableitem><para>AMD Family 15h Bulldozer version 4.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">btver2</itemformat></item>
</tableterm><tableitem><para>AMD Family 16h CPU.
</para></tableitem></tableentry></table>

<para>Here is an example:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">if (__builtin_cpu_is (&quot;corei7&quot;))
  &lbrace;
     do_corei7 (); // Core i7 specific implementation.
  &rbrace;
else
  &lbrace;
     do_generic (); // Generic implementation.
  &rbrace;
</pre></smallexample>
</definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="654" mergedindex="cp">__builtin_cpu_supports</indexterm><defcategory bracketed="on">Built-in Function</defcategory> <deftype>int</deftype> <deffunction>__builtin_cpu_supports</deffunction> <defdelimiter>(</defdelimiter><defparamtype>const</defparamtype> <defparam>char</defparam> <defparamtype>*</defparamtype><defparam><var>feature</var></defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>This function returns a positive integer if the run-time CPU
supports <var>feature</var>
and returns <code>0</code> otherwise. The following features can be detected:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">cmov</itemformat></item>
</tableterm><tableitem><para>CMOV instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">mmx</itemformat></item>
</tableterm><tableitem><para>MMX instructions.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">popcnt</itemformat></item>
</tableterm><tableitem><para>POPCNT instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse</itemformat></item>
</tableterm><tableitem><para>SSE instructions.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse2</itemformat></item>
</tableterm><tableitem><para>SSE2 instructions.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse3</itemformat></item>
</tableterm><tableitem><para>SSE3 instructions.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ssse3</itemformat></item>
</tableterm><tableitem><para>SSSE3 instructions.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse4.1</itemformat></item>
</tableterm><tableitem><para>SSE4.1 instructions.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sse4.2</itemformat></item>
</tableterm><tableitem><para>SSE4.2 instructions.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">avx</itemformat></item>
</tableterm><tableitem><para>AVX instructions.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">avx2</itemformat></item>
</tableterm><tableitem><para>AVX2 instructions.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">avx512f</itemformat></item>
</tableterm><tableitem><para>AVX512F instructions.
</para></tableitem></tableentry></table>

<para>Here is an example:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">if (__builtin_cpu_supports (&quot;popcnt&quot;))
  &lbrace;
     asm(&quot;popcnt %1,%0&quot; : &quot;=r&quot;(count) : &quot;rm&quot;(n) : &quot;cc&quot;);
  &rbrace;
else
  &lbrace;
     count = generic_countbits (n); //generic implementation.
  &rbrace;
</pre></smallexample>
</definitionitem></deftypefn>


<para>The following built-in functions are made available by <option>-mmmx</option>.
All of them generate the machine instruction that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v8qi __builtin_ia32_paddb (v8qi, v8qi)
v4hi __builtin_ia32_paddw (v4hi, v4hi)
v2si __builtin_ia32_paddd (v2si, v2si)
v8qi __builtin_ia32_psubb (v8qi, v8qi)
v4hi __builtin_ia32_psubw (v4hi, v4hi)
v2si __builtin_ia32_psubd (v2si, v2si)
v8qi __builtin_ia32_paddsb (v8qi, v8qi)
v4hi __builtin_ia32_paddsw (v4hi, v4hi)
v8qi __builtin_ia32_psubsb (v8qi, v8qi)
v4hi __builtin_ia32_psubsw (v4hi, v4hi)
v8qi __builtin_ia32_paddusb (v8qi, v8qi)
v4hi __builtin_ia32_paddusw (v4hi, v4hi)
v8qi __builtin_ia32_psubusb (v8qi, v8qi)
v4hi __builtin_ia32_psubusw (v4hi, v4hi)
v4hi __builtin_ia32_pmullw (v4hi, v4hi)
v4hi __builtin_ia32_pmulhw (v4hi, v4hi)
di __builtin_ia32_pand (di, di)
di __builtin_ia32_pandn (di,di)
di __builtin_ia32_por (di, di)
di __builtin_ia32_pxor (di, di)
v8qi __builtin_ia32_pcmpeqb (v8qi, v8qi)
v4hi __builtin_ia32_pcmpeqw (v4hi, v4hi)
v2si __builtin_ia32_pcmpeqd (v2si, v2si)
v8qi __builtin_ia32_pcmpgtb (v8qi, v8qi)
v4hi __builtin_ia32_pcmpgtw (v4hi, v4hi)
v2si __builtin_ia32_pcmpgtd (v2si, v2si)
v8qi __builtin_ia32_punpckhbw (v8qi, v8qi)
v4hi __builtin_ia32_punpckhwd (v4hi, v4hi)
v2si __builtin_ia32_punpckhdq (v2si, v2si)
v8qi __builtin_ia32_punpcklbw (v8qi, v8qi)
v4hi __builtin_ia32_punpcklwd (v4hi, v4hi)
v2si __builtin_ia32_punpckldq (v2si, v2si)
v8qi __builtin_ia32_packsswb (v4hi, v4hi)
v4hi __builtin_ia32_packssdw (v2si, v2si)
v8qi __builtin_ia32_packuswb (v4hi, v4hi)

v4hi __builtin_ia32_psllw (v4hi, v4hi)
v2si __builtin_ia32_pslld (v2si, v2si)
v1di __builtin_ia32_psllq (v1di, v1di)
v4hi __builtin_ia32_psrlw (v4hi, v4hi)
v2si __builtin_ia32_psrld (v2si, v2si)
v1di __builtin_ia32_psrlq (v1di, v1di)
v4hi __builtin_ia32_psraw (v4hi, v4hi)
v2si __builtin_ia32_psrad (v2si, v2si)
v4hi __builtin_ia32_psllwi (v4hi, int)
v2si __builtin_ia32_pslldi (v2si, int)
v1di __builtin_ia32_psllqi (v1di, int)
v4hi __builtin_ia32_psrlwi (v4hi, int)
v2si __builtin_ia32_psrldi (v2si, int)
v1di __builtin_ia32_psrlqi (v1di, int)
v4hi __builtin_ia32_psrawi (v4hi, int)
v2si __builtin_ia32_psradi (v2si, int)

</pre></smallexample>

<para>The following built-in functions are made available either with
<option>-msse</option>, or with a combination of <option>-m3dnow</option> and
<option>-march=athlon</option>.  All of them generate the machine
instruction that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v4hi __builtin_ia32_pmulhuw (v4hi, v4hi)
v8qi __builtin_ia32_pavgb (v8qi, v8qi)
v4hi __builtin_ia32_pavgw (v4hi, v4hi)
v1di __builtin_ia32_psadbw (v8qi, v8qi)
v8qi __builtin_ia32_pmaxub (v8qi, v8qi)
v4hi __builtin_ia32_pmaxsw (v4hi, v4hi)
v8qi __builtin_ia32_pminub (v8qi, v8qi)
v4hi __builtin_ia32_pminsw (v4hi, v4hi)
int __builtin_ia32_pmovmskb (v8qi)
void __builtin_ia32_maskmovq (v8qi, v8qi, char *)
void __builtin_ia32_movntq (di *, di)
void __builtin_ia32_sfence (void)
</pre></smallexample>

<para>The following built-in functions are available when <option>-msse</option> is used.
All of them generate the machine instruction that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int __builtin_ia32_comieq (v4sf, v4sf)
int __builtin_ia32_comineq (v4sf, v4sf)
int __builtin_ia32_comilt (v4sf, v4sf)
int __builtin_ia32_comile (v4sf, v4sf)
int __builtin_ia32_comigt (v4sf, v4sf)
int __builtin_ia32_comige (v4sf, v4sf)
int __builtin_ia32_ucomieq (v4sf, v4sf)
int __builtin_ia32_ucomineq (v4sf, v4sf)
int __builtin_ia32_ucomilt (v4sf, v4sf)
int __builtin_ia32_ucomile (v4sf, v4sf)
int __builtin_ia32_ucomigt (v4sf, v4sf)
int __builtin_ia32_ucomige (v4sf, v4sf)
v4sf __builtin_ia32_addps (v4sf, v4sf)
v4sf __builtin_ia32_subps (v4sf, v4sf)
v4sf __builtin_ia32_mulps (v4sf, v4sf)
v4sf __builtin_ia32_divps (v4sf, v4sf)
v4sf __builtin_ia32_addss (v4sf, v4sf)
v4sf __builtin_ia32_subss (v4sf, v4sf)
v4sf __builtin_ia32_mulss (v4sf, v4sf)
v4sf __builtin_ia32_divss (v4sf, v4sf)
v4sf __builtin_ia32_cmpeqps (v4sf, v4sf)
v4sf __builtin_ia32_cmpltps (v4sf, v4sf)
v4sf __builtin_ia32_cmpleps (v4sf, v4sf)
v4sf __builtin_ia32_cmpgtps (v4sf, v4sf)
v4sf __builtin_ia32_cmpgeps (v4sf, v4sf)
v4sf __builtin_ia32_cmpunordps (v4sf, v4sf)
v4sf __builtin_ia32_cmpneqps (v4sf, v4sf)
v4sf __builtin_ia32_cmpnltps (v4sf, v4sf)
v4sf __builtin_ia32_cmpnleps (v4sf, v4sf)
v4sf __builtin_ia32_cmpngtps (v4sf, v4sf)
v4sf __builtin_ia32_cmpngeps (v4sf, v4sf)
v4sf __builtin_ia32_cmpordps (v4sf, v4sf)
v4sf __builtin_ia32_cmpeqss (v4sf, v4sf)
v4sf __builtin_ia32_cmpltss (v4sf, v4sf)
v4sf __builtin_ia32_cmpless (v4sf, v4sf)
v4sf __builtin_ia32_cmpunordss (v4sf, v4sf)
v4sf __builtin_ia32_cmpneqss (v4sf, v4sf)
v4sf __builtin_ia32_cmpnltss (v4sf, v4sf)
v4sf __builtin_ia32_cmpnless (v4sf, v4sf)
v4sf __builtin_ia32_cmpordss (v4sf, v4sf)
v4sf __builtin_ia32_maxps (v4sf, v4sf)
v4sf __builtin_ia32_maxss (v4sf, v4sf)
v4sf __builtin_ia32_minps (v4sf, v4sf)
v4sf __builtin_ia32_minss (v4sf, v4sf)
v4sf __builtin_ia32_andps (v4sf, v4sf)
v4sf __builtin_ia32_andnps (v4sf, v4sf)
v4sf __builtin_ia32_orps (v4sf, v4sf)
v4sf __builtin_ia32_xorps (v4sf, v4sf)
v4sf __builtin_ia32_movss (v4sf, v4sf)
v4sf __builtin_ia32_movhlps (v4sf, v4sf)
v4sf __builtin_ia32_movlhps (v4sf, v4sf)
v4sf __builtin_ia32_unpckhps (v4sf, v4sf)
v4sf __builtin_ia32_unpcklps (v4sf, v4sf)
v4sf __builtin_ia32_cvtpi2ps (v4sf, v2si)
v4sf __builtin_ia32_cvtsi2ss (v4sf, int)
v2si __builtin_ia32_cvtps2pi (v4sf)
int __builtin_ia32_cvtss2si (v4sf)
v2si __builtin_ia32_cvttps2pi (v4sf)
int __builtin_ia32_cvttss2si (v4sf)
v4sf __builtin_ia32_rcpps (v4sf)
v4sf __builtin_ia32_rsqrtps (v4sf)
v4sf __builtin_ia32_sqrtps (v4sf)
v4sf __builtin_ia32_rcpss (v4sf)
v4sf __builtin_ia32_rsqrtss (v4sf)
v4sf __builtin_ia32_sqrtss (v4sf)
v4sf __builtin_ia32_shufps (v4sf, v4sf, int)
void __builtin_ia32_movntps (float *, v4sf)
int __builtin_ia32_movmskps (v4sf)
</pre></smallexample>

<para>The following built-in functions are available when <option>-msse</option> is used.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">v4sf __builtin_ia32_loadups (float *)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>movups</code> machine instruction as a load from memory.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __builtin_ia32_storeups (float *, v4sf)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>movups</code> machine instruction as a store to memory.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v4sf __builtin_ia32_loadss (float *)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>movss</code> machine instruction as a load from memory.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v4sf __builtin_ia32_loadhps (v4sf, const v2sf *)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>movhps</code> machine instruction as a load from memory.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v4sf __builtin_ia32_loadlps (v4sf, const v2sf *)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>movlps</code> machine instruction as a load from memory
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __builtin_ia32_storehps (v2sf *, v4sf)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>movhps</code> machine instruction as a store to memory.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">void __builtin_ia32_storelps (v2sf *, v4sf)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>movlps</code> machine instruction as a store to memory.
</para></tableitem></tableentry></table>

<para>The following built-in functions are available when <option>-msse2</option> is used.
All of them generate the machine instruction that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int __builtin_ia32_comisdeq (v2df, v2df)
int __builtin_ia32_comisdlt (v2df, v2df)
int __builtin_ia32_comisdle (v2df, v2df)
int __builtin_ia32_comisdgt (v2df, v2df)
int __builtin_ia32_comisdge (v2df, v2df)
int __builtin_ia32_comisdneq (v2df, v2df)
int __builtin_ia32_ucomisdeq (v2df, v2df)
int __builtin_ia32_ucomisdlt (v2df, v2df)
int __builtin_ia32_ucomisdle (v2df, v2df)
int __builtin_ia32_ucomisdgt (v2df, v2df)
int __builtin_ia32_ucomisdge (v2df, v2df)
int __builtin_ia32_ucomisdneq (v2df, v2df)
v2df __builtin_ia32_cmpeqpd (v2df, v2df)
v2df __builtin_ia32_cmpltpd (v2df, v2df)
v2df __builtin_ia32_cmplepd (v2df, v2df)
v2df __builtin_ia32_cmpgtpd (v2df, v2df)
v2df __builtin_ia32_cmpgepd (v2df, v2df)
v2df __builtin_ia32_cmpunordpd (v2df, v2df)
v2df __builtin_ia32_cmpneqpd (v2df, v2df)
v2df __builtin_ia32_cmpnltpd (v2df, v2df)
v2df __builtin_ia32_cmpnlepd (v2df, v2df)
v2df __builtin_ia32_cmpngtpd (v2df, v2df)
v2df __builtin_ia32_cmpngepd (v2df, v2df)
v2df __builtin_ia32_cmpordpd (v2df, v2df)
v2df __builtin_ia32_cmpeqsd (v2df, v2df)
v2df __builtin_ia32_cmpltsd (v2df, v2df)
v2df __builtin_ia32_cmplesd (v2df, v2df)
v2df __builtin_ia32_cmpunordsd (v2df, v2df)
v2df __builtin_ia32_cmpneqsd (v2df, v2df)
v2df __builtin_ia32_cmpnltsd (v2df, v2df)
v2df __builtin_ia32_cmpnlesd (v2df, v2df)
v2df __builtin_ia32_cmpordsd (v2df, v2df)
v2di __builtin_ia32_paddq (v2di, v2di)
v2di __builtin_ia32_psubq (v2di, v2di)
v2df __builtin_ia32_addpd (v2df, v2df)
v2df __builtin_ia32_subpd (v2df, v2df)
v2df __builtin_ia32_mulpd (v2df, v2df)
v2df __builtin_ia32_divpd (v2df, v2df)
v2df __builtin_ia32_addsd (v2df, v2df)
v2df __builtin_ia32_subsd (v2df, v2df)
v2df __builtin_ia32_mulsd (v2df, v2df)
v2df __builtin_ia32_divsd (v2df, v2df)
v2df __builtin_ia32_minpd (v2df, v2df)
v2df __builtin_ia32_maxpd (v2df, v2df)
v2df __builtin_ia32_minsd (v2df, v2df)
v2df __builtin_ia32_maxsd (v2df, v2df)
v2df __builtin_ia32_andpd (v2df, v2df)
v2df __builtin_ia32_andnpd (v2df, v2df)
v2df __builtin_ia32_orpd (v2df, v2df)
v2df __builtin_ia32_xorpd (v2df, v2df)
v2df __builtin_ia32_movsd (v2df, v2df)
v2df __builtin_ia32_unpckhpd (v2df, v2df)
v2df __builtin_ia32_unpcklpd (v2df, v2df)
v16qi __builtin_ia32_paddb128 (v16qi, v16qi)
v8hi __builtin_ia32_paddw128 (v8hi, v8hi)
v4si __builtin_ia32_paddd128 (v4si, v4si)
v2di __builtin_ia32_paddq128 (v2di, v2di)
v16qi __builtin_ia32_psubb128 (v16qi, v16qi)
v8hi __builtin_ia32_psubw128 (v8hi, v8hi)
v4si __builtin_ia32_psubd128 (v4si, v4si)
v2di __builtin_ia32_psubq128 (v2di, v2di)
v8hi __builtin_ia32_pmullw128 (v8hi, v8hi)
v8hi __builtin_ia32_pmulhw128 (v8hi, v8hi)
v2di __builtin_ia32_pand128 (v2di, v2di)
v2di __builtin_ia32_pandn128 (v2di, v2di)
v2di __builtin_ia32_por128 (v2di, v2di)
v2di __builtin_ia32_pxor128 (v2di, v2di)
v16qi __builtin_ia32_pavgb128 (v16qi, v16qi)
v8hi __builtin_ia32_pavgw128 (v8hi, v8hi)
v16qi __builtin_ia32_pcmpeqb128 (v16qi, v16qi)
v8hi __builtin_ia32_pcmpeqw128 (v8hi, v8hi)
v4si __builtin_ia32_pcmpeqd128 (v4si, v4si)
v16qi __builtin_ia32_pcmpgtb128 (v16qi, v16qi)
v8hi __builtin_ia32_pcmpgtw128 (v8hi, v8hi)
v4si __builtin_ia32_pcmpgtd128 (v4si, v4si)
v16qi __builtin_ia32_pmaxub128 (v16qi, v16qi)
v8hi __builtin_ia32_pmaxsw128 (v8hi, v8hi)
v16qi __builtin_ia32_pminub128 (v16qi, v16qi)
v8hi __builtin_ia32_pminsw128 (v8hi, v8hi)
v16qi __builtin_ia32_punpckhbw128 (v16qi, v16qi)
v8hi __builtin_ia32_punpckhwd128 (v8hi, v8hi)
v4si __builtin_ia32_punpckhdq128 (v4si, v4si)
v2di __builtin_ia32_punpckhqdq128 (v2di, v2di)
v16qi __builtin_ia32_punpcklbw128 (v16qi, v16qi)
v8hi __builtin_ia32_punpcklwd128 (v8hi, v8hi)
v4si __builtin_ia32_punpckldq128 (v4si, v4si)
v2di __builtin_ia32_punpcklqdq128 (v2di, v2di)
v16qi __builtin_ia32_packsswb128 (v8hi, v8hi)
v8hi __builtin_ia32_packssdw128 (v4si, v4si)
v16qi __builtin_ia32_packuswb128 (v8hi, v8hi)
v8hi __builtin_ia32_pmulhuw128 (v8hi, v8hi)
void __builtin_ia32_maskmovdqu (v16qi, v16qi)
v2df __builtin_ia32_loadupd (double *)
void __builtin_ia32_storeupd (double *, v2df)
v2df __builtin_ia32_loadhpd (v2df, double const *)
v2df __builtin_ia32_loadlpd (v2df, double const *)
int __builtin_ia32_movmskpd (v2df)
int __builtin_ia32_pmovmskb128 (v16qi)
void __builtin_ia32_movnti (int *, int)
void __builtin_ia32_movnti64 (long long int *, long long int)
void __builtin_ia32_movntpd (double *, v2df)
void __builtin_ia32_movntdq (v2df *, v2df)
v4si __builtin_ia32_pshufd (v4si, int)
v8hi __builtin_ia32_pshuflw (v8hi, int)
v8hi __builtin_ia32_pshufhw (v8hi, int)
v2di __builtin_ia32_psadbw128 (v16qi, v16qi)
v2df __builtin_ia32_sqrtpd (v2df)
v2df __builtin_ia32_sqrtsd (v2df)
v2df __builtin_ia32_shufpd (v2df, v2df, int)
v2df __builtin_ia32_cvtdq2pd (v4si)
v4sf __builtin_ia32_cvtdq2ps (v4si)
v4si __builtin_ia32_cvtpd2dq (v2df)
v2si __builtin_ia32_cvtpd2pi (v2df)
v4sf __builtin_ia32_cvtpd2ps (v2df)
v4si __builtin_ia32_cvttpd2dq (v2df)
v2si __builtin_ia32_cvttpd2pi (v2df)
v2df __builtin_ia32_cvtpi2pd (v2si)
int __builtin_ia32_cvtsd2si (v2df)
int __builtin_ia32_cvttsd2si (v2df)
long long __builtin_ia32_cvtsd2si64 (v2df)
long long __builtin_ia32_cvttsd2si64 (v2df)
v4si __builtin_ia32_cvtps2dq (v4sf)
v2df __builtin_ia32_cvtps2pd (v4sf)
v4si __builtin_ia32_cvttps2dq (v4sf)
v2df __builtin_ia32_cvtsi2sd (v2df, int)
v2df __builtin_ia32_cvtsi642sd (v2df, long long)
v4sf __builtin_ia32_cvtsd2ss (v4sf, v2df)
v2df __builtin_ia32_cvtss2sd (v2df, v4sf)
void __builtin_ia32_clflush (const void *)
void __builtin_ia32_lfence (void)
void __builtin_ia32_mfence (void)
v16qi __builtin_ia32_loaddqu (const char *)
void __builtin_ia32_storedqu (char *, v16qi)
v1di __builtin_ia32_pmuludq (v2si, v2si)
v2di __builtin_ia32_pmuludq128 (v4si, v4si)
v8hi __builtin_ia32_psllw128 (v8hi, v8hi)
v4si __builtin_ia32_pslld128 (v4si, v4si)
v2di __builtin_ia32_psllq128 (v2di, v2di)
v8hi __builtin_ia32_psrlw128 (v8hi, v8hi)
v4si __builtin_ia32_psrld128 (v4si, v4si)
v2di __builtin_ia32_psrlq128 (v2di, v2di)
v8hi __builtin_ia32_psraw128 (v8hi, v8hi)
v4si __builtin_ia32_psrad128 (v4si, v4si)
v2di __builtin_ia32_pslldqi128 (v2di, int)
v8hi __builtin_ia32_psllwi128 (v8hi, int)
v4si __builtin_ia32_pslldi128 (v4si, int)
v2di __builtin_ia32_psllqi128 (v2di, int)
v2di __builtin_ia32_psrldqi128 (v2di, int)
v8hi __builtin_ia32_psrlwi128 (v8hi, int)
v4si __builtin_ia32_psrldi128 (v4si, int)
v2di __builtin_ia32_psrlqi128 (v2di, int)
v8hi __builtin_ia32_psrawi128 (v8hi, int)
v4si __builtin_ia32_psradi128 (v4si, int)
v4si __builtin_ia32_pmaddwd128 (v8hi, v8hi)
v2di __builtin_ia32_movq128 (v2di)
</pre></smallexample>

<para>The following built-in functions are available when <option>-msse3</option> is used.
All of them generate the machine instruction that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v2df __builtin_ia32_addsubpd (v2df, v2df)
v4sf __builtin_ia32_addsubps (v4sf, v4sf)
v2df __builtin_ia32_haddpd (v2df, v2df)
v4sf __builtin_ia32_haddps (v4sf, v4sf)
v2df __builtin_ia32_hsubpd (v2df, v2df)
v4sf __builtin_ia32_hsubps (v4sf, v4sf)
v16qi __builtin_ia32_lddqu (char const *)
void __builtin_ia32_monitor (void *, unsigned int, unsigned int)
v4sf __builtin_ia32_movshdup (v4sf)
v4sf __builtin_ia32_movsldup (v4sf)
void __builtin_ia32_mwait (unsigned int, unsigned int)
</pre></smallexample>

<para>The following built-in functions are available when <option>-mssse3</option> is used.
All of them generate the machine instruction that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v2si __builtin_ia32_phaddd (v2si, v2si)
v4hi __builtin_ia32_phaddw (v4hi, v4hi)
v4hi __builtin_ia32_phaddsw (v4hi, v4hi)
v2si __builtin_ia32_phsubd (v2si, v2si)
v4hi __builtin_ia32_phsubw (v4hi, v4hi)
v4hi __builtin_ia32_phsubsw (v4hi, v4hi)
v4hi __builtin_ia32_pmaddubsw (v8qi, v8qi)
v4hi __builtin_ia32_pmulhrsw (v4hi, v4hi)
v8qi __builtin_ia32_pshufb (v8qi, v8qi)
v8qi __builtin_ia32_psignb (v8qi, v8qi)
v2si __builtin_ia32_psignd (v2si, v2si)
v4hi __builtin_ia32_psignw (v4hi, v4hi)
v1di __builtin_ia32_palignr (v1di, v1di, int)
v8qi __builtin_ia32_pabsb (v8qi)
v2si __builtin_ia32_pabsd (v2si)
v4hi __builtin_ia32_pabsw (v4hi)
</pre></smallexample>

<para>The following built-in functions are available when <option>-mssse3</option> is used.
All of them generate the machine instruction that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v4si __builtin_ia32_phaddd128 (v4si, v4si)
v8hi __builtin_ia32_phaddw128 (v8hi, v8hi)
v8hi __builtin_ia32_phaddsw128 (v8hi, v8hi)
v4si __builtin_ia32_phsubd128 (v4si, v4si)
v8hi __builtin_ia32_phsubw128 (v8hi, v8hi)
v8hi __builtin_ia32_phsubsw128 (v8hi, v8hi)
v8hi __builtin_ia32_pmaddubsw128 (v16qi, v16qi)
v8hi __builtin_ia32_pmulhrsw128 (v8hi, v8hi)
v16qi __builtin_ia32_pshufb128 (v16qi, v16qi)
v16qi __builtin_ia32_psignb128 (v16qi, v16qi)
v4si __builtin_ia32_psignd128 (v4si, v4si)
v8hi __builtin_ia32_psignw128 (v8hi, v8hi)
v2di __builtin_ia32_palignr128 (v2di, v2di, int)
v16qi __builtin_ia32_pabsb128 (v16qi)
v4si __builtin_ia32_pabsd128 (v4si)
v8hi __builtin_ia32_pabsw128 (v8hi)
</pre></smallexample>

<para>The following built-in functions are available when <option>-msse4.1</option> is
used.  All of them generate the machine instruction that is part of the
name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v2df __builtin_ia32_blendpd (v2df, v2df, const int)
v4sf __builtin_ia32_blendps (v4sf, v4sf, const int)
v2df __builtin_ia32_blendvpd (v2df, v2df, v2df)
v4sf __builtin_ia32_blendvps (v4sf, v4sf, v4sf)
v2df __builtin_ia32_dppd (v2df, v2df, const int)
v4sf __builtin_ia32_dpps (v4sf, v4sf, const int)
v4sf __builtin_ia32_insertps128 (v4sf, v4sf, const int)
v2di __builtin_ia32_movntdqa (v2di *);
v16qi __builtin_ia32_mpsadbw128 (v16qi, v16qi, const int)
v8hi __builtin_ia32_packusdw128 (v4si, v4si)
v16qi __builtin_ia32_pblendvb128 (v16qi, v16qi, v16qi)
v8hi __builtin_ia32_pblendw128 (v8hi, v8hi, const int)
v2di __builtin_ia32_pcmpeqq (v2di, v2di)
v8hi __builtin_ia32_phminposuw128 (v8hi)
v16qi __builtin_ia32_pmaxsb128 (v16qi, v16qi)
v4si __builtin_ia32_pmaxsd128 (v4si, v4si)
v4si __builtin_ia32_pmaxud128 (v4si, v4si)
v8hi __builtin_ia32_pmaxuw128 (v8hi, v8hi)
v16qi __builtin_ia32_pminsb128 (v16qi, v16qi)
v4si __builtin_ia32_pminsd128 (v4si, v4si)
v4si __builtin_ia32_pminud128 (v4si, v4si)
v8hi __builtin_ia32_pminuw128 (v8hi, v8hi)
v4si __builtin_ia32_pmovsxbd128 (v16qi)
v2di __builtin_ia32_pmovsxbq128 (v16qi)
v8hi __builtin_ia32_pmovsxbw128 (v16qi)
v2di __builtin_ia32_pmovsxdq128 (v4si)
v4si __builtin_ia32_pmovsxwd128 (v8hi)
v2di __builtin_ia32_pmovsxwq128 (v8hi)
v4si __builtin_ia32_pmovzxbd128 (v16qi)
v2di __builtin_ia32_pmovzxbq128 (v16qi)
v8hi __builtin_ia32_pmovzxbw128 (v16qi)
v2di __builtin_ia32_pmovzxdq128 (v4si)
v4si __builtin_ia32_pmovzxwd128 (v8hi)
v2di __builtin_ia32_pmovzxwq128 (v8hi)
v2di __builtin_ia32_pmuldq128 (v4si, v4si)
v4si __builtin_ia32_pmulld128 (v4si, v4si)
int __builtin_ia32_ptestc128 (v2di, v2di)
int __builtin_ia32_ptestnzc128 (v2di, v2di)
int __builtin_ia32_ptestz128 (v2di, v2di)
v2df __builtin_ia32_roundpd (v2df, const int)
v4sf __builtin_ia32_roundps (v4sf, const int)
v2df __builtin_ia32_roundsd (v2df, v2df, const int)
v4sf __builtin_ia32_roundss (v4sf, v4sf, const int)
</pre></smallexample>

<para>The following built-in functions are available when <option>-msse4.1</option> is
used.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">v4sf __builtin_ia32_vec_set_v4sf (v4sf, float, const int)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>insertps</code> machine instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_ia32_vec_ext_v16qi (v16qi, const int)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>pextrb</code> machine instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v16qi __builtin_ia32_vec_set_v16qi (v16qi, int, const int)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>pinsrb</code> machine instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v4si __builtin_ia32_vec_set_v4si (v4si, int, const int)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>pinsrd</code> machine instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">v2di __builtin_ia32_vec_set_v2di (v2di, long long, const int)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>pinsrq</code> machine instruction in 64bit mode.
</para></tableitem></tableentry></table>

<para>The following built-in functions are changed to generate new SSE4.1
instructions when <option>-msse4.1</option> is used.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">float __builtin_ia32_vec_ext_v4sf (v4sf, const int)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>extractps</code> machine instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_ia32_vec_ext_v4si (v4si, const int)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>pextrd</code> machine instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">long long __builtin_ia32_vec_ext_v2di (v2di, const int)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>pextrq</code> machine instruction in 64bit mode.
</para></tableitem></tableentry></table>

<para>The following built-in functions are available when <option>-msse4.2</option> is
used.  All of them generate the machine instruction that is part of the
name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v16qi __builtin_ia32_pcmpestrm128 (v16qi, int, v16qi, int, const int)
int __builtin_ia32_pcmpestri128 (v16qi, int, v16qi, int, const int)
int __builtin_ia32_pcmpestria128 (v16qi, int, v16qi, int, const int)
int __builtin_ia32_pcmpestric128 (v16qi, int, v16qi, int, const int)
int __builtin_ia32_pcmpestrio128 (v16qi, int, v16qi, int, const int)
int __builtin_ia32_pcmpestris128 (v16qi, int, v16qi, int, const int)
int __builtin_ia32_pcmpestriz128 (v16qi, int, v16qi, int, const int)
v16qi __builtin_ia32_pcmpistrm128 (v16qi, v16qi, const int)
int __builtin_ia32_pcmpistri128 (v16qi, v16qi, const int)
int __builtin_ia32_pcmpistria128 (v16qi, v16qi, const int)
int __builtin_ia32_pcmpistric128 (v16qi, v16qi, const int)
int __builtin_ia32_pcmpistrio128 (v16qi, v16qi, const int)
int __builtin_ia32_pcmpistris128 (v16qi, v16qi, const int)
int __builtin_ia32_pcmpistriz128 (v16qi, v16qi, const int)
v2di __builtin_ia32_pcmpgtq (v2di, v2di)
</pre></smallexample>

<para>The following built-in functions are available when <option>-msse4.2</option> is
used.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">unsigned int __builtin_ia32_crc32qi (unsigned int, unsigned char)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>crc32b</code> machine instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">unsigned int __builtin_ia32_crc32hi (unsigned int, unsigned short)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>crc32w</code> machine instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">unsigned int __builtin_ia32_crc32si (unsigned int, unsigned int)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>crc32l</code> machine instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">unsigned long long __builtin_ia32_crc32di (unsigned long long, unsigned long long)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>crc32q</code> machine instruction.
</para></tableitem></tableentry></table>

<para>The following built-in functions are changed to generate new SSE4.2
instructions when <option>-msse4.2</option> is used.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_popcount (unsigned int)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>popcntl</code> machine instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_popcountl (unsigned long)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>popcntl</code> or <code>popcntq</code> machine instruction,
depending on the size of <code>unsigned long</code>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">int __builtin_popcountll (unsigned long long)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>popcntq</code> machine instruction.
</para></tableitem></tableentry></table>

<para>The following built-in functions are available when <option>-mavx</option> is
used. All of them generate the machine instruction that is part of the
name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v4df __builtin_ia32_addpd256 (v4df,v4df)
v8sf __builtin_ia32_addps256 (v8sf,v8sf)
v4df __builtin_ia32_addsubpd256 (v4df,v4df)
v8sf __builtin_ia32_addsubps256 (v8sf,v8sf)
v4df __builtin_ia32_andnpd256 (v4df,v4df)
v8sf __builtin_ia32_andnps256 (v8sf,v8sf)
v4df __builtin_ia32_andpd256 (v4df,v4df)
v8sf __builtin_ia32_andps256 (v8sf,v8sf)
v4df __builtin_ia32_blendpd256 (v4df,v4df,int)
v8sf __builtin_ia32_blendps256 (v8sf,v8sf,int)
v4df __builtin_ia32_blendvpd256 (v4df,v4df,v4df)
v8sf __builtin_ia32_blendvps256 (v8sf,v8sf,v8sf)
v2df __builtin_ia32_cmppd (v2df,v2df,int)
v4df __builtin_ia32_cmppd256 (v4df,v4df,int)
v4sf __builtin_ia32_cmpps (v4sf,v4sf,int)
v8sf __builtin_ia32_cmpps256 (v8sf,v8sf,int)
v2df __builtin_ia32_cmpsd (v2df,v2df,int)
v4sf __builtin_ia32_cmpss (v4sf,v4sf,int)
v4df __builtin_ia32_cvtdq2pd256 (v4si)
v8sf __builtin_ia32_cvtdq2ps256 (v8si)
v4si __builtin_ia32_cvtpd2dq256 (v4df)
v4sf __builtin_ia32_cvtpd2ps256 (v4df)
v8si __builtin_ia32_cvtps2dq256 (v8sf)
v4df __builtin_ia32_cvtps2pd256 (v4sf)
v4si __builtin_ia32_cvttpd2dq256 (v4df)
v8si __builtin_ia32_cvttps2dq256 (v8sf)
v4df __builtin_ia32_divpd256 (v4df,v4df)
v8sf __builtin_ia32_divps256 (v8sf,v8sf)
v8sf __builtin_ia32_dpps256 (v8sf,v8sf,int)
v4df __builtin_ia32_haddpd256 (v4df,v4df)
v8sf __builtin_ia32_haddps256 (v8sf,v8sf)
v4df __builtin_ia32_hsubpd256 (v4df,v4df)
v8sf __builtin_ia32_hsubps256 (v8sf,v8sf)
v32qi __builtin_ia32_lddqu256 (pcchar)
v32qi __builtin_ia32_loaddqu256 (pcchar)
v4df __builtin_ia32_loadupd256 (pcdouble)
v8sf __builtin_ia32_loadups256 (pcfloat)
v2df __builtin_ia32_maskloadpd (pcv2df,v2df)
v4df __builtin_ia32_maskloadpd256 (pcv4df,v4df)
v4sf __builtin_ia32_maskloadps (pcv4sf,v4sf)
v8sf __builtin_ia32_maskloadps256 (pcv8sf,v8sf)
void __builtin_ia32_maskstorepd (pv2df,v2df,v2df)
void __builtin_ia32_maskstorepd256 (pv4df,v4df,v4df)
void __builtin_ia32_maskstoreps (pv4sf,v4sf,v4sf)
void __builtin_ia32_maskstoreps256 (pv8sf,v8sf,v8sf)
v4df __builtin_ia32_maxpd256 (v4df,v4df)
v8sf __builtin_ia32_maxps256 (v8sf,v8sf)
v4df __builtin_ia32_minpd256 (v4df,v4df)
v8sf __builtin_ia32_minps256 (v8sf,v8sf)
v4df __builtin_ia32_movddup256 (v4df)
int __builtin_ia32_movmskpd256 (v4df)
int __builtin_ia32_movmskps256 (v8sf)
v8sf __builtin_ia32_movshdup256 (v8sf)
v8sf __builtin_ia32_movsldup256 (v8sf)
v4df __builtin_ia32_mulpd256 (v4df,v4df)
v8sf __builtin_ia32_mulps256 (v8sf,v8sf)
v4df __builtin_ia32_orpd256 (v4df,v4df)
v8sf __builtin_ia32_orps256 (v8sf,v8sf)
v2df __builtin_ia32_pd_pd256 (v4df)
v4df __builtin_ia32_pd256_pd (v2df)
v4sf __builtin_ia32_ps_ps256 (v8sf)
v8sf __builtin_ia32_ps256_ps (v4sf)
int __builtin_ia32_ptestc256 (v4di,v4di,ptest)
int __builtin_ia32_ptestnzc256 (v4di,v4di,ptest)
int __builtin_ia32_ptestz256 (v4di,v4di,ptest)
v8sf __builtin_ia32_rcpps256 (v8sf)
v4df __builtin_ia32_roundpd256 (v4df,int)
v8sf __builtin_ia32_roundps256 (v8sf,int)
v8sf __builtin_ia32_rsqrtps_nr256 (v8sf)
v8sf __builtin_ia32_rsqrtps256 (v8sf)
v4df __builtin_ia32_shufpd256 (v4df,v4df,int)
v8sf __builtin_ia32_shufps256 (v8sf,v8sf,int)
v4si __builtin_ia32_si_si256 (v8si)
v8si __builtin_ia32_si256_si (v4si)
v4df __builtin_ia32_sqrtpd256 (v4df)
v8sf __builtin_ia32_sqrtps_nr256 (v8sf)
v8sf __builtin_ia32_sqrtps256 (v8sf)
void __builtin_ia32_storedqu256 (pchar,v32qi)
void __builtin_ia32_storeupd256 (pdouble,v4df)
void __builtin_ia32_storeups256 (pfloat,v8sf)
v4df __builtin_ia32_subpd256 (v4df,v4df)
v8sf __builtin_ia32_subps256 (v8sf,v8sf)
v4df __builtin_ia32_unpckhpd256 (v4df,v4df)
v8sf __builtin_ia32_unpckhps256 (v8sf,v8sf)
v4df __builtin_ia32_unpcklpd256 (v4df,v4df)
v8sf __builtin_ia32_unpcklps256 (v8sf,v8sf)
v4df __builtin_ia32_vbroadcastf128_pd256 (pcv2df)
v8sf __builtin_ia32_vbroadcastf128_ps256 (pcv4sf)
v4df __builtin_ia32_vbroadcastsd256 (pcdouble)
v4sf __builtin_ia32_vbroadcastss (pcfloat)
v8sf __builtin_ia32_vbroadcastss256 (pcfloat)
v2df __builtin_ia32_vextractf128_pd256 (v4df,int)
v4sf __builtin_ia32_vextractf128_ps256 (v8sf,int)
v4si __builtin_ia32_vextractf128_si256 (v8si,int)
v4df __builtin_ia32_vinsertf128_pd256 (v4df,v2df,int)
v8sf __builtin_ia32_vinsertf128_ps256 (v8sf,v4sf,int)
v8si __builtin_ia32_vinsertf128_si256 (v8si,v4si,int)
v4df __builtin_ia32_vperm2f128_pd256 (v4df,v4df,int)
v8sf __builtin_ia32_vperm2f128_ps256 (v8sf,v8sf,int)
v8si __builtin_ia32_vperm2f128_si256 (v8si,v8si,int)
v2df __builtin_ia32_vpermil2pd (v2df,v2df,v2di,int)
v4df __builtin_ia32_vpermil2pd256 (v4df,v4df,v4di,int)
v4sf __builtin_ia32_vpermil2ps (v4sf,v4sf,v4si,int)
v8sf __builtin_ia32_vpermil2ps256 (v8sf,v8sf,v8si,int)
v2df __builtin_ia32_vpermilpd (v2df,int)
v4df __builtin_ia32_vpermilpd256 (v4df,int)
v4sf __builtin_ia32_vpermilps (v4sf,int)
v8sf __builtin_ia32_vpermilps256 (v8sf,int)
v2df __builtin_ia32_vpermilvarpd (v2df,v2di)
v4df __builtin_ia32_vpermilvarpd256 (v4df,v4di)
v4sf __builtin_ia32_vpermilvarps (v4sf,v4si)
v8sf __builtin_ia32_vpermilvarps256 (v8sf,v8si)
int __builtin_ia32_vtestcpd (v2df,v2df,ptest)
int __builtin_ia32_vtestcpd256 (v4df,v4df,ptest)
int __builtin_ia32_vtestcps (v4sf,v4sf,ptest)
int __builtin_ia32_vtestcps256 (v8sf,v8sf,ptest)
int __builtin_ia32_vtestnzcpd (v2df,v2df,ptest)
int __builtin_ia32_vtestnzcpd256 (v4df,v4df,ptest)
int __builtin_ia32_vtestnzcps (v4sf,v4sf,ptest)
int __builtin_ia32_vtestnzcps256 (v8sf,v8sf,ptest)
int __builtin_ia32_vtestzpd (v2df,v2df,ptest)
int __builtin_ia32_vtestzpd256 (v4df,v4df,ptest)
int __builtin_ia32_vtestzps (v4sf,v4sf,ptest)
int __builtin_ia32_vtestzps256 (v8sf,v8sf,ptest)
void __builtin_ia32_vzeroall (void)
void __builtin_ia32_vzeroupper (void)
v4df __builtin_ia32_xorpd256 (v4df,v4df)
v8sf __builtin_ia32_xorps256 (v8sf,v8sf)
</pre></smallexample>

<para>The following built-in functions are available when <option>-mavx2</option> is
used. All of them generate the machine instruction that is part of the
name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v32qi __builtin_ia32_mpsadbw256 (v32qi,v32qi,int)
v32qi __builtin_ia32_pabsb256 (v32qi)
v16hi __builtin_ia32_pabsw256 (v16hi)
v8si __builtin_ia32_pabsd256 (v8si)
v16hi __builtin_ia32_packssdw256 (v8si,v8si)
v32qi __builtin_ia32_packsswb256 (v16hi,v16hi)
v16hi __builtin_ia32_packusdw256 (v8si,v8si)
v32qi __builtin_ia32_packuswb256 (v16hi,v16hi)
v32qi __builtin_ia32_paddb256 (v32qi,v32qi)
v16hi __builtin_ia32_paddw256 (v16hi,v16hi)
v8si __builtin_ia32_paddd256 (v8si,v8si)
v4di __builtin_ia32_paddq256 (v4di,v4di)
v32qi __builtin_ia32_paddsb256 (v32qi,v32qi)
v16hi __builtin_ia32_paddsw256 (v16hi,v16hi)
v32qi __builtin_ia32_paddusb256 (v32qi,v32qi)
v16hi __builtin_ia32_paddusw256 (v16hi,v16hi)
v4di __builtin_ia32_palignr256 (v4di,v4di,int)
v4di __builtin_ia32_andsi256 (v4di,v4di)
v4di __builtin_ia32_andnotsi256 (v4di,v4di)
v32qi __builtin_ia32_pavgb256 (v32qi,v32qi)
v16hi __builtin_ia32_pavgw256 (v16hi,v16hi)
v32qi __builtin_ia32_pblendvb256 (v32qi,v32qi,v32qi)
v16hi __builtin_ia32_pblendw256 (v16hi,v16hi,int)
v32qi __builtin_ia32_pcmpeqb256 (v32qi,v32qi)
v16hi __builtin_ia32_pcmpeqw256 (v16hi,v16hi)
v8si __builtin_ia32_pcmpeqd256 (c8si,v8si)
v4di __builtin_ia32_pcmpeqq256 (v4di,v4di)
v32qi __builtin_ia32_pcmpgtb256 (v32qi,v32qi)
v16hi __builtin_ia32_pcmpgtw256 (16hi,v16hi)
v8si __builtin_ia32_pcmpgtd256 (v8si,v8si)
v4di __builtin_ia32_pcmpgtq256 (v4di,v4di)
v16hi __builtin_ia32_phaddw256 (v16hi,v16hi)
v8si __builtin_ia32_phaddd256 (v8si,v8si)
v16hi __builtin_ia32_phaddsw256 (v16hi,v16hi)
v16hi __builtin_ia32_phsubw256 (v16hi,v16hi)
v8si __builtin_ia32_phsubd256 (v8si,v8si)
v16hi __builtin_ia32_phsubsw256 (v16hi,v16hi)
v32qi __builtin_ia32_pmaddubsw256 (v32qi,v32qi)
v16hi __builtin_ia32_pmaddwd256 (v16hi,v16hi)
v32qi __builtin_ia32_pmaxsb256 (v32qi,v32qi)
v16hi __builtin_ia32_pmaxsw256 (v16hi,v16hi)
v8si __builtin_ia32_pmaxsd256 (v8si,v8si)
v32qi __builtin_ia32_pmaxub256 (v32qi,v32qi)
v16hi __builtin_ia32_pmaxuw256 (v16hi,v16hi)
v8si __builtin_ia32_pmaxud256 (v8si,v8si)
v32qi __builtin_ia32_pminsb256 (v32qi,v32qi)
v16hi __builtin_ia32_pminsw256 (v16hi,v16hi)
v8si __builtin_ia32_pminsd256 (v8si,v8si)
v32qi __builtin_ia32_pminub256 (v32qi,v32qi)
v16hi __builtin_ia32_pminuw256 (v16hi,v16hi)
v8si __builtin_ia32_pminud256 (v8si,v8si)
int __builtin_ia32_pmovmskb256 (v32qi)
v16hi __builtin_ia32_pmovsxbw256 (v16qi)
v8si __builtin_ia32_pmovsxbd256 (v16qi)
v4di __builtin_ia32_pmovsxbq256 (v16qi)
v8si __builtin_ia32_pmovsxwd256 (v8hi)
v4di __builtin_ia32_pmovsxwq256 (v8hi)
v4di __builtin_ia32_pmovsxdq256 (v4si)
v16hi __builtin_ia32_pmovzxbw256 (v16qi)
v8si __builtin_ia32_pmovzxbd256 (v16qi)
v4di __builtin_ia32_pmovzxbq256 (v16qi)
v8si __builtin_ia32_pmovzxwd256 (v8hi)
v4di __builtin_ia32_pmovzxwq256 (v8hi)
v4di __builtin_ia32_pmovzxdq256 (v4si)
v4di __builtin_ia32_pmuldq256 (v8si,v8si)
v16hi __builtin_ia32_pmulhrsw256 (v16hi, v16hi)
v16hi __builtin_ia32_pmulhuw256 (v16hi,v16hi)
v16hi __builtin_ia32_pmulhw256 (v16hi,v16hi)
v16hi __builtin_ia32_pmullw256 (v16hi,v16hi)
v8si __builtin_ia32_pmulld256 (v8si,v8si)
v4di __builtin_ia32_pmuludq256 (v8si,v8si)
v4di __builtin_ia32_por256 (v4di,v4di)
v16hi __builtin_ia32_psadbw256 (v32qi,v32qi)
v32qi __builtin_ia32_pshufb256 (v32qi,v32qi)
v8si __builtin_ia32_pshufd256 (v8si,int)
v16hi __builtin_ia32_pshufhw256 (v16hi,int)
v16hi __builtin_ia32_pshuflw256 (v16hi,int)
v32qi __builtin_ia32_psignb256 (v32qi,v32qi)
v16hi __builtin_ia32_psignw256 (v16hi,v16hi)
v8si __builtin_ia32_psignd256 (v8si,v8si)
v4di __builtin_ia32_pslldqi256 (v4di,int)
v16hi __builtin_ia32_psllwi256 (16hi,int)
v16hi __builtin_ia32_psllw256(v16hi,v8hi)
v8si __builtin_ia32_pslldi256 (v8si,int)
v8si __builtin_ia32_pslld256(v8si,v4si)
v4di __builtin_ia32_psllqi256 (v4di,int)
v4di __builtin_ia32_psllq256(v4di,v2di)
v16hi __builtin_ia32_psrawi256 (v16hi,int)
v16hi __builtin_ia32_psraw256 (v16hi,v8hi)
v8si __builtin_ia32_psradi256 (v8si,int)
v8si __builtin_ia32_psrad256 (v8si,v4si)
v4di __builtin_ia32_psrldqi256 (v4di, int)
v16hi __builtin_ia32_psrlwi256 (v16hi,int)
v16hi __builtin_ia32_psrlw256 (v16hi,v8hi)
v8si __builtin_ia32_psrldi256 (v8si,int)
v8si __builtin_ia32_psrld256 (v8si,v4si)
v4di __builtin_ia32_psrlqi256 (v4di,int)
v4di __builtin_ia32_psrlq256(v4di,v2di)
v32qi __builtin_ia32_psubb256 (v32qi,v32qi)
v32hi __builtin_ia32_psubw256 (v16hi,v16hi)
v8si __builtin_ia32_psubd256 (v8si,v8si)
v4di __builtin_ia32_psubq256 (v4di,v4di)
v32qi __builtin_ia32_psubsb256 (v32qi,v32qi)
v16hi __builtin_ia32_psubsw256 (v16hi,v16hi)
v32qi __builtin_ia32_psubusb256 (v32qi,v32qi)
v16hi __builtin_ia32_psubusw256 (v16hi,v16hi)
v32qi __builtin_ia32_punpckhbw256 (v32qi,v32qi)
v16hi __builtin_ia32_punpckhwd256 (v16hi,v16hi)
v8si __builtin_ia32_punpckhdq256 (v8si,v8si)
v4di __builtin_ia32_punpckhqdq256 (v4di,v4di)
v32qi __builtin_ia32_punpcklbw256 (v32qi,v32qi)
v16hi __builtin_ia32_punpcklwd256 (v16hi,v16hi)
v8si __builtin_ia32_punpckldq256 (v8si,v8si)
v4di __builtin_ia32_punpcklqdq256 (v4di,v4di)
v4di __builtin_ia32_pxor256 (v4di,v4di)
v4di __builtin_ia32_movntdqa256 (pv4di)
v4sf __builtin_ia32_vbroadcastss_ps (v4sf)
v8sf __builtin_ia32_vbroadcastss_ps256 (v4sf)
v4df __builtin_ia32_vbroadcastsd_pd256 (v2df)
v4di __builtin_ia32_vbroadcastsi256 (v2di)
v4si __builtin_ia32_pblendd128 (v4si,v4si)
v8si __builtin_ia32_pblendd256 (v8si,v8si)
v32qi __builtin_ia32_pbroadcastb256 (v16qi)
v16hi __builtin_ia32_pbroadcastw256 (v8hi)
v8si __builtin_ia32_pbroadcastd256 (v4si)
v4di __builtin_ia32_pbroadcastq256 (v2di)
v16qi __builtin_ia32_pbroadcastb128 (v16qi)
v8hi __builtin_ia32_pbroadcastw128 (v8hi)
v4si __builtin_ia32_pbroadcastd128 (v4si)
v2di __builtin_ia32_pbroadcastq128 (v2di)
v8si __builtin_ia32_permvarsi256 (v8si,v8si)
v4df __builtin_ia32_permdf256 (v4df,int)
v8sf __builtin_ia32_permvarsf256 (v8sf,v8sf)
v4di __builtin_ia32_permdi256 (v4di,int)
v4di __builtin_ia32_permti256 (v4di,v4di,int)
v4di __builtin_ia32_extract128i256 (v4di,int)
v4di __builtin_ia32_insert128i256 (v4di,v2di,int)
v8si __builtin_ia32_maskloadd256 (pcv8si,v8si)
v4di __builtin_ia32_maskloadq256 (pcv4di,v4di)
v4si __builtin_ia32_maskloadd (pcv4si,v4si)
v2di __builtin_ia32_maskloadq (pcv2di,v2di)
void __builtin_ia32_maskstored256 (pv8si,v8si,v8si)
void __builtin_ia32_maskstoreq256 (pv4di,v4di,v4di)
void __builtin_ia32_maskstored (pv4si,v4si,v4si)
void __builtin_ia32_maskstoreq (pv2di,v2di,v2di)
v8si __builtin_ia32_psllv8si (v8si,v8si)
v4si __builtin_ia32_psllv4si (v4si,v4si)
v4di __builtin_ia32_psllv4di (v4di,v4di)
v2di __builtin_ia32_psllv2di (v2di,v2di)
v8si __builtin_ia32_psrav8si (v8si,v8si)
v4si __builtin_ia32_psrav4si (v4si,v4si)
v8si __builtin_ia32_psrlv8si (v8si,v8si)
v4si __builtin_ia32_psrlv4si (v4si,v4si)
v4di __builtin_ia32_psrlv4di (v4di,v4di)
v2di __builtin_ia32_psrlv2di (v2di,v2di)
v2df __builtin_ia32_gathersiv2df (v2df, pcdouble,v4si,v2df,int)
v4df __builtin_ia32_gathersiv4df (v4df, pcdouble,v4si,v4df,int)
v2df __builtin_ia32_gatherdiv2df (v2df, pcdouble,v2di,v2df,int)
v4df __builtin_ia32_gatherdiv4df (v4df, pcdouble,v4di,v4df,int)
v4sf __builtin_ia32_gathersiv4sf (v4sf, pcfloat,v4si,v4sf,int)
v8sf __builtin_ia32_gathersiv8sf (v8sf, pcfloat,v8si,v8sf,int)
v4sf __builtin_ia32_gatherdiv4sf (v4sf, pcfloat,v2di,v4sf,int)
v4sf __builtin_ia32_gatherdiv4sf256 (v4sf, pcfloat,v4di,v4sf,int)
v2di __builtin_ia32_gathersiv2di (v2di, pcint64,v4si,v2di,int)
v4di __builtin_ia32_gathersiv4di (v4di, pcint64,v4si,v4di,int)
v2di __builtin_ia32_gatherdiv2di (v2di, pcint64,v2di,v2di,int)
v4di __builtin_ia32_gatherdiv4di (v4di, pcint64,v4di,v4di,int)
v4si __builtin_ia32_gathersiv4si (v4si, pcint,v4si,v4si,int)
v8si __builtin_ia32_gathersiv8si (v8si, pcint,v8si,v8si,int)
v4si __builtin_ia32_gatherdiv4si (v4si, pcint,v2di,v4si,int)
v4si __builtin_ia32_gatherdiv4si256 (v4si, pcint,v4di,v4si,int)
</pre></smallexample>

<para>The following built-in functions are available when <option>-maes</option> is
used.  All of them generate the machine instruction that is part of the
name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v2di __builtin_ia32_aesenc128 (v2di, v2di)
v2di __builtin_ia32_aesenclast128 (v2di, v2di)
v2di __builtin_ia32_aesdec128 (v2di, v2di)
v2di __builtin_ia32_aesdeclast128 (v2di, v2di)
v2di __builtin_ia32_aeskeygenassist128 (v2di, const int)
v2di __builtin_ia32_aesimc128 (v2di)
</pre></smallexample>

<para>The following built-in function is available when <option>-mpclmul</option> is
used.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">v2di __builtin_ia32_pclmulqdq128 (v2di, v2di, const int)</itemformat></item>
</tableterm><tableitem><para>Generates the <code>pclmulqdq</code> machine instruction.
</para></tableitem></tableentry></table>

<para>The following built-in function is available when <option>-mfsgsbase</option> is
used.  All of them generate the machine instruction that is part of the
name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">unsigned int __builtin_ia32_rdfsbase32 (void)
unsigned long long __builtin_ia32_rdfsbase64 (void)
unsigned int __builtin_ia32_rdgsbase32 (void)
unsigned long long __builtin_ia32_rdgsbase64 (void)
void _writefsbase_u32 (unsigned int)
void _writefsbase_u64 (unsigned long long)
void _writegsbase_u32 (unsigned int)
void _writegsbase_u64 (unsigned long long)
</pre></smallexample>

<para>The following built-in function is available when <option>-mrdrnd</option> is
used.  All of them generate the machine instruction that is part of the
name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">unsigned int __builtin_ia32_rdrand16_step (unsigned short *)
unsigned int __builtin_ia32_rdrand32_step (unsigned int *)
unsigned int __builtin_ia32_rdrand64_step (unsigned long long *)
</pre></smallexample>

<para>The following built-in functions are available when <option>-msse4a</option> is used.
All of them generate the machine instruction that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void __builtin_ia32_movntsd (double *, v2df)
void __builtin_ia32_movntss (float *, v4sf)
v2di __builtin_ia32_extrq  (v2di, v16qi)
v2di __builtin_ia32_extrqi (v2di, const unsigned int, const unsigned int)
v2di __builtin_ia32_insertq (v2di, v2di)
v2di __builtin_ia32_insertqi (v2di, v2di, const unsigned int, const unsigned int)
</pre></smallexample>

<para>The following built-in functions are available when <option>-mxop</option> is used.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">v2df __builtin_ia32_vfrczpd (v2df)
v4sf __builtin_ia32_vfrczps (v4sf)
v2df __builtin_ia32_vfrczsd (v2df)
v4sf __builtin_ia32_vfrczss (v4sf)
v4df __builtin_ia32_vfrczpd256 (v4df)
v8sf __builtin_ia32_vfrczps256 (v8sf)
v2di __builtin_ia32_vpcmov (v2di, v2di, v2di)
v2di __builtin_ia32_vpcmov_v2di (v2di, v2di, v2di)
v4si __builtin_ia32_vpcmov_v4si (v4si, v4si, v4si)
v8hi __builtin_ia32_vpcmov_v8hi (v8hi, v8hi, v8hi)
v16qi __builtin_ia32_vpcmov_v16qi (v16qi, v16qi, v16qi)
v2df __builtin_ia32_vpcmov_v2df (v2df, v2df, v2df)
v4sf __builtin_ia32_vpcmov_v4sf (v4sf, v4sf, v4sf)
v4di __builtin_ia32_vpcmov_v4di256 (v4di, v4di, v4di)
v8si __builtin_ia32_vpcmov_v8si256 (v8si, v8si, v8si)
v16hi __builtin_ia32_vpcmov_v16hi256 (v16hi, v16hi, v16hi)
v32qi __builtin_ia32_vpcmov_v32qi256 (v32qi, v32qi, v32qi)
v4df __builtin_ia32_vpcmov_v4df256 (v4df, v4df, v4df)
v8sf __builtin_ia32_vpcmov_v8sf256 (v8sf, v8sf, v8sf)
v16qi __builtin_ia32_vpcomeqb (v16qi, v16qi)
v8hi __builtin_ia32_vpcomeqw (v8hi, v8hi)
v4si __builtin_ia32_vpcomeqd (v4si, v4si)
v2di __builtin_ia32_vpcomeqq (v2di, v2di)
v16qi __builtin_ia32_vpcomequb (v16qi, v16qi)
v4si __builtin_ia32_vpcomequd (v4si, v4si)
v2di __builtin_ia32_vpcomequq (v2di, v2di)
v8hi __builtin_ia32_vpcomequw (v8hi, v8hi)
v8hi __builtin_ia32_vpcomeqw (v8hi, v8hi)
v16qi __builtin_ia32_vpcomfalseb (v16qi, v16qi)
v4si __builtin_ia32_vpcomfalsed (v4si, v4si)
v2di __builtin_ia32_vpcomfalseq (v2di, v2di)
v16qi __builtin_ia32_vpcomfalseub (v16qi, v16qi)
v4si __builtin_ia32_vpcomfalseud (v4si, v4si)
v2di __builtin_ia32_vpcomfalseuq (v2di, v2di)
v8hi __builtin_ia32_vpcomfalseuw (v8hi, v8hi)
v8hi __builtin_ia32_vpcomfalsew (v8hi, v8hi)
v16qi __builtin_ia32_vpcomgeb (v16qi, v16qi)
v4si __builtin_ia32_vpcomged (v4si, v4si)
v2di __builtin_ia32_vpcomgeq (v2di, v2di)
v16qi __builtin_ia32_vpcomgeub (v16qi, v16qi)
v4si __builtin_ia32_vpcomgeud (v4si, v4si)
v2di __builtin_ia32_vpcomgeuq (v2di, v2di)
v8hi __builtin_ia32_vpcomgeuw (v8hi, v8hi)
v8hi __builtin_ia32_vpcomgew (v8hi, v8hi)
v16qi __builtin_ia32_vpcomgtb (v16qi, v16qi)
v4si __builtin_ia32_vpcomgtd (v4si, v4si)
v2di __builtin_ia32_vpcomgtq (v2di, v2di)
v16qi __builtin_ia32_vpcomgtub (v16qi, v16qi)
v4si __builtin_ia32_vpcomgtud (v4si, v4si)
v2di __builtin_ia32_vpcomgtuq (v2di, v2di)
v8hi __builtin_ia32_vpcomgtuw (v8hi, v8hi)
v8hi __builtin_ia32_vpcomgtw (v8hi, v8hi)
v16qi __builtin_ia32_vpcomleb (v16qi, v16qi)
v4si __builtin_ia32_vpcomled (v4si, v4si)
v2di __builtin_ia32_vpcomleq (v2di, v2di)
v16qi __builtin_ia32_vpcomleub (v16qi, v16qi)
v4si __builtin_ia32_vpcomleud (v4si, v4si)
v2di __builtin_ia32_vpcomleuq (v2di, v2di)
v8hi __builtin_ia32_vpcomleuw (v8hi, v8hi)
v8hi __builtin_ia32_vpcomlew (v8hi, v8hi)
v16qi __builtin_ia32_vpcomltb (v16qi, v16qi)
v4si __builtin_ia32_vpcomltd (v4si, v4si)
v2di __builtin_ia32_vpcomltq (v2di, v2di)
v16qi __builtin_ia32_vpcomltub (v16qi, v16qi)
v4si __builtin_ia32_vpcomltud (v4si, v4si)
v2di __builtin_ia32_vpcomltuq (v2di, v2di)
v8hi __builtin_ia32_vpcomltuw (v8hi, v8hi)
v8hi __builtin_ia32_vpcomltw (v8hi, v8hi)
v16qi __builtin_ia32_vpcomneb (v16qi, v16qi)
v4si __builtin_ia32_vpcomned (v4si, v4si)
v2di __builtin_ia32_vpcomneq (v2di, v2di)
v16qi __builtin_ia32_vpcomneub (v16qi, v16qi)
v4si __builtin_ia32_vpcomneud (v4si, v4si)
v2di __builtin_ia32_vpcomneuq (v2di, v2di)
v8hi __builtin_ia32_vpcomneuw (v8hi, v8hi)
v8hi __builtin_ia32_vpcomnew (v8hi, v8hi)
v16qi __builtin_ia32_vpcomtrueb (v16qi, v16qi)
v4si __builtin_ia32_vpcomtrued (v4si, v4si)
v2di __builtin_ia32_vpcomtrueq (v2di, v2di)
v16qi __builtin_ia32_vpcomtrueub (v16qi, v16qi)
v4si __builtin_ia32_vpcomtrueud (v4si, v4si)
v2di __builtin_ia32_vpcomtrueuq (v2di, v2di)
v8hi __builtin_ia32_vpcomtrueuw (v8hi, v8hi)
v8hi __builtin_ia32_vpcomtruew (v8hi, v8hi)
v4si __builtin_ia32_vphaddbd (v16qi)
v2di __builtin_ia32_vphaddbq (v16qi)
v8hi __builtin_ia32_vphaddbw (v16qi)
v2di __builtin_ia32_vphadddq (v4si)
v4si __builtin_ia32_vphaddubd (v16qi)
v2di __builtin_ia32_vphaddubq (v16qi)
v8hi __builtin_ia32_vphaddubw (v16qi)
v2di __builtin_ia32_vphaddudq (v4si)
v4si __builtin_ia32_vphadduwd (v8hi)
v2di __builtin_ia32_vphadduwq (v8hi)
v4si __builtin_ia32_vphaddwd (v8hi)
v2di __builtin_ia32_vphaddwq (v8hi)
v8hi __builtin_ia32_vphsubbw (v16qi)
v2di __builtin_ia32_vphsubdq (v4si)
v4si __builtin_ia32_vphsubwd (v8hi)
v4si __builtin_ia32_vpmacsdd (v4si, v4si, v4si)
v2di __builtin_ia32_vpmacsdqh (v4si, v4si, v2di)
v2di __builtin_ia32_vpmacsdql (v4si, v4si, v2di)
v4si __builtin_ia32_vpmacssdd (v4si, v4si, v4si)
v2di __builtin_ia32_vpmacssdqh (v4si, v4si, v2di)
v2di __builtin_ia32_vpmacssdql (v4si, v4si, v2di)
v4si __builtin_ia32_vpmacsswd (v8hi, v8hi, v4si)
v8hi __builtin_ia32_vpmacssww (v8hi, v8hi, v8hi)
v4si __builtin_ia32_vpmacswd (v8hi, v8hi, v4si)
v8hi __builtin_ia32_vpmacsww (v8hi, v8hi, v8hi)
v4si __builtin_ia32_vpmadcsswd (v8hi, v8hi, v4si)
v4si __builtin_ia32_vpmadcswd (v8hi, v8hi, v4si)
v16qi __builtin_ia32_vpperm (v16qi, v16qi, v16qi)
v16qi __builtin_ia32_vprotb (v16qi, v16qi)
v4si __builtin_ia32_vprotd (v4si, v4si)
v2di __builtin_ia32_vprotq (v2di, v2di)
v8hi __builtin_ia32_vprotw (v8hi, v8hi)
v16qi __builtin_ia32_vpshab (v16qi, v16qi)
v4si __builtin_ia32_vpshad (v4si, v4si)
v2di __builtin_ia32_vpshaq (v2di, v2di)
v8hi __builtin_ia32_vpshaw (v8hi, v8hi)
v16qi __builtin_ia32_vpshlb (v16qi, v16qi)
v4si __builtin_ia32_vpshld (v4si, v4si)
v2di __builtin_ia32_vpshlq (v2di, v2di)
v8hi __builtin_ia32_vpshlw (v8hi, v8hi)
</pre></smallexample>

<para>The following built-in functions are available when <option>-mfma4</option> is used.
All of them generate the machine instruction that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v2df __builtin_ia32_vfmaddpd (v2df, v2df, v2df)
v4sf __builtin_ia32_vfmaddps (v4sf, v4sf, v4sf)
v2df __builtin_ia32_vfmaddsd (v2df, v2df, v2df)
v4sf __builtin_ia32_vfmaddss (v4sf, v4sf, v4sf)
v2df __builtin_ia32_vfmsubpd (v2df, v2df, v2df)
v4sf __builtin_ia32_vfmsubps (v4sf, v4sf, v4sf)
v2df __builtin_ia32_vfmsubsd (v2df, v2df, v2df)
v4sf __builtin_ia32_vfmsubss (v4sf, v4sf, v4sf)
v2df __builtin_ia32_vfnmaddpd (v2df, v2df, v2df)
v4sf __builtin_ia32_vfnmaddps (v4sf, v4sf, v4sf)
v2df __builtin_ia32_vfnmaddsd (v2df, v2df, v2df)
v4sf __builtin_ia32_vfnmaddss (v4sf, v4sf, v4sf)
v2df __builtin_ia32_vfnmsubpd (v2df, v2df, v2df)
v4sf __builtin_ia32_vfnmsubps (v4sf, v4sf, v4sf)
v2df __builtin_ia32_vfnmsubsd (v2df, v2df, v2df)
v4sf __builtin_ia32_vfnmsubss (v4sf, v4sf, v4sf)
v2df __builtin_ia32_vfmaddsubpd  (v2df, v2df, v2df)
v4sf __builtin_ia32_vfmaddsubps  (v4sf, v4sf, v4sf)
v2df __builtin_ia32_vfmsubaddpd  (v2df, v2df, v2df)
v4sf __builtin_ia32_vfmsubaddps  (v4sf, v4sf, v4sf)
v4df __builtin_ia32_vfmaddpd256 (v4df, v4df, v4df)
v8sf __builtin_ia32_vfmaddps256 (v8sf, v8sf, v8sf)
v4df __builtin_ia32_vfmsubpd256 (v4df, v4df, v4df)
v8sf __builtin_ia32_vfmsubps256 (v8sf, v8sf, v8sf)
v4df __builtin_ia32_vfnmaddpd256 (v4df, v4df, v4df)
v8sf __builtin_ia32_vfnmaddps256 (v8sf, v8sf, v8sf)
v4df __builtin_ia32_vfnmsubpd256 (v4df, v4df, v4df)
v8sf __builtin_ia32_vfnmsubps256 (v8sf, v8sf, v8sf)
v4df __builtin_ia32_vfmaddsubpd256 (v4df, v4df, v4df)
v8sf __builtin_ia32_vfmaddsubps256 (v8sf, v8sf, v8sf)
v4df __builtin_ia32_vfmsubaddpd256 (v4df, v4df, v4df)
v8sf __builtin_ia32_vfmsubaddps256 (v8sf, v8sf, v8sf)

</pre></smallexample>

<para>The following built-in functions are available when <option>-mlwp</option> is used.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void __builtin_ia32_llwpcb16 (void *);
void __builtin_ia32_llwpcb32 (void *);
void __builtin_ia32_llwpcb64 (void *);
void * __builtin_ia32_llwpcb16 (void);
void * __builtin_ia32_llwpcb32 (void);
void * __builtin_ia32_llwpcb64 (void);
void __builtin_ia32_lwpval16 (unsigned short, unsigned int, unsigned short)
void __builtin_ia32_lwpval32 (unsigned int, unsigned int, unsigned int)
void __builtin_ia32_lwpval64 (unsigned __int64, unsigned int, unsigned int)
unsigned char __builtin_ia32_lwpins16 (unsigned short, unsigned int, unsigned short)
unsigned char __builtin_ia32_lwpins32 (unsigned int, unsigned int, unsigned int)
unsigned char __builtin_ia32_lwpins64 (unsigned __int64, unsigned int, unsigned int)
</pre></smallexample>

<para>The following built-in functions are available when <option>-mbmi</option> is used.
All of them generate the machine instruction that is part of the name.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">unsigned int __builtin_ia32_bextr_u32(unsigned int, unsigned int);
unsigned long long __builtin_ia32_bextr_u64 (unsigned long long, unsigned long long);
</pre></smallexample>

<para>The following built-in functions are available when <option>-mbmi2</option> is used.
All of them generate the machine instruction that is part of the name.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">unsigned int _bzhi_u32 (unsigned int, unsigned int)
unsigned int _pdep_u32 (unsigned int, unsigned int)
unsigned int _pext_u32 (unsigned int, unsigned int)
unsigned long long _bzhi_u64 (unsigned long long, unsigned long long)
unsigned long long _pdep_u64 (unsigned long long, unsigned long long)
unsigned long long _pext_u64 (unsigned long long, unsigned long long)
</pre></smallexample>

<para>The following built-in functions are available when <option>-mlzcnt</option> is used.
All of them generate the machine instruction that is part of the name.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">unsigned short __builtin_ia32_lzcnt_16(unsigned short);
unsigned int __builtin_ia32_lzcnt_u32(unsigned int);
unsigned long long __builtin_ia32_lzcnt_u64 (unsigned long long);
</pre></smallexample>

<para>The following built-in functions are available when <option>-mfxsr</option> is used.
All of them generate the machine instruction that is part of the name.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">void __builtin_ia32_fxsave (void *)
void __builtin_ia32_fxrstor (void *)
void __builtin_ia32_fxsave64 (void *)
void __builtin_ia32_fxrstor64 (void *)
</pre></smallexample>

<para>The following built-in functions are available when <option>-mxsave</option> is used.
All of them generate the machine instruction that is part of the name.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">void __builtin_ia32_xsave (void *, long long)
void __builtin_ia32_xrstor (void *, long long)
void __builtin_ia32_xsave64 (void *, long long)
void __builtin_ia32_xrstor64 (void *, long long)
</pre></smallexample>

<para>The following built-in functions are available when <option>-mxsaveopt</option> is used.
All of them generate the machine instruction that is part of the name.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">void __builtin_ia32_xsaveopt (void *, long long)
void __builtin_ia32_xsaveopt64 (void *, long long)
</pre></smallexample>

<para>The following built-in functions are available when <option>-mtbm</option> is used.
Both of them generate the immediate form of the bextr machine instruction.
</para><smallexample endspaces=" ">
<pre xml:space="preserve">unsigned int __builtin_ia32_bextri_u32 (unsigned int, const unsigned int);
unsigned long long __builtin_ia32_bextri_u64 (unsigned long long, const unsigned long long);
</pre></smallexample>


<para>The following built-in functions are available when <option>-m3dnow</option> is used.
All of them generate the machine instruction that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void __builtin_ia32_femms (void)
v8qi __builtin_ia32_pavgusb (v8qi, v8qi)
v2si __builtin_ia32_pf2id (v2sf)
v2sf __builtin_ia32_pfacc (v2sf, v2sf)
v2sf __builtin_ia32_pfadd (v2sf, v2sf)
v2si __builtin_ia32_pfcmpeq (v2sf, v2sf)
v2si __builtin_ia32_pfcmpge (v2sf, v2sf)
v2si __builtin_ia32_pfcmpgt (v2sf, v2sf)
v2sf __builtin_ia32_pfmax (v2sf, v2sf)
v2sf __builtin_ia32_pfmin (v2sf, v2sf)
v2sf __builtin_ia32_pfmul (v2sf, v2sf)
v2sf __builtin_ia32_pfrcp (v2sf)
v2sf __builtin_ia32_pfrcpit1 (v2sf, v2sf)
v2sf __builtin_ia32_pfrcpit2 (v2sf, v2sf)
v2sf __builtin_ia32_pfrsqrt (v2sf)
v2sf __builtin_ia32_pfsub (v2sf, v2sf)
v2sf __builtin_ia32_pfsubr (v2sf, v2sf)
v2sf __builtin_ia32_pi2fd (v2si)
v4hi __builtin_ia32_pmulhrw (v4hi, v4hi)
</pre></smallexample>

<para>The following built-in functions are available when both <option>-m3dnow</option>
and <option>-march=athlon</option> are used.  All of them generate the machine
instruction that is part of the name.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">v2si __builtin_ia32_pf2iw (v2sf)
v2sf __builtin_ia32_pfnacc (v2sf, v2sf)
v2sf __builtin_ia32_pfpnacc (v2sf, v2sf)
v2sf __builtin_ia32_pi2fw (v2si)
v2sf __builtin_ia32_pswapdsf (v2sf)
v2si __builtin_ia32_pswapdsi (v2si)
</pre></smallexample>

<para>The following built-in functions are available when <option>-mrtm</option> is used
They are used for restricted transactional memory. These are the internal
low level functions. Normally the functions in 
<ref label="x86-transactional-memory-intrinsics"><xrefnodename>x86 transactional memory intrinsics</xrefnodename></ref> should be used instead.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int __builtin_ia32_xbegin ()
void __builtin_ia32_xend ()
void __builtin_ia32_xabort (status)
int __builtin_ia32_xtest ()
</pre></smallexample>

</subsection>
<node name="x86-transactional-memory-intrinsics" spaces=" "><nodename>x86 transactional memory intrinsics</nodename><nodeprev automatic="on">x86 Built-in Functions</nodeprev><nodeup automatic="on">Target Builtins</nodeup></node>
<subsection spaces=" "><sectiontitle>x86 Transactional Memory Intrinsics</sectiontitle>

<para>These hardware transactional memory intrinsics for x86 allow you to use
memory transactions with RTM (Restricted Transactional Memory).
This support is enabled with the <option>-mrtm</option> option.
For using HLE (Hardware Lock Elision) see 
<ref label="x86-specific-memory-model-extensions-for-transactional-memory"><xrefnodename>x86 specific memory model extensions for transactional memory</xrefnodename></ref> instead.
</para>
<para>A memory transaction commits all changes to memory in an atomic way,
as visible to other threads. If the transaction fails it is rolled back
and all side effects discarded.
</para>
<para>Generally there is no guarantee that a memory transaction ever succeeds
and suitable fallback code always needs to be supplied.
</para>
<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="655" mergedindex="cp">_xbegin</indexterm><defcategory bracketed="on">RTM Function</defcategory> <deftype bracketed="on">unsigned</deftype> <deffunction>_xbegin</deffunction> <defdelimiter>(</defdelimiter><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Start a RTM (Restricted Transactional Memory) transaction. 
Returns <code>_XBEGIN_STARTED</code> when the transaction
started successfully (note this is not 0, so the constant has to be 
explicitly tested).  
</para>
<para>If the transaction aborts, all side-effects 
are undone and an abort code encoded as a bit mask is returned.
The following macros are defined:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">_XABORT_EXPLICIT</itemformat></item>
</tableterm><tableitem><para>Transaction was explicitly aborted with <code>_xabort</code>.  The parameter passed
to <code>_xabort</code> is available with <code>_XABORT_CODE(status)</code>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">_XABORT_RETRY</itemformat></item>
</tableterm><tableitem><para>Transaction retry is possible.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">_XABORT_CONFLICT</itemformat></item>
</tableterm><tableitem><para>Transaction abort due to a memory conflict with another thread.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">_XABORT_CAPACITY</itemformat></item>
</tableterm><tableitem><para>Transaction abort due to the transaction using too much memory.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">_XABORT_DEBUG</itemformat></item>
</tableterm><tableitem><para>Transaction abort due to a debug trap.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">_XABORT_NESTED</itemformat></item>
</tableterm><tableitem><para>Transaction abort in an inner nested transaction.
</para></tableitem></tableentry></table>

<para>There is no guarantee
any transaction ever succeeds, so there always needs to be a valid
fallback path.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="656" mergedindex="cp">_xend</indexterm><defcategory bracketed="on">RTM Function</defcategory> <deftype bracketed="on">void</deftype> <deffunction>_xend</deffunction> <defdelimiter>(</defdelimiter><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Commit the current transaction. When no transaction is active this faults.
All memory side-effects of the transaction become visible
to other threads in an atomic manner.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="657" mergedindex="cp">_xtest</indexterm><defcategory bracketed="on">RTM Function</defcategory> <deftype bracketed="on">int</deftype> <deffunction>_xtest</deffunction> <defdelimiter>(</defdelimiter><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Return a nonzero value if a transaction is currently active, otherwise 0.
</para></definitionitem></deftypefn>

<deftypefn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="658" mergedindex="cp">_xabort</indexterm><defcategory bracketed="on">RTM Function</defcategory> <deftype bracketed="on">void</deftype> <deffunction>_xabort</deffunction> <defdelimiter>(</defdelimiter><defparamtype>status</defparamtype><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Abort the current transaction. When no transaction is active this is a no-op.
The <var>status</var> is an 8-bit constant; its value is encoded in the return 
value from <code>_xbegin</code>.
</para></definitionitem></deftypefn>

<para>Here is an example showing handling for <code>_XABORT_RETRY</code>
and a fallback path for other failures:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#include &lt;immintrin.h&gt;

int n_tries, max_tries;
unsigned status = _XABORT_EXPLICIT;
...

for (n_tries = 0; n_tries &lt; max_tries; n_tries++) 
  &lbrace;
    status = _xbegin ();
    if (status == _XBEGIN_STARTED || !(status &amp; _XABORT_RETRY))
      break;
  &rbrace;
if (status == _XBEGIN_STARTED) 
  &lbrace;
    ... transaction code...
    _xend ();
  &rbrace; 
else 
  &lbrace;
    ... non-transactional fallback path...
  &rbrace;
</pre></smallexample>

<noindent></noindent>
<para>Note that, in most cases, the transactional and non-transactional code
must synchronize together to ensure consistency.
</para>
</subsection>
</section>
<node name="Target-Format-Checks" spaces=" "><nodename>Target Format Checks</nodename><nodenext automatic="on">Pragmas</nodenext><nodeprev automatic="on">Target Builtins</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Format Checks Specific to Particular Target Machines</sectiontitle>

<para>For some target machines, GCC supports additional options to the
format attribute
(<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename><xrefprinteddesc>Declaring Attributes of Functions</xrefprinteddesc></pxref>).
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Solaris Format Checks</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Darwin Format Checks</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="Solaris-Format-Checks" spaces=" "><nodename>Solaris Format Checks</nodename><nodenext automatic="on">Darwin Format Checks</nodenext><nodeup automatic="on">Target Format Checks</nodeup></node>
<subsection spaces=" "><sectiontitle>Solaris Format Checks</sectiontitle>

<para>Solaris targets support the <code>cmn_err</code> (or <code>__cmn_err__</code>) format
check.  <code>cmn_err</code> accepts a subset of the standard <code>printf</code>
conversions, and the two-argument <code>%b</code> conversion for displaying
bit-fields.  See the Solaris man page for <code>cmn_err</code> for more information.
</para>
</subsection>
<node name="Darwin-Format-Checks" spaces=" "><nodename>Darwin Format Checks</nodename><nodeprev automatic="on">Solaris Format Checks</nodeprev><nodeup automatic="on">Target Format Checks</nodeup></node>
<subsection spaces=" "><sectiontitle>Darwin Format Checks</sectiontitle>

<para>Darwin targets support the <code>CFString</code> (or <code>__CFString__</code>) in the format
attribute context.  Declarations made with such attribution are parsed for correct syntax
and format argument types.  However, parsing of the format string itself is currently undefined
and is not carried out by this version of the compiler.
</para>
<para>Additionally, <code>CFStringRefs</code> (defined by the <code>CoreFoundation</code> headers) may
also be used as format arguments.  Note that the relevant headers are only likely to be
available on Darwin (OSX) installations.  On such installations, the XCode and system
documentation provide descriptions of <code>CFString</code>, <code>CFStringRefs</code> and
associated functions.
</para>
</subsection>
</section>
<node name="Pragmas" spaces=" "><nodename>Pragmas</nodename><nodenext automatic="on">Unnamed Fields</nodenext><nodeprev automatic="on">Target Format Checks</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Pragmas Accepted by GCC</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="868">pragmas</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="869"><code>#pragma</code></indexterm></cindex>

<para>GCC supports several types of pragmas, primarily in order to compile
code originally written for other compilers.  Note that in general
we do not recommend the use of pragmas; <xref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></xref>,
for further explanation.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">ARM Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">M32C Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">MeP Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">RS/6000 and PowerPC Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Darwin Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Solaris Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Symbol-Renaming Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Structure-Packing Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Weak Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Diagnostic Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Visibility Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Push/Pop Macro Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Function Specific Option Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Loop-Specific Pragmas</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="ARM-Pragmas" spaces=" "><nodename>ARM Pragmas</nodename><nodenext automatic="on">M32C Pragmas</nodenext><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>ARM Pragmas</sectiontitle>

<para>The ARM target defines pragmas for controlling the default addition of
<code>long_call</code> and <code>short_call</code> attributes to functions.
<xref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></xref>, for information about the effects of these
attributes.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">long_calls</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="870">pragma, long_calls</indexterm></cindex>
<para>Set all subsequent functions to have the <code>long_call</code> attribute.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">no_long_calls</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="871">pragma, no_long_calls</indexterm></cindex>
<para>Set all subsequent functions to have the <code>short_call</code> attribute.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">long_calls_off</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="872">pragma, long_calls_off</indexterm></cindex>
<para>Do not affect the <code>long_call</code> or <code>short_call</code> attributes of
subsequent functions.
</para></tableitem></tableentry></table>

</subsection>
<node name="M32C-Pragmas" spaces=" "><nodename>M32C Pragmas</nodename><nodenext automatic="on">MeP Pragmas</nodenext><nodeprev automatic="on">ARM Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>M32C Pragmas</sectiontitle>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">GCC memregs <var>number</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="873">pragma, memregs</indexterm></cindex>
<para>Overrides the command-line option <code>-memregs=</code> for the current
file.  Use with care!  This pragma must be before any function in the
file, and mixing different memregs values in different objects may
make them incompatible.  This pragma is useful when a
performance-critical function uses a memreg for temporary values,
as it may allow you to reduce the number of memregs used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">ADDRESS <var>name</var> <var>address</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="874">pragma, address</indexterm></cindex>
<para>For any declared symbols matching <var>name</var>, this does three things
to that symbol: it forces the symbol to be located at the given
address (a number), it forces the symbol to be volatile, and it
changes the symbol&textrsquo;s scope to be static.  This pragma exists for
compatibility with other compilers, but note that the common
<code>1234H</code> numeric syntax is not supported (use <code>0x1234</code>
instead).  Example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#pragma ADDRESS port3 0x103
char port3;
</pre></smallexample>

</tableitem></tableentry></table>

</subsection>
<node name="MeP-Pragmas" spaces=" "><nodename>MeP Pragmas</nodename><nodenext automatic="on">RS/6000 and PowerPC Pragmas</nodenext><nodeprev automatic="on">M32C Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>MeP Pragmas</sectiontitle>

<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">custom io_volatile (on|off)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="875">pragma, custom io_volatile</indexterm></cindex>
<para>Overrides the command-line option <code>-mio-volatile</code> for the current
file.  Note that for compatibility with future GCC releases, this
option should only be used once before any <code>io</code> variables in each
file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">GCC coprocessor available <var>registers</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="876">pragma, coprocessor available</indexterm></cindex>
<para>Specifies which coprocessor registers are available to the register
allocator.  <var>registers</var> may be a single register, register range
separated by ellipses, or comma-separated list of those.  Example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#pragma GCC coprocessor available $c0...$c10, $c28
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">GCC coprocessor call_saved <var>registers</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="877">pragma, coprocessor call_saved</indexterm></cindex>
<para>Specifies which coprocessor registers are to be saved and restored by
any function using them.  <var>registers</var> may be a single register,
register range separated by ellipses, or comma-separated list of
those.  Example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#pragma GCC coprocessor call_saved $c4...$c6, $c31
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">GCC coprocessor subclass '(A|B|C|D)' = <var>registers</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="878">pragma, coprocessor subclass</indexterm></cindex>
<para>Creates and defines a register class.  These register classes can be
used by inline <code>asm</code> constructs.  <var>registers</var> may be a single
register, register range separated by ellipses, or comma-separated
list of those.  Example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#pragma GCC coprocessor subclass 'B' = $c2, $c4, $c6

asm (&quot;cpfoo %0&quot; : &quot;=B&quot; (x));
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">GCC disinterrupt <var>name</var> , <var>name</var> &dots;</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="879">pragma, disinterrupt</indexterm></cindex>
<para>For the named functions, the compiler adds code to disable interrupts
for the duration of those functions.  If any functions so named 
are not encountered in the source, a warning is emitted that the pragma is
not used.  Examples:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#pragma disinterrupt foo
#pragma disinterrupt bar, grill
int foo () &lbrace; &dots; &rbrace;
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">GCC call <var>name</var> , <var>name</var> &dots;</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="880">pragma, call</indexterm></cindex>
<para>For the named functions, the compiler always uses a register-indirect
call model when calling the named functions.  Examples:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern int foo ();
#pragma call foo
</pre></smallexample>

</tableitem></tableentry></table>

</subsection>
<node name="RS_002f6000-and-PowerPC-Pragmas" spaces=" "><nodename>RS/6000 and PowerPC Pragmas</nodename><nodenext automatic="on">Darwin Pragmas</nodenext><nodeprev automatic="on">MeP Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>RS/6000 and PowerPC Pragmas</sectiontitle>

<para>The RS/6000 and PowerPC targets define one pragma for controlling
whether or not the <code>longcall</code> attribute is added to function
declarations by default.  This pragma overrides the <option>-mlongcall</option>
option, but not the <code>longcall</code> and <code>shortcall</code> attributes.
<xref label="RS_002f6000-and-PowerPC-Options"><xrefnodename>RS/6000 and PowerPC Options</xrefnodename></xref>, for more information about when long
calls are and are not necessary.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">longcall (1)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="881">pragma, longcall</indexterm></cindex>
<para>Apply the <code>longcall</code> attribute to all subsequent function
declarations.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">longcall (0)</itemformat></item>
</tableterm><tableitem><para>Do not apply the <code>longcall</code> attribute to subsequent function
declarations.
</para></tableitem></tableentry></table>

<!-- c Describe h8300 pragmas here. -->
<!-- c Describe sh pragmas here. -->
<!-- c Describe v850 pragmas here. -->

</subsection>
<node name="Darwin-Pragmas" spaces=" "><nodename>Darwin Pragmas</nodename><nodenext automatic="on">Solaris Pragmas</nodenext><nodeprev automatic="on">RS/6000 and PowerPC Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>Darwin Pragmas</sectiontitle>

<para>The following pragmas are available for all architectures running the
Darwin operating system.  These are useful for compatibility with other
Mac OS compilers.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">mark <var>tokens</var>&dots;</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="882">pragma, mark</indexterm></cindex>
<para>This pragma is accepted, but has no effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">options align=<var>alignment</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="883">pragma, options align</indexterm></cindex>
<para>This pragma sets the alignment of fields in structures.  The values of
<var>alignment</var> may be <code>mac68k</code>, to emulate m68k alignment, or
<code>power</code>, to emulate PowerPC alignment.  Uses of this pragma nest
properly; to restore the previous setting, use <code>reset</code> for the
<var>alignment</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">segment <var>tokens</var>&dots;</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="884">pragma, segment</indexterm></cindex>
<para>This pragma is accepted, but has no effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">unused (<var>var</var> [, <var>var</var>]&dots;)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="885">pragma, unused</indexterm></cindex>
<para>This pragma declares variables to be possibly unused.  GCC does not
produce warnings for the listed variables.  The effect is similar to
that of the <code>unused</code> attribute, except that this pragma may appear
anywhere within the variables&textrsquo; scopes.
</para></tableitem></tableentry></table>

</subsection>
<node name="Solaris-Pragmas" spaces=" "><nodename>Solaris Pragmas</nodename><nodenext automatic="on">Symbol-Renaming Pragmas</nodenext><nodeprev automatic="on">Darwin Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>Solaris Pragmas</sectiontitle>

<para>The Solaris target supports <code>#pragma redefine_extname</code>
(<pxref label="Symbol_002dRenaming-Pragmas"><xrefnodename>Symbol-Renaming Pragmas</xrefnodename></pxref>).  It also supports additional
<code>#pragma</code> directives for compatibility with the system compiler.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">align <var>alignment</var> (<var>variable</var> [, <var>variable</var>]...)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="886">pragma, align</indexterm></cindex>

<para>Increase the minimum alignment of each <var>variable</var> to <var>alignment</var>.
This is the same as GCC&textrsquo;s <code>aligned</code> attribute <pxref label="Variable-Attributes"><xrefnodename>Variable
Attributes</xrefnodename></pxref>).  Macro expansion occurs on the arguments to this pragma
when compiling C and Objective-C&eosperiod;  It does not currently occur when
compiling C++, but this is a bug which may be fixed in a future
release.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">fini (<var>function</var> [, <var>function</var>]...)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="887">pragma, fini</indexterm></cindex>

<para>This pragma causes each listed <var>function</var> to be called after
main, or during shared module unloading, by adding a call to the
<code>.fini</code> section.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">init (<var>function</var> [, <var>function</var>]...)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="888">pragma, init</indexterm></cindex>

<para>This pragma causes each listed <var>function</var> to be called during
initialization (before <code>main</code>) or during shared module loading, by
adding a call to the <code>.init</code> section.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="Symbol_002dRenaming-Pragmas" spaces=" "><nodename>Symbol-Renaming Pragmas</nodename><nodenext automatic="on">Structure-Packing Pragmas</nodenext><nodeprev automatic="on">Solaris Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>Symbol-Renaming Pragmas</sectiontitle>

<para>GCC supports a <code>#pragma</code> directive that changes the name used in
assembly for a given declaration. While this pragma is supported on all
platforms, it is intended primarily to provide compatibility with the
Solaris system headers. This effect can also be achieved using the asm
labels extension (<pxref label="Asm-Labels"><xrefnodename>Asm Labels</xrefnodename></pxref>).
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">redefine_extname <var>oldname</var> <var>newname</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="889">pragma, redefine_extname</indexterm></cindex>

<para>This pragma gives the C function <var>oldname</var> the assembly symbol
<var>newname</var>.  The preprocessor macro <code>__PRAGMA_REDEFINE_EXTNAME</code>
is defined if this pragma is available (currently on all platforms).
</para></tableitem></tableentry></table>

<para>This pragma and the asm labels extension interact in a complicated
manner.  Here are some corner cases you may want to be aware of:
</para>
<enumerate first="1" endspaces=" ">
<listitem spaces=" "><para>This pragma silently applies only to declarations with external
linkage.  Asm labels do not have this restriction.
</para>
</listitem><listitem spaces=" "><para>In C++, this pragma silently applies only to declarations with
&textldquo;C&textrdquo; linkage.  Again, asm labels do not have this restriction.
</para>
</listitem><listitem spaces=" "><para>If either of the ways of changing the assembly name of a
declaration are applied to a declaration whose assembly name has
already been determined (either by a previous use of one of these
features, or because the compiler needed the assembly name in order to
generate code), and the new name is different, a warning issues and
the name does not change.
</para>
</listitem><listitem spaces=" "><para>The <var>oldname</var> used by <code>#pragma redefine_extname</code> is
always the C-language name.
</para></listitem></enumerate>

</subsection>
<node name="Structure_002dPacking-Pragmas" spaces=" "><nodename>Structure-Packing Pragmas</nodename><nodenext automatic="on">Weak Pragmas</nodenext><nodeprev automatic="on">Symbol-Renaming Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>Structure-Packing Pragmas</sectiontitle>

<para>For compatibility with Microsoft Windows compilers, GCC supports a
set of <code>#pragma</code> directives that change the maximum alignment of
members of structures (other than zero-width bit-fields), unions, and
classes subsequently defined. The <var>n</var> value below always is required
to be a small power of two and specifies the new alignment in bytes.
</para>
<enumerate first="1" endspaces=" ">
<listitem spaces=" "><para><code>#pragma pack(<var>n</var>)</code> simply sets the new alignment.
</para></listitem><listitem spaces=" "><para><code>#pragma pack()</code> sets the alignment to the one that was in
effect when compilation started (see also command-line option
<option>-fpack-struct[=<var>n</var>]</option> <pxref label="Code-Gen-Options"><xrefnodename>Code Gen Options</xrefnodename></pxref>).
</para></listitem><listitem spaces=" "><para><code>#pragma pack(push[,<var>n</var>])</code> pushes the current alignment
setting on an internal stack and then optionally sets the new alignment.
</para></listitem><listitem spaces=" "><para><code>#pragma pack(pop)</code> restores the alignment setting to the one
saved at the top of the internal stack (and removes that stack entry).
Note that <code>#pragma pack([<var>n</var>])</code> does not influence this internal
stack; thus it is possible to have <code>#pragma pack(push)</code> followed by
multiple <code>#pragma pack(<var>n</var>)</code> instances and finalized by a single
<code>#pragma pack(pop)</code>.
</para></listitem></enumerate>

<para>Some targets, e.g.&noeos; x86 and PowerPC, support the <code>ms_struct</code>
<code>#pragma</code> which lays out a structure as the documented
<code>__attribute__ ((ms_struct))</code>.
</para><enumerate first="1" endspaces=" ">
<listitem spaces=" "><para><code>#pragma ms_struct on</code> turns on the layout for structures
declared.
</para></listitem><listitem spaces=" "><para><code>#pragma ms_struct off</code> turns off the layout for structures
declared.
</para></listitem><listitem spaces=" "><para><code>#pragma ms_struct reset</code> goes back to the default layout.
</para></listitem></enumerate>

</subsection>
<node name="Weak-Pragmas" spaces=" "><nodename>Weak Pragmas</nodename><nodenext automatic="on">Diagnostic Pragmas</nodenext><nodeprev automatic="on">Structure-Packing Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>Weak Pragmas</sectiontitle>

<para>For compatibility with SVR4, GCC supports a set of <code>#pragma</code>
directives for declaring symbols to be weak, and defining weak
aliases.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma weak <var>symbol</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="890">pragma, weak</indexterm></cindex>
<para>This pragma declares <var>symbol</var> to be weak, as if the declaration
had the attribute of the same name.  The pragma may appear before
or after the declaration of <var>symbol</var>.  It is not an error for
<var>symbol</var> to never be defined at all.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma weak <var>symbol1</var> = <var>symbol2</var></itemformat></item>
</tableterm><tableitem><para>This pragma declares <var>symbol1</var> to be a weak alias of <var>symbol2</var>.
It is an error if <var>symbol2</var> is not defined in the current
translation unit.
</para></tableitem></tableentry></table>

</subsection>
<node name="Diagnostic-Pragmas" spaces=" "><nodename>Diagnostic Pragmas</nodename><nodenext automatic="on">Visibility Pragmas</nodenext><nodeprev automatic="on">Weak Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>Diagnostic Pragmas</sectiontitle>

<para>GCC allows the user to selectively enable or disable certain types of
diagnostics, and change the kind of the diagnostic.  For example, a
project&textrsquo;s policy might require that all sources compile with
<option>-Werror</option> but certain files might have exceptions allowing
specific types of warnings.  Or, a project might selectively enable
diagnostics and treat them as errors depending on which preprocessor
macros are defined.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma GCC diagnostic <var>kind</var> <var>option</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="891">pragma, diagnostic</indexterm></cindex>

<para>Modifies the disposition of a diagnostic.  Note that not all
diagnostics are modifiable; at the moment only warnings (normally
controlled by <samp>-W&dots;</samp>) can be controlled, and not all of them.
Use <option>-fdiagnostics-show-option</option> to determine which diagnostics
are controllable and which option controls them.
</para>
<para><var>kind</var> is <samp>error</samp> to treat this diagnostic as an error,
<samp>warning</samp> to treat it like a warning (even if <option>-Werror</option> is
in effect), or <samp>ignored</samp> if the diagnostic is to be ignored.
<var>option</var> is a double quoted string that matches the command-line
option.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#pragma GCC diagnostic warning &quot;-Wformat&quot;
#pragma GCC diagnostic error &quot;-Wformat&quot;
#pragma GCC diagnostic ignored &quot;-Wformat&quot;
</pre></smallexample>

<para>Note that these pragmas override any command-line options.  GCC keeps
track of the location of each pragma, and issues diagnostics according
to the state as of that point in the source file.  Thus, pragmas occurring
after a line do not affect diagnostics caused by that line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma GCC diagnostic push</itemformat></item>
<itemx spaces=" "><itemformat command="code">#pragma GCC diagnostic pop</itemformat></itemx>
</tableterm><tableitem>
<para>Causes GCC to remember the state of the diagnostics as of each
<code>push</code>, and restore to that point at each <code>pop</code>.  If a
<code>pop</code> has no matching <code>push</code>, the command-line options are
restored.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#pragma GCC diagnostic error &quot;-Wuninitialized&quot;
  foo(a);                       /* error is given for this one */
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored &quot;-Wuninitialized&quot;
  foo(b);                       /* no diagnostic for this one */
#pragma GCC diagnostic pop
  foo(c);                       /* error is given for this one */
#pragma GCC diagnostic pop
  foo(d);                       /* depends on command-line options */
</pre></smallexample>

</tableitem></tableentry></table>

<para>GCC also offers a simple mechanism for printing messages during
compilation.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma message <var>string</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="892">pragma, diagnostic</indexterm></cindex>

<para>Prints <var>string</var> as a compiler message on compilation.  The message
is informational only, and is neither a compilation warning nor an error.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#pragma message &quot;Compiling &quot; __FILE__ &quot;...&quot;
</pre></smallexample>

<para><var>string</var> may be parenthesized, and is printed with location
information.  For example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define DO_PRAGMA(x) _Pragma (#x)
#define TODO(x) DO_PRAGMA(message (&quot;TODO - &quot; #x))

TODO(Remember to fix this)
</pre></smallexample>

<noindent></noindent>
<para>prints <samp>/tmp/file.c:4: note: #pragma message:
TODO - Remember to fix this</samp>.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="Visibility-Pragmas" spaces=" "><nodename>Visibility Pragmas</nodename><nodenext automatic="on">Push/Pop Macro Pragmas</nodenext><nodeprev automatic="on">Diagnostic Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>Visibility Pragmas</sectiontitle>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma GCC visibility push(<var>visibility</var>)</itemformat></item>
<itemx spaces=" "><itemformat command="code">#pragma GCC visibility pop</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="893">pragma, visibility</indexterm></cindex>

<para>This pragma allows the user to set the visibility for multiple
declarations without having to give each a visibility attribute
(<pxref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></pxref>).
</para>
<para>In C++, <samp>#pragma GCC visibility</samp> affects only namespace-scope
declarations.  Class members and template specializations are not
affected; if you want to override the visibility for a particular
member or instantiation, you must use an attribute.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="Push_002fPop-Macro-Pragmas" spaces=" "><nodename>Push/Pop Macro Pragmas</nodename><nodenext automatic="on">Function Specific Option Pragmas</nodenext><nodeprev automatic="on">Visibility Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>Push/Pop Macro Pragmas</sectiontitle>

<para>For compatibility with Microsoft Windows compilers, GCC supports
<samp>#pragma push_macro(<var>&quot;macro_name&quot;</var>)</samp>
and <samp>#pragma pop_macro(<var>&quot;macro_name&quot;</var>)</samp>.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma push_macro(<var>&quot;macro_name&quot;</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="894">pragma, push_macro</indexterm></cindex>
<para>This pragma saves the value of the macro named as <var>macro_name</var> to
the top of the stack for this macro.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma pop_macro(<var>&quot;macro_name&quot;</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="895">pragma, pop_macro</indexterm></cindex>
<para>This pragma sets the value of the macro named as <var>macro_name</var> to
the value on top of the stack for this macro. If the stack for
<var>macro_name</var> is empty, the value of the macro remains unchanged.
</para></tableitem></tableentry></table>

<para>For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define X  1
#pragma push_macro(&quot;X&quot;)
#undef X
#define X -1
#pragma pop_macro(&quot;X&quot;)
int x [X];
</pre></smallexample>

<noindent></noindent>
<para>In this example, the definition of X as 1 is saved by <code>#pragma
push_macro</code> and restored by <code>#pragma pop_macro</code>.
</para>
</subsection>
<node name="Function-Specific-Option-Pragmas" spaces=" "><nodename>Function Specific Option Pragmas</nodename><nodenext automatic="on">Loop-Specific Pragmas</nodenext><nodeprev automatic="on">Push/Pop Macro Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>Function Specific Option Pragmas</sectiontitle>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma GCC target (<var>&quot;string&quot;</var>...)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="896">pragma GCC target</indexterm></cindex>

<para>This pragma allows you to set target specific options for functions
defined later in the source file.  One or more strings can be
specified.  Each function that is defined after this point is as
if <code>attribute((target(&quot;STRING&quot;)))</code> was specified for that
function.  The parenthesis around the options is optional.
<xref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></xref>, for more information about the
<code>target</code> attribute and the attribute syntax.
</para>
<para>The <code>#pragma GCC target</code> pragma is presently implemented for
x86, PowerPC, and Nios II targets only.
</para></tableitem></tableentry></table>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma GCC optimize (<var>&quot;string&quot;</var>...)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="897">pragma GCC optimize</indexterm></cindex>

<para>This pragma allows you to set global optimization options for functions
defined later in the source file.  One or more strings can be
specified.  Each function that is defined after this point is as
if <code>attribute((optimize(&quot;STRING&quot;)))</code> was specified for that
function.  The parenthesis around the options is optional.
<xref label="Function-Attributes"><xrefnodename>Function Attributes</xrefnodename></xref>, for more information about the
<code>optimize</code> attribute and the attribute syntax.
</para></tableitem></tableentry></table>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma GCC push_options</itemformat></item>
<itemx spaces=" "><itemformat command="code">#pragma GCC pop_options</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="898">pragma GCC push_options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="899">pragma GCC pop_options</indexterm></cindex>

<para>These pragmas maintain a stack of the current target and optimization
options.  It is intended for include files where you temporarily want
to switch to using a different <samp>#pragma GCC target</samp> or
<samp>#pragma GCC optimize</samp> and then to pop back to the previous
options.
</para></tableitem></tableentry></table>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma GCC reset_options</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="900">pragma GCC reset_options</indexterm></cindex>

<para>This pragma clears the current <code>#pragma GCC target</code> and
<code>#pragma GCC optimize</code> to use the default switches as specified
on the command line.
</para></tableitem></tableentry></table>

</subsection>
<node name="Loop_002dSpecific-Pragmas" spaces=" "><nodename>Loop-Specific Pragmas</nodename><nodeprev automatic="on">Function Specific Option Pragmas</nodeprev><nodeup automatic="on">Pragmas</nodeup></node>
<subsection spaces=" "><sectiontitle>Loop-Specific Pragmas</sectiontitle>

<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma GCC ivdep</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="901">pragma GCC ivdep</indexterm></cindex>
</tableitem></tableentry></table>

<para>With this pragma, the programmer asserts that there are no loop-carried
dependencies which would prevent consecutive iterations of
the following loop from executing concurrently with SIMD
(single instruction multiple data) instructions.
</para>
<para>For example, the compiler can only unconditionally vectorize the following
loop with the pragma:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void foo (int n, int *a, int *b, int *c)
&lbrace;
  int i, j;
#pragma GCC ivdep
  for (i = 0; i &lt; n; ++i)
    a[i] = b[i] + c[i];
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>In this example, using the <code>restrict</code> qualifier had the same
effect. In the following example, that would not be possible. Assume
<math>k &lt; -m</math> or <math>k &gt;= m</math>. Only with the pragma, the compiler knows
that it can unconditionally vectorize the following loop:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void ignore_vec_dep (int *a, int k, int c, int m)
&lbrace;
#pragma GCC ivdep
  for (int i = 0; i &lt; m; i++)
    a[i] = a[i + k] * c;
&rbrace;
</pre></smallexample>


</subsection>
</section>
<node name="Unnamed-Fields" spaces=" "><nodename>Unnamed Fields</nodename><nodenext automatic="on">Thread-Local</nodenext><nodeprev automatic="on">Pragmas</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Unnamed Structure and Union Fields</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="902"><code>struct</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="903"><code>union</code></indexterm></cindex>

<para>As permitted by ISO C11 and for compatibility with other compilers,
GCC allows you to define
a structure or union that contains, as fields, structures and unions
without names.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct &lbrace;
  int a;
  union &lbrace;
    int b;
    float c;
  &rbrace;;
  int d;
&rbrace; foo;
</pre></smallexample>

<noindent></noindent>
<para>In this example, you are able to access members of the unnamed
union with code like <samp>foo.b</samp>.  Note that only unnamed structs and
unions are allowed, you may not have, for example, an unnamed
<code>int</code>.
</para>
<para>You must never create such structures that cause ambiguous field definitions.
For example, in this structure:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct &lbrace;
  int a;
  struct &lbrace;
    int a;
  &rbrace;;
&rbrace; foo;
</pre></smallexample>

<noindent></noindent>
<para>it is ambiguous which <code>a</code> is being referred to with <samp>foo.a</samp>.
The compiler gives errors for such constructs.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2629" incode="1">fms-extensions</indexterm></indexcommand>
<para>Unless <option>-fms-extensions</option> is used, the unnamed field must be a
structure or union definition without a tag (for example, <samp>struct
&lbrace; int a; &rbrace;;</samp>).  If <option>-fms-extensions</option> is used, the field may
also be a definition with a tag such as <samp>struct foo &lbrace; int a;
&rbrace;;</samp>, a reference to a previously defined structure or union such as
<samp>struct foo;</samp>, or a reference to a <code>typedef</code> name for a
previously defined structure or union type.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2630" incode="1">fplan9-extensions</indexterm></indexcommand>
<para>The option <option>-fplan9-extensions</option> enables
<option>-fms-extensions</option> as well as two other extensions.  First, a
pointer to a structure is automatically converted to a pointer to an
anonymous field for assignments and function calls.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct s1 &lbrace; int a; &rbrace;;
struct s2 &lbrace; struct s1; &rbrace;;
extern void f1 (struct s1 *);
void f2 (struct s2 *p) &lbrace; f1 (p); &rbrace;
</pre></smallexample>

<noindent></noindent>
<para>In the call to <code>f1</code> inside <code>f2</code>, the pointer <code>p</code> is
converted into a pointer to the anonymous field.
</para>
<para>Second, when the type of an anonymous field is a <code>typedef</code> for a
<code>struct</code> or <code>union</code>, code may refer to the field using the
name of the <code>typedef</code>.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef struct &lbrace; int a; &rbrace; s1;
struct s2 &lbrace; s1; &rbrace;;
s1 f1 (struct s2 *p) &lbrace; return p-&gt;s1; &rbrace;
</pre></smallexample>

<para>These usages are only permitted when they are not ambiguous.
</para>
</section>
<node name="Thread_002dLocal" spaces=" "><nodename>Thread-Local</nodename><nodenext automatic="on">Binary constants</nodenext><nodeprev automatic="on">Unnamed Fields</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Thread-Local Storage</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="904">Thread-Local Storage</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="905"><acronym><acronymword>TLS</acronymword></acronym></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="906"><code>__thread</code></indexterm></cindex>

<para>Thread-local storage (<acronym><acronymword>TLS</acronymword></acronym>) is a mechanism by which variables
are allocated such that there is one instance of the variable per extant
thread.  The runtime model GCC uses to implement this originates
in the IA-64 processor-specific ABI, but has since been migrated
to other processors as well.  It requires significant support from
the linker (<command>ld</command>), dynamic linker (<command>ld.so</command>), and
system libraries (<file>libc.so</file> and <file>libpthread.so</file>), so it
is not available everywhere.
</para>
<para>At the user level, the extension is visible with a new storage
class keyword: <code>__thread</code>.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">__thread int i;
extern __thread struct state s;
static __thread char *p;
</pre></smallexample>

<para>The <code>__thread</code> specifier may be used alone, with the <code>extern</code>
or <code>static</code> specifiers, but with no other storage class specifier.
When used with <code>extern</code> or <code>static</code>, <code>__thread</code> must appear
immediately after the other storage class specifier.
</para>
<para>The <code>__thread</code> specifier may be applied to any global, file-scoped
static, function-scoped static, or static data member of a class.  It may
not be applied to block-scoped automatic or non-static data member.
</para>
<para>When the address-of operator is applied to a thread-local variable, it is
evaluated at run time and returns the address of the current thread&textrsquo;s
instance of that variable.  An address so obtained may be used by any
thread.  When a thread terminates, any pointers to thread-local variables
in that thread become invalid.
</para>
<para>No static initialization may refer to the address of a thread-local variable.
</para>
<para>In C++, if an initializer is present for a thread-local variable, it must
be a <var>constant-expression</var>, as defined in 5.19.2 of the ANSI/ISO C++
standard.
</para>
<para>See <uref><urefurl>http://www.akkadia.org/drepper/tls.pdf</urefurl><urefdesc spaces="\n">ELF Handling For Thread-Local Storage</urefdesc></uref> for a detailed explanation of
the four thread-local storage addressing models, and how the runtime
is expected to function.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">C99 Thread-Local Edits</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">C++98 Thread-Local Edits</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="C99-Thread_002dLocal-Edits" spaces=" "><nodename>C99 Thread-Local Edits</nodename><nodenext automatic="on">C++98 Thread-Local Edits</nodenext><nodeup automatic="on">Thread-Local</nodeup></node>
<subsection spaces=" "><sectiontitle>ISO/IEC 9899:1999 Edits for Thread-Local Storage</sectiontitle>

<para>The following are a set of changes to ISO/IEC 9899:1999 (aka C99)
that document the exact semantics of the language extension.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><cite>5.1.2  Execution environments</cite>
</para>
<para>Add new text after paragraph 1
</para>
<quotation endspaces=" ">
<para>Within either execution environment, a <dfn>thread</dfn> is a flow of
control within a program.  It is implementation defined whether
or not there may be more than one thread associated with a program.
It is implementation defined how threads beyond the first are
created, the name and type of the function called at thread
startup, and how threads may be terminated.  However, objects
with thread storage duration shall be initialized before thread
startup.
</para></quotation>

</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>6.2.4  Storage durations of objects</cite>
</para>
<para>Add new text before paragraph 3
</para>
<quotation endspaces=" ">
<para>An object whose identifier is declared with the storage-class
specifier <w><code>__thread</code></w> has <dfn>thread storage duration</dfn>.
Its lifetime is the entire execution of the thread, and its
stored value is initialized only once, prior to thread startup.
</para></quotation>

</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>6.4.1  Keywords</cite>
</para>
<para>Add <code>__thread</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><cite>6.7.1  Storage-class specifiers</cite>
</para>
<para>Add <code>__thread</code> to the list of storage class specifiers in
paragraph 1.
</para>
<para>Change paragraph 2 to
</para>
<quotation endspaces=" ">
<para>With the exception of <code>__thread</code>, at most one storage-class
specifier may be given [&dots;].  The <code>__thread</code> specifier may
be used alone, or immediately following <code>extern</code> or
<code>static</code>.
</para></quotation>

<para>Add new text after paragraph 6
</para>
<quotation endspaces=" ">
<para>The declaration of an identifier for a variable that has
block scope that specifies <code>__thread</code> shall also
specify either <code>extern</code> or <code>static</code>.
</para>
<para>The <code>__thread</code> specifier shall be used only with
variables.
</para></quotation>
</listitem></itemize>

</subsection>
<node name="C_002b_002b98-Thread_002dLocal-Edits" spaces=" "><nodename>C++98 Thread-Local Edits</nodename><nodeprev automatic="on">C99 Thread-Local Edits</nodeprev><nodeup automatic="on">Thread-Local</nodeup></node>
<subsection spaces=" "><sectiontitle>ISO/IEC 14882:1998 Edits for Thread-Local Storage</sectiontitle>

<para>The following are a set of changes to ISO/IEC 14882:1998 (aka C++98)
that document the exact semantics of the language extension.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><b>[intro.execution]</b>
</para>
<para>New text after paragraph 4
</para>
<quotation endspaces=" ">
<para>A <dfn>thread</dfn> is a flow of control within the abstract machine.
It is implementation defined whether or not there may be more than
one thread.
</para></quotation>

<para>New text after paragraph 7
</para>
<quotation endspaces=" ">
<para>It is unspecified whether additional action must be taken to
ensure when and whether side effects are visible to other threads.
</para></quotation>

</listitem><listitem><prepend>&bullet;</prepend>
<para><b>[lex.key]</b>
</para>
<para>Add <code>__thread</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><b>[basic.start.main]</b>
</para>
<para>Add after paragraph 5
</para>
<quotation endspaces=" ">
<para>The thread that begins execution at the <code>main</code> function is called
the <dfn>main thread</dfn>.  It is implementation defined how functions
beginning threads other than the main thread are designated or typed.
A function so designated, as well as the <code>main</code> function, is called
a <dfn>thread startup function</dfn>.  It is implementation defined what
happens if a thread startup function returns.  It is implementation
defined what happens to other threads when any thread calls <code>exit</code>.
</para></quotation>

</listitem><listitem><prepend>&bullet;</prepend>
<para><b>[basic.start.init]</b>
</para>
<para>Add after paragraph 4
</para>
<quotation endspaces=" ">
<para>The storage for an object of thread storage duration shall be
statically initialized before the first statement of the thread startup
function.  An object of thread storage duration shall not require
dynamic initialization.
</para></quotation>

</listitem><listitem><prepend>&bullet;</prepend>
<para><b>[basic.start.term]</b>
</para>
<para>Add after paragraph 3
</para>
<quotation endspaces=" ">
<para>The type of an object with thread storage duration shall not have a
non-trivial destructor, nor shall it be an array type whose elements
(directly or indirectly) have non-trivial destructors.
</para></quotation>

</listitem><listitem><prepend>&bullet;</prepend>
<para><b>[basic.stc]</b>
</para>
<para>Add &textldquo;thread storage duration&textrdquo; to the list in paragraph 1.
</para>
<para>Change paragraph 2
</para>
<quotation endspaces=" ">
<para>Thread, static, and automatic storage durations are associated with
objects introduced by declarations [&dots;].
</para></quotation>

<para>Add <code>__thread</code> to the list of specifiers in paragraph 3.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><b>[basic.stc.thread]</b>
</para>
<para>New section before <b>[basic.stc.static]</b>
</para>
<quotation endspaces=" ">
<para>The keyword <code>__thread</code> applied to a non-local object gives the
object thread storage duration.
</para>
<para>A local variable or class data member declared both <code>static</code>
and <code>__thread</code> gives the variable or member thread storage
duration.
</para></quotation>

</listitem><listitem><prepend>&bullet;</prepend>
<para><b>[basic.stc.static]</b>
</para>
<para>Change paragraph 1
</para>
<quotation endspaces=" ">
<para>All objects that have neither thread storage duration, dynamic
storage duration nor are local [&dots;].
</para></quotation>

</listitem><listitem><prepend>&bullet;</prepend>
<para><b>[dcl.stc]</b>
</para>
<para>Add <code>__thread</code> to the list in paragraph 1.
</para>
<para>Change paragraph 1
</para>
<quotation endspaces=" ">
<para>With the exception of <code>__thread</code>, at most one
<var>storage-class-specifier</var> shall appear in a given
<var>decl-specifier-seq</var>.  The <code>__thread</code> specifier may
be used alone, or immediately following the <code>extern</code> or
<code>static</code> specifiers.  [&dots;]
</para></quotation>

<para>Add after paragraph 5
</para>
<quotation endspaces=" ">
<para>The <code>__thread</code> specifier can be applied only to the names of objects
and to anonymous unions.
</para></quotation>

</listitem><listitem><prepend>&bullet;</prepend>
<para><b>[class.mem]</b>
</para>
<para>Add after paragraph 6
</para>
<quotation endspaces=" ">
<para>Non-<code>static</code> members shall not be <code>__thread</code>.
</para></quotation>
</listitem></itemize>

</subsection>
</section>
<node name="Binary-constants" spaces=" "><nodename>Binary constants</nodename><nodeprev automatic="on">Thread-Local</nodeprev><nodeup automatic="on">C Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Binary Constants using the <samp>0b</samp> Prefix</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="907">Binary constants using the <samp>0b</samp> prefix</indexterm></cindex>

<para>Integer constants can be written as binary constants, consisting of a
sequence of <samp>0</samp> and <samp>1</samp> digits, prefixed by <samp>0b</samp> or
<samp>0B</samp>.  This is particularly useful in environments that operate a
lot on the bit level (like microcontrollers).
</para>
<para>The following statements are identical:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">i =       42;
i =     0x2a;
i =      052;
i = 0b101010;
</pre></smallexample>

<para>The type of these constants follows the same rules as for octal or
hexadecimal integer constants, so suffixes like <samp>L</samp> or <samp>UL</samp>
can be applied.
</para>
</section>
</chapter>
<node name="C_002b_002b-Extensions" spaces=" "><nodename>C++ Extensions</nodename><nodenext automatic="on">Objective-C</nodenext><nodeprev automatic="on">C Extensions</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Extensions to the C++ Language</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="908">extensions, C++ language</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="909">C++ language extensions</indexterm></cindex>

<para>The GNU compiler provides these extensions to the C++ language (and you
can also use most of the C language extensions in your C++ programs).  If you
want to write code that checks whether these features are available, you can
test for the GNU compiler the same way as for C programs: check for a
predefined macro <code>__GNUC__</code>.  You can also use <code>__GNUG__</code> to
test specifically for GNU C++ (<pxref label="Common-Predefined-Macros" manual="cpp"><xrefnodename>Common Predefined Macros</xrefnodename><xrefprinteddesc spaces="\n">Predefined Macros</xrefprinteddesc><xrefinfofile>cpp</xrefinfofile><xrefprintedname>The GNU C Preprocessor</xrefprintedname></pxref>).
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::       ">C++ Volatiles</menunode><menudescription><pre xml:space="preserve">What constitutes an access to a volatile object.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Restricted Pointers</menunode><menudescription><pre xml:space="preserve">C99 restricted pointers and references.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">Vague Linkage</menunode><menudescription><pre xml:space="preserve">Where G++ puts inlines, vtables and such.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">C++ Interface</menunode><menudescription><pre xml:space="preserve">You can use a single C++ header file for both
                        declarations and definitions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Template Instantiation</menunode><menudescription><pre xml:space="preserve">Methods for ensuring that exactly one copy of
                        each needed template instantiation is emitted.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Bound member functions</menunode><menudescription><pre xml:space="preserve">You can extract a function pointer to the
                        method denoted by a <samp>-&gt;*</samp> or <samp>.*</samp> expression.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">C++ Attributes</menunode><menudescription><pre xml:space="preserve">Variable, function, and type attributes for C++ only.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Function Multiversioning</menunode><menudescription><pre xml:space="preserve">Declaring multiple function versions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Namespace Association</menunode><menudescription><pre xml:space="preserve">Strong using-directives for namespace association.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Type Traits</menunode><menudescription><pre xml:space="preserve">Compiler support for type traits
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Java Exceptions</menunode><menudescription><pre xml:space="preserve">Tweaking exception handling to work with Java.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Deprecated Features</menunode><menudescription><pre xml:space="preserve">Things will disappear from G++.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Backwards Compatibility</menunode><menudescription><pre xml:space="preserve">Compatibilities with earlier definitions of C++.
</pre></menudescription></menuentry></menu>

<node name="C_002b_002b-Volatiles" spaces=" "><nodename>C++ Volatiles</nodename><nodenext automatic="on">Restricted Pointers</nodenext><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>When is a Volatile C++ Object Accessed?</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="910">accessing volatiles</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="911">volatile read</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="912">volatile write</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="913">volatile access</indexterm></cindex>

<para>The C++ standard differs from the C standard in its treatment of
volatile objects.  It fails to specify what constitutes a volatile
access, except to say that C++ should behave in a similar manner to C
with respect to volatiles, where possible.  However, the different
lvalueness of expressions between C and C++ complicate the behavior.
G++ behaves the same as GCC for volatile access, <xref label="C-Extensions"><xrefnodename>C
Extensions</xrefnodename><xrefprinteddesc>Volatiles</xrefprinteddesc></xref>, for a description of GCC&textrsquo;s behavior.
</para>
<para>The C and C++ language specifications differ when an object is
accessed in a void context:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">volatile int *src = <var>somevalue</var>;
*src;
</pre></smallexample>

<para>The C++ standard specifies that such expressions do not undergo lvalue
to rvalue conversion, and that the type of the dereferenced object may
be incomplete.  The C++ standard does not specify explicitly that it
is lvalue to rvalue conversion that is responsible for causing an
access.  There is reason to believe that it is, because otherwise
certain simple expressions become undefined.  However, because it
would surprise most programmers, G++ treats dereferencing a pointer to
volatile object of complete type as GCC would do for an equivalent
type in C&eosperiod;  When the object has incomplete type, G++ issues a
warning; if you wish to force an error, you must force a conversion to
rvalue with, for instance, a static cast.
</para>
<para>When using a reference to volatile, G++ does not treat equivalent
expressions as accesses to volatiles, but instead issues a warning that
no volatile is accessed.  The rationale for this is that otherwise it
becomes difficult to determine where volatile access occur, and not
possible to ignore the return value from functions returning volatile
references.  Again, if you wish to force a read, cast the reference to
an rvalue.
</para>
<para>G++ implements the same behavior as GCC does when assigning to a
volatile object&textmdash;there is no reread of the assigned-to object, the
assigned rvalue is reused.  Note that in C++ assignment expressions
are lvalues, and if used as an lvalue, the volatile object is
referred to.  For instance, <var>vref</var> refers to <var>vobj</var>, as
expected, in the following example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">volatile int vobj;
volatile int &amp;vref = vobj = <var>something</var>;
</pre></smallexample>

</section>
<node name="Restricted-Pointers" spaces=" "><nodename>Restricted Pointers</nodename><nodenext automatic="on">Vague Linkage</nodenext><nodeprev automatic="on">C++ Volatiles</nodeprev><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Restricting Pointer Aliasing</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="914">restricted pointers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="915">restricted references</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="916">restricted this pointer</indexterm></cindex>

<para>As with the C front end, G++ understands the C99 feature of restricted pointers,
specified with the <code>__restrict__</code>, or <code>__restrict</code> type
qualifier.  Because you cannot compile C++ by specifying the <option>-std=c99</option>
language flag, <code>restrict</code> is not a keyword in C++.
</para>
<para>In addition to allowing restricted pointers, you can specify restricted
references, which indicate that the reference is not aliased in the local
context.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void fn (int *__restrict__ rptr, int &amp;__restrict__ rref)
&lbrace;
  /* <r>&dots;</r> */
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>In the body of <code>fn</code>, <var>rptr</var> points to an unaliased integer and
<var>rref</var> refers to a (different) unaliased integer.
</para>
<para>You may also specify whether a member function&textrsquo;s <var>this</var> pointer is
unaliased by using <code>__restrict__</code> as a member function qualifier.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void T::fn () __restrict__
&lbrace;
  /* <r>&dots;</r> */
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>Within the body of <code>T::fn</code>, <var>this</var> has the effective
definition <code>T *__restrict__ const this</code>.  Notice that the
interpretation of a <code>__restrict__</code> member function qualifier is
different to that of <code>const</code> or <code>volatile</code> qualifier, in that it
is applied to the pointer rather than the object.  This is consistent with
other compilers that implement restricted pointers.
</para>
<para>As with all outermost parameter qualifiers, <code>__restrict__</code> is
ignored in function definition matching.  This means you only need to
specify <code>__restrict__</code> in a function definition, rather than
in a function prototype as well.
</para>
</section>
<node name="Vague-Linkage" spaces=" "><nodename>Vague Linkage</nodename><nodenext automatic="on">C++ Interface</nodenext><nodeprev automatic="on">Restricted Pointers</nodeprev><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Vague Linkage</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="917">vague linkage</indexterm></cindex>

<para>There are several constructs in C++ that require space in the object
file but are not clearly tied to a single translation unit.  We say that
these constructs have &textldquo;vague linkage&textrdquo;.  Typically such constructs are
emitted wherever they are needed, though sometimes we can be more
clever.
</para>
<table commandarg="asis" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="asis">Inline Functions</itemformat></item>
</tableterm><tableitem><para>Inline functions are typically defined in a header file which can be
included in many different compilations.  Hopefully they can usually be
inlined, but sometimes an out-of-line copy is necessary, if the address
of the function is taken or if inlining fails.  In general, we emit an
out-of-line copy in all translation units where one is needed.  As an
exception, we only emit inline virtual functions with the vtable, since
it always requires a copy.
</para>
<para>Local static variables and string constants used in an inline function
are also considered to have vague linkage, since they must be shared
between all inlined and out-of-line instances of the function.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">VTables</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="918">vtable</indexterm></cindex>
<para>C++ virtual functions are implemented in most compilers using a lookup
table, known as a vtable.  The vtable contains pointers to the virtual
functions provided by a class, and each object of the class contains a
pointer to its vtable (or vtables, in some multiple-inheritance
situations).  If the class declares any non-inline, non-pure virtual
functions, the first one is chosen as the &textldquo;key method&textrdquo; for the class,
and the vtable is only emitted in the translation unit where the key
method is defined.
</para>
<para><emph>Note:</emph> If the chosen key method is later defined as inline, the
vtable is still emitted in every translation unit that defines it.
Make sure that any inline virtuals are declared inline in the class
body, even if they are not defined there.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis"><code>type_info</code> objects</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="919"><code>type_info</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="920">RTTI</indexterm></cindex>
<para>C++ requires information about types to be written out in order to
implement <samp>dynamic_cast</samp>, <samp>typeid</samp> and exception handling.
For polymorphic classes (classes with virtual functions), the <samp>type_info</samp>
object is written out along with the vtable so that <samp>dynamic_cast</samp>
can determine the dynamic type of a class object at run time.  For all
other types, we write out the <samp>type_info</samp> object when it is used: when
applying <samp>typeid</samp> to an expression, throwing an object, or
referring to a type in a catch clause or exception specification.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">Template Instantiations</itemformat></item>
</tableterm><tableitem><para>Most everything in this section also applies to template instantiations,
but there are other options as well.
<xref label="Template-Instantiation"><xrefnodename>Template Instantiation</xrefnodename><xrefprinteddesc>Where&textrsquo;s the Template?</xrefprinteddesc></xref>.
</para>
</tableitem></tableentry></table>

<para>When used with GNU ld version 2.8 or later on an ELF system such as
GNU/Linux or Solaris 2, or on Microsoft Windows, duplicate copies of
these constructs will be discarded at link time.  This is known as
COMDAT support.
</para>
<para>On targets that don&textrsquo;t support COMDAT, but do support weak symbols, GCC
uses them.  This way one copy overrides all the others, but
the unused copies still take up space in the executable.
</para>
<para>For targets that do not support either COMDAT or weak symbols,
most entities with vague linkage are emitted as local symbols to
avoid duplicate definition errors from the linker.  This does not happen
for local statics in inlines, however, as having multiple copies
almost certainly breaks things.
</para>
<para><xref label="C_002b_002b-Interface"><xrefnodename>C++ Interface</xrefnodename><xrefprinteddesc>Declarations and Definitions in One Header</xrefprinteddesc></xref>, for
another way to control placement of these constructs.
</para>
</section>
<node name="C_002b_002b-Interface" spaces=" "><nodename>C++ Interface</nodename><nodenext automatic="on">Template Instantiation</nodenext><nodeprev automatic="on">Vague Linkage</nodeprev><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>C++ Interface and Implementation Pragmas</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="921">interface and implementation headers, C++</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="922">C++ interface and implementation headers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="923">pragmas, interface and implementation</indexterm></cindex>

<para><code>#pragma interface</code> and <code>#pragma implementation</code> provide the
user with a way of explicitly directing the compiler to emit entities
with vague linkage (and debugging information) in a particular
translation unit.
</para>
<para><emph>Note:</emph> These <code>#pragma</code>s have been superceded as of GCC 2.7.2
by COMDAT support and the &textldquo;key method&textrdquo; heuristic
mentioned in <ref label="Vague-Linkage"><xrefnodename>Vague Linkage</xrefnodename></ref>.  Using them can actually cause your
program to grow due to unnecessary out-of-line copies of inline
functions.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma interface</itemformat></item>
<itemx spaces=" "><itemformat command="code">#pragma interface &quot;<var>subdir</var>/<var>objects</var>.h&quot;</itemformat></itemx>
</tableterm><tableitem><kindex index="ky" spaces=" "><indexterm index="ky" number="1" mergedindex="cp">#pragma interface</indexterm></kindex>
<para>Use this directive in <emph>header files</emph> that define object classes, to save
space in most of the object files that use those classes.  Normally,
local copies of certain information (backup copies of inline member
functions, debugging information, and the internal tables that implement
virtual functions) must be kept in each object file that includes class
definitions.  You can use this pragma to avoid such duplication.  When a
header file containing <samp>#pragma interface</samp> is included in a
compilation, this auxiliary information is not generated (unless
the main input source file itself uses <samp>#pragma implementation</samp>).
Instead, the object files contain references to be resolved at link
time.
</para>
<para>The second form of this directive is useful for the case where you have
multiple headers with the same name in different directories.  If you
use this form, you must specify the same string to <samp>#pragma
implementation</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">#pragma implementation</itemformat></item>
<itemx spaces=" "><itemformat command="code">#pragma implementation &quot;<var>objects</var>.h&quot;</itemformat></itemx>
</tableterm><tableitem><kindex index="ky" spaces=" "><indexterm index="ky" number="2" mergedindex="cp">#pragma implementation</indexterm></kindex>
<para>Use this pragma in a <emph>main input file</emph>, when you want full output from
included header files to be generated (and made globally visible).  The
included header file, in turn, should use <samp>#pragma interface</samp>.
Backup copies of inline member functions, debugging information, and the
internal tables used to implement virtual functions are all generated in
implementation files.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="924">implied <code>#pragma implementation</code></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="925"><code>#pragma implementation</code>, implied</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="926">naming convention, implementation headers</indexterm></cindex>
<para>If you use <samp>#pragma implementation</samp> with no argument, it applies to
an include file with the same basename<footnote><para>A file&textrsquo;s <dfn>basename</dfn>
is the name stripped of all leading path information and of trailing
suffixes, such as <samp>.h</samp> or <samp>.C</samp> or <samp>.cc</samp>.</para></footnote> as your source
file.  For example, in <file>allclass.cc</file>, giving just
<samp>#pragma implementation</samp>
by itself is equivalent to <samp>#pragma implementation &quot;allclass.h&quot;</samp>.
</para>
<para>Use the string argument if you want a single implementation file to
include code from multiple header files.  (You must also use
<samp>#include</samp> to include the header file; <samp>#pragma
implementation</samp> only specifies how to use the file&textmdash;it doesn&textrsquo;t actually
include it.)
</para>
<para>There is no way to split up the contents of a single header file into
multiple implementation files.
</para></tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp" number="927">inlining and C++ pragmas</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="928">C++ pragmas, effect on inlining</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="929">pragmas in C++, effect on inlining</indexterm></cindex>
<para><samp>#pragma implementation</samp> and <samp>#pragma interface</samp> also have an
effect on function inlining.
</para>
<para>If you define a class in a header file marked with <samp>#pragma
interface</samp>, the effect on an inline function defined in that class is
similar to an explicit <code>extern</code> declaration&textmdash;the compiler emits
no code at all to define an independent version of the function.  Its
definition is used only for inlining with its callers.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2631" incode="1">fno-implement-inlines</indexterm></indexcommand>
<para>Conversely, when you include the same header file in a main source file
that declares it as <samp>#pragma implementation</samp>, the compiler emits
code for the function itself; this defines a version of the function
that can be found via pointers (or by callers compiled without
inlining).  If all calls to the function can be inlined, you can avoid
emitting the function by compiling with <option>-fno-implement-inlines</option>.
If any calls are not inlined, you will get linker errors.
</para>
</section>
<node name="Template-Instantiation" spaces=" "><nodename>Template Instantiation</nodename><nodenext automatic="on">Bound member functions</nodenext><nodeprev automatic="on">C++ Interface</nodeprev><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Where&textrsquo;s the Template?</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="930">template instantiation</indexterm></cindex>

<para>C++ templates are the first language feature to require more
intelligence from the environment than one usually finds on a UNIX
system.  Somehow the compiler and linker have to make sure that each
template instance occurs exactly once in the executable if it is needed,
and not at all otherwise.  There are two basic approaches to this
problem, which are referred to as the Borland model and the Cfront model.
</para>
<table commandarg="asis" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="asis">Borland model</itemformat></item>
</tableterm><tableitem><para>Borland C++ solved the template instantiation problem by adding the code
equivalent of common blocks to their linker; the compiler emits template
instances in each translation unit that uses them, and the linker
collapses them together.  The advantage of this model is that the linker
only has to consider the object files themselves; there is no external
complexity to worry about.  This disadvantage is that compilation time
is increased because the template code is being compiled repeatedly.
Code written for this model tends to include definitions of all
templates in the header file, since they must be seen to be
instantiated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">Cfront model</itemformat></item>
</tableterm><tableitem><para>The AT&amp;T C++ translator, Cfront, solved the template instantiation
problem by creating the notion of a template repository, an
automatically maintained place where template instances are stored.  A
more modern version of the repository works as follows: As individual
object files are built, the compiler places any template definitions and
instantiations encountered in the repository.  At link time, the link
wrapper adds in the objects in the repository and compiles any needed
instances that were not previously emitted.  The advantages of this
model are more optimal compilation speed and the ability to use the
system linker; to implement the Borland model a compiler vendor also
needs to replace the linker.  The disadvantages are vastly increased
complexity, and thus potential for error; for some code this can be
just as transparent, but in practice it can been very difficult to build
multiple programs in one directory and one program in multiple
directories.  Code written for this model tends to separate definitions
of non-inline member templates into a separate file, which should be
compiled separately.
</para></tableitem></tableentry></table>

<para>When used with GNU ld version 2.8 or later on an ELF system such as
GNU/Linux or Solaris 2, or on Microsoft Windows, G++ supports the
Borland model.  On other systems, G++ implements neither automatic
model.
</para>
<para>You have the following options for dealing with template instantiations:
</para>
<enumerate first="1" endspaces=" ">
<listitem>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2632" incode="1">frepo</indexterm></indexcommand>
<para>Compile your template-using code with <option>-frepo</option>.  The compiler
generates files with the extension <samp>.rpo</samp> listing all of the
template instantiations used in the corresponding object files that
could be instantiated there; the link wrapper, <samp>collect2</samp>,
then updates the <samp>.rpo</samp> files to tell the compiler where to place
those instantiations and rebuild any affected object files.  The
link-time overhead is negligible after the first pass, as the compiler
continues to place the instantiations in the same files.
</para>
<para>This is your best option for application code written for the Borland
model, as it just works.  Code written for the Cfront model 
needs to be modified so that the template definitions are available at
one or more points of instantiation; usually this is as simple as adding
<code>#include &lt;tmethods.cc&gt;</code> to the end of each template header.
</para>
<para>For library code, if you want the library to provide all of the template
instantiations it needs, just try to link all of its object files
together; the link will fail, but cause the instantiations to be
generated as a side effect.  Be warned, however, that this may cause
conflicts if multiple libraries try to provide the same instantiations.
For greater control, use explicit instantiation as described in the next
option.
</para>
</listitem><listitem>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2633" incode="1">fno-implicit-templates</indexterm></indexcommand>
<para>Compile your code with <option>-fno-implicit-templates</option> to disable the
implicit generation of template instances, and explicitly instantiate
all the ones you use.  This approach requires more knowledge of exactly
which instances you need than do the others, but it&textrsquo;s less
mysterious and allows greater control.  You can scatter the explicit
instantiations throughout your program, perhaps putting them in the
translation units where the instances are used or the translation units
that define the templates themselves; you can put all of the explicit
instantiations you need into one big file; or you can create small files
like
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#include &quot;Foo.h&quot;
#include &quot;Foo.cc&quot;

template class Foo&lt;int&gt;;
template ostream&amp; operator &lt;&lt;
                (ostream&amp;, const Foo&lt;int&gt;&amp;);
</pre></smallexample>

<noindent></noindent>
<para>for each of the instances you need, and create a template instantiation
library from those.
</para>
<para>If you are using Cfront-model code, you can probably get away with not
using <option>-fno-implicit-templates</option> when compiling files that don&textrsquo;t
<samp>#include</samp> the member template definitions.
</para>
<para>If you use one big file to do the instantiations, you may want to
compile it without <option>-fno-implicit-templates</option> so you get all of the
instances required by your explicit instantiations (but not by any
other files) without having to specify them as well.
</para>
<para>The ISO C++ 2011 standard allows forward declaration of explicit
instantiations (with <code>extern</code>). G++ supports explicit instantiation
declarations in C++98 mode and has extended the template instantiation
syntax to support instantiation of the compiler support data for a
template class (i.e.&noeos; the vtable) without instantiating any of its
members (with <code>inline</code>), and instantiation of only the static data
members of a template class, without the support data or member
functions (with <code>static</code>):
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern template int max (int, int);
inline template class Foo&lt;int&gt;;
static template class Foo&lt;int&gt;;
</pre></smallexample>

</listitem><listitem>
<para>Do nothing.  Pretend G++ does implement automatic instantiation
management.  Code written for the Borland model works fine, but
each translation unit contains instances of each of the templates it
uses.  In a large program, this can lead to an unacceptable amount of code
duplication.
</para></listitem></enumerate>

</section>
<node name="Bound-member-functions" spaces=" "><nodename>Bound member functions</nodename><nodenext automatic="on">C++ Attributes</nodenext><nodeprev automatic="on">Template Instantiation</nodeprev><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Extracting the Function Pointer from a Bound Pointer to Member Function</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="931">pmf</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="932">pointer to member function</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="933">bound pointer to member function</indexterm></cindex>

<para>In C++, pointer to member functions (PMFs) are implemented using a wide
pointer of sorts to handle all the possible call mechanisms; the PMF
needs to store information about how to adjust the <samp>this</samp> pointer,
and if the function pointed to is virtual, where to find the vtable, and
where in the vtable to look for the member function.  If you are using
PMFs in an inner loop, you should really reconsider that decision.  If
that is not an option, you can extract the pointer to the function that
would be called for a given object/PMF pair and call it directly inside
the inner loop, to save a bit of time.
</para>
<para>Note that you still pay the penalty for the call through a
function pointer; on most modern architectures, such a call defeats the
branch prediction features of the CPU&eosperiod;  This is also true of normal
virtual function calls.
</para>
<para>The syntax for this extension is
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">extern A a;
extern int (A::*fp)();
typedef int (*fptr)(A *);

fptr p = (fptr)(a.*fp);
</pre></smallexample>

<para>For PMF constants (i.e.&noeos; expressions of the form <samp>&amp;Klasse::Member</samp>),
no object is needed to obtain the address of the function.  They can be
converted to function pointers directly:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">fptr p1 = (fptr)(&amp;A::foo);
</pre></smallexample>

<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2634" incode="1">Wno-pmf-conversions</indexterm></indexcommand>
<para>You must specify <option>-Wno-pmf-conversions</option> to use this extension.
</para>
</section>
<node name="C_002b_002b-Attributes" spaces=" "><nodename>C++ Attributes</nodename><nodenext automatic="on">Function Multiversioning</nodenext><nodeprev automatic="on">Bound member functions</nodeprev><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>C++-Specific Variable, Function, and Type Attributes</sectiontitle>

<para>Some attributes only make sense for C++ programs.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">abi_tag (&quot;<var>tag</var>&quot;, ...)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="934"><code>abi_tag</code> function attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="935"><code>abi_tag</code> variable attribute</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="936"><code>abi_tag</code> type attribute</indexterm></cindex>
<para>The <code>abi_tag</code> attribute can be applied to a function, variable, or class
declaration.  It modifies the mangled name of the entity to
incorporate the tag name, in order to distinguish the function or
class from an earlier version with a different ABI; perhaps the class
has changed size, or the function has a different return type that is
not encoded in the mangled name.
</para>
<para>The attribute can also be applied to an inline namespace, but does not
affect the mangled name of the namespace; in this case it is only used
for <option>-Wabi-tag</option> warnings and automatic tagging of functions and
variables.  Tagging inline namespaces is generally preferable to
tagging individual declarations, but the latter is sometimes
necessary, such as when only certain members of a class need to be
tagged.
</para>
<para>The argument can be a list of strings of arbitrary length.  The
strings are sorted on output, so the order of the list is
unimportant.
</para>
<para>A redeclaration of an entity must not add new ABI tags,
since doing so would change the mangled name.
</para>
<para>The ABI tags apply to a name, so all instantiations and
specializations of a template have the same tags.  The attribute will
be ignored if applied to an explicit specialization or instantiation.
</para>
<para>The <option>-Wabi-tag</option> flag enables a warning about a class which does
not have all the ABI tags used by its subobjects and virtual functions; for users with code
that needs to coexist with an earlier ABI, using this option can help
to find all affected types that need to be tagged.
</para>
<para>When a type involving an ABI tag is used as the type of a variable or
return type of a function where that tag is not already present in the
signature of the function, the tag is automatically applied to the
variable or function.  <option>-Wabi-tag</option> also warns about this
situation; this warning can be avoided by explicitly tagging the
variable or function or moving it into a tagged inline namespace.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">init_priority (<var>priority</var>)</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="937"><code>init_priority</code> variable attribute</indexterm></cindex>

<para>In Standard C++, objects defined at namespace scope are guaranteed to be
initialized in an order in strict accordance with that of their definitions
<emph>in a given translation unit</emph>.  No guarantee is made for initializations
across translation units.  However, GNU C++ allows users to control the
order of initialization of objects defined at namespace scope with the
<code>init_priority</code> attribute by specifying a relative <var>priority</var>,
a constant integral expression currently bounded between 101 and 65535
inclusive.  Lower numbers indicate a higher priority.
</para>
<para>In the following example, <code>A</code> would normally be created before
<code>B</code>, but the <code>init_priority</code> attribute reverses that order:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">Some_Class  A  __attribute__ ((init_priority (2000)));
Some_Class  B  __attribute__ ((init_priority (543)));
</pre></smallexample>

<noindent></noindent>
<para>Note that the particular values of <var>priority</var> do not matter; only their
relative ordering.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">java_interface</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="938"><code>java_interface</code> type attribute</indexterm></cindex>

<para>This type attribute informs C++ that the class is a Java interface.  It may
only be applied to classes declared within an <code>extern &quot;Java&quot;</code> block.
Calls to methods declared in this interface are dispatched using GCJ&textrsquo;s
interface table mechanism, instead of regular virtual table dispatch.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">warn_unused</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp" number="939"><code>warn_unused</code> type attribute</indexterm></cindex>

<para>For C++ types with non-trivial constructors and/or destructors it is
impossible for the compiler to determine whether a variable of this
type is truly unused if it is not referenced. This type attribute
informs the compiler that variables of this type should be warned
about if they appear to be unused, just like variables of fundamental
types.
</para>
<para>This attribute is appropriate for types which just represent a value,
such as <code>std::string</code>; it is not appropriate for types which
control a resource, such as <code>std::mutex</code>.
</para>
<para>This attribute is also accepted in C, but it is unnecessary because C
does not have constructors or destructors.
</para>
</tableitem></tableentry></table>

<para>See also <ref label="Namespace-Association"><xrefnodename>Namespace Association</xrefnodename></ref>.
</para>
</section>
<node name="Function-Multiversioning" spaces=" "><nodename>Function Multiversioning</nodename><nodenext automatic="on">Namespace Association</nodenext><nodeprev automatic="on">C++ Attributes</nodeprev><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Function Multiversioning</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="940">function versions</indexterm></cindex>

<para>With the GNU C++ front end, for x86 targets, you may specify multiple
versions of a function, where each function is specialized for a
specific target feature.  At runtime, the appropriate version of the
function is automatically executed depending on the characteristics of
the execution platform.  Here is an example.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">__attribute__ ((target (&quot;default&quot;)))
int foo ()
&lbrace;
  // The default version of foo.
  return 0;
&rbrace;

__attribute__ ((target (&quot;sse4.2&quot;)))
int foo ()
&lbrace;
  // foo version for SSE4.2
  return 1;
&rbrace;

__attribute__ ((target (&quot;arch=atom&quot;)))
int foo ()
&lbrace;
  // foo version for the Intel ATOM processor
  return 2;
&rbrace;

__attribute__ ((target (&quot;arch=amdfam10&quot;)))
int foo ()
&lbrace;
  // foo version for the AMD Family 0x10 processors.
  return 3;
&rbrace;

int main ()
&lbrace;
  int (*p)() = &amp;foo;
  assert ((*p) () == foo ());
  return 0;
&rbrace;
</pre></smallexample>

<para>In the above example, four versions of function foo are created. The
first version of foo with the target attribute &quot;default&quot; is the default
version.  This version gets executed when no other target specific
version qualifies for execution on a particular platform. A new version
of foo is created by using the same function signature but with a
different target string.  Function foo is called or a pointer to it is
taken just like a regular function.  GCC takes care of doing the
dispatching to call the right version at runtime.  Refer to the
<uref><urefurl>http://gcc.gnu.org/wiki/FunctionMultiVersioning</urefurl><urefdesc spaces=" ">GCC wiki on
Function Multiversioning</urefdesc></uref> for more details.
</para>
</section>
<node name="Namespace-Association" spaces=" "><nodename>Namespace Association</nodename><nodenext automatic="on">Type Traits</nodenext><nodeprev automatic="on">Function Multiversioning</nodeprev><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Namespace Association</sectiontitle>

<para><strong>Caution:</strong> The semantics of this extension are equivalent
to C++ 2011 inline namespaces.  Users should use inline namespaces
instead as this extension will be removed in future versions of G++.
</para>
<para>A using-directive with <code>__attribute ((strong))</code> is stronger
than a normal using-directive in two ways:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Templates from the used namespace can be specialized and explicitly
instantiated as though they were members of the using namespace.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The using namespace is considered an associated namespace of all
templates in the used namespace for purposes of argument-dependent
name lookup.
</para></listitem></itemize>

<para>The used namespace must be nested within the using namespace so that
normal unqualified lookup works properly.
</para>
<para>This is useful for composing a namespace transparently from
implementation namespaces.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">namespace std &lbrace;
  namespace debug &lbrace;
    template &lt;class T&gt; struct A &lbrace; &rbrace;;
  &rbrace;
  using namespace debug __attribute ((__strong__));
  template &lt;&gt; struct A&lt;int&gt; &lbrace; &rbrace;;   // <r>OK to specialize</r>

  template &lt;class T&gt; void f (A&lt;T&gt;);
&rbrace;

int main()
&lbrace;
  f (std::A&lt;float&gt;());             // <r>lookup finds</r> std::f
  f (std::A&lt;int&gt;());
&rbrace;
</pre></smallexample>

</section>
<node name="Type-Traits" spaces=" "><nodename>Type Traits</nodename><nodenext automatic="on">Java Exceptions</nodenext><nodeprev automatic="on">Namespace Association</nodeprev><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Type Traits</sectiontitle>

<para>The C++ front end implements syntactic extensions that allow
compile-time determination of 
various characteristics of a type (or of a
pair of types).
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">__has_nothrow_assign (type)</itemformat></item>
</tableterm><tableitem><para>If <code>type</code> is const qualified or is a reference type then the trait is
false.  Otherwise if <code>__has_trivial_assign (type)</code> is true then the trait
is true, else if <code>type</code> is a cv class or union type with copy assignment
operators that are known not to throw an exception then the trait is true,
else it is false.  Requires: <code>type</code> shall be a complete type,
(possibly cv-qualified) <code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__has_nothrow_copy (type)</itemformat></item>
</tableterm><tableitem><para>If <code>__has_trivial_copy (type)</code> is true then the trait is true, else if
<code>type</code> is a cv class or union type with copy constructors that
are known not to throw an exception then the trait is true, else it is false.
Requires: <code>type</code> shall be a complete type, (possibly cv-qualified)
<code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__has_nothrow_constructor (type)</itemformat></item>
</tableterm><tableitem><para>If <code>__has_trivial_constructor (type)</code> is true then the trait is
true, else if <code>type</code> is a cv class or union type (or array
thereof) with a default constructor that is known not to throw an
exception then the trait is true, else it is false.  Requires:
<code>type</code> shall be a complete type, (possibly cv-qualified)
<code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__has_trivial_assign (type)</itemformat></item>
</tableterm><tableitem><para>If <code>type</code> is const qualified or is a reference type then the trait is
false.  Otherwise if <code>__is_pod (type)</code> is true then the trait is
true, else if <code>type</code> is a cv class or union type with a trivial
copy assignment ([class.copy]) then the trait is true, else it is
false.  Requires: <code>type</code> shall be a complete type, (possibly
cv-qualified) <code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__has_trivial_copy (type)</itemformat></item>
</tableterm><tableitem><para>If <code>__is_pod (type)</code> is true or <code>type</code> is a reference type
then the trait is true, else if <code>type</code> is a cv class or union type
with a trivial copy constructor ([class.copy]) then the trait
is true, else it is false.  Requires: <code>type</code> shall be a complete
type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__has_trivial_constructor (type)</itemformat></item>
</tableterm><tableitem><para>If <code>__is_pod (type)</code> is true then the trait is true, else if
<code>type</code> is a cv class or union type (or array thereof) with a
trivial default constructor ([class.ctor]) then the trait is true,
else it is false.  Requires: <code>type</code> shall be a complete
type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__has_trivial_destructor (type)</itemformat></item>
</tableterm><tableitem><para>If <code>__is_pod (type)</code> is true or <code>type</code> is a reference type then
the trait is true, else if <code>type</code> is a cv class or union type (or
array thereof) with a trivial destructor ([class.dtor]) then the trait
is true, else it is false.  Requires: <code>type</code> shall be a complete
type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__has_virtual_destructor (type)</itemformat></item>
</tableterm><tableitem><para>If <code>type</code> is a class type with a virtual destructor
([class.dtor]) then the trait is true, else it is false.  Requires:
<code>type</code> shall be a complete type, (possibly cv-qualified)
<code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__is_abstract (type)</itemformat></item>
</tableterm><tableitem><para>If <code>type</code> is an abstract class ([class.abstract]) then the trait
is true, else it is false.  Requires: <code>type</code> shall be a complete
type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__is_base_of (base_type, derived_type)</itemformat></item>
</tableterm><tableitem><para>If <code>base_type</code> is a base class of <code>derived_type</code>
([class.derived]) then the trait is true, otherwise it is false.
Top-level cv qualifications of <code>base_type</code> and
<code>derived_type</code> are ignored.  For the purposes of this trait, a
class type is considered is own base.  Requires: if <code>__is_class
(base_type)</code> and <code>__is_class (derived_type)</code> are true and
<code>base_type</code> and <code>derived_type</code> are not the same type
(disregarding cv-qualifiers), <code>derived_type</code> shall be a complete
type.  Diagnostic is produced if this requirement is not met.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__is_class (type)</itemformat></item>
</tableterm><tableitem><para>If <code>type</code> is a cv class type, and not a union type
([basic.compound]) the trait is true, else it is false.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__is_empty (type)</itemformat></item>
</tableterm><tableitem><para>If <code>__is_class (type)</code> is false then the trait is false.
Otherwise <code>type</code> is considered empty if and only if: <code>type</code>
has no non-static data members, or all non-static data members, if
any, are bit-fields of length 0, and <code>type</code> has no virtual
members, and <code>type</code> has no virtual base classes, and <code>type</code>
has no base classes <code>base_type</code> for which
<code>__is_empty (base_type)</code> is false.  Requires: <code>type</code> shall
be a complete type, (possibly cv-qualified) <code>void</code>, or an array
of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__is_enum (type)</itemformat></item>
</tableterm><tableitem><para>If <code>type</code> is a cv enumeration type ([basic.compound]) the trait is
true, else it is false.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__is_literal_type (type)</itemformat></item>
</tableterm><tableitem><para>If <code>type</code> is a literal type ([basic.types]) the trait is
true, else it is false.  Requires: <code>type</code> shall be a complete type,
(possibly cv-qualified) <code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__is_pod (type)</itemformat></item>
</tableterm><tableitem><para>If <code>type</code> is a cv POD type ([basic.types]) then the trait is true,
else it is false.  Requires: <code>type</code> shall be a complete type,
(possibly cv-qualified) <code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__is_polymorphic (type)</itemformat></item>
</tableterm><tableitem><para>If <code>type</code> is a polymorphic class ([class.virtual]) then the trait
is true, else it is false.  Requires: <code>type</code> shall be a complete
type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__is_standard_layout (type)</itemformat></item>
</tableterm><tableitem><para>If <code>type</code> is a standard-layout type ([basic.types]) the trait is
true, else it is false.  Requires: <code>type</code> shall be a complete
type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__is_trivial (type)</itemformat></item>
</tableterm><tableitem><para>If <code>type</code> is a trivial type ([basic.types]) the trait is
true, else it is false.  Requires: <code>type</code> shall be a complete
type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__is_union (type)</itemformat></item>
</tableterm><tableitem><para>If <code>type</code> is a cv union type ([basic.compound]) the trait is
true, else it is false.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">__underlying_type (type)</itemformat></item>
</tableterm><tableitem><para>The underlying type of <code>type</code>.  Requires: <code>type</code> shall be
an enumeration type ([dcl.enum]).
</para>
</tableitem></tableentry></table>

</section>
<node name="Java-Exceptions" spaces=" "><nodename>Java Exceptions</nodename><nodenext automatic="on">Deprecated Features</nodenext><nodeprev automatic="on">Type Traits</nodeprev><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Java Exceptions</sectiontitle>

<para>The Java language uses a slightly different exception handling model
from C++.  Normally, GNU C++ automatically detects when you are
writing C++ code that uses Java exceptions, and handle them
appropriately.  However, if C++ code only needs to execute destructors
when Java exceptions are thrown through it, GCC guesses incorrectly.
Sample problematic code is:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  struct S &lbrace; ~S(); &rbrace;;
  extern void bar();    // <r>is written in Java, and may throw exceptions</r>
  void foo()
  &lbrace;
    S s;
    bar();
  &rbrace;
</pre></smallexample>

<noindent></noindent>
<para>The usual effect of an incorrect guess is a link failure, complaining of
a missing routine called <samp>__gxx_personality_v0</samp>.
</para>
<para>You can inform the compiler that Java exceptions are to be used in a
translation unit, irrespective of what it might think, by writing
<samp><w>#pragma GCC java_exceptions</w></samp> at the head of the file.  This
<samp>#pragma</samp> must appear before any functions that throw or catch
exceptions, or run destructors when exceptions are thrown through them.
</para>
<para>You cannot mix Java and C++ exceptions in the same translation unit.  It
is believed to be safe to throw a C++ exception from one file through
another file compiled for the Java exception model, or vice versa, but
there may be bugs in this area.
</para>
</section>
<node name="Deprecated-Features" spaces=" "><nodename>Deprecated Features</nodename><nodenext automatic="on">Backwards Compatibility</nodenext><nodeprev automatic="on">Java Exceptions</nodeprev><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Deprecated Features</sectiontitle>

<para>In the past, the GNU C++ compiler was extended to experiment with new
features, at a time when the C++ language was still evolving.  Now that
the C++ standard is complete, some of those features are superseded by
superior alternatives.  Using the old features might cause a warning in
some cases that the feature will be dropped in the future.  In other
cases, the feature might be gone already.
</para>
<para>While the list below is not exhaustive, it documents some of the options
that are now deprecated:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-fexternal-templates</itemformat></item>
<itemx spaces=" "><itemformat command="code">-falt-external-templates</itemformat></itemx>
</tableterm><tableitem><para>These are two of the many ways for G++ to implement template
instantiation.  <xref label="Template-Instantiation"><xrefnodename>Template Instantiation</xrefnodename></xref>.  The C++ standard clearly
defines how template definitions have to be organized across
implementation units.  G++ has an implicit instantiation mechanism that
should work just fine for standard-conforming code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-fstrict-prototype</itemformat></item>
<itemx spaces=" "><itemformat command="code">-fno-strict-prototype</itemformat></itemx>
</tableterm><tableitem><para>Previously it was possible to use an empty prototype parameter list to
indicate an unspecified number of parameters (like C), rather than no
parameters, as C++ demands.  This feature has been removed, except where
it is required for backwards compatibility.   <xref label="Backwards-Compatibility"><xrefnodename>Backwards Compatibility</xrefnodename></xref>.
</para></tableitem></tableentry></table>

<para>G++ allows a virtual function returning <samp>void *</samp> to be overridden
by one returning a different pointer type.  This extension to the
covariant return type rules is now deprecated and will be removed from a
future version.
</para>
<para>The G++ minimum and maximum operators (<samp>&lt;?</samp> and <samp>&gt;?</samp>) and
their compound forms (<samp>&lt;?=</samp>) and <samp>&gt;?=</samp>) have been deprecated
and are now removed from G++.  Code using these operators should be
modified to use <code>std::min</code> and <code>std::max</code> instead.
</para>
<para>The named return value extension has been deprecated, and is now
removed from G++.
</para>
<para>The use of initializer lists with new expressions has been deprecated,
and is now removed from G++.
</para>
<para>Floating and complex non-type template parameters have been deprecated,
and are now removed from G++.
</para>
<para>The implicit typename extension has been deprecated and is now
removed from G++.
</para>
<para>The use of default arguments in function pointers, function typedefs
and other places where they are not permitted by the standard is
deprecated and will be removed from a future version of G++.
</para>
<para>G++ allows floating-point literals to appear in integral constant expressions,
e.g.&noeos; <samp> enum E &lbrace; e = int(2.2 * 3.7) &rbrace; </samp>
This extension is deprecated and will be removed from a future version.
</para>
<para>G++ allows static data members of const floating-point type to be declared
with an initializer in a class definition. The standard only allows
initializers for static members of const integral types and const
enumeration types so this extension has been deprecated and will be removed
from a future version.
</para>
</section>
<node name="Backwards-Compatibility" spaces=" "><nodename>Backwards Compatibility</nodename><nodeprev automatic="on">Deprecated Features</nodeprev><nodeup automatic="on">C++ Extensions</nodeup></node>
<section spaces=" "><sectiontitle>Backwards Compatibility</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="941">Backwards Compatibility</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="942">ARM [Annotated C++ Reference Manual]</indexterm></cindex>

<para>Now that there is a definitive ISO standard C++, G++ has a specification
to adhere to.  The C++ language evolved over time, and features that
used to be acceptable in previous drafts of the standard, such as the ARM
[Annotated C++ Reference Manual], are no longer accepted.  In order to allow
compilation of C++ written to such drafts, G++ contains some backwards
compatibilities.  <emph>All such backwards compatibility features are
liable to disappear in future versions of G++.</emph> They should be considered
deprecated.   <xref label="Deprecated-Features"><xrefnodename>Deprecated Features</xrefnodename></xref>.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">For scope</itemformat></item>
</tableterm><tableitem><para>If a variable is declared at for scope, it used to remain in scope until
the end of the scope that contained the for statement (rather than just
within the for scope).  G++ retains this, but issues a warning, if such a
variable is accessed outside the for scope.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">Implicit C language</itemformat></item>
</tableterm><tableitem><para>Old C system header files did not contain an <code>extern &quot;C&quot; &lbrace;&dots;&rbrace;</code>
scope to set the language.  On such systems, all header files are
implicitly scoped inside a C language scope.  Also, an empty prototype
<code>()</code> is treated as an unspecified number of arguments, rather
than no arguments, as C++ demands.
</para></tableitem></tableentry></table>

<!-- c  LocalWords:  emph deftypefn builtin ARCv2EM SIMD builtins msimd -->
<!-- c  LocalWords:  typedef v4si v8hi DMA dma vdiwr vdowr -->
<!-- c Copyright (C) 1988-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->

</section>
</chapter>
<node name="Objective_002dC" spaces=" "><nodename>Objective-C</nodename><nodenext automatic="on">Compatibility</nodenext><nodeprev automatic="on">C++ Extensions</nodeprev><nodeup automatic="on">Top</nodeup></node>
<!-- comment  node-name,  next,  previous,  up -->

<chapter spaces=" "><sectiontitle>GNU Objective-C Features</sectiontitle>

<para>This document is meant to describe some of the GNU Objective-C
features.  It is not intended to teach you Objective-C.  There are
several resources on the Internet that present the language.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">GNU Objective-C runtime API</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Executing code before main</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Type encoding</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Garbage Collection</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Constant string objects</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">compatibility_alias</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Exceptions</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Synchronization</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Fast enumeration</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Messaging with the GNU Objective-C runtime</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<!-- c ========================================================================= -->
<node name="GNU-Objective_002dC-runtime-API" spaces=" "><nodename>GNU Objective-C runtime API</nodename><nodenext automatic="on">Executing code before main</nodenext><nodeup automatic="on">Objective-C</nodeup></node>
<section spaces=" "><sectiontitle>GNU Objective-C Runtime API</sectiontitle>

<para>This section is specific for the GNU Objective-C runtime.  If you are
using a different runtime, you can skip it.
</para>
<para>The GNU Objective-C runtime provides an API that allows you to
interact with the Objective-C runtime system, querying the live
runtime structures and even manipulating them.  This allows you for
example to inspect and navigate classes, methods and protocols; to
define new classes or new methods, and even to modify existing classes
or protocols.
</para>
<para>If you are using a &textldquo;Foundation&textrdquo; library such as GNUstep-Base, this
library will provide you with a rich set of functionality to do most
of the inspection tasks, and you probably will only need direct access
to the GNU Objective-C runtime API to define new classes or methods.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Modern GNU Objective-C runtime API</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Traditional GNU Objective-C runtime API</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<!-- c ========================================================================= -->
<node name="Modern-GNU-Objective_002dC-runtime-API" spaces=" "><nodename>Modern GNU Objective-C runtime API</nodename><nodenext automatic="on">Traditional GNU Objective-C runtime API</nodenext><nodeup automatic="on">GNU Objective-C runtime API</nodeup></node>
<subsection spaces=" "><sectiontitle>Modern GNU Objective-C Runtime API</sectiontitle>

<para>The GNU Objective-C runtime provides an API which is similar to the
one provided by the &textldquo;Objective-C 2.0&textrdquo; Apple/NeXT Objective-C
runtime.  The API is documented in the public header files of the GNU
Objective-C runtime:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para><file>objc/objc.h</file>: this is the basic Objective-C header file,
defining the basic Objective-C types such as <code>id</code>, <code>Class</code>
and <code>BOOL</code>.  You have to include this header to do almost
anything with Objective-C.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><file>objc/runtime.h</file>: this header declares most of the public runtime
API functions allowing you to inspect and manipulate the Objective-C
runtime data structures.  These functions are fairly standardized
across Objective-C runtimes and are almost identical to the Apple/NeXT
Objective-C runtime ones.  It does not declare functions in some
specialized areas (constructing and forwarding message invocations,
threading) which are in the other headers below.  You have to include
<file>objc/objc.h</file> and <file>objc/runtime.h</file> to use any of the
functions, such as <code>class_getName()</code>, declared in
<file>objc/runtime.h</file>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><file>objc/message.h</file>: this header declares public functions used to
construct, deconstruct and forward message invocations.  Because
messaging is done in quite a different way on different runtimes,
functions in this header are specific to the GNU Objective-C runtime
implementation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><file>objc/objc-exception.h</file>: this header declares some public
functions related to Objective-C exceptions.  For example functions in
this header allow you to throw an Objective-C exception from plain
C/C++ code.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><file>objc/objc-sync.h</file>: this header declares some public functions
related to the Objective-C <code>&arobase;synchronized()</code> syntax, allowing
you to emulate an Objective-C <code>&arobase;synchronized()</code> block in plain
C/C++ code.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><file>objc/thr.h</file>: this header declares a public runtime API threading
layer that is only provided by the GNU Objective-C runtime.  It
declares functions such as <code>objc_mutex_lock()</code>, which provide a
platform-independent set of threading functions.
</para>
</listitem></itemize>

<para>The header files contain detailed documentation for each function in
the GNU Objective-C runtime API.
</para>
<!-- c ========================================================================= -->
</subsection>
<node name="Traditional-GNU-Objective_002dC-runtime-API" spaces=" "><nodename>Traditional GNU Objective-C runtime API</nodename><nodeprev automatic="on">Modern GNU Objective-C runtime API</nodeprev><nodeup automatic="on">GNU Objective-C runtime API</nodeup></node>
<subsection spaces=" "><sectiontitle>Traditional GNU Objective-C Runtime API</sectiontitle>

<para>The GNU Objective-C runtime used to provide a different API, which we
call the &textldquo;traditional&textrdquo; GNU Objective-C runtime API.  Functions
belonging to this API are easy to recognize because they use a
different naming convention, such as <code>class_get_super_class()</code>
(traditional API) instead of <code>class_getSuperclass()</code> (modern
API).  Software using this API includes the file
<file>objc/objc-api.h</file> where it is declared.
</para>
<para>Starting with GCC 4.7.0, the traditional GNU runtime API is no longer
available.
</para>
<!-- c ========================================================================= -->
</subsection>
</section>
<node name="Executing-code-before-main" spaces=" "><nodename>Executing code before main</nodename><nodenext automatic="on">Type encoding</nodenext><nodeprev automatic="on">GNU Objective-C runtime API</nodeprev><nodeup automatic="on">Objective-C</nodeup></node>
<section spaces=" "><sectiontitle><code>+load</code>: Executing Code before <code>main</code></sectiontitle>

<para>This section is specific for the GNU Objective-C runtime.  If you are
using a different runtime, you can skip it.
</para>
<para>The GNU Objective-C runtime provides a way that allows you to execute
code before the execution of the program enters the <code>main</code>
function.  The code is executed on a per-class and a per-category basis,
through a special class method <code>+load</code>.
</para>
<para>This facility is very useful if you want to initialize global variables
which can be accessed by the program directly, without sending a message
to the class first.  The usual way to initialize global variables, in the
<code>+initialize</code> method, might not be useful because
<code>+initialize</code> is only called when the first message is sent to a
class object, which in some cases could be too late.
</para>
<para>Suppose for example you have a <code>FileStream</code> class that declares
<code>Stdin</code>, <code>Stdout</code> and <code>Stderr</code> as global variables, like
below:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">
FileStream *Stdin = nil;
FileStream *Stdout = nil;
FileStream *Stderr = nil;

&arobase;implementation FileStream

+ (void)initialize
&lbrace;
    Stdin = [[FileStream new] initWithFd:0];
    Stdout = [[FileStream new] initWithFd:1];
    Stderr = [[FileStream new] initWithFd:2];
&rbrace;

/* <r>Other methods here</r> */
&arobase;end

</pre></smallexample>

<para>In this example, the initialization of <code>Stdin</code>, <code>Stdout</code> and
<code>Stderr</code> in <code>+initialize</code> occurs too late.  The programmer can
send a message to one of these objects before the variables are actually
initialized, thus sending messages to the <code>nil</code> object.  The
<code>+initialize</code> method which actually initializes the global
variables is not invoked until the first message is sent to the class
object.  The solution would require these variables to be initialized
just before entering <code>main</code>.
</para>
<para>The correct solution of the above problem is to use the <code>+load</code>
method instead of <code>+initialize</code>:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">
&arobase;implementation FileStream

+ (void)load
&lbrace;
    Stdin = [[FileStream new] initWithFd:0];
    Stdout = [[FileStream new] initWithFd:1];
    Stderr = [[FileStream new] initWithFd:2];
&rbrace;

/* <r>Other methods here</r> */
&arobase;end

</pre></smallexample>

<para>The <code>+load</code> is a method that is not overridden by categories.  If a
class and a category of it both implement <code>+load</code>, both methods are
invoked.  This allows some additional initializations to be performed in
a category.
</para>
<para>This mechanism is not intended to be a replacement for <code>+initialize</code>.
You should be aware of its limitations when you decide to use it
instead of <code>+initialize</code>.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">What you can and what you cannot do in +load</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>


<node name="What-you-can-and-what-you-cannot-do-in-_002bload" spaces=" "><nodename>What you can and what you cannot do in +load</nodename><nodeup automatic="on">Executing code before main</nodeup></node>
<subsection spaces=" "><sectiontitle>What You Can and Cannot Do in <code>+load</code></sectiontitle>

<para><code>+load</code> is to be used only as a last resort.  Because it is
executed very early, most of the Objective-C runtime machinery will
not be ready when <code>+load</code> is executed; hence <code>+load</code> works
best for executing C code that is independent on the Objective-C
runtime.
</para>
<para>The <code>+load</code> implementation in the GNU runtime guarantees you the
following things:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>you can write whatever C code you like;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>you can allocate and send messages to objects whose class is implemented
in the same file;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>the <code>+load</code> implementation of all super classes of a class are
executed before the <code>+load</code> of that class is executed;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>the <code>+load</code> implementation of a class is executed before the
<code>+load</code> implementation of any category.
</para>
</listitem></itemize>

<para>In particular, the following things, even if they can work in a
particular case, are not guaranteed:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>allocation of or sending messages to arbitrary objects;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>allocation of or sending messages to objects whose classes have a
category implemented in the same file;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>sending messages to Objective-C constant strings (<code>&arobase;&quot;this is a
constant string&quot;</code>);
</para>
</listitem></itemize>

<para>You should make no assumptions about receiving <code>+load</code> in sibling
classes when you write <code>+load</code> of a class.  The order in which
sibling classes receive <code>+load</code> is not guaranteed.
</para>
<para>The order in which <code>+load</code> and <code>+initialize</code> are called could
be problematic if this matters.  If you don&textrsquo;t allocate objects inside
<code>+load</code>, it is guaranteed that <code>+load</code> is called before
<code>+initialize</code>.  If you create an object inside <code>+load</code> the
<code>+initialize</code> method of object&textrsquo;s class is invoked even if
<code>+load</code> was not invoked.  Note if you explicitly call <code>+load</code>
on a class, <code>+initialize</code> will be called first.  To avoid possible
problems try to implement only one of these methods.
</para>
<para>The <code>+load</code> method is also invoked when a bundle is dynamically
loaded into your running program.  This happens automatically without any
intervening operation from you.  When you write bundles and you need to
write <code>+load</code> you can safely create and send messages to objects whose
classes already exist in the running program.  The same restrictions as
above apply to classes defined in bundle.
</para>


</subsection>
</section>
<node name="Type-encoding" spaces=" "><nodename>Type encoding</nodename><nodenext automatic="on">Garbage Collection</nodenext><nodeprev automatic="on">Executing code before main</nodeprev><nodeup automatic="on">Objective-C</nodeup></node>
<section spaces=" "><sectiontitle>Type Encoding</sectiontitle>

<para>This is an advanced section.  Type encodings are used extensively by
the compiler and by the runtime, but you generally do not need to know
about them to use Objective-C.
</para>
<para>The Objective-C compiler generates type encodings for all the types.
These type encodings are used at runtime to find out information about
selectors and methods and about objects and classes.
</para>
<para>The types are encoded in the following way:
</para>
<!-- c @sp 1 -->

<multitable spaces=" " endspaces=" "><columnfractions line=" .25 .75"><columnfraction value=".25"></columnfraction><columnfraction value=".75"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para><code>_Bool</code>
</para></entry><entry command="tab" spaces=" "><para><code>B</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>char</code>
</para></entry><entry command="tab" spaces=" "><para><code>c</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>unsigned char</code>
</para></entry><entry command="tab" spaces=" "><para><code>C</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>short</code>
</para></entry><entry command="tab" spaces=" "><para><code>s</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>unsigned short</code>
</para></entry><entry command="tab" spaces=" "><para><code>S</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>int</code>
</para></entry><entry command="tab" spaces=" "><para><code>i</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>unsigned int</code>
</para></entry><entry command="tab" spaces=" "><para><code>I</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>long</code>
</para></entry><entry command="tab" spaces=" "><para><code>l</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>unsigned long</code>
</para></entry><entry command="tab" spaces=" "><para><code>L</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>long long</code>
</para></entry><entry command="tab" spaces=" "><para><code>q</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>unsigned long long</code>
</para></entry><entry command="tab" spaces=" "><para><code>Q</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>float</code>
</para></entry><entry command="tab" spaces=" "><para><code>f</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>double</code>
</para></entry><entry command="tab" spaces=" "><para><code>d</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>long double</code>
</para></entry><entry command="tab" spaces=" "><para><code>D</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>void</code>
</para></entry><entry command="tab" spaces=" "><para><code>v</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>id</code>
</para></entry><entry command="tab" spaces=" "><para><code>&arobase;</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>Class</code>
</para></entry><entry command="tab" spaces=" "><para><code>#</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>SEL</code>
</para></entry><entry command="tab" spaces=" "><para><code>:</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>char*</code>
</para></entry><entry command="tab" spaces=" "><para><code>*</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>enum</code>
</para></entry><entry command="tab" spaces=" "><para>an <code>enum</code> is encoded exactly as the integer type that the compiler uses for it, which depends on the enumeration
values.  Often the compiler users <code>unsigned int</code>, which is then encoded as <code>I</code>.
</para></entry></row><row><entry command="item" spaces=" "><para>unknown type
</para></entry><entry command="tab" spaces=" "><para><code>?</code>
</para></entry></row><row><entry command="item" spaces=" "><para>Complex types
</para></entry><entry command="tab" spaces=" "><para><code>j</code> followed by the inner type.  For example <code>_Complex double</code> is encoded as &quot;jd&quot;.
</para></entry></row><row><entry command="item" spaces=" "><para>bit-fields
</para></entry><entry command="tab" spaces=" "><para><code>b</code> followed by the starting position of the bit-field, the type of the bit-field and the size of the bit-field (the bit-fields encoding was changed from the NeXT&textrsquo;s compiler encoding, see below)
</para></entry></row></tbody></multitable>

<!-- c @sp 1 -->

<para>The encoding of bit-fields has changed to allow bit-fields to be
properly handled by the runtime functions that compute sizes and
alignments of types that contain bit-fields.  The previous encoding
contained only the size of the bit-field.  Using only this information
it is not possible to reliably compute the size occupied by the
bit-field.  This is very important in the presence of the Boehm&textrsquo;s
garbage collector because the objects are allocated using the typed
memory facility available in this collector.  The typed memory
allocation requires information about where the pointers are located
inside the object.
</para>
<para>The position in the bit-field is the position, counting in bits, of the
bit closest to the beginning of the structure.
</para>
<para>The non-atomic types are encoded as follows:
</para>
<!-- c @sp 1 -->

<multitable spaces=" " endspaces=" "><columnfractions line=" .2 .8"><columnfraction value=".2"></columnfraction><columnfraction value=".8"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para>pointers
</para></entry><entry command="tab" spaces=" "><para><samp>^</samp> followed by the pointed type.
</para></entry></row><row><entry command="item" spaces=" "><para>arrays
</para></entry><entry command="tab" spaces=" "><para><samp>[</samp> followed by the number of elements in the array followed by the type of the elements followed by <samp>]</samp>
</para></entry></row><row><entry command="item" spaces=" "><para>structures
</para></entry><entry command="tab" spaces=" "><para><samp>&lbrace;</samp> followed by the name of the structure (or <samp>?</samp> if the structure is unnamed), the <samp>=</samp> sign, the type of the members and by <samp>&rbrace;</samp>
</para></entry></row><row><entry command="item" spaces=" "><para>unions
</para></entry><entry command="tab" spaces=" "><para><samp>(</samp> followed by the name of the structure (or <samp>?</samp> if the union is unnamed), the <samp>=</samp> sign, the type of the members followed by <samp>)</samp>
</para></entry></row><row><entry command="item" spaces=" "><para>vectors
</para></entry><entry command="tab" spaces=" "><para><samp>![</samp> followed by the vector_size (the number of bytes composing the vector) followed by a comma, followed by the alignment (in bytes) of the vector, followed by the type of the elements followed by <samp>]</samp>
</para></entry></row></tbody></multitable>

<para>Here are some types and their encodings, as they are generated by the
compiler on an i386 machine:
</para>
<sp value="1" line=" 1"></sp>

<multitable spaces=" " endspaces=" "><columnfractions line=" .25 .75"><columnfraction value=".25"></columnfraction><columnfraction value=".75"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para>Objective-C type
</para></entry><entry command="tab" spaces=" "><para>Compiler encoding
</para></entry></row><row><entry command="item">
<smallexample endspaces=" ">
<pre xml:space="preserve">int a[10];
</pre></smallexample>
</entry><entry command="tab" spaces=" "><para><code>[10i]</code>
</para></entry></row><row><entry command="item">
<smallexample endspaces=" ">
<pre xml:space="preserve">struct &lbrace;
  int i;
  float f[3];
  int a:3;
  int b:2;
  char c;
&rbrace;
</pre></smallexample>
</entry><entry command="tab" spaces=" "><para><code>&lbrace;?=i[3f]b128i3b131i2c&rbrace;</code>
</para></entry></row><row><entry command="item">
<smallexample endspaces=" ">
<pre xml:space="preserve">int a __attribute__ ((vector_size (16)));
</pre></smallexample>
</entry><entry command="tab" spaces=" "><para><code>![16,16i]</code> (alignment would depend on the machine)
</para></entry></row></tbody></multitable>

<sp value="1" line=" 1"></sp>

<para>In addition to the types the compiler also encodes the type
specifiers.  The table below describes the encoding of the current
Objective-C type specifiers:
</para>
<sp value="1" line=" 1"></sp>

<multitable spaces=" " endspaces=" "><columnfractions line=" .25 .75"><columnfraction value=".25"></columnfraction><columnfraction value=".75"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para>Specifier
</para></entry><entry command="tab" spaces=" "><para>Encoding
</para></entry></row><row><entry command="item" spaces=" "><para><code>const</code>
</para></entry><entry command="tab" spaces=" "><para><code>r</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>in</code>
</para></entry><entry command="tab" spaces=" "><para><code>n</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>inout</code>
</para></entry><entry command="tab" spaces=" "><para><code>N</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>out</code>
</para></entry><entry command="tab" spaces=" "><para><code>o</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>bycopy</code>
</para></entry><entry command="tab" spaces=" "><para><code>O</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>byref</code>
</para></entry><entry command="tab" spaces=" "><para><code>R</code>
</para></entry></row><row><entry command="item" spaces=" "><para><code>oneway</code>
</para></entry><entry command="tab" spaces=" "><para><code>V</code>
</para></entry></row></tbody></multitable>

<sp value="1" line=" 1"></sp>

<para>The type specifiers are encoded just before the type.  Unlike types
however, the type specifiers are only encoded when they appear in method
argument types.
</para>
<para>Note how <code>const</code> interacts with pointers:
</para>
<sp value="1" line=" 1"></sp>

<multitable spaces=" " endspaces=" "><columnfractions line=" .25 .75"><columnfraction value=".25"></columnfraction><columnfraction value=".75"></columnfraction></columnfractions>
<tbody><row><entry command="item" spaces=" "><para>Objective-C type
</para></entry><entry command="tab" spaces=" "><para>Compiler encoding
</para></entry></row><row><entry command="item">
<smallexample endspaces=" ">
<pre xml:space="preserve">const int
</pre></smallexample>
</entry><entry command="tab" spaces=" "><para><code>ri</code>
</para></entry></row><row><entry command="item">
<smallexample endspaces=" ">
<pre xml:space="preserve">const int*
</pre></smallexample>
</entry><entry command="tab" spaces=" "><para><code>^ri</code>
</para></entry></row><row><entry command="item">
<smallexample endspaces=" ">
<pre xml:space="preserve">int *const
</pre></smallexample>
</entry><entry command="tab" spaces=" "><para><code>r^i</code>
</para></entry></row></tbody></multitable>

<sp value="1" line=" 1"></sp>

<para><code>const int*</code> is a pointer to a <code>const int</code>, and so is
encoded as <code>^ri</code>.  <code>int* const</code>, instead, is a <code>const</code>
pointer to an <code>int</code>, and so is encoded as <code>r^i</code>.
</para>
<para>Finally, there is a complication when encoding <code>const char *</code>
versus <code>char * const</code>.  Because <code>char *</code> is encoded as
<code>*</code> and not as <code>^c</code>, there is no way to express the fact
that <code>r</code> applies to the pointer or to the pointee.
</para>
<para>Hence, it is assumed as a convention that <code>r*</code> means <code>const
char *</code> (since it is what is most often meant), and there is no way to
encode <code>char *const</code>.  <code>char *const</code> would simply be encoded
as <code>*</code>, and the <code>const</code> is lost.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Legacy type encoding</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">&arobase;encode</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Method signatures</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<node name="Legacy-type-encoding" spaces=" "><nodename>Legacy type encoding</nodename><nodenext automatic="on">&arobase;encode</nodenext><nodeup automatic="on">Type encoding</nodeup></node>
<subsection spaces=" "><sectiontitle>Legacy Type Encoding</sectiontitle>

<para>Unfortunately, historically GCC used to have a number of bugs in its
encoding code.  The NeXT runtime expects GCC to emit type encodings in
this historical format (compatible with GCC-3.3), so when using the
NeXT runtime, GCC will introduce on purpose a number of incorrect
encodings:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>the read-only qualifier of the pointee gets emitted before the &textrsquo;^&textrsquo;.
The read-only qualifier of the pointer itself gets ignored, unless it
is a typedef.  Also, the &textrsquo;r&textrsquo; is only emitted for the outermost type.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>32-bit longs are encoded as &textrsquo;l&textrsquo; or &textrsquo;L&textrsquo;, but not always.  For typedefs,
the compiler uses &textrsquo;i&textrsquo; or &textrsquo;I&textrsquo; instead if encoding a struct field or a
pointer.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><code>enum</code>s are always encoded as &textrsquo;i&textrsquo; (int) even if they are actually
unsigned or long.
</para>
</listitem></itemize>

<para>In addition to that, the NeXT runtime uses a different encoding for
bitfields.  It encodes them as <code>b</code> followed by the size, without
a bit offset or the underlying field type.
</para>
</subsection>
<node name="_0040encode" spaces=" "><nodename>&arobase;encode</nodename><nodenext automatic="on">Method signatures</nodenext><nodeprev automatic="on">Legacy type encoding</nodeprev><nodeup automatic="on">Type encoding</nodeup></node>
<subsection spaces=" "><sectiontitle><code>&arobase;encode</code></sectiontitle>

<para>GNU Objective-C supports the <code>&arobase;encode</code> syntax that allows you to
create a type encoding from a C/Objective-C type.  For example,
<code>&arobase;encode(int)</code> is compiled by the compiler into <code>&quot;i&quot;</code>.
</para>
<para><code>&arobase;encode</code> does not support type qualifiers other than
<code>const</code>.  For example, <code>&arobase;encode(const char*)</code> is valid and
is compiled into <code>&quot;r*&quot;</code>, while <code>&arobase;encode(bycopy char *)</code> is
invalid and will cause a compilation error.
</para>
</subsection>
<node name="Method-signatures" spaces=" "><nodename>Method signatures</nodename><nodeprev automatic="on">&arobase;encode</nodeprev><nodeup automatic="on">Type encoding</nodeup></node>
<subsection spaces=" "><sectiontitle>Method Signatures</sectiontitle>

<para>This section documents the encoding of method types, which is rarely
needed to use Objective-C.  You should skip it at a first reading; the
runtime provides functions that will work on methods and can walk
through the list of parameters and interpret them for you.  These
functions are part of the public &textldquo;API&textrdquo; and are the preferred way to
interact with method signatures from user code.
</para>
<para>But if you need to debug a problem with method signatures and need to
know how they are implemented (i.e., the &textldquo;ABI&textrdquo;), read on.
</para>
<para>Methods have their &textldquo;signature&textrdquo; encoded and made available to the
runtime.  The &textldquo;signature&textrdquo; encodes all the information required to
dynamically build invocations of the method at runtime: return type
and arguments.
</para>
<para>The &textldquo;signature&textrdquo; is a null-terminated string, composed of the following:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>The return type, including type qualifiers.  For example, a method
returning <code>int</code> would have <code>i</code> here.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The total size (in bytes) required to pass all the parameters.  This
includes the two hidden parameters (the object <code>self</code> and the
method selector <code>_cmd</code>).
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Each argument, with the type encoding, followed by the offset (in
bytes) of the argument in the list of parameters.
</para>
</listitem></itemize>

<para>For example, a method with no arguments and returning <code>int</code> would
have the signature <code>i8&arobase;0:4</code> if the size of a pointer is 4.  The
signature is interpreted as follows: the <code>i</code> is the return type
(an <code>int</code>), the <code>8</code> is the total size of the parameters in
bytes (two pointers each of size 4), the <code>&arobase;0</code> is the first
parameter (an object at byte offset <code>0</code>) and <code>:4</code> is the
second parameter (a <code>SEL</code> at byte offset <code>4</code>).
</para>
<para>You can easily find more examples by running the &textldquo;strings&textrdquo; program
on an Objective-C object file compiled by GCC.  You&textrsquo;ll see a lot of
strings that look very much like <code>i8&arobase;0:4</code>.  They are signatures
of Objective-C methods.
</para>

</subsection>
</section>
<node name="Garbage-Collection" spaces=" "><nodename>Garbage Collection</nodename><nodenext automatic="on">Constant string objects</nodenext><nodeprev automatic="on">Type encoding</nodeprev><nodeup automatic="on">Objective-C</nodeup></node>
<section spaces=" "><sectiontitle>Garbage Collection</sectiontitle>

<para>This section is specific for the GNU Objective-C runtime.  If you are
using a different runtime, you can skip it.
</para>
<para>Support for garbage collection with the GNU runtime has been added by
using a powerful conservative garbage collector, known as the
Boehm-Demers-Weiser conservative garbage collector.
</para>
<para>To enable the support for it you have to configure the compiler using
an additional argument, <w><option>--enable-objc-gc</option></w>.  This will
build the boehm-gc library, and build an additional runtime library
which has several enhancements to support the garbage collector.  The
new library has a new name, <file>libobjc_gc.a</file> to not conflict with
the non-garbage-collected library.
</para>
<para>When the garbage collector is used, the objects are allocated using the
so-called typed memory allocation mechanism available in the
Boehm-Demers-Weiser collector.  This mode requires precise information on
where pointers are located inside objects.  This information is computed
once per class, immediately after the class has been initialized.
</para>
<para>There is a new runtime function <code>class_ivar_set_gcinvisible()</code>
which can be used to declare a so-called <dfn>weak pointer</dfn>
reference.  Such a pointer is basically hidden for the garbage collector;
this can be useful in certain situations, especially when you want to
keep track of the allocated objects, yet allow them to be
collected.  This kind of pointers can only be members of objects, you
cannot declare a global pointer as a weak reference.  Every type which is
a pointer type can be declared a weak pointer, including <code>id</code>,
<code>Class</code> and <code>SEL</code>.
</para>
<para>Here is an example of how to use this feature.  Suppose you want to
implement a class whose instances hold a weak pointer reference; the
following class does this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">
&arobase;interface WeakPointer : Object
&lbrace;
    const void* weakPointer;
&rbrace;

- initWithPointer:(const void*)p;
- (const void*)weakPointer;
&arobase;end


&arobase;implementation WeakPointer

+ (void)initialize
&lbrace;
  if (self == objc_lookUpClass (&quot;WeakPointer&quot;))
    class_ivar_set_gcinvisible (self, &quot;weakPointer&quot;, YES);
&rbrace;

- initWithPointer:(const void*)p
&lbrace;
  weakPointer = p;
  return self;
&rbrace;

- (const void*)weakPointer
&lbrace;
  return weakPointer;
&rbrace;

&arobase;end

</pre></smallexample>

<para>Weak pointers are supported through a new type character specifier
represented by the <samp>!</samp> character.  The
<code>class_ivar_set_gcinvisible()</code> function adds or removes this
specifier to the string type description of the instance variable named
as argument.
</para>
<!-- c ========================================================================= -->
</section>
<node name="Constant-string-objects" spaces=" "><nodename>Constant string objects</nodename><nodenext automatic="on">compatibility_alias</nodenext><nodeprev automatic="on">Garbage Collection</nodeprev><nodeup automatic="on">Objective-C</nodeup></node>
<section spaces=" "><sectiontitle>Constant String Objects</sectiontitle>

<para>GNU Objective-C provides constant string objects that are generated
directly by the compiler.  You declare a constant string object by
prefixing a C constant string with the character <samp>&arobase;</samp>:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  id myString = &arobase;&quot;this is a constant string object&quot;;
</pre></smallexample>

<para>The constant string objects are by default instances of the
<code>NXConstantString</code> class which is provided by the GNU Objective-C
runtime.  To get the definition of this class you must include the
<file>objc/NXConstStr.h</file> header file.
</para>
<para>User defined libraries may want to implement their own constant string
class.  To be able to support them, the GNU Objective-C compiler provides
a new command line options <option>-fconstant-string-class=<var>class-name</var></option>.
The provided class should adhere to a strict structure, the same
as <code>NXConstantString</code>&textrsquo;s structure:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">
&arobase;interface MyConstantStringClass
&lbrace;
  Class isa;
  char *c_string;
  unsigned int len;
&rbrace;
&arobase;end

</pre></smallexample>

<para><code>NXConstantString</code> inherits from <code>Object</code>; user class
libraries may choose to inherit the customized constant string class
from a different class than <code>Object</code>.  There is no requirement in
the methods the constant string class has to implement, but the final
ivar layout of the class must be the compatible with the given
structure.
</para>
<para>When the compiler creates the statically allocated constant string
object, the <code>c_string</code> field will be filled by the compiler with
the string; the <code>length</code> field will be filled by the compiler with
the string length; the <code>isa</code> pointer will be filled with
<code>NULL</code> by the compiler, and it will later be fixed up automatically
at runtime by the GNU Objective-C runtime library to point to the class
which was set by the <option>-fconstant-string-class</option> option when the
object file is loaded (if you wonder how it works behind the scenes, the
name of the class to use, and the list of static objects to fixup, are
stored by the compiler in the object file in a place where the GNU
runtime library will find them at runtime).
</para>
<para>As a result, when a file is compiled with the
<option>-fconstant-string-class</option> option, all the constant string objects
will be instances of the class specified as argument to this option.  It
is possible to have multiple compilation units referring to different
constant string classes, neither the compiler nor the linker impose any
restrictions in doing this.
</para>
<!-- c ========================================================================= -->
</section>
<node name="compatibility_005falias" spaces=" "><nodename>compatibility_alias</nodename><nodenext automatic="on">Exceptions</nodenext><nodeprev automatic="on">Constant string objects</nodeprev><nodeup automatic="on">Objective-C</nodeup></node>
<section spaces=" "><sectiontitle><code>compatibility_alias</code></sectiontitle>

<para>The keyword <code>&arobase;compatibility_alias</code> allows you to define a class name
as equivalent to another class name.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">&arobase;compatibility_alias WOApplication GSWApplication;
</pre></smallexample>

<para>tells the compiler that each time it encounters <code>WOApplication</code> as
a class name, it should replace it with <code>GSWApplication</code> (that is,
<code>WOApplication</code> is just an alias for <code>GSWApplication</code>).
</para>
<para>There are some constraints on how this can be used&textmdash;
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>WOApplication</code> (the alias) must not be an existing class;
</para>
</listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>GSWApplication</code> (the real class) must be an existing class.
</para>
</listitem></itemize>

<!-- c ========================================================================= -->
</section>
<node name="Exceptions" spaces=" "><nodename>Exceptions</nodename><nodenext automatic="on">Synchronization</nodenext><nodeprev automatic="on">compatibility_alias</nodeprev><nodeup automatic="on">Objective-C</nodeup></node>
<section spaces=" "><sectiontitle>Exceptions</sectiontitle>

<para>GNU Objective-C provides exception support built into the language, as
in the following example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  &arobase;try &lbrace;
    &dots;
       &arobase;throw expr;
    &dots;
  &rbrace;
  &arobase;catch (AnObjCClass *exc) &lbrace;
    &dots;
      &arobase;throw expr;
    &dots;
      &arobase;throw;
    &dots;
  &rbrace;
  &arobase;catch (AnotherClass *exc) &lbrace;
    &dots;
  &rbrace;
  &arobase;catch (id allOthers) &lbrace;
    &dots;
  &rbrace;
  &arobase;finally &lbrace;
    &dots;
      &arobase;throw expr;
    &dots;
  &rbrace;
</pre></smallexample>

<para>The <code>&arobase;throw</code> statement may appear anywhere in an Objective-C or
Objective-C++ program; when used inside of a <code>&arobase;catch</code> block, the
<code>&arobase;throw</code> may appear without an argument (as shown above), in
which case the object caught by the <code>&arobase;catch</code> will be rethrown.
</para>
<para>Note that only (pointers to) Objective-C objects may be thrown and
caught using this scheme.  When an object is thrown, it will be caught
by the nearest <code>&arobase;catch</code> clause capable of handling objects of
that type, analogously to how <code>catch</code> blocks work in C++ and
Java.  A <code>&arobase;catch(id &dots;)</code> clause (as shown above) may also
be provided to catch any and all Objective-C exceptions not caught by
previous <code>&arobase;catch</code> clauses (if any).
</para>
<para>The <code>&arobase;finally</code> clause, if present, will be executed upon exit
from the immediately preceding <code>&arobase;try &dots; &arobase;catch</code> section.
This will happen regardless of whether any exceptions are thrown,
caught or rethrown inside the <code>&arobase;try &dots; &arobase;catch</code> section,
analogously to the behavior of the <code>finally</code> clause in Java.
</para>
<para>There are several caveats to using the new exception mechanism:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>The <option>-fobjc-exceptions</option> command line option must be used when
compiling Objective-C files that use exceptions.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>With the GNU runtime, exceptions are always implemented as &textldquo;native&textrdquo;
exceptions and it is recommended that the <option>-fexceptions</option> and
<option>-shared-libgcc</option> options are used when linking.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>With the NeXT runtime, although currently designed to be binary
compatible with <code>NS_HANDLER</code>-style idioms provided by the
<code>NSException</code> class, the new exceptions can only be used on Mac
OS X 10.3 (Panther) and later systems, due to additional functionality
needed in the NeXT Objective-C runtime.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>As mentioned above, the new exceptions do not support handling
types other than Objective-C objects.   Furthermore, when used from
Objective-C++, the Objective-C exception model does not interoperate with C++
exceptions at this time.  This means you cannot <code>&arobase;throw</code> an exception
from Objective-C and <code>catch</code> it in C++, or vice versa
(i.e., <code>throw &dots; &arobase;catch</code>).
</para></listitem></itemize>

<!-- c ========================================================================= -->
</section>
<node name="Synchronization" spaces=" "><nodename>Synchronization</nodename><nodenext automatic="on">Fast enumeration</nodenext><nodeprev automatic="on">Exceptions</nodeprev><nodeup automatic="on">Objective-C</nodeup></node>
<section spaces=" "><sectiontitle>Synchronization</sectiontitle>

<para>GNU Objective-C provides support for synchronized blocks:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  &arobase;synchronized (ObjCClass *guard) &lbrace;
    &dots;
  &rbrace;
</pre></smallexample>

<para>Upon entering the <code>&arobase;synchronized</code> block, a thread of execution
shall first check whether a lock has been placed on the corresponding
<code>guard</code> object by another thread.  If it has, the current thread
shall wait until the other thread relinquishes its lock.  Once
<code>guard</code> becomes available, the current thread will place its own
lock on it, execute the code contained in the <code>&arobase;synchronized</code>
block, and finally relinquish the lock (thereby making <code>guard</code>
available to other threads).
</para>
<para>Unlike Java, Objective-C does not allow for entire methods to be
marked <code>&arobase;synchronized</code>.  Note that throwing exceptions out of
<code>&arobase;synchronized</code> blocks is allowed, and will cause the guarding
object to be unlocked properly.
</para>
<para>Because of the interactions between synchronization and exception
handling, you can only use <code>&arobase;synchronized</code> when compiling with
exceptions enabled, that is with the command line option
<option>-fobjc-exceptions</option>.
</para>

<!-- c ========================================================================= -->
</section>
<node name="Fast-enumeration" spaces=" "><nodename>Fast enumeration</nodename><nodenext automatic="on">Messaging with the GNU Objective-C runtime</nodenext><nodeprev automatic="on">Synchronization</nodeprev><nodeup automatic="on">Objective-C</nodeup></node>
<section spaces=" "><sectiontitle>Fast Enumeration</sectiontitle>

<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Using fast enumeration</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">c99-like fast enumeration syntax</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Fast enumeration details</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Fast enumeration protocol</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<!-- c ================================ -->
<node name="Using-fast-enumeration" spaces=" "><nodename>Using fast enumeration</nodename><nodenext automatic="on">c99-like fast enumeration syntax</nodenext><nodeup automatic="on">Fast enumeration</nodeup></node>
<subsection spaces=" "><sectiontitle>Using Fast Enumeration</sectiontitle>

<para>GNU Objective-C provides support for the fast enumeration syntax:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  id array = &dots;;
  id object;

  for (object in array)
  &lbrace;
    /* Do something with 'object' */
  &rbrace;
</pre></smallexample>

<para><code>array</code> needs to be an Objective-C object (usually a collection
object, for example an array, a dictionary or a set) which implements
the &textldquo;Fast Enumeration Protocol&textrdquo; (see below).  If you are using a
Foundation library such as GNUstep Base or Apple Cocoa Foundation, all
collection objects in the library implement this protocol and can be
used in this way.
</para>
<para>The code above would iterate over all objects in <code>array</code>.  For
each of them, it assigns it to <code>object</code>, then executes the
<code>Do something with 'object'</code> statements.
</para>
<para>Here is a fully worked-out example using a Foundation library (which
provides the implementation of <code>NSArray</code>, <code>NSString</code> and
<code>NSLog</code>):
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  NSArray *array = [NSArray arrayWithObjects: &arobase;&quot;1&quot;, &arobase;&quot;2&quot;, &arobase;&quot;3&quot;, nil];
  NSString *object;

  for (object in array)
    NSLog (&arobase;&quot;Iterating over %&arobase;&quot;, object);
</pre></smallexample>


<!-- c ================================ -->
</subsection>
<node name="c99_002dlike-fast-enumeration-syntax" spaces=" "><nodename>c99-like fast enumeration syntax</nodename><nodenext automatic="on">Fast enumeration details</nodenext><nodeprev automatic="on">Using fast enumeration</nodeprev><nodeup automatic="on">Fast enumeration</nodeup></node>
<subsection spaces=" "><sectiontitle>C99-Like Fast Enumeration Syntax</sectiontitle>

<para>A c99-like declaration syntax is also allowed:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  id array = &dots;;

  for (id object in array)
  &lbrace;
    /* Do something with 'object'  */
  &rbrace;
</pre></smallexample>

<para>this is completely equivalent to:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  id array = &dots;;

  &lbrace;
    id object;
    for (object in array)
    &lbrace;
      /* Do something with 'object'  */
    &rbrace;
  &rbrace;
</pre></smallexample>

<para>but can save some typing.
</para>
<para>Note that the option <option>-std=c99</option> is not required to allow this
syntax in Objective-C.
</para>
<!-- c ================================ -->
</subsection>
<node name="Fast-enumeration-details" spaces=" "><nodename>Fast enumeration details</nodename><nodenext automatic="on">Fast enumeration protocol</nodenext><nodeprev automatic="on">c99-like fast enumeration syntax</nodeprev><nodeup automatic="on">Fast enumeration</nodeup></node>
<subsection spaces=" "><sectiontitle>Fast Enumeration Details</sectiontitle>

<para>Here is a more technical description with the gory details.  Consider the code
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  for (<var>object expression</var> in <var>collection expression</var>)
  &lbrace;
    <var>statements</var>
  &rbrace;
</pre></smallexample>

<para>here is what happens when you run it:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para><code><var>collection expression</var></code> is evaluated exactly once and the
result is used as the collection object to iterate over.  This means
it is safe to write code such as <code>for (object in [NSDictionary
keyEnumerator]) &dots;</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>the iteration is implemented by the compiler by repeatedly getting
batches of objects from the collection object using the fast
enumeration protocol (see below), then iterating over all objects in
the batch.  This is faster than a normal enumeration where objects are
retrieved one by one (hence the name &textldquo;fast enumeration&textrdquo;).
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>if there are no objects in the collection, then
<code><var>object expression</var></code> is set to <code>nil</code> and the loop
immediately terminates.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>if there are objects in the collection, then for each object in the
collection (in the order they are returned) <code><var>object expression</var></code>
is set to the object, then <code><var>statements</var></code> are executed.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><code><var>statements</var></code> can contain <code>break</code> and <code>continue</code>
commands, which will abort the iteration or skip to the next loop
iteration as expected.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>when the iteration ends because there are no more objects to iterate
over, <code><var>object expression</var></code> is set to <code>nil</code>.  This allows
you to determine whether the iteration finished because a <code>break</code>
command was used (in which case <code><var>object expression</var></code> will remain
set to the last object that was iterated over) or because it iterated
over all the objects (in which case <code><var>object expression</var></code> will be
set to <code>nil</code>).
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><code><var>statements</var></code> must not make any changes to the collection
object; if they do, it is a hard error and the fast enumeration
terminates by invoking <code>objc_enumerationMutation</code>, a runtime
function that normally aborts the program but which can be customized
by Foundation libraries via <code>objc_set_mutation_handler</code> to do
something different, such as raising an exception.
</para>
</listitem></itemize>

<!-- c ================================ -->
</subsection>
<node name="Fast-enumeration-protocol" spaces=" "><nodename>Fast enumeration protocol</nodename><nodeprev automatic="on">Fast enumeration details</nodeprev><nodeup automatic="on">Fast enumeration</nodeup></node>
<subsection spaces=" "><sectiontitle>Fast Enumeration Protocol</sectiontitle>

<para>If you want your own collection object to be usable with fast
enumeration, you need to have it implement the method
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">- (unsigned long) countByEnumeratingWithState: (NSFastEnumerationState *)state
                                      objects: (id *)objects
                                        count: (unsigned long)len;
</pre></smallexample>

<para>where <code>NSFastEnumerationState</code> must be defined in your code as follows:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef struct
&lbrace;
  unsigned long state;
  id            *itemsPtr;
  unsigned long *mutationsPtr;
  unsigned long extra[5];
&rbrace; NSFastEnumerationState;
</pre></smallexample>

<para>If no <code>NSFastEnumerationState</code> is defined in your code, the
compiler will automatically replace <code>NSFastEnumerationState *</code>
with <code>struct __objcFastEnumerationState *</code>, where that type is
silently defined by the compiler in an identical way.  This can be
confusing and we recommend that you define
<code>NSFastEnumerationState</code> (as shown above) instead.
</para>
<para>The method is called repeatedly during a fast enumeration to retrieve
batches of objects.  Each invocation of the method should retrieve the
next batch of objects.
</para>
<para>The return value of the method is the number of objects in the current
batch; this should not exceed <code>len</code>, which is the maximum size of
a batch as requested by the caller.  The batch itself is returned in
the <code>itemsPtr</code> field of the <code>NSFastEnumerationState</code> struct.
</para>
<para>To help with returning the objects, the <code>objects</code> array is a C
array preallocated by the caller (on the stack) of size <code>len</code>.
In many cases you can put the objects you want to return in that
<code>objects</code> array, then do <code>itemsPtr = objects</code>.  But you
don&textrsquo;t have to; if your collection already has the objects to return in
some form of C array, it could return them from there instead.
</para>
<para>The <code>state</code> and <code>extra</code> fields of the
<code>NSFastEnumerationState</code> structure allows your collection object
to keep track of the state of the enumeration.  In a simple array
implementation, <code>state</code> may keep track of the index of the last
object that was returned, and <code>extra</code> may be unused.
</para>
<para>The <code>mutationsPtr</code> field of the <code>NSFastEnumerationState</code> is
used to keep track of mutations.  It should point to a number; before
working on each object, the fast enumeration loop will check that this
number has not changed.  If it has, a mutation has happened and the
fast enumeration will abort.  So, <code>mutationsPtr</code> could be set to
point to some sort of version number of your collection, which is
increased by one every time there is a change (for example when an
object is added or removed).  Or, if you are content with less strict
mutation checks, it could point to the number of objects in your
collection or some other value that can be checked to perform an
approximate check that the collection has not been mutated.
</para>
<para>Finally, note how we declared the <code>len</code> argument and the return
value to be of type <code>unsigned long</code>.  They could also be declared
to be of type <code>unsigned int</code> and everything would still work.
</para>
<!-- c ========================================================================= -->
</subsection>
</section>
<node name="Messaging-with-the-GNU-Objective_002dC-runtime" spaces=" "><nodename>Messaging with the GNU Objective-C runtime</nodename><nodeprev automatic="on">Fast enumeration</nodeprev><nodeup automatic="on">Objective-C</nodeup></node>
<section spaces=" "><sectiontitle>Messaging with the GNU Objective-C Runtime</sectiontitle>

<para>This section is specific for the GNU Objective-C runtime.  If you are
using a different runtime, you can skip it.
</para>
<para>The implementation of messaging in the GNU Objective-C runtime is
designed to be portable, and so is based on standard C.
</para>
<para>Sending a message in the GNU Objective-C runtime is composed of two
separate steps.  First, there is a call to the lookup function,
<code>objc_msg_lookup ()</code> (or, in the case of messages to super,
<code>objc_msg_lookup_super ()</code>).  This runtime function takes as
argument the receiver and the selector of the method to be called; it
returns the <code>IMP</code>, that is a pointer to the function implementing
the method.  The second step of method invocation consists of casting
this pointer function to the appropriate function pointer type, and
calling the function pointed to it with the right arguments.
</para>
<para>For example, when the compiler encounters a method invocation such as
<code>[object init]</code>, it compiles it into a call to
<code>objc_msg_lookup (object, &arobase;selector(init))</code> followed by a cast
of the returned value to the appropriate function pointer type, and
then it calls it.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Dynamically registering methods</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Forwarding hook</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

<!-- c ========================================================================= -->
<node name="Dynamically-registering-methods" spaces=" "><nodename>Dynamically registering methods</nodename><nodenext automatic="on">Forwarding hook</nodenext><nodeup automatic="on">Messaging with the GNU Objective-C runtime</nodeup></node>
<subsection spaces=" "><sectiontitle>Dynamically Registering Methods</sectiontitle>

<para>If <code>objc_msg_lookup()</code> does not find a suitable method
implementation, because the receiver does not implement the required
method, it tries to see if the class can dynamically register the
method.
</para>
<para>To do so, the runtime checks if the class of the receiver implements
the method
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">+ (BOOL) resolveInstanceMethod: (SEL)selector;
</pre></smallexample>

<para>in the case of an instance method, or
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">+ (BOOL) resolveClassMethod: (SEL)selector;
</pre></smallexample>

<para>in the case of a class method.  If the class implements it, the
runtime invokes it, passing as argument the selector of the original
method, and if it returns <code>YES</code>, the runtime tries the lookup
again, which could now succeed if a matching method was added
dynamically by <code>+resolveInstanceMethod:</code> or
<code>+resolveClassMethod:</code>.
</para>
<para>This allows classes to dynamically register methods (by adding them to
the class using <code>class_addMethod</code>) when they are first called.
To do so, a class should implement <code>+resolveInstanceMethod:</code> (or,
depending on the case, <code>+resolveClassMethod:</code>) and have it
recognize the selectors of methods that can be registered dynamically
at runtime, register them, and return <code>YES</code>.  It should return
<code>NO</code> for methods that it does not dynamically registered at
runtime.
</para>
<para>If <code>+resolveInstanceMethod:</code> (or <code>+resolveClassMethod:</code>) is
not implemented or returns <code>NO</code>, the runtime then tries the
forwarding hook.
</para>
<para>Support for <code>+resolveInstanceMethod:</code> and
<code>resolveClassMethod:</code> was added to the GNU Objective-C runtime in
GCC version 4.6.
</para>
<!-- c ========================================================================= -->
</subsection>
<node name="Forwarding-hook" spaces=" "><nodename>Forwarding hook</nodename><nodeprev automatic="on">Dynamically registering methods</nodeprev><nodeup automatic="on">Messaging with the GNU Objective-C runtime</nodeup></node>
<subsection spaces=" "><sectiontitle>Forwarding Hook</sectiontitle>

<para>The GNU Objective-C runtime provides a hook, called
<code>__objc_msg_forward2</code>, which is called by
<code>objc_msg_lookup()</code> when it can&textrsquo;t find a method implementation in
the runtime tables and after calling <code>+resolveInstanceMethod:</code>
and <code>+resolveClassMethod:</code> has been attempted and did not succeed
in dynamically registering the method.
</para>
<para>To configure the hook, you set the global variable
<code>__objc_msg_forward2</code> to a function with the same argument and
return types of <code>objc_msg_lookup()</code>.  When
<code>objc_msg_lookup()</code> can not find a method implementation, it
invokes the hook function you provided to get a method implementation
to return.  So, in practice <code>__objc_msg_forward2</code> allows you to
extend <code>objc_msg_lookup()</code> by adding some custom code that is
called to do a further lookup when no standard method implementation
can be found using the normal lookup.
</para>
<para>This hook is generally reserved for &textldquo;Foundation&textrdquo; libraries such as
GNUstep Base, which use it to implement their high-level method
forwarding API, typically based around the <code>forwardInvocation:</code>
method.  So, unless you are implementing your own &textldquo;Foundation&textrdquo;
library, you should not set this hook.
</para>
<para>In a typical forwarding implementation, the <code>__objc_msg_forward2</code>
hook function determines the argument and return type of the method
that is being looked up, and then creates a function that takes these
arguments and has that return type, and returns it to the caller.
Creating this function is non-trivial and is typically performed using
a dedicated library such as <code>libffi</code>.
</para>
<para>The forwarding method implementation thus created is returned by
<code>objc_msg_lookup()</code> and is executed as if it was a normal method
implementation.  When the forwarding method implementation is called,
it is usually expected to pack all arguments into some sort of object
(typically, an <code>NSInvocation</code> in a &textldquo;Foundation&textrdquo; library), and
hand it over to the programmer (<code>forwardInvocation:</code>) who is then
allowed to manipulate the method invocation using a high-level API
provided by the &textldquo;Foundation&textrdquo; library.  For example, the programmer
may want to examine the method invocation arguments and name and
potentially change them before forwarding the method invocation to one
or more local objects (<code>performInvocation:</code>) or even to remote
objects (by using Distributed Objects or some other mechanism).  When
all this completes, the return value is passed back and must be
returned correctly to the original caller.
</para>
<para>Note that the GNU Objective-C runtime currently provides no support
for method forwarding or method invocations other than the
<code>__objc_msg_forward2</code> hook.
</para>
<para>If the forwarding hook does not exist or returns <code>NULL</code>, the
runtime currently attempts forwarding using an older, deprecated API,
and if that fails, it aborts the program.  In future versions of the
GNU Objective-C runtime, the runtime will immediately abort.
<!-- c Copyright (C) 2002-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->
</para>
</subsection>
</section>
</chapter>
<node name="Compatibility" spaces=" "><nodename>Compatibility</nodename><nodenext automatic="on">Gcov</nodenext><nodeprev automatic="on">Objective-C</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Binary Compatibility</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="943">binary compatibility</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="944">ABI</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="945">application binary interface</indexterm></cindex>

<para>Binary compatibility encompasses several related concepts:
</para>
<table commandarg="dfn" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="dfn">application binary interface (ABI)</itemformat></item>
</tableterm><tableitem><para>The set of runtime conventions followed by all of the tools that deal
with binary representations of a program, including compilers, assemblers,
linkers, and language runtime support.
Some ABIs are formal with a written specification, possibly designed
by multiple interested parties.  Others are simply the way things are
actually done by a particular set of tools.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="dfn">ABI conformance</itemformat></item>
</tableterm><tableitem><para>A compiler conforms to an ABI if it generates code that follows all of
the specifications enumerated by that ABI&eosperiod;
A library conforms to an ABI if it is implemented according to that ABI&eosperiod;
An application conforms to an ABI if it is built using tools that conform
to that ABI and does not contain source code that specifically changes
behavior specified by the ABI&eosperiod;
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="dfn">calling conventions</itemformat></item>
</tableterm><tableitem><para>Calling conventions are a subset of an ABI that specify of how arguments
are passed and function results are returned.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="dfn">interoperability</itemformat></item>
</tableterm><tableitem><para>Different sets of tools are interoperable if they generate files that
can be used in the same program.  The set of tools includes compilers,
assemblers, linkers, libraries, header files, startup files, and debuggers.
Binaries produced by different sets of tools are not interoperable unless
they implement the same ABI&eosperiod;  This applies to different versions of the
same tools as well as tools from different vendors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="dfn">intercallability</itemformat></item>
</tableterm><tableitem><para>Whether a function in a binary built by one set of tools can call a
function in a binary built by a different set of tools is a subset
of interoperability.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="dfn">implementation-defined features</itemformat></item>
</tableterm><tableitem><para>Language standards include lists of implementation-defined features whose
behavior can vary from one implementation to another.  Some of these
features are normally covered by a platform&textrsquo;s ABI and others are not.
The features that are not covered by an ABI generally affect how a
program behaves, but not intercallability.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="dfn">compatibility</itemformat></item>
</tableterm><tableitem><para>Conformance to the same ABI and the same behavior of implementation-defined
features are both relevant for compatibility.
</para></tableitem></tableentry></table>

<para>The application binary interface implemented by a C or C++ compiler
affects code generation and runtime support for:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>size and alignment of data types
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>layout of structured types
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>calling conventions
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>register usage conventions
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>interfaces for runtime arithmetic support
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>object file formats
</para></listitem></itemize>

<para>In addition, the application binary interface implemented by a C++ compiler
affects code generation and runtime support for:
</para><itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>name mangling
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>exception handling
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>invoking constructors and destructors
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>layout, alignment, and padding of classes
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>layout and alignment of virtual tables
</para></listitem></itemize>

<para>Some GCC compilation options cause the compiler to generate code that
does not conform to the platform&textrsquo;s default ABI&eosperiod;  Other options cause
different program behavior for implementation-defined features that are
not covered by an ABI&eosperiod;  These options are provided for consistency with
other compilers that do not follow the platform&textrsquo;s default ABI or the
usual behavior of implementation-defined features for the platform.
Be very careful about using such options.
</para>
<para>Most platforms have a well-defined ABI that covers C code, but ABIs
that cover C++ functionality are not yet common.
</para>
<para>Starting with GCC 3.2, GCC binary conventions for C++ are based on a
written, vendor-neutral C++ ABI that was designed to be specific to
64-bit Itanium but also includes generic specifications that apply to
any platform.
This C++ ABI is also implemented by other compiler vendors on some
platforms, notably GNU/Linux and BSD systems.
We have tried hard to provide a stable ABI that will be compatible with
future GCC releases, but it is possible that we will encounter problems
that make this difficult.  Such problems could include different
interpretations of the C++ ABI by different vendors, bugs in the ABI, or
bugs in the implementation of the ABI in different compilers.
GCC&textrsquo;s <option>-Wabi</option> switch warns when G++ generates code that is
probably not compatible with the C++ ABI&eosperiod;
</para>
<para>The C++ library used with a C++ compiler includes the Standard C++
Library, with functionality defined in the C++ Standard, plus language
runtime support.  The runtime support is included in a C++ ABI, but there
is no formal ABI for the Standard C++ Library.  Two implementations
of that library are interoperable if one follows the de-facto ABI of the
other and if they are both built with the same compiler, or with compilers
that conform to the same ABI for C++ compiler and runtime support.
</para>
<para>When G++ and another C++ compiler conform to the same C++ ABI, but the
implementations of the Standard C++ Library that they normally use do not
follow the same ABI for the Standard C++ Library, object files built with
those compilers can be used in the same program only if they use the same
C++ library.  This requires specifying the location of the C++ library
header files when invoking the compiler whose usual library is not being
used.  The location of GCC&textrsquo;s C++ header files depends on how the GCC
build was configured, but can be seen by using the G++ <option>-v</option> option.
With default configuration options for G++ 3.3 the compile line for a
different C++ compiler needs to include
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">    -I<var>gcc_install_directory</var>/include/c++/3.3
</pre></smallexample>

<para>Similarly, compiling code with G++ that must use a C++ library other
than the GNU C++ library requires specifying the location of the header
files for that other library.
</para>
<para>The most straightforward way to link a program to use a particular
C++ library is to use a C++ driver that specifies that C++ library by
default.  The <command>g++</command> driver, for example, tells the linker where
to find GCC&textrsquo;s C++ library (<file>libstdc++</file>) plus the other libraries
and startup files it needs, in the proper order.
</para>
<para>If a program must use a different C++ library and it&textrsquo;s not possible
to do the final link using a C++ driver that uses that library by default,
it is necessary to tell <command>g++</command> the location and name of that
library.  It might also be necessary to specify different startup files
and other runtime support libraries, and to suppress the use of GCC&textrsquo;s
support libraries with one or more of the options <option>-nostdlib</option>,
<option>-nostartfiles</option>, and <option>-nodefaultlibs</option>.
<!-- c Copyright (C) 1996-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->
</para>
<ignore>
@c man begin COPYRIGHT
Copyright @copyright{} 1996-2015 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the gfdl(7) man page.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
@c man end
@c Set file name and title for the man page.
@setfilename gcov
@settitle coverage testing tool
</ignore>

</chapter>
<node name="Gcov" spaces=" "><nodename>Gcov</nodename><nodenext automatic="on">Gcov-tool</nodenext><nodeprev automatic="on">Compatibility</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle><command>gcov</command>&textmdash;a Test Coverage Program</sectiontitle>

<para><command>gcov</command> is a tool you can use in conjunction with GCC to
test code coverage in your programs.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::                  ">Gcov Intro</menunode><menudescription><pre xml:space="preserve">Introduction to gcov.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">Invoking Gcov</menunode><menudescription><pre xml:space="preserve">How to use gcov.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">Gcov and Optimization</menunode><menudescription><pre xml:space="preserve">Using gcov with GCC optimization.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">Gcov Data Files</menunode><menudescription><pre xml:space="preserve">The files used by gcov.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">Cross-profiling</menunode><menudescription><pre xml:space="preserve">Data file relocation.
</pre></menudescription></menuentry></menu>

<node name="Gcov-Intro" spaces=" "><nodename>Gcov Intro</nodename><nodenext automatic="on">Invoking Gcov</nodenext><nodeup automatic="on">Gcov</nodeup></node>
<section spaces=" "><sectiontitle>Introduction to <command>gcov</command></sectiontitle>
<!-- c man begin DESCRIPTION -->

<para><command>gcov</command> is a test coverage program.  Use it in concert with GCC
to analyze your programs to help create more efficient, faster running
code and to discover untested parts of your program.  You can use
<command>gcov</command> as a profiling tool to help discover where your
optimization efforts will best affect your code.  You can also use
<command>gcov</command> along with the other profiling tool, <command>gprof</command>, to
assess which parts of your code use the greatest amount of computing
time.
</para>
<para>Profiling tools help you analyze your code&textrsquo;s performance.  Using a
profiler such as <command>gcov</command> or <command>gprof</command>, you can find out some
basic performance statistics, such as:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>how often each line of code executes
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>what lines of code are actually executed
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>how much computing time each section of code uses
</para></listitem></itemize>

<para>Once you know these things about how your code works when compiled, you
can look at each module to see which modules should be optimized.
<command>gcov</command> helps you determine where to work on optimization.
</para>
<para>Software developers also use coverage testing in concert with
testsuites, to make sure software is actually good enough for a release.
Testsuites can verify that a program works as expected; a coverage
program tests to see how much of the program is exercised by the
testsuite.  Developers can then determine what kinds of test cases need
to be added to the testsuites to create both better testing and a better
final product.
</para>
<para>You should compile your code without optimization if you plan to use
<command>gcov</command> because the optimization, by combining some lines of code
into one function, may not give you as much information as you need to
look for &textlsquo;hot spots&textrsquo; where the code is using a great deal of computer
time.  Likewise, because <command>gcov</command> accumulates statistics by line (at
the lowest resolution), it works best with a programming style that
places only one statement on each line.  If you use complicated macros
that expand to loops or to other control structures, the statistics are
less helpful&textmdash;they only report on the line where the macro call
appears.  If your complex macros behave like functions, you can replace
them with inline functions to solve this problem.
</para>
<para><command>gcov</command> creates a logfile called <file><var>sourcefile</var>.gcov</file> which
indicates how many times each line of a source file <file><var>sourcefile</var>.c</file>
has executed.  You can use these logfiles along with <command>gprof</command> to aid
in fine-tuning the performance of your programs.  <command>gprof</command> gives
timing information you can use along with the information you get from
<command>gcov</command>.
</para>
<para><command>gcov</command> works only on code compiled with GCC&eosperiod;  It is not
compatible with any other profiling or test coverage mechanism.
</para>
<!-- c man end -->

</section>
<node name="Invoking-Gcov" spaces=" "><nodename>Invoking Gcov</nodename><nodenext automatic="on">Gcov and Optimization</nodenext><nodeprev automatic="on">Gcov Intro</nodeprev><nodeup automatic="on">Gcov</nodeup></node>
<section spaces=" "><sectiontitle>Invoking <command>gcov</command></sectiontitle>

<smallexample endspaces=" ">
<pre xml:space="preserve">gcov <r>[</r><var>options</var><r>]</r> <var>files</var>
</pre></smallexample>

<para><command>gcov</command> accepts the following options:
</para>
<ignore>
@c man begin SYNOPSIS
gcov [@option{-v}|@option{--version}] [@option{-h}|@option{--help}]
     [@option{-a}|@option{--all-blocks}]
     [@option{-b}|@option{--branch-probabilities}]
     [@option{-c}|@option{--branch-counts}]
     [@option{-d}|@option{--display-progress}]
     [@option{-f}|@option{--function-summaries}]
     [@option{-i}|@option{--intermediate-format}]
     [@option{-l}|@option{--long-file-names}]
     [@option{-m}|@option{--demangled-names}]
     [@option{-n}|@option{--no-output}]
     [@option{-o}|@option{--object-directory} @var{directory|file}]
     [@option{-p}|@option{--preserve-paths}]
     [@option{-r}|@option{--relative-only}]
     [@option{-s}|@option{--source-prefix} @var{directory}]
     [@option{-u}|@option{--unconditional-branches}]
     @var{files}
@c man end
@c man begin SEEALSO
gpl(7), gfdl(7), fsf-funding(7), gcc(1) and the Info entry for @file{gcc}.
@c man end
</ignore>

<!-- c man begin OPTIONS -->
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-h</itemformat></item>
<itemx spaces=" "><itemformat command="code">--help</itemformat></itemx>
</tableterm><tableitem><para>Display help about using <command>gcov</command> (on the standard output), and
exit without doing any further processing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-v</itemformat></item>
<itemx spaces=" "><itemformat command="code">--version</itemformat></itemx>
</tableterm><tableitem><para>Display the <command>gcov</command> version number (on the standard output),
and exit without doing any further processing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-a</itemformat></item>
<itemx spaces=" "><itemformat command="code">--all-blocks</itemformat></itemx>
</tableterm><tableitem><para>Write individual execution counts for every basic block.  Normally gcov
outputs execution counts only for the main blocks of a line.  With this
option you can determine if blocks within a single line are not being
executed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-b</itemformat></item>
<itemx spaces=" "><itemformat command="code">--branch-probabilities</itemformat></itemx>
</tableterm><tableitem><para>Write branch frequencies to the output file, and write branch summary
info to the standard output.  This option allows you to see how often
each branch in your program was taken.  Unconditional branches will not
be shown, unless the <option>-u</option> option is given.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-c</itemformat></item>
<itemx spaces=" "><itemformat command="code">--branch-counts</itemformat></itemx>
</tableterm><tableitem><para>Write branch frequencies as the number of branches taken, rather than
the percentage of branches taken.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-n</itemformat></item>
<itemx spaces=" "><itemformat command="code">--no-output</itemformat></itemx>
</tableterm><tableitem><para>Do not create the <command>gcov</command> output file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-l</itemformat></item>
<itemx spaces=" "><itemformat command="code">--long-file-names</itemformat></itemx>
</tableterm><tableitem><para>Create long file names for included source files.  For example, if the
header file <file>x.h</file> contains code, and was included in the file
<file>a.c</file>, then running <command>gcov</command> on the file <file>a.c</file> will
produce an output file called <file>a.c##x.h.gcov</file> instead of
<file>x.h.gcov</file>.  This can be useful if <file>x.h</file> is included in
multiple source files and you want to see the individual
contributions.  If you use the <samp>-p</samp> option, both the including
and included file names will be complete path names.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-p</itemformat></item>
<itemx spaces=" "><itemformat command="code">--preserve-paths</itemformat></itemx>
</tableterm><tableitem><para>Preserve complete path information in the names of generated
<file>.gcov</file> files.  Without this option, just the filename component is
used.  With this option, all directories are used, with <samp>/</samp> characters
translated to <samp>#</samp> characters, <file>.</file> directory components
removed and unremoveable <file>..</file>
components renamed to <samp>^</samp>.  This is useful if sourcefiles are in several
different directories.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-r</itemformat></item>
<itemx spaces=" "><itemformat command="code">--relative-only</itemformat></itemx>
</tableterm><tableitem><para>Only output information about source files with a relative pathname
(after source prefix elision).  Absolute paths are usually system
header files and coverage of any inline functions therein is normally
uninteresting.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-f</itemformat></item>
<itemx spaces=" "><itemformat command="code">--function-summaries</itemformat></itemx>
</tableterm><tableitem><para>Output summaries for each function in addition to the file level summary.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-o <var>directory|file</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">--object-directory <var>directory</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="code">--object-file <var>file</var></itemformat></itemx>
</tableterm><tableitem><para>Specify either the directory containing the gcov data files, or the
object path name.  The <file>.gcno</file>, and
<file>.gcda</file> data files are searched for using this option.  If a directory
is specified, the data files are in that directory and named after the
input file name, without its extension.  If a file is specified here,
the data files are named after that file, without its extension.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-s <var>directory</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">--source-prefix <var>directory</var></itemformat></itemx>
</tableterm><tableitem><para>A prefix for source file names to remove when generating the output
coverage files.  This option is useful when building in a separate
directory, and the pathname to the source directory is not wanted when
determining the output file names.  Note that this prefix detection is
applied before determining whether the source file is absolute.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-u</itemformat></item>
<itemx spaces=" "><itemformat command="code">--unconditional-branches</itemformat></itemx>
</tableterm><tableitem><para>When branch probabilities are given, include those of unconditional branches.
Unconditional branches are normally not interesting.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-d</itemformat></item>
<itemx spaces=" "><itemformat command="code">--display-progress</itemformat></itemx>
</tableterm><tableitem><para>Display the progress on the standard output.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-i</itemformat></item>
<itemx spaces=" "><itemformat command="code">--intermediate-format</itemformat></itemx>
</tableterm><tableitem><para>Output gcov file in an easy-to-parse intermediate text format that can
be used by <command>lcov</command> or other tools. The output is a single
<file>.gcov</file> file per <file>.gcda</file> file. No source code is required.
</para>
<para>The format of the intermediate <file>.gcov</file> file is plain text with
one entry per line
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">file:<var>source_file_name</var>
function:<var>line_number</var>,<var>execution_count</var>,<var>function_name</var>
lcount:<var>line number</var>,<var>execution_count</var>
branch:<var>line_number</var>,<var>branch_coverage_type</var>

Where the <var>branch_coverage_type</var> is
   notexec (Branch not executed)
   taken (Branch executed and taken)
   nottaken (Branch executed, but not taken)

There can be multiple <var>file</var> entries in an intermediate gcov
file. All entries following a <var>file</var> pertain to that source file
until the next <var>file</var> entry.
</pre></smallexample>

<para>Here is a sample when <option>-i</option> is used in conjunction with <option>-b</option> option:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">file:array.cc
function:11,1,_Z3sumRKSt6vectorIPiSaIS0_EE
function:22,1,main
lcount:11,1
lcount:12,1
lcount:14,1
branch:14,taken
lcount:26,1
branch:28,nottaken
</pre></smallexample>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-m</itemformat></item>
<itemx spaces=" "><itemformat command="code">--demangled-names</itemformat></itemx>
</tableterm><tableitem><para>Display demangled function names in output. The default is to show
mangled function names.
</para>
</tableitem></tableentry></table>

<para><command>gcov</command> should be run with the current directory the same as that
when you invoked the compiler.  Otherwise it will not be able to locate
the source files.  <command>gcov</command> produces files called
<file><var>mangledname</var>.gcov</file> in the current directory.  These contain
the coverage information of the source file they correspond to.
One <file>.gcov</file> file is produced for each source (or header) file
containing code,
which was compiled to produce the data files.  The <var>mangledname</var> part
of the output file name is usually simply the source file name, but can
be something more complicated if the <samp>-l</samp> or <samp>-p</samp> options are
given.  Refer to those options for details.
</para>
<para>If you invoke <command>gcov</command> with multiple input files, the
contributions from each input file are summed.  Typically you would
invoke it with the same list of files as the final link of your executable.
</para>
<para>The <file>.gcov</file> files contain the <samp>:</samp> separated fields along with
program source code.  The format is
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"><var>execution_count</var>:<var>line_number</var>:<var>source line text</var>
</pre></smallexample>

<para>Additional block information may succeed each line, when requested by
command line option.  The <var>execution_count</var> is <samp>-</samp> for lines
containing no code.  Unexecuted lines are marked <samp>#####</samp> or
<samp>====</samp>, depending on whether they are reachable by
non-exceptional paths or only exceptional paths such as C++ exception
handlers, respectively.
</para>
<para>Some lines of information at the start have <var>line_number</var> of zero.
These preamble lines are of the form
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">-:0:<var>tag</var>:<var>value</var>
</pre></smallexample>

<para>The ordering and number of these preamble lines will be augmented as
<command>gcov</command> development progresses &textmdash; do not rely on them remaining
unchanged.  Use <var>tag</var> to locate a particular preamble line.
</para>
<para>The additional block information is of the form
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"><var>tag</var> <var>information</var>
</pre></smallexample>

<para>The <var>information</var> is human readable, but designed to be simple
enough for machine parsing too.
</para>
<para>When printing percentages, 0% and 100% are only printed when the values
are <emph>exactly</emph> 0% and 100% respectively.  Other values which would
conventionally be rounded to 0% or 100% are instead printed as the
nearest non-boundary value.
</para>
<para>When using <command>gcov</command>, you must first compile your program with two
special GCC options: <samp>-fprofile-arcs -ftest-coverage</samp>.
This tells the compiler to generate additional information needed by
gcov (basically a flow graph of the program) and also includes
additional code in the object files for generating the extra profiling
information needed by gcov.  These additional files are placed in the
directory where the object file is located.
</para>
<para>Running the program will cause profile output to be generated.  For each
source file compiled with <option>-fprofile-arcs</option>, an accompanying
<file>.gcda</file> file will be placed in the object file directory.
</para>
<para>Running <command>gcov</command> with your program&textrsquo;s source file names as arguments
will now produce a listing of the code along with frequency of execution
for each line.  For example, if your program is called <file>tmp.c</file>, this
is what you see when you use the basic <command>gcov</command> facility:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">$ gcc -fprofile-arcs -ftest-coverage tmp.c
$ a.out
$ gcov tmp.c
90.00% of 10 source lines executed in file tmp.c
Creating tmp.c.gcov.
</pre></smallexample>

<para>The file <file>tmp.c.gcov</file> contains output from <command>gcov</command>.
Here is a sample:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">        -:    0:Source:tmp.c
        -:    0:Graph:tmp.gcno
        -:    0:Data:tmp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include &lt;stdio.h&gt;
        -:    2:
        -:    3:int main (void)
        1:    4:&lbrace;
        1:    5:  int i, total;
        -:    6:
        1:    7:  total = 0;
        -:    8:
       11:    9:  for (i = 0; i &lt; 10; i++)
       10:   10:    total += i;
        -:   11:
        1:   12:  if (total != 45)
    #####:   13:    printf (&quot;Failure\n&quot;);
        -:   14:  else
        1:   15:    printf (&quot;Success\n&quot;);
        1:   16:  return 0;
        -:   17:&rbrace;
</pre></smallexample>

<para>When you use the <option>-a</option> option, you will get individual block
counts, and the output looks like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">        -:    0:Source:tmp.c
        -:    0:Graph:tmp.gcno
        -:    0:Data:tmp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include &lt;stdio.h&gt;
        -:    2:
        -:    3:int main (void)
        1:    4:&lbrace;
        1:    4-block  0
        1:    5:  int i, total;
        -:    6:
        1:    7:  total = 0;
        -:    8:
       11:    9:  for (i = 0; i &lt; 10; i++)
       11:    9-block  0
       10:   10:    total += i;
       10:   10-block  0
        -:   11:
        1:   12:  if (total != 45)
        1:   12-block  0
    #####:   13:    printf (&quot;Failure\n&quot;);
    $$$$$:   13-block  0
        -:   14:  else
        1:   15:    printf (&quot;Success\n&quot;);
        1:   15-block  0
        1:   16:  return 0;
        1:   16-block  0
        -:   17:&rbrace;
</pre></smallexample>

<para>In this mode, each basic block is only shown on one line &textndash; the last
line of the block.  A multi-line block will only contribute to the
execution count of that last line, and other lines will not be shown
to contain code, unless previous blocks end on those lines.
The total execution count of a line is shown and subsequent lines show
the execution counts for individual blocks that end on that line.  After each
block, the branch and call counts of the block will be shown, if the
<option>-b</option> option is given.
</para>
<para>Because of the way GCC instruments calls, a call count can be shown
after a line with no individual blocks.
As you can see, line 13 contains a basic block that was not executed.
</para>
<need value="450" line=" 450"></need>
<para>When you use the <option>-b</option> option, your output looks like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">$ gcov -b tmp.c
90.00% of 10 source lines executed in file tmp.c
80.00% of 5 branches executed in file tmp.c
80.00% of 5 branches taken at least once in file tmp.c
50.00% of 2 calls executed in file tmp.c
Creating tmp.c.gcov.
</pre></smallexample>

<para>Here is a sample of a resulting <file>tmp.c.gcov</file> file:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">        -:    0:Source:tmp.c
        -:    0:Graph:tmp.gcno
        -:    0:Data:tmp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include &lt;stdio.h&gt;
        -:    2:
        -:    3:int main (void)
function main called 1 returned 1 blocks executed 75%
        1:    4:&lbrace;
        1:    5:  int i, total;
        -:    6:
        1:    7:  total = 0;
        -:    8:
       11:    9:  for (i = 0; i &lt; 10; i++)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       10:   10:    total += i;
        -:   11:
        1:   12:  if (total != 45)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   13:    printf (&quot;Failure\n&quot;);
call    0 never executed
        -:   14:  else
        1:   15:    printf (&quot;Success\n&quot;);
call    0 called 1 returned 100%
        1:   16:  return 0;
        -:   17:&rbrace;
</pre></smallexample>

<para>For each function, a line is printed showing how many times the function
is called, how many times it returns and what percentage of the
function&textrsquo;s blocks were executed.
</para>
<para>For each basic block, a line is printed after the last line of the basic
block describing the branch or call that ends the basic block.  There can
be multiple branches and calls listed for a single source line if there
are multiple basic blocks that end on that line.  In this case, the
branches and calls are each given a number.  There is no simple way to map
these branches and calls back to source constructs.  In general, though,
the lowest numbered branch or call will correspond to the leftmost construct
on the source line.
</para>
<para>For a branch, if it was executed at least once, then a percentage
indicating the number of times the branch was taken divided by the
number of times the branch was executed will be printed.  Otherwise, the
message &textldquo;never executed&textrdquo; is printed.
</para>
<para>For a call, if it was executed at least once, then a percentage
indicating the number of times the call returned divided by the number
of times the call was executed will be printed.  This will usually be
100%, but may be less for functions that call <code>exit</code> or <code>longjmp</code>,
and thus may not return every time they are called.
</para>
<para>The execution counts are cumulative.  If the example program were
executed again without removing the <file>.gcda</file> file, the count for the
number of times each line in the source was executed would be added to
the results of the previous run(s).  This is potentially useful in
several ways.  For example, it could be used to accumulate data over a
number of program runs as part of a test verification suite, or to
provide more accurate long-term information over a large number of
program runs.
</para>
<para>The data in the <file>.gcda</file> files is saved immediately before the program
exits.  For each source file compiled with <option>-fprofile-arcs</option>, the
profiling code first attempts to read in an existing <file>.gcda</file> file; if
the file doesn&textrsquo;t match the executable (differing number of basic block
counts) it will ignore the contents of the file.  It then adds in the
new execution counts and finally writes the data to the file.
</para>
</section>
<node name="Gcov-and-Optimization" spaces=" "><nodename>Gcov and Optimization</nodename><nodenext automatic="on">Gcov Data Files</nodenext><nodeprev automatic="on">Invoking Gcov</nodeprev><nodeup automatic="on">Gcov</nodeup></node>
<section spaces=" "><sectiontitle>Using <command>gcov</command> with GCC Optimization</sectiontitle>

<para>If you plan to use <command>gcov</command> to help optimize your code, you must
first compile your program with two special GCC options:
<samp>-fprofile-arcs -ftest-coverage</samp>.  Aside from that, you can use any
other GCC options; but if you want to prove that every single line
in your program was executed, you should not compile with optimization
at the same time.  On some machines the optimizer can eliminate some
simple code lines by combining them with other lines.  For example, code
like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">if (a != b)
  c = 1;
else
  c = 0;
</pre></smallexample>

<noindent></noindent>
<para>can be compiled into one instruction on some machines.  In this case,
there is no way for <command>gcov</command> to calculate separate execution counts
for each line because there isn&textrsquo;t separate code for each line.  Hence
the <command>gcov</command> output looks like this if you compiled the program with
optimization:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">      100:   12:if (a != b)
      100:   13:  c = 1;
      100:   14:else
      100:   15:  c = 0;
</pre></smallexample>

<para>The output shows that this block of code, combined by optimization,
executed 100 times.  In one sense this result is correct, because there
was only one instruction representing all four of these lines.  However,
the output does not indicate how many times the result was 0 and how
many times the result was 1.
</para>
<para>Inlineable functions can create unexpected line counts.  Line counts are
shown for the source code of the inlineable function, but what is shown
depends on where the function is inlined, or if it is not inlined at all.
</para>
<para>If the function is not inlined, the compiler must emit an out of line
copy of the function, in any object file that needs it.  If
<file>fileA.o</file> and <file>fileB.o</file> both contain out of line bodies of a
particular inlineable function, they will also both contain coverage
counts for that function.  When <file>fileA.o</file> and <file>fileB.o</file> are
linked together, the linker will, on many systems, select one of those
out of line bodies for all calls to that function, and remove or ignore
the other.  Unfortunately, it will not remove the coverage counters for
the unused function body.  Hence when instrumented, all but one use of
that function will show zero counts.
</para>
<para>If the function is inlined in several places, the block structure in
each location might not be the same.  For instance, a condition might
now be calculable at compile time in some instances.  Because the
coverage of all the uses of the inline function will be shown for the
same source lines, the line counts themselves might seem inconsistent.
</para>
<para>Long-running applications can use the <code>_gcov_reset</code> and <code>_gcov_dump</code>
facilities to restrict profile collection to the program region of
interest. Calling <code>_gcov_reset(void)</code> will clear all profile counters
to zero, and calling <code>_gcov_dump(void)</code> will cause the profile information
collected at that point to be dumped to <file>.gcda</file> output files.
</para>
<!-- c man end -->

</section>
<node name="Gcov-Data-Files" spaces=" "><nodename>Gcov Data Files</nodename><nodenext automatic="on">Cross-profiling</nodenext><nodeprev automatic="on">Gcov and Optimization</nodeprev><nodeup automatic="on">Gcov</nodeup></node>
<section spaces=" "><sectiontitle>Brief Description of <command>gcov</command> Data Files</sectiontitle>

<para><command>gcov</command> uses two files for profiling.  The names of these files
are derived from the original <emph>object</emph> file by substituting the
file suffix with either <file>.gcno</file>, or <file>.gcda</file>.  The files
contain coverage and profile data stored in a platform-independent format.
The <file>.gcno</file> files are placed in the same directory as the object
file.  By default, the <file>.gcda</file> files are also stored in the same
directory as the object file, but the GCC <option>-fprofile-dir</option> option
may be used to store the <file>.gcda</file> files in a separate directory.
</para>
<para>The <file>.gcno</file> notes file is generated when the source file is compiled
with the GCC <option>-ftest-coverage</option> option.  It contains information to
reconstruct the basic block graphs and assign source line numbers to
blocks.
</para>
<para>The <file>.gcda</file> count data file is generated when a program containing
object files built with the GCC <option>-fprofile-arcs</option> option is executed.
A separate <file>.gcda</file> file is created for each object file compiled with
this option.  It contains arc transition counts, value profile counts, and
some summary information.
</para>
<para>The full details of the file format is specified in <file>gcov-io.h</file>,
and functions provided in that header file should be used to access the
coverage files.
</para>
</section>
<node name="Cross_002dprofiling" spaces=" "><nodename>Cross-profiling</nodename><nodeprev automatic="on">Gcov Data Files</nodeprev><nodeup automatic="on">Gcov</nodeup></node>
<section spaces=" "><sectiontitle>Data File Relocation to Support Cross-Profiling</sectiontitle>

<para>Running the program will cause profile output to be generated.  For each
source file compiled with <option>-fprofile-arcs</option>, an accompanying <file>.gcda</file>
file will be placed in the object file directory. That implicitly requires
running the program on the same system as it was built or having the same
absolute directory structure on the target system. The program will try
to create the needed directory structure, if it is not already present.
</para>
<para>To support cross-profiling, a program compiled with <option>-fprofile-arcs</option>
can relocate the data files based on two environment variables:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>GCOV_PREFIX contains the prefix to add to the absolute paths
in the object file. Prefix can be absolute, or relative.  The
default is no prefix.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>GCOV_PREFIX_STRIP indicates the how many initial directory names to strip off
the hardwired absolute paths. Default value is 0.
</para>
<para><emph>Note:</emph> If GCOV_PREFIX_STRIP is set without GCOV_PREFIX is undefined,
 then a relative path is made out of the hardwired absolute paths.
</para></listitem></itemize>

<para>For example, if the object file <file>/user/build/foo.o</file> was built with
<option>-fprofile-arcs</option>, the final executable will try to create the data file
<file>/user/build/foo.gcda</file> when running on the target system.  This will
fail if the corresponding directory does not exist and it is unable to create
it.  This can be overcome by, for example, setting the environment as
<samp>GCOV_PREFIX=/target/run</samp> and <samp>GCOV_PREFIX_STRIP=1</samp>.  Such a
setting will name the data file <file>/target/run/build/foo.gcda</file>.
</para>
<para>You must move the data files to the expected directory tree in order to
use them for profile directed optimizations (<option>--use-profile</option>), or to
use the <command>gcov</command> tool.
<!-- c Copyright (C) 2014-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->
</para>
<ignore>
@c man begin COPYRIGHT
Copyright @copyright{} 2014-2015 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the gfdl(7) man page.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
@c man end
@c Set file name and title for the man page.
@setfilename gcov-tool
@settitle offline gcda profile processing tool
</ignore>

</section>
</chapter>
<node name="Gcov_002dtool" spaces=" "><nodename>Gcov-tool</nodename><nodenext automatic="on">Trouble</nodenext><nodeprev automatic="on">Gcov</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle><command>gcov-tool</command>&textmdash;an Offline Gcda Profile Processing Tool</sectiontitle>

<para><command>gcov-tool</command> is a tool you can use in conjunction with GCC to
manipulate or process gcda profile files offline.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::             ">Gcov-tool Intro</menunode><menudescription><pre xml:space="preserve">Introduction to gcov-tool.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">Invoking Gcov-tool</menunode><menudescription><pre xml:space="preserve">How to use gcov-tool.
</pre></menudescription></menuentry></menu>

<node name="Gcov_002dtool-Intro" spaces=" "><nodename>Gcov-tool Intro</nodename><nodenext automatic="on">Invoking Gcov-tool</nodenext><nodeup automatic="on">Gcov-tool</nodeup></node>
<section spaces=" "><sectiontitle>Introduction to <command>gcov-tool</command></sectiontitle>
<!-- c man begin DESCRIPTION -->

<para><command>gcov-tool</command> is an offline tool to process gcc&textrsquo;s gcda profile files.
</para>
<para>Current gcov-tool supports the following functionalities:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>merge two sets of profiles with weights.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>read one set of profile and rewrite profile contents. One can scale or
normalize the count values.
</para></listitem></itemize>

<para>Examples of the use cases for this tool are:
</para><itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Collect the profiles for different set of inputs, and use this tool to merge
them. One can specify the weight to factor in the relative importance of
each input.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Rewrite the profile after removing a subset of the gcda files, while maintaining
the consistency of the summary and the histogram.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>It can also be used to debug or libgcov code as the tools shares the majority
code as the runtime library.
</para></listitem></itemize>

<para>Note that for the merging operation, this profile generated offline may
contain slight different values from the online merged profile. Here are
a list of typical differences:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>histogram difference: This offline tool recomputes the histogram after merging
the counters. The resulting histogram, therefore, is precise. The online
merging does not have this capability &textndash; the histogram is merged from two
histograms and the result is an approximation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>summary checksum difference: Summary checksum uses a CRC32 operation. The value
depends on the link list order of gcov-info objects. This order is different in
gcov-tool from that in the online merge. It&textrsquo;s expected to have different
summary checksums. It does not really matter as the compiler does not use this
checksum anywhere.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>value profile counter values difference: Some counter values for value profile
are runtime dependent, like heap addresses. It&textrsquo;s normal to see some difference
in these kind of counters.
</para></listitem></itemize>

<!-- c man end -->

</section>
<node name="Invoking-Gcov_002dtool" spaces=" "><nodename>Invoking Gcov-tool</nodename><nodeprev automatic="on">Gcov-tool Intro</nodeprev><nodeup automatic="on">Gcov-tool</nodeup></node>
<section spaces=" "><sectiontitle>Invoking <command>gcov-tool</command></sectiontitle>

<smallexample endspaces=" ">
<pre xml:space="preserve">gcov-tool <r>[</r><var>global-options</var><r>]</r> SUB_COMMAND <r>[</r><var>sub_command-options</var><r>]</r> <var>profile_dir</var>
</pre></smallexample>

<para><command>gcov-tool</command> accepts the following options:
</para>
<ignore>
@c man begin SYNOPSIS
gcov-tool [@option{-v}|@option{--version}] [@option{-h}|@option{--help}]

gcov-tool merge [merge-options] @var{directory1} @var{directory2}
     [@option{-v}|@option{--verbose}]
     [@option{-o}|@option{ --output} @var{directory}]
     [@option{-w}|@option{--weight} @var{w1,w2}]

gcov-tool rewrite [rewrite-options] @var{directory}
     [@option{-v}|@option{--verbose}]
     [@option{-o}|@option{--output} @var{directory}]
     [@option{-s}|@option{--scale} @var{float_or_simple-frac_value}]
     [@option{-n}|@option{--normalize} @var{long_long_value}]

gcov-tool overlap [overlap-options] @var{directory1} @var{directory2}
     [@option{-v}|@option{--verbose}]
     [@option{-h}|@option{--hotonly}]
     [@option{-f}|@option{--function}]
     [@option{-F}|@option{--fullname}]
     [@option{-o}|@option{--object}]
     [@option{-t}|@option{--hot_threshold}] @var{float}

@c man end
@c man begin SEEALSO
gpl(7), gfdl(7), fsf-funding(7), gcc(1), gcov(1) and the Info entry for
@file{gcc}.
@c man end
</ignore>

<!-- c man begin OPTIONS -->
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-h</itemformat></item>
<itemx spaces=" "><itemformat command="code">--help</itemformat></itemx>
</tableterm><tableitem><para>Display help about using <command>gcov-tool</command> (on the standard output), and
exit without doing any further processing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-v</itemformat></item>
<itemx spaces=" "><itemformat command="code">--version</itemformat></itemx>
</tableterm><tableitem><para>Display the <command>gcov-tool</command> version number (on the standard output),
and exit without doing any further processing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">merge</itemformat></item>
</tableterm><tableitem><para>Merge two profile directories.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-v</itemformat></item>
<itemx spaces=" "><itemformat command="code">--verbose</itemformat></itemx>
</tableterm><tableitem><para>Set the verbose mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-o <var>directory</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">--output <var>directory</var></itemformat></itemx>
</tableterm><tableitem><para>Set the output profile directory. Default output directory name is
<var>merged_profile</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-w <var>w1</var>,<var>w2</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">--weight <var>w1</var>,<var>w2</var></itemformat></itemx>
</tableterm><tableitem><para>Set the merge weights of the <var>directory1</var> and <var>directory2</var>,
respectively. The default weights are 1 for both.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">rewrite</itemformat></item>
</tableterm><tableitem><para>Read the specified profile directory and rewrite to a new directory.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-v</itemformat></item>
<itemx spaces=" "><itemformat command="code">--verbose</itemformat></itemx>
</tableterm><tableitem><para>Set the verbose mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-o <var>directory</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">--output <var>directory</var></itemformat></itemx>
</tableterm><tableitem><para>Set the output profile directory. Default output name is <var>rewrite_profile</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-s <var>float_or_simple-frac_value</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">--scale <var>float_or_simple-frac_value</var></itemformat></itemx>
</tableterm><tableitem><para>Scale the profile counters. The specified value can be in floating point value,
or simple fraction value form, such 1, 2, 2/3, and 5/3.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-n <var>long_long_value</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">--normalize &lt;long_long_value&gt;</itemformat></itemx>
</tableterm><tableitem><para>Normalize the profile. The specified value is the max counter value
in the new profile.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">overlap</itemformat></item>
</tableterm><tableitem><para>Computer the overlap score between the two specified profile directories.
The overlap score is computed based on the arc profiles. It is defined as
the sum of min (p1_counter[i] / p1_sum_all, p2_counter[i] / p2_sum_all),
for all arc counter i, where p1_counter[i] and p2_counter[i] are two
matched counters and p1_sum_all and p2_sum_all are the sum of counter
values in profile 1 and profile 2, respectively.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-v</itemformat></item>
<itemx spaces=" "><itemformat command="code">--verbose</itemformat></itemx>
</tableterm><tableitem><para>Set the verbose mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-h</itemformat></item>
<itemx spaces=" "><itemformat command="code">--hotonly</itemformat></itemx>
</tableterm><tableitem><para>Only print info for hot objects/functions.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-f</itemformat></item>
<itemx spaces=" "><itemformat command="code">--function</itemformat></itemx>
</tableterm><tableitem><para>Print function level overlap score.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-F</itemformat></item>
<itemx spaces=" "><itemformat command="code">--fullname</itemformat></itemx>
</tableterm><tableitem><para>Print full gcda filename.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-o</itemformat></item>
<itemx spaces=" "><itemformat command="code">--object</itemformat></itemx>
</tableterm><tableitem><para>Print object level overlap score.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-t <var>float</var></itemformat></item>
<itemx spaces=" "><itemformat command="code">--hot_threshold &lt;float&gt;</itemformat></itemx>
</tableterm><tableitem><para>Set the threshold for hot counter value.
</para></tableitem></tableentry></table>

</tableitem></tableentry></table>

<!-- c man end -->
<!-- c Copyright (C) 1988-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->

</section>
</chapter>
<node name="Trouble" spaces=" "><nodename>Trouble</nodename><nodenext automatic="on">Bugs</nodenext><nodeprev automatic="on">Gcov-tool</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Known Causes of Trouble with GCC</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="946">bugs, known</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="947">installation trouble</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="948">known causes of trouble</indexterm></cindex>

<para>This section describes known problems that affect users of GCC&eosperiod;  Most
of these are not GCC bugs per se&textmdash;if they were, we would fix them.
But the result for a user may be like the result of a bug.
</para>
<para>Some of these problems are due to bugs in other software, some are
missing features that are too much work to add, and some are places
where people&textrsquo;s opinions differ as to what is best.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::         ">Actual Bugs</menunode><menudescription><pre xml:space="preserve">Bugs we will fix later.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Interoperation</menunode><menudescription><pre xml:space="preserve">Problems using GCC with other compilers,
                        and with certain linkers, assemblers and debuggers.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Incompatibilities</menunode><menudescription><pre xml:space="preserve">GCC is incompatible with traditional C.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">Fixed Headers</menunode><menudescription><pre xml:space="preserve">GCC uses corrected versions of system header files.
                        This is necessary, but doesn&textrsquo;t always work smoothly.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">Standard Libraries</menunode><menudescription><pre xml:space="preserve">GCC uses the system C library, which might not be
                        compliant with the ISO C standard.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Disappointments</menunode><menudescription><pre xml:space="preserve">Regrettable things we can&textrsquo;t change, but not quite bugs.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">C++ Misunderstandings</menunode><menudescription><pre xml:space="preserve">Common misunderstandings with GNU C++.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">Non-bugs</menunode><menudescription><pre xml:space="preserve">Things we think are right, but some others disagree.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Warnings and Errors</menunode><menudescription><pre xml:space="preserve">Which problems in your code get warnings,
                        and which get errors.
</pre></menudescription></menuentry></menu>

<node name="Actual-Bugs" spaces=" "><nodename>Actual Bugs</nodename><nodenext automatic="on">Interoperation</nodenext><nodeup automatic="on">Trouble</nodeup></node>
<section spaces=" "><sectiontitle>Actual Bugs We Haven&textrsquo;t Fixed Yet</sectiontitle>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>The <code>fixincludes</code> script interacts badly with automounters; if the
directory of system header files is automounted, it tends to be
unmounted while <code>fixincludes</code> is running.  This would seem to be a
bug in the automounter.  We don&textrsquo;t know any good way to work around it.
</para></listitem></itemize>

</section>
<node name="Interoperation" spaces=" "><nodename>Interoperation</nodename><nodenext automatic="on">Incompatibilities</nodenext><nodeprev automatic="on">Actual Bugs</nodeprev><nodeup automatic="on">Trouble</nodeup></node>
<section spaces=" "><sectiontitle>Interoperation</sectiontitle>

<para>This section lists various difficulties encountered in using GCC
together with other compilers or with the assemblers, linkers,
libraries and debuggers on certain systems.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>On many platforms, GCC supports a different ABI for C++ than do other
compilers, so the object files compiled by GCC cannot be used with object
files generated by another C++ compiler.
</para>
<para>An area where the difference is most apparent is name mangling.  The use
of different name mangling is intentional, to protect you from more subtle
problems.
Compilers differ as to many internal details of C++ implementation,
including: how class instances are laid out, how multiple inheritance is
implemented, and how virtual function calls are handled.  If the name
encoding were made the same, your programs would link against libraries
provided from other compilers&textmdash;but the programs would then crash when
run.  Incompatible libraries are then detected at link time, rather than
at run time.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>On some BSD systems, including some versions of Ultrix, use of profiling
causes static variable destructors (currently used only in C++) not to
be run.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>On a SPARC, GCC aligns all values of type <code>double</code> on an 8-byte
boundary, and it expects every <code>double</code> to be so aligned.  The Sun
compiler usually gives <code>double</code> values 8-byte alignment, with one
exception: function arguments of type <code>double</code> may not be aligned.
</para>
<para>As a result, if a function compiled with Sun CC takes the address of an
argument of type <code>double</code> and passes this pointer of type
<code>double *</code> to a function compiled with GCC, dereferencing the
pointer may cause a fatal signal.
</para>
<para>One way to solve this problem is to compile your entire program with GCC&eosperiod;
Another solution is to modify the function that is compiled with
Sun CC to copy the argument into a local variable; local variables
are always properly aligned.  A third solution is to modify the function
that uses the pointer to dereference it via the following function
<code>access_double</code> instead of directly with <samp>*</samp>:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">inline double
access_double (double *unaligned_ptr)
&lbrace;
  union d2i &lbrace; double d; int i[2]; &rbrace;;

  union d2i *p = (union d2i *) unaligned_ptr;
  union d2i u;

  u.i[0] = p-&gt;i[0];
  u.i[1] = p-&gt;i[1];

  return u.d;
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>Storing into the pointer can be done likewise with the same union.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>On Solaris, the <code>malloc</code> function in the <file>libmalloc.a</file> library
may allocate memory that is only 4 byte aligned.  Since GCC on the
SPARC assumes that doubles are 8 byte aligned, this may result in a
fatal signal if doubles are stored in memory allocated by the
<file>libmalloc.a</file> library.
</para>
<para>The solution is to not use the <file>libmalloc.a</file> library.  Use instead
<code>malloc</code> and related functions from <file>libc.a</file>; they do not have
this problem.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>On the HP PA machine, ADB sometimes fails to work on functions compiled
with GCC&eosperiod;  Specifically, it fails to work on functions that use
<code>alloca</code> or variable-size arrays.  This is because GCC doesn&textrsquo;t
generate HP-UX unwind descriptors for such functions.  It may even be
impossible to generate them.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Debugging (<option>-g</option>) is not supported on the HP PA machine, unless you use
the preliminary GNU tools.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Taking the address of a label may generate errors from the HP-UX
PA assembler.  GAS for the PA does not have this problem.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Using floating point parameters for indirect calls to static functions
will not work when using the HP assembler.  There simply is no way for GCC
to specify what registers hold arguments for static functions when using
the HP assembler.  GAS for the PA does not have this problem.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>In extremely rare cases involving some very large functions you may
receive errors from the HP linker complaining about an out of bounds
unconditional branch offset.  This used to occur more often in previous
versions of GCC, but is now exceptionally rare.  If you should run
into it, you can work around by making your function smaller.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>GCC compiled code sometimes emits warnings from the HP-UX assembler of
the form:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">(warning) Use of GR3 when
  frame &gt;= 8192 may cause conflict.
</pre></smallexample>

<para>These warnings are harmless and can be safely ignored.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>In extremely rare cases involving some very large functions you may
receive errors from the AIX Assembler complaining about a displacement
that is too large.  If you should run into it, you can work around by
making your function smaller.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The <file>libstdc++.a</file> library in GCC relies on the SVR4 dynamic
linker semantics which merges global symbols between libraries and
applications, especially necessary for C++ streams functionality.
This is not the default behavior of AIX shared libraries and dynamic
linking.  <file>libstdc++.a</file> is built on AIX with &textldquo;runtime-linking&textrdquo;
enabled so that symbol merging can occur.  To utilize this feature,
the application linked with <file>libstdc++.a</file> must include the
<option>-Wl,-brtl</option> flag on the link line.  G++ cannot impose this
because this option may interfere with the semantics of the user
program and users may not always use <samp>g++</samp> to link his or her
application.  Applications are not required to use the
<option>-Wl,-brtl</option> flag on the link line&textmdash;the rest of the
<file>libstdc++.a</file> library which is not dependent on the symbol
merging semantics will continue to function correctly.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>An application can interpose its own definition of functions for
functions invoked by <file>libstdc++.a</file> with &textldquo;runtime-linking&textrdquo;
enabled on AIX&eosperiod;  To accomplish this the application must be linked
with &textldquo;runtime-linking&textrdquo; option and the functions explicitly must be
exported by the application (<option>-Wl,-brtl,-bE:exportfile</option>).
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>AIX on the RS/6000 provides support (NLS) for environments outside of
the United States.  Compilers and assemblers use NLS to support
locale-specific representations of various objects including
floating-point numbers (<samp>.</samp> vs <samp>,</samp> for separating decimal
fractions).  There have been problems reported where the library linked
with GCC does not produce the same floating-point formats that the
assembler accepts.  If you have this problem, set the <env>LANG</env>
environment variable to <samp>C</samp> or <samp>En_US</samp>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2635" incode="1">fdollars-in-identifiers</indexterm></indexcommand>
<para>Even if you specify <option>-fdollars-in-identifiers</option>,
you cannot successfully use <samp>$</samp> in identifiers on the RS/6000 due
to a restriction in the IBM assembler.  GAS supports these
identifiers.
</para>
</listitem></itemize>

</section>
<node name="Incompatibilities" spaces=" "><nodename>Incompatibilities</nodename><nodenext automatic="on">Fixed Headers</nodenext><nodeprev automatic="on">Interoperation</nodeprev><nodeup automatic="on">Trouble</nodeup></node>
<section spaces=" "><sectiontitle>Incompatibilities of GCC</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="949">incompatibilities of GCC</indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2636" incode="1">traditional</indexterm></indexcommand>

<para>There are several noteworthy incompatibilities between GNU C and K&amp;R
(non-ISO) versions of C&eosperiod;
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem><cindex index="cp" spaces=" "><indexterm index="cp" number="950">string constants</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="951">read-only strings</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="952">shared strings</indexterm></cindex>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>GCC normally makes string constants read-only.  If several
identical-looking string constants are used, GCC stores only one
copy of the string.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="953"><code>mktemp</code>, and constant strings</indexterm></cindex>
<para>One consequence is that you cannot call <code>mktemp</code> with a string
constant argument.  The function <code>mktemp</code> always alters the
string its argument points to.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="954"><code>sscanf</code>, and constant strings</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="955"><code>fscanf</code>, and constant strings</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="956"><code>scanf</code>, and constant strings</indexterm></cindex>
<para>Another consequence is that <code>sscanf</code> does not work on some very
old systems when passed a string constant as its format control string
or input.  This is because <code>sscanf</code> incorrectly tries to write
into the string constant.  Likewise <code>fscanf</code> and <code>scanf</code>.
</para>
<para>The solution to these problems is to change the program to use
<code>char</code>-array variables with initialization strings for these
purposes instead of string constants.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para><code>-2147483648</code> is positive.
</para>
<para>This is because 2147483648 cannot fit in the type <code>int</code>, so
(following the ISO C rules) its data type is <code>unsigned long int</code>.
Negating this value yields 2147483648 again.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>GCC does not substitute macro arguments when they appear inside of
string constants.  For example, the following macro in GCC
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#define foo(a) &quot;a&quot;
</pre></smallexample>

<noindent></noindent>
<para>will produce output <code>&quot;a&quot;</code> regardless of what the argument <var>a</var> is.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="957"><code>setjmp</code> incompatibilities</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="958"><code>longjmp</code> incompatibilities</indexterm></cindex>
</listitem><listitem><prepend>&bullet;</prepend>
<para>When you use <code>setjmp</code> and <code>longjmp</code>, the only automatic
variables guaranteed to remain valid are those declared
<code>volatile</code>.  This is a consequence of automatic register
allocation.  Consider this function:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">jmp_buf j;

foo ()
&lbrace;
  int a, b;

  a = fun1 ();
  if (setjmp (j))
    return a;

  a = fun2 ();
  /* <r><code>longjmp (j)</code> may occur in <code>fun3</code>.</r> */
  return a + fun3 ();
&rbrace;
</pre></smallexample>

<para>Here <code>a</code> may or may not be restored to its first value when the
<code>longjmp</code> occurs.  If <code>a</code> is allocated in a register, then
its first value is restored; otherwise, it keeps the last value stored
in it.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2637" incode="1">W</indexterm></indexcommand>
<para>If you use the <option>-W</option> option with the <option>-O</option> option, you will
get a warning when GCC thinks such a problem might be possible.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Programs that use preprocessing directives in the middle of macro
arguments do not work with GCC&eosperiod;  For example, a program like this
will not work:
</para>
<smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">foobar (
#define luser
        hack)
</pre></group>
</smallexample>

<para>ISO C does not permit such a construct.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>K&amp;R compilers allow comments to cross over an inclusion boundary
(i.e.&noeos; started in an include file and ended in the including file).
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="959">external declaration scope</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="960">scope of external declarations</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="961">declaration scope</indexterm></cindex>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Declarations of external variables and functions within a block apply
only to the block containing the declaration.  In other words, they
have the same scope as any other declaration in the same place.
</para>
<para>In some other C compilers, an <code>extern</code> declaration affects all the
rest of the file even if it happens within a block.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>In traditional C, you can combine <code>long</code>, etc., with a typedef name,
as shown here:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef int foo;
typedef long foo bar;
</pre></smallexample>

<para>In ISO C, this is not allowed: <code>long</code> and other type modifiers
require an explicit <code>int</code>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="962">typedef names as function parameters</indexterm></cindex>
</listitem><listitem><prepend>&bullet;</prepend>
<para>PCC allows typedef names to be used as function parameters.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Traditional C allows the following erroneous pair of declarations to
appear together in a given scope:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">typedef int foo;
typedef foo foo;
</pre></smallexample>

</listitem><listitem><prepend>&bullet;</prepend>
<para>GCC treats all characters of identifiers as significant.  According to
K&amp;R-1 (2.2), &textldquo;No more than the first eight characters are significant,
although more may be used.&textrdquo;.  Also according to K&amp;R-1 (2.2), &textldquo;An
identifier is a sequence of letters and digits; the first character must
be a letter.  The underscore _ counts as a letter.&textrdquo;, but GCC also
allows dollar signs in identifiers.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="963">whitespace</indexterm></cindex>
</listitem><listitem><prepend>&bullet;</prepend>
<para>PCC allows whitespace in the middle of compound assignment operators
such as <samp>+=</samp>.  GCC, following the ISO standard, does not
allow this.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="964">apostrophes</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="965"><code>'</code></indexterm></cindex>
</listitem><listitem><prepend>&bullet;</prepend>
<para>GCC complains about unterminated character constants inside of
preprocessing conditionals that fail.  Some programs have English
comments enclosed in conditionals that are guaranteed to fail; if these
comments contain apostrophes, GCC will probably report an error.  For
example, this code would produce an error:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">#if 0
You can't expect this to work.
#endif
</pre></smallexample>

<para>The best solution to such a problem is to put the text into an actual
C comment delimited by <samp>/*&dots;*/</samp>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Many user programs contain the declaration <samp>long time ();</samp>.  In the
past, the system header files on many systems did not actually declare
<code>time</code>, so it did not matter what type your program declared it to
return.  But in systems with ISO C headers, <code>time</code> is declared to
return <code>time_t</code>, and if that is not the same as <code>long</code>, then
<samp>long time ();</samp> is erroneous.
</para>
<para>The solution is to change your program to use appropriate system headers
(<code>&lt;time.h&gt;</code> on systems with ISO C headers) and not to declare
<code>time</code> if the system header files declare it, or failing that to
use <code>time_t</code> as the return type of <code>time</code>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="966"><code>float</code> as function value type</indexterm></cindex>
</listitem><listitem><prepend>&bullet;</prepend>
<para>When compiling functions that return <code>float</code>, PCC converts it to
a double.  GCC actually returns a <code>float</code>.  If you are concerned
with PCC compatibility, you should declare your functions to return
<code>double</code>; you might as well say what you mean.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="967">structures</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="968">unions</indexterm></cindex>
</listitem><listitem><prepend>&bullet;</prepend>
<para>When compiling functions that return structures or unions, GCC
output code normally uses a method different from that used on most
versions of Unix.  As a result, code compiled with GCC cannot call
a structure-returning function compiled with PCC, and vice versa.
</para>
<para>The method used by GCC is as follows: a structure or union which is
1, 2, 4 or 8 bytes long is returned like a scalar.  A structure or union
with any other size is stored into an address supplied by the caller
(usually in a special, fixed register, but on some machines it is passed
on the stack).  The target hook <code>TARGET_STRUCT_VALUE_RTX</code>
tells GCC where to pass this address.
</para>
<para>By contrast, PCC on most target machines returns structures and unions
of any size by copying the data into an area of static storage, and then
returning the address of that storage as if it were a pointer value.
The caller must copy the data from that memory area to the place where
the value is wanted.  GCC does not use this method because it is
slower and nonreentrant.
</para>
<para>On some newer machines, PCC uses a reentrant convention for all
structure and union returning.  GCC on most of these machines uses a
compatible convention when returning structures and unions in memory,
but still returns small structures and unions in registers.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2638" incode="1">fpcc-struct-return</indexterm></indexcommand>
<para>You can tell GCC to use a compatible convention for all structure and
union returning with the option <option>-fpcc-struct-return</option>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="969">preprocessing tokens</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="970">preprocessing numbers</indexterm></cindex>
</listitem><listitem><prepend>&bullet;</prepend>
<para>GCC complains about program fragments such as <samp>0x74ae-0x4000</samp>
which appear to be two hexadecimal constants separated by the minus
operator.  Actually, this string is a single <dfn>preprocessing token</dfn>.
Each such token must correspond to one token in C&eosperiod;  Since this does not,
GCC prints an error message.  Although it may appear obvious that what
is meant is an operator and two values, the ISO C standard specifically
requires that this be treated as erroneous.
</para>
<para>A <dfn>preprocessing token</dfn> is a <dfn>preprocessing number</dfn> if it
begins with a digit and is followed by letters, underscores, digits,
periods and <samp>e+</samp>, <samp>e-</samp>, <samp>E+</samp>, <samp>E-</samp>, <samp>p+</samp>,
<samp>p-</samp>, <samp>P+</samp>, or <samp>P-</samp> character sequences.  (In strict C90
mode, the sequences <samp>p+</samp>, <samp>p-</samp>, <samp>P+</samp> and <samp>P-</samp> cannot
appear in preprocessing numbers.)
</para>
<para>To make the above program fragment valid, place whitespace in front of
the minus sign.  This whitespace will end the preprocessing number.
</para></listitem></itemize>

</section>
<node name="Fixed-Headers" spaces=" "><nodename>Fixed Headers</nodename><nodenext automatic="on">Standard Libraries</nodenext><nodeprev automatic="on">Incompatibilities</nodeprev><nodeup automatic="on">Trouble</nodeup></node>
<section spaces=" "><sectiontitle>Fixed Header Files</sectiontitle>

<para>GCC needs to install corrected versions of some system header files.
This is because most target systems have some header files that won&textrsquo;t
work with GCC unless they are changed.  Some have bugs, some are
incompatible with ISO C, and some depend on special features of other
compilers.
</para>
<para>Installing GCC automatically creates and installs the fixed header
files, by running a program called <code>fixincludes</code>.  Normally, you
don&textrsquo;t need to pay attention to this.  But there are cases where it
doesn&textrsquo;t do the right thing automatically.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>If you update the system&textrsquo;s header files, such as by installing a new
system version, the fixed header files of GCC are not automatically
updated.  They can be updated using the <command>mkheaders</command> script
installed in
<file><var>libexecdir</var>/gcc/<var>target</var>/<var>version</var>/install-tools/</file>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>On some systems, header file directories contain
machine-specific symbolic links in certain places.  This makes it
possible to share most of the header files among hosts running the
same version of the system on different machine models.
</para>
<para>The programs that fix the header files do not understand this special
way of using symbolic links; therefore, the directory of fixed header
files is good only for the machine model used to build it.
</para>
<para>It is possible to make separate sets of fixed header files for the
different machine models, and arrange a structure of symbolic links so
as to use the proper set, but you&textrsquo;ll have to do this by hand.
</para></listitem></itemize>

</section>
<node name="Standard-Libraries" spaces=" "><nodename>Standard Libraries</nodename><nodenext automatic="on">Disappointments</nodenext><nodeprev automatic="on">Fixed Headers</nodeprev><nodeup automatic="on">Trouble</nodeup></node>
<section spaces=" "><sectiontitle>Standard Libraries</sectiontitle>

<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2639" incode="1">Wall</indexterm></indexcommand>
<para>GCC by itself attempts to be a conforming freestanding implementation.
<xref label="Standards"><xrefnodename>Standards</xrefnodename><xrefprinteddesc>Language Standards Supported by GCC</xrefprinteddesc></xref>, for details of
what this means.  Beyond the library facilities required of such an
implementation, the rest of the C library is supplied by the vendor of
the operating system.  If that C library doesn&textrsquo;t conform to the C
standards, then your programs might get warnings (especially when using
<option>-Wall</option>) that you don&textrsquo;t expect.
</para>
<para>For example, the <code>sprintf</code> function on SunOS 4.1.3 returns
<code>char *</code> while the C standard says that <code>sprintf</code> returns an
<code>int</code>.  The <code>fixincludes</code> program could make the prototype for
this function match the Standard, but that would be wrong, since the
function will still return <code>char *</code>.
</para>
<para>If you need a Standard compliant library, then you need to find one, as
GCC does not provide one.  The GNU C library (called <code>glibc</code>)
provides ISO C, POSIX, BSD, SystemV and X/Open compatibility for
GNU/Linux and HURD-based GNU systems; no recent version of it supports
other systems, though some very old versions did.  Version 2.2 of the
GNU C library includes nearly complete C99 support.  You could also ask
your operating system vendor if newer libraries are available.
</para>
</section>
<node name="Disappointments" spaces=" "><nodename>Disappointments</nodename><nodenext automatic="on">C++ Misunderstandings</nodenext><nodeprev automatic="on">Standard Libraries</nodeprev><nodeup automatic="on">Trouble</nodeup></node>
<section spaces=" "><sectiontitle>Disappointments and Misunderstandings</sectiontitle>

<para>These problems are perhaps regrettable, but we don&textrsquo;t know any practical
way around them.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Certain local variables aren&textrsquo;t recognized by debuggers when you compile
with optimization.
</para>
<para>This occurs because sometimes GCC optimizes the variable out of
existence.  There is no way to tell the debugger how to compute the
value such a variable &textldquo;would have had&textrdquo;, and it is not clear that would
be desirable anyway.  So GCC simply does not mention the eliminated
variable when it writes debugging information.
</para>
<para>You have to expect a certain amount of disagreement between the
executable and your source code, when you use optimization.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="971">conflicting types</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="972">scope of declaration</indexterm></cindex>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Users often think it is a bug when GCC reports an error for code
like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int foo (struct mumble *);

struct mumble &lbrace; &dots; &rbrace;;

int foo (struct mumble *x)
&lbrace; &dots; &rbrace;
</pre></smallexample>

<para>This code really is erroneous, because the scope of <code>struct
mumble</code> in the prototype is limited to the argument list containing it.
It does not refer to the <code>struct mumble</code> defined with file scope
immediately below&textmdash;they are two unrelated types with similar names in
different scopes.
</para>
<para>But in the definition of <code>foo</code>, the file-scope type is used
because that is available to be inherited.  Thus, the definition and
the prototype do not match, and you get an error.
</para>
<para>This behavior may seem silly, but it&textrsquo;s what the ISO standard specifies.
It is easy enough for you to make your code work by moving the
definition of <code>struct mumble</code> above the prototype.  It&textrsquo;s not worth
being incompatible with ISO C just to avoid an error for the example
shown above.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Accesses to bit-fields even in volatile objects works by accessing larger
objects, such as a byte or a word.  You cannot rely on what size of
object is accessed in order to read or write the bit-field; it may even
vary for a given bit-field according to the precise usage.
</para>
<para>If you care about controlling the amount of memory that is accessed, use
volatile but do not use bit-fields.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>GCC comes with shell scripts to fix certain known problems in system
header files.  They install corrected copies of various header files in
a special directory where only GCC will normally look for them.  The
scripts adapt to various systems by searching all the system header
files for the problem cases that we know about.
</para>
<para>If new system header files are installed, nothing automatically arranges
to update the corrected header files.  They can be updated using the
<command>mkheaders</command> script installed in
<file><var>libexecdir</var>/gcc/<var>target</var>/<var>version</var>/install-tools/</file>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<cindex index="cp" spaces=" "><indexterm index="cp" number="973">floating point precision</indexterm></cindex>
<para>On 68000 and x86 systems, for instance, you can get paradoxical results
if you test the precise values of floating point numbers.  For example,
you can find that a floating point value which is not a NaN is not equal
to itself.  This results from the fact that the floating point registers
hold a few more bits of precision than fit in a <code>double</code> in memory.
Compiled code moves values between memory and floating point registers
at its convenience, and moving them into memory truncates them.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2640" incode="1">ffloat-store</indexterm></indexcommand>
<para>You can partially avoid this problem by using the <option>-ffloat-store</option>
option (<pxref label="Optimize-Options"><xrefnodename>Optimize Options</xrefnodename></pxref>).
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>On AIX and other platforms without weak symbol support, templates
need to be instantiated explicitly and symbols for static members
of templates will not be generated.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>On AIX, GCC scans object files and library archives for static
constructors and destructors when linking an application before the
linker prunes unreferenced symbols.  This is necessary to prevent the
AIX linker from mistakenly assuming that static constructor or
destructor are unused and removing them before the scanning can occur.
All static constructors and destructors found will be referenced even
though the modules in which they occur may not be used by the program.
This may lead to both increased executable size and unexpected symbol
references.
</para></listitem></itemize>

</section>
<node name="C_002b_002b-Misunderstandings" spaces=" "><nodename>C++ Misunderstandings</nodename><nodenext automatic="on">Non-bugs</nodenext><nodeprev automatic="on">Disappointments</nodeprev><nodeup automatic="on">Trouble</nodeup></node>
<section spaces=" "><sectiontitle>Common Misunderstandings with GNU C++</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="974">misunderstandings in C++</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="975">surprises in C++</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="976">C++ misunderstandings</indexterm></cindex>
<para>C++ is a complex language and an evolving one, and its standard
definition (the ISO C++ standard) was only recently completed.  As a
result, your C++ compiler may occasionally surprise you, even when its
behavior is correct.  This section discusses some areas that frequently
give rise to questions of this sort.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::  ">Static Definitions</menunode><menudescription><pre xml:space="preserve">Static member declarations are not definitions
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Name lookup</menunode><menudescription><pre xml:space="preserve">Name lookup, templates, and accessing members of base classes
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Temporaries</menunode><menudescription><pre xml:space="preserve">Temporaries may vanish before you expect
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Copy Assignment</menunode><menudescription><pre xml:space="preserve">Copy Assignment operators copy virtual bases twice
</pre></menudescription></menuentry></menu>

<node name="Static-Definitions" spaces=" "><nodename>Static Definitions</nodename><nodenext automatic="on">Name lookup</nodenext><nodeup automatic="on">C++ Misunderstandings</nodeup></node>
<subsection spaces=" "><sectiontitle>Declare <emph>and</emph> Define Static Members</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="977">C++ static data, declaring and defining</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="978">static data in C++, declaring and defining</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="979">declaring static data in C++</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="980">defining static data in C++</indexterm></cindex>
<para>When a class has static data members, it is not enough to <emph>declare</emph>
the static member; you must also <emph>define</emph> it.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">class Foo
&lbrace;
  &dots;
  void method();
  static int bar;
&rbrace;;
</pre></smallexample>

<para>This declaration only establishes that the class <code>Foo</code> has an
<code>int</code> named <code>Foo::bar</code>, and a member function named
<code>Foo::method</code>.  But you still need to define <emph>both</emph>
<code>method</code> and <code>bar</code> elsewhere.  According to the ISO
standard, you must supply an initializer in one (and only one) source
file, such as:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">int Foo::bar = 0;
</pre></smallexample>

<para>Other C++ compilers may not correctly implement the standard behavior.
As a result, when you switch to <command>g++</command> from one of these compilers,
you may discover that a program that appeared to work correctly in fact
does not conform to the standard: <command>g++</command> reports as undefined
symbols any static data members that lack definitions.
</para>

</subsection>
<node name="Name-lookup" spaces=" "><nodename>Name lookup</nodename><nodenext automatic="on">Temporaries</nodenext><nodeprev automatic="on">Static Definitions</nodeprev><nodeup automatic="on">C++ Misunderstandings</nodeup></node>
<subsection spaces=" "><sectiontitle>Name Lookup, Templates, and Accessing Members of Base Classes</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="981">base class members</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="982">two-stage name lookup</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="983">dependent name lookup</indexterm></cindex>

<para>The C++ standard prescribes that all names that are not dependent on
template parameters are bound to their present definitions when parsing
a template function or class.<footnote><para>The C++ standard just uses the
term &textldquo;dependent&textrdquo; for names that depend on the type or value of
template parameters.  This shorter term will also be used in the rest of
this section.</para></footnote>  Only names that are dependent are looked up at the point
of instantiation.  For example, consider
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  void foo(double);

  struct A &lbrace;
    template &lt;typename T&gt;
    void f () &lbrace;
      foo (1);        // <r>1</r>
      int i = N;      // <r>2</r>
      T t;
      t.bar();        // <r>3</r>
      foo (t);        // <r>4</r>
    &rbrace;

    static const int N;
  &rbrace;;
</pre></smallexample>

<para>Here, the names <code>foo</code> and <code>N</code> appear in a context that does
not depend on the type of <code>T</code>.  The compiler will thus require that
they are defined in the context of use in the template, not only before
the point of instantiation, and will here use <code>::foo(double)</code> and
<code>A::N</code>, respectively.  In particular, it will convert the integer
value to a <code>double</code> when passing it to <code>::foo(double)</code>.
</para>
<para>Conversely, <code>bar</code> and the call to <code>foo</code> in the fourth marked
line are used in contexts that do depend on the type of <code>T</code>, so
they are only looked up at the point of instantiation, and you can
provide declarations for them after declaring the template, but before
instantiating it.  In particular, if you instantiate <code>A::f&lt;int&gt;</code>,
the last line will call an overloaded <code>::foo(int)</code> if one was
provided, even if after the declaration of <code>struct A</code>.
</para>
<para>This distinction between lookup of dependent and non-dependent names is
called two-stage (or dependent) name lookup.  G++ implements it
since version 3.4.
</para>
<para>Two-stage name lookup sometimes leads to situations with behavior
different from non-template codes.  The most common is probably this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  template &lt;typename T&gt; struct Base &lbrace;
    int i;
  &rbrace;;

  template &lt;typename T&gt; struct Derived : public Base&lt;T&gt; &lbrace;
    int get_i() &lbrace; return i; &rbrace;
  &rbrace;;
</pre></smallexample>

<para>In <code>get_i()</code>, <code>i</code> is not used in a dependent context, so the
compiler will look for a name declared at the enclosing namespace scope
(which is the global scope here).  It will not look into the base class,
since that is dependent and you may declare specializations of
<code>Base</code> even after declaring <code>Derived</code>, so the compiler can&textrsquo;t
really know what <code>i</code> would refer to.  If there is no global
variable <code>i</code>, then you will get an error message.
</para>
<para>In order to make it clear that you want the member of the base class,
you need to defer lookup until instantiation time, at which the base
class is known.  For this, you need to access <code>i</code> in a dependent
context, by either using <code>this-&gt;i</code> (remember that <code>this</code> is of
type <code>Derived&lt;T&gt;*</code>, so is obviously dependent), or using
<code>Base&lt;T&gt;::i</code>.  Alternatively, <code>Base&lt;T&gt;::i</code> might be brought
into scope by a <code>using</code>-declaration.
</para>
<para>Another, similar example involves calling member functions of a base
class:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  template &lt;typename T&gt; struct Base &lbrace;
      int f();
  &rbrace;;

  template &lt;typename T&gt; struct Derived : Base&lt;T&gt; &lbrace;
      int g() &lbrace; return f(); &rbrace;;
  &rbrace;;
</pre></smallexample>

<para>Again, the call to <code>f()</code> is not dependent on template arguments
(there are no arguments that depend on the type <code>T</code>, and it is also
not otherwise specified that the call should be in a dependent context).
Thus a global declaration of such a function must be available, since
the one in the base class is not visible until instantiation time.  The
compiler will consequently produce the following error message:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">  x.cc: In member function `int Derived&lt;T&gt;::g()':
  x.cc:6: error: there are no arguments to `f' that depend on a template
     parameter, so a declaration of `f' must be available
  x.cc:6: error: (if you use `-fpermissive', G++ will accept your code, but
     allowing the use of an undeclared name is deprecated)
</pre></smallexample>

<para>To make the code valid either use <code>this-&gt;f()</code>, or
<code>Base&lt;T&gt;::f()</code>.  Using the <option>-fpermissive</option> flag will also let
the compiler accept the code, by marking all function calls for which no
declaration is visible at the time of definition of the template for
later lookup at instantiation time, as if it were a dependent call.
We do not recommend using <option>-fpermissive</option> to work around invalid
code, and it will also only catch cases where functions in base classes
are called, not where variables in base classes are used (as in the
example above).
</para>
<para>Note that some compilers (including G++ versions prior to 3.4) get these
examples wrong and accept above code without an error.  Those compilers
do not implement two-stage name lookup correctly.
</para>

</subsection>
<node name="Temporaries" spaces=" "><nodename>Temporaries</nodename><nodenext automatic="on">Copy Assignment</nodenext><nodeprev automatic="on">Name lookup</nodeprev><nodeup automatic="on">C++ Misunderstandings</nodeup></node>
<subsection spaces=" "><sectiontitle>Temporaries May Vanish Before You Expect</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="984">temporaries, lifetime of</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="985">portions of temporary objects, pointers to</indexterm></cindex>
<para>It is dangerous to use pointers or references to <emph>portions</emph> of a
temporary object.  The compiler may very well delete the object before
you expect it to, leaving a pointer to garbage.  The most common place
where this problem crops up is in classes like string classes,
especially ones that define a conversion function to type <code>char *</code>
or <code>const char *</code>&textmdash;which is one reason why the standard
<code>string</code> class requires you to call the <code>c_str</code> member
function.  However, any class that returns a pointer to some internal
structure is potentially subject to this problem.
</para>
<para>For example, a program may use a function <code>strfunc</code> that returns
<code>string</code> objects, and another function <code>charfunc</code> that
operates on pointers to <code>char</code>:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">string strfunc ();
void charfunc (const char *);

void
f ()
&lbrace;
  const char *p = strfunc().c_str();
  &dots;
  charfunc (p);
  &dots;
  charfunc (p);
&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>In this situation, it may seem reasonable to save a pointer to the C
string returned by the <code>c_str</code> member function and use that rather
than call <code>c_str</code> repeatedly.  However, the temporary string
created by the call to <code>strfunc</code> is destroyed after <code>p</code> is
initialized, at which point <code>p</code> is left pointing to freed memory.
</para>
<para>Code like this may run successfully under some other compilers,
particularly obsolete cfront-based compilers that delete temporaries
along with normal local variables.  However, the GNU C++ behavior is
standard-conforming, so if your program depends on late destruction of
temporaries it is not portable.
</para>
<para>The safe way to write such code is to give the temporary a name, which
forces it to remain until the end of the scope of the name.  For
example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">const string&amp; tmp = strfunc ();
charfunc (tmp.c_str ());
</pre></smallexample>

</subsection>
<node name="Copy-Assignment" spaces=" "><nodename>Copy Assignment</nodename><nodeprev automatic="on">Temporaries</nodeprev><nodeup automatic="on">C++ Misunderstandings</nodeup></node>
<subsection spaces=" "><sectiontitle>Implicit Copy-Assignment for Virtual Bases</sectiontitle>

<para>When a base class is virtual, only one subobject of the base class
belongs to each full object.  Also, the constructors and destructors are
invoked only once, and called from the most-derived class.  However, such
objects behave unspecified when being assigned.  For example:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">struct Base&lbrace;
  char *name;
  Base(char *n) : name(strdup(n))&lbrace;&rbrace;
  Base&amp; operator= (const Base&amp; other)&lbrace;
   free (name);
   name = strdup (other.name);
  &rbrace;
&rbrace;;

struct A:virtual Base&lbrace;
  int val;
  A():Base(&quot;A&quot;)&lbrace;&rbrace;
&rbrace;;

struct B:virtual Base&lbrace;
  int bval;
  B():Base(&quot;B&quot;)&lbrace;&rbrace;
&rbrace;;

struct Derived:public A, public B&lbrace;
  Derived():Base(&quot;Derived&quot;)&lbrace;&rbrace;
&rbrace;;

void func(Derived &amp;d1, Derived &amp;d2)
&lbrace;
  d1 = d2;
&rbrace;
</pre></smallexample>

<para>The C++ standard specifies that <samp>Base::Base</samp> is only called once
when constructing or copy-constructing a Derived object.  It is
unspecified whether <samp>Base::operator=</samp> is called more than once when
the implicit copy-assignment for Derived objects is invoked (as it is
inside <samp>func</samp> in the example).
</para>
<para>G++ implements the &textldquo;intuitive&textrdquo; algorithm for copy-assignment: assign all
direct bases, then assign all members.  In that algorithm, the virtual
base subobject can be encountered more than once.  In the example, copying
proceeds in the following order: <samp>val</samp>, <samp>name</samp> (via
<code>strdup</code>), <samp>bval</samp>, and <samp>name</samp> again.
</para>
<para>If application code relies on copy-assignment, a user-defined
copy-assignment operator removes any uncertainties.  With such an
operator, the application can define whether and how the virtual base
subobject is assigned.
</para>
</subsection>
</section>
<node name="Non_002dbugs" spaces=" "><nodename>Non-bugs</nodename><nodenext automatic="on">Warnings and Errors</nodenext><nodeprev automatic="on">C++ Misunderstandings</nodeprev><nodeup automatic="on">Trouble</nodeup></node>
<section spaces=" "><sectiontitle>Certain Changes We Don&textrsquo;t Want to Make</sectiontitle>

<para>This section lists changes that people frequently request, but which
we do not make because we think GCC is better without them.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Checking the number and type of arguments to a function which has an
old-fashioned definition and no prototype.
</para>
<para>Such a feature would work only occasionally&textmdash;only for calls that appear
in the same file as the called function, following the definition.  The
only way to check all calls reliably is to add a prototype for the
function.  But adding a prototype eliminates the motivation for this
feature.  So the feature is not worthwhile.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Warning about using an expression whose type is signed as a shift count.
</para>
<para>Shift count operands are probably signed more often than unsigned.
Warning about this would cause far more annoyance than good.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Warning about assigning a signed value to an unsigned variable.
</para>
<para>Such assignments must be very common; warning about them would cause
more annoyance than good.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Warning when a non-void function value is ignored.
</para>
<para>C contains many standard functions that return a value that most
programs choose to ignore.  One obvious example is <code>printf</code>.
Warning about this practice only leads the defensive programmer to
clutter programs with dozens of casts to <code>void</code>.  Such casts are
required so frequently that they become visual noise.  Writing those
casts becomes so automatic that they no longer convey useful
information about the intentions of the programmer.  For functions
where the return value should never be ignored, use the
<code>warn_unused_result</code> function attribute (<pxref label="Function-Attributes"><xrefnodename>Function
Attributes</xrefnodename></pxref>).
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2641" incode="1">fshort-enums</indexterm></indexcommand>
<para>Making <option>-fshort-enums</option> the default.
</para>
<para>This would cause storage layout to be incompatible with most other C
compilers.  And it doesn&textrsquo;t seem very important, given that you can get
the same result in other ways.  The case where it matters most is when
the enumeration-valued object is inside a structure, and in that case
you can specify a field width explicitly.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Making bit-fields unsigned by default on particular machines where &textldquo;the
ABI standard&textrdquo; says to do so.
</para>
<para>The ISO C standard leaves it up to the implementation whether a bit-field
declared plain <code>int</code> is signed or not.  This in effect creates two
alternative dialects of C&eosperiod;
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2642" incode="1">fsigned-bitfields</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2643" incode="1">funsigned-bitfields</indexterm></indexcommand>
<para>The GNU C compiler supports both dialects; you can specify the signed
dialect with <option>-fsigned-bitfields</option> and the unsigned dialect with
<option>-funsigned-bitfields</option>.  However, this leaves open the question of
which dialect to use by default.
</para>
<para>Currently, the preferred dialect makes plain bit-fields signed, because
this is simplest.  Since <code>int</code> is the same as <code>signed int</code> in
every other context, it is cleanest for them to be the same in bit-fields
as well.
</para>
<para>Some computer manufacturers have published Application Binary Interface
standards which specify that plain bit-fields should be unsigned.  It is
a mistake, however, to say anything about this issue in an ABI&eosperiod;  This is
because the handling of plain bit-fields distinguishes two dialects of C&eosperiod;
Both dialects are meaningful on every type of machine.  Whether a
particular object file was compiled using signed bit-fields or unsigned
is of no concern to other object files, even if they access the same
bit-fields in the same data structures.
</para>
<para>A given program is written in one or the other of these two dialects.
The program stands a chance to work on most any machine if it is
compiled with the proper dialect.  It is unlikely to work at all if
compiled with the wrong dialect.
</para>
<para>Many users appreciate the GNU C compiler because it provides an
environment that is uniform across machines.  These users would be
inconvenienced if the compiler treated plain bit-fields differently on
certain machines.
</para>
<para>Occasionally users write programs intended only for a particular machine
type.  On these occasions, the users would benefit if the GNU C compiler
were to support by default the same dialect as the other compilers on
that machine.  But such applications are rare.  And users writing a
program to run on more than one type of machine cannot possibly benefit
from this kind of compatibility.
</para>
<para>This is why GCC does and will treat plain bit-fields in the same
fashion on all types of machines (by default).
</para>
<para>There are some arguments for making bit-fields unsigned by default on all
machines.  If, for example, this becomes a universal de facto standard,
it would make sense for GCC to go along with it.  This is something
to be considered in the future.
</para>
<para>(Of course, users strongly concerned about portability should indicate
explicitly in each bit-field whether it is signed or not.  In this way,
they write programs which have the same meaning in both C dialects.)
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2644" incode="1">ansi</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2645" incode="1">std</indexterm></indexcommand>
<para>Undefining <code>__STDC__</code> when <option>-ansi</option> is not used.
</para>
<para>Currently, GCC defines <code>__STDC__</code> unconditionally.  This provides
good results in practice.
</para>
<para>Programmers normally use conditionals on <code>__STDC__</code> to ask whether
it is safe to use certain features of ISO C, such as function
prototypes or ISO token concatenation.  Since plain <command>gcc</command> supports
all the features of ISO C, the correct answer to these questions is
&textldquo;yes&textrdquo;.
</para>
<para>Some users try to use <code>__STDC__</code> to check for the availability of
certain library facilities.  This is actually incorrect usage in an ISO
C program, because the ISO C standard says that a conforming
freestanding implementation should define <code>__STDC__</code> even though it
does not have the library facilities.  <samp>gcc -ansi -pedantic</samp> is a
conforming freestanding implementation, and it is therefore required to
define <code>__STDC__</code>, even though it does not come with an ISO C
library.
</para>
<para>Sometimes people say that defining <code>__STDC__</code> in a compiler that
does not completely conform to the ISO C standard somehow violates the
standard.  This is illogical.  The standard is a standard for compilers
that claim to support ISO C, such as <samp>gcc -ansi</samp>&textmdash;not for other
compilers such as plain <command>gcc</command>.  Whatever the ISO C standard says
is relevant to the design of plain <command>gcc</command> without <option>-ansi</option> only
for pragmatic reasons, not as a requirement.
</para>
<para>GCC normally defines <code>__STDC__</code> to be 1, and in addition
defines <code>__STRICT_ANSI__</code> if you specify the <option>-ansi</option> option,
or a <option>-std</option> option for strict conformance to some version of ISO C&eosperiod;
On some hosts, system include files use a different convention, where
<code>__STDC__</code> is normally 0, but is 1 if the user specifies strict
conformance to the C Standard.  GCC follows the host convention when
processing system include files, but when processing user files it follows
the usual GNU C convention.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Undefining <code>__STDC__</code> in C++.
</para>
<para>Programs written to compile with C++-to-C translators get the
value of <code>__STDC__</code> that goes with the C compiler that is
subsequently used.  These programs must test <code>__STDC__</code>
to determine what kind of C preprocessor that compiler uses:
whether they should concatenate tokens in the ISO C fashion
or in the traditional fashion.
</para>
<para>These programs work properly with GNU C++ if <code>__STDC__</code> is defined.
They would not work otherwise.
</para>
<para>In addition, many header files are written to provide prototypes in ISO
C but not in traditional C&eosperiod;  Many of these header files can work without
change in C++ provided <code>__STDC__</code> is defined.  If <code>__STDC__</code>
is not defined, they will all fail, and will all need to be changed to
test explicitly for C++ as well.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Deleting &textldquo;empty&textrdquo; loops.
</para>
<para>Historically, GCC has not deleted &textldquo;empty&textrdquo; loops under the
assumption that the most likely reason you would put one in a program is
to have a delay, so deleting them will not make real programs run any
faster.
</para>
<para>However, the rationale here is that optimization of a nonempty loop
cannot produce an empty one. This held for carefully written C compiled
with less powerful optimizers but is not always the case for carefully
written C++ or with more powerful optimizers.
Thus GCC will remove operations from loops whenever it can determine
those operations are not externally visible (apart from the time taken
to execute them, of course).  In case the loop can be proved to be finite,
GCC will also remove the loop itself.
</para>
<para>Be aware of this when performing timing tests, for instance the
following loop can be completely removed, provided
<code>some_expression</code> can provably not change any global state.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">&lbrace;
   int sum = 0;
   int ix;

   for (ix = 0; ix != 10000; ix++)
      sum += some_expression;
&rbrace;
</pre></smallexample>

<para>Even though <code>sum</code> is accumulated in the loop, no use is made of
that summation, so the accumulation can be removed.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Making side effects happen in the same order as in some other compiler.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="986">side effects, order of evaluation</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="987">order of evaluation, side effects</indexterm></cindex>
<para>It is never safe to depend on the order of evaluation of side effects.
For example, a function call like this may very well behave differently
from one compiler to another:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">void func (int, int);

int i = 2;
func (i++, i++);
</pre></smallexample>

<para>There is no guarantee (in either the C or the C++ standard language
definitions) that the increments will be evaluated in any particular
order.  Either increment might happen first.  <code>func</code> might get the
arguments <samp>2, 3</samp>, or it might get <samp>3, 2</samp>, or even <samp>2, 2</samp>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Making certain warnings into errors by default.
</para>
<para>Some ISO C testsuites report failure when the compiler does not produce
an error message for a certain program.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2646" incode="1">pedantic-errors</indexterm></indexcommand>
<para>ISO C requires a &textldquo;diagnostic&textrdquo; message for certain kinds of invalid
programs, but a warning is defined by GCC to count as a diagnostic.  If
GCC produces a warning but not an error, that is correct ISO C support.
If testsuites call this &textldquo;failure&textrdquo;, they should be run with the GCC
option <option>-pedantic-errors</option>, which will turn these warnings into
errors.
</para>
</listitem></itemize>

</section>
<node name="Warnings-and-Errors" spaces=" "><nodename>Warnings and Errors</nodename><nodeprev automatic="on">Non-bugs</nodeprev><nodeup automatic="on">Trouble</nodeup></node>
<section spaces=" "><sectiontitle>Warning Messages and Error Messages</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="988">error messages</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="989">warnings vs errors</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="990">messages, warning and error</indexterm></cindex>
<para>The GNU compiler can produce two kinds of diagnostics: errors and
warnings.  Each kind has a different purpose:
</para>
<itemize commandarg="w" spaces=" " endspaces=" "><itemprepend><w></w></itemprepend>
<listitem><prepend><w></w></prepend>
<para><dfn>Errors</dfn> report problems that make it impossible to compile your
program.  GCC reports errors with the source file name and line
number where the problem is apparent.
</para>
</listitem><listitem><prepend><w></w></prepend>
<para><dfn>Warnings</dfn> report other unusual conditions in your code that
<emph>may</emph> indicate a problem, although compilation can (and does)
proceed.  Warning messages also report the source file name and line
number, but include the text <samp>warning:</samp> to distinguish them
from error messages.
</para></listitem></itemize>

<para>Warnings may indicate danger points where you should check to make sure
that your program really does what you intend; or the use of obsolete
features; or the use of nonstandard features of GNU C or C++.  Many
warnings are issued only if you ask for them, with one of the <option>-W</option>
options (for instance, <option>-Wall</option> requests a variety of useful
warnings).
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2647" incode="1">pedantic</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" number="2648" incode="1">pedantic-errors</indexterm></indexcommand>
<para>GCC always tries to compile your program if possible; it never
gratuitously rejects a program whose meaning is clear merely because
(for instance) it fails to conform to a standard.  In some cases,
however, the C and C++ standards specify that certain extensions are
forbidden, and a diagnostic <emph>must</emph> be issued by a conforming
compiler.  The <option>-pedantic</option> option tells GCC to issue warnings in
such cases; <option>-pedantic-errors</option> says to make them errors instead.
This does not mean that <emph>all</emph> non-ISO constructs get warnings
or errors.
</para>
<para><xref label="Warning-Options"><xrefnodename>Warning Options</xrefnodename><xrefprinteddesc>Options to Request or Suppress Warnings</xrefprinteddesc></xref>, for
more detail on these and related command-line options.
<!-- c Copyright (C) 1988-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->
</para>
</section>
</chapter>
<node name="Bugs" spaces=" "><nodename>Bugs</nodename><nodenext automatic="on">Service</nodenext><nodeprev automatic="on">Trouble</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Reporting Bugs</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="991">bugs</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="992">reporting bugs</indexterm></cindex>

<para>Your bug reports play an essential role in making GCC reliable.
</para>
<para>When you encounter a problem, the first thing to do is to see if it is
already known.  <xref label="Trouble"><xrefnodename>Trouble</xrefnodename></xref>.  If it isn&textrsquo;t known, then you should
report the problem.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menutitle separator=":  ">Criteria</menutitle><menunode separator=".   ">Bug Criteria</menunode><menudescription><pre xml:space="preserve">Have you really found a bug?
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">Reporting</menutitle><menunode separator=".  ">Bug Reporting</menunode><menudescription><pre xml:space="preserve">How to report a bug effectively.
</pre></menudescription></menuentry></menu>

<node name="Bug-Criteria" spaces=" "><nodename>Bug Criteria</nodename><nodenext automatic="on">Bug Reporting</nodenext><nodeup automatic="on">Bugs</nodeup></node>
<section spaces=" "><sectiontitle>Have You Found a Bug?</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="993">bug criteria</indexterm></cindex>

<para>If you are not sure whether you have found a bug, here are some guidelines:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem><cindex index="cp" spaces=" "><indexterm index="cp" number="994">fatal signal</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="995">core dump</indexterm></cindex>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>If the compiler gets a fatal signal, for any input whatever, that is a
compiler bug.  Reliable compilers never crash.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="996">invalid assembly code</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="997">assembly code, invalid</indexterm></cindex>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the compiler produces invalid assembly code, for any input whatever
(except an <code>asm</code> statement), that is a compiler bug, unless the
compiler reports errors (not just warnings) which would ordinarily
prevent the assembler from being run.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="998">undefined behavior</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="999">undefined function value</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp" number="1000">increment operators</indexterm></cindex>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the compiler produces valid assembly code that does not correctly
execute the input source code, that is a compiler bug.
</para>
<para>However, you must double-check to make sure, because you may have a
program whose behavior is undefined, which happened by chance to give
the desired results with another C or C++ compiler.
</para>
<para>For example, in many nonoptimizing compilers, you can write <samp>x;</samp>
at the end of a function instead of <samp>return x;</samp>, with the same
results.  But the value of the function is undefined if <code>return</code>
is omitted; it is not a bug when GCC produces different results.
</para>
<para>Problems often result from expressions with two increment operators,
as in <code>f (*p++, *p++)</code>.  Your previous compiler might have
interpreted that expression the way you intended; GCC might
interpret it another way.  Neither compiler is wrong.  The bug is
in your code.
</para>
<para>After you have localized the error to a single source line, it should
be easy to check for these things.  If your program is correct and
well defined, you have found a compiler bug.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the compiler produces an error message for valid input, that is a
compiler bug.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp" number="1001">invalid input</indexterm></cindex>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the compiler does not produce an error message for invalid input,
that is a compiler bug.  However, you should note that your idea of
&textldquo;invalid input&textrdquo; might be someone else&textrsquo;s idea of &textldquo;an extension&textrdquo; or
&textldquo;support for traditional practice&textrdquo;.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If you are an experienced user of one of the languages GCC supports, your
suggestions for improvement of GCC are welcome in any case.
</para></listitem></itemize>

</section>
<node name="Bug-Reporting" spaces=" "><nodename>Bug Reporting</nodename><nodeprev automatic="on">Bug Criteria</nodeprev><nodeup automatic="on">Bugs</nodeup></node>
<section spaces=" "><sectiontitle>How and Where to Report Bugs</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="1002">compiler bugs, reporting</indexterm></cindex>

<para>Bugs should be reported to the bug database at <uref><urefurl>http://gcc.gnu.org/bugs.html</urefurl></uref>.
<!-- c Copyright (C) 1988-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->
</para>
</section>
</chapter>
<node name="Service" spaces=" "><nodename>Service</nodename><nodenext automatic="on">Contributing</nodenext><nodeprev automatic="on">Bugs</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>How To Get Help with GCC</sectiontitle>

<para>If you need help installing, using or changing GCC, there are two
ways to find it:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Send a message to a suitable network mailing list.  First try
<email><emailaddress>gcc-help&arobase;gcc.gnu.org</emailaddress></email> (for help installing or using GCC), and if
that brings no response, try <email><emailaddress>gcc&arobase;gcc.gnu.org</emailaddress></email>.  For help
changing GCC, ask <email><emailaddress>gcc&arobase;gcc.gnu.org</emailaddress></email>.  If you think you have found
a bug in GCC, please report it following the instructions at
<pxref label="Bug-Reporting"><xrefnodename>Bug Reporting</xrefnodename></pxref>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Look in the service directory for someone who might help you for a fee.
The service directory is found at
<uref><urefurl>http://www.fsf.org/resources/service</urefurl></uref>.
</para></listitem></itemize>

<para>For further information, see
<uref><urefurl>http://gcc.gnu.org/faq.html#support</urefurl></uref>.
<!-- c Copyright (C) 1988-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->
</para>
</chapter>
<node name="Contributing" spaces=" "><nodename>Contributing</nodename><nodenext automatic="on">Funding</nodenext><nodeprev automatic="on">Service</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Contributing to GCC Development</sectiontitle>

<para>If you would like to help pretest GCC releases to assure they work well,
current development sources are available by SVN (see
<uref><urefurl>http://gcc.gnu.org/svn.html</urefurl></uref>).  Source and binary snapshots are
also available for FTP; see <uref><urefurl>http://gcc.gnu.org/snapshots.html</urefurl></uref>.
</para>
<para>If you would like to work on improvements to GCC, please read the
advice at these URLs:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"><uref><urefurl>http://gcc.gnu.org/contribute.html</urefurl></uref>
<uref><urefurl>http://gcc.gnu.org/contributewhy.html</urefurl></uref>
</pre></smallexample>

<noindent></noindent>
<para>for information on how to make useful contributions and avoid
duplication of effort.  Suggested projects are listed at
<uref><urefurl>http://gcc.gnu.org/projects/</urefurl></uref>.
</para>
<ignore>
@c Set file name and title for man page.
@setfilename fsf-funding
@settitle Funding Free Software
@c man begin SEEALSO
gpl(7), gfdl(7).
@c man end
</ignore>
</chapter>
<node name="Funding" spaces=" "><nodename>Funding</nodename><nodenext automatic="on">GNU Project</nodenext><nodeprev automatic="on">Contributing</nodeprev><nodeup automatic="on">Top</nodeup></node>
<!-- c man begin DESCRIPTION -->
<unnumbered spaces=" "><sectiontitle>Funding Free Software</sectiontitle>

<para>If you want to have more free software a few years from now, it makes
sense for you to help encourage people to contribute funds for its
development.  The most effective approach known is to encourage
commercial redistributors to donate.
</para>
<para>Users of free software systems can boost the pace of development by
encouraging for-a-fee distributors to donate part of their selling price
to free software developers&textmdash;the Free Software Foundation, and others.
</para>
<para>The way to convince distributors to do this is to demand it and expect
it from them.  So when you compare distributors, judge them partly by
how much they give to free software development.  Show distributors
they must compete to be the one who gives the most.
</para>
<para>To make this approach work, you must insist on numbers that you can
compare, such as, &textldquo;We will donate ten dollars to the Frobnitz project
for each disk sold.&textrdquo;  Don&textrsquo;t be satisfied with a vague promise, such as
&textldquo;A portion of the profits are donated,&textrdquo; since it doesn&textrsquo;t give a basis
for comparison.
</para>
<para>Even a precise fraction &textldquo;of the profits from this disk&textrdquo; is not very
meaningful, since creative accounting and unrelated business decisions
can greatly alter what fraction of the sales price counts as profit.
If the price you pay is $50, ten percent of the profit is probably
less than a dollar; it might be a few cents, or nothing at all.
</para>
<para>Some redistributors do development work themselves.  This is useful too;
but to keep everyone honest, you need to inquire how much they do, and
what kind.  Some kinds of development make much more long-term
difference than others.  For example, maintaining a separate version of
a program contributes very little; maintaining the standard version of a
program for the whole community contributes much.  Easy new ports
contribute little, since someone else would surely do them; difficult
ports such as adding a new CPU to the GNU Compiler Collection contribute more;
major new features or packages contribute the most.
</para>
<para>By establishing the idea that supporting further development is &textldquo;the
proper thing to do&textrdquo; when distributing free software for a fee, we can
assure a steady flow of resources into making more free software.
<!-- c man end -->
</para>
<display endspaces=" ">
<pre xml:space="preserve"><!-- c man begin COPYRIGHT -->
Copyright &copyright; 1994 Free Software Foundation, Inc.
Verbatim copying and redistribution of this section is permitted
without royalty; alteration is not permitted.
<!-- c man end -->
</pre></display>
<!-- c Copyright (C) 2001 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->

</unnumbered>
<node name="GNU-Project" spaces=" "><nodename>GNU Project</nodename><nodenext automatic="on">Copying</nodenext><nodeprev automatic="on">Funding</nodeprev><nodeup automatic="on">Top</nodeup></node>
<unnumbered spaces=" "><sectiontitle>The GNU Project and GNU/Linux</sectiontitle>

<para>The GNU Project was launched in 1984 to develop a complete Unix-like
operating system which is free software: the GNU system.  (GNU is a
recursive acronym for &textldquo;GNU&textrsquo;s Not Unix&textrdquo;; it is pronounced
&textldquo;guh-NEW&textrdquo;&eosperiod;)  Variants of the GNU operating system, which use the
kernel Linux, are now widely used; though these systems are often
referred to as &textldquo;Linux&textrdquo;, they are more accurately called GNU/Linux
systems.
</para>
<para>For more information, see:
</para><smallexample endspaces=" ">
<pre xml:space="preserve"><uref><urefurl>http://www.gnu.org/</urefurl></uref>
<uref><urefurl>http://www.gnu.org/gnu/linux-and-gnu.html</urefurl></uref>
</pre></smallexample>
<ignore>
@c Set file name and title for man page.
@setfilename gpl
@settitle GNU General Public License
@c man begin SEEALSO
gfdl(7), fsf-funding(7).
@c man end
@c man begin COPYRIGHT
Copyright @copyright{} 2007 Free Software Foundation, Inc.

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.
@c man end
</ignore>
</unnumbered>
<node name="Copying" spaces=" "><nodename>Copying</nodename><nodenext automatic="on">GNU Free Documentation License</nodenext><nodeprev automatic="on">GNU Project</nodeprev><nodeup automatic="on">Top</nodeup></node>
<!-- c man begin DESCRIPTION -->
<unnumbered spaces=" "><sectiontitle>GNU General Public License</sectiontitle>
<center spaces=" ">Version 3, 29 June 2007</center>

<!-- c This file is intended to be included in another file. -->

<display endspaces=" ">
<pre xml:space="preserve">Copyright &copyright; 2007 Free Software Foundation, Inc. <url><urefurl>http://fsf.org/</urefurl></url>

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.
</pre></display>

<heading spaces=" ">Preamble</heading>

<para>The GNU General Public License is a free, copyleft license for
software and other kinds of works.
</para>
<para>The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom
to share and change all versions of a program&textndash;to make sure it remains
free software for all its users.  We, the Free Software Foundation,
use the GNU General Public License for most of our software; it
applies also to any other work released this way by its authors.  You
can apply it to your programs, too.
</para>
<para>When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.
</para>
<para>To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you
have certain responsibilities if you distribute copies of the
software, or if you modify it: responsibilities to respect the freedom
of others.
</para>
<para>For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too,
receive or can get the source code.  And you must show them these
terms so they know their rights.
</para>
<para>Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.
</para>
<para>For the developers&textrsquo; and authors&textrsquo; protection, the GPL clearly explains
that there is no warranty for this free software.  For both users&textrsquo; and
authors&textrsquo; sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.
</para>
<para>Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so.  This is fundamentally incompatible with the
aim of protecting users&textrsquo; freedom to change the software.  The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products.  If such problems arise substantially in
other domains, we stand ready to extend this provision to those
domains in future versions of the GPL, as needed to protect the
freedom of users.
</para>
<para>Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish
to avoid the special danger that patents applied to a free program
could make it effectively proprietary.  To prevent this, the GPL
assures that patents cannot be used to render the program non-free.
</para>
<para>The precise terms and conditions for copying, distribution and
modification follow.
</para>
<heading spaces=" ">TERMS AND CONDITIONS</heading>

<enumerate spaces=" " endspaces=" "><enumeratefirst>0</enumeratefirst>
<listitem spaces=" "><para>Definitions.
</para>
<para>&textldquo;This License&textrdquo; refers to version 3 of the GNU General Public License.
</para>
<para>&textldquo;Copyright&textrdquo; also means copyright-like laws that apply to other kinds
of works, such as semiconductor masks.
</para>
<para>&textldquo;The Program&textrdquo; refers to any copyrightable work licensed under this
License.  Each licensee is addressed as &textldquo;you&textrdquo;.  &textldquo;Licensees&textrdquo; and
&textldquo;recipients&textrdquo; may be individuals or organizations.
</para>
<para>To &textldquo;modify&textrdquo; a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of
an exact copy.  The resulting work is called a &textldquo;modified version&textrdquo; of
the earlier work or a work &textldquo;based on&textrdquo; the earlier work.
</para>
<para>A &textldquo;covered work&textrdquo; means either the unmodified Program or a work based
on the Program.
</para>
<para>To &textldquo;propagate&textrdquo; a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.
</para>
<para>To &textldquo;convey&textrdquo; a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user
through a computer network, with no transfer of a copy, is not
conveying.
</para>
<para>An interactive user interface displays &textldquo;Appropriate Legal Notices&textrdquo; to
the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.
</para>
</listitem><listitem spaces=" "><para>Source Code.
</para>
<para>The &textldquo;source code&textrdquo; for a work means the preferred form of the work for
making modifications to it.  &textldquo;Object code&textrdquo; means any non-source form
of a work.
</para>
<para>A &textldquo;Standard Interface&textrdquo; means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.
</para>
<para>The &textldquo;System Libraries&textrdquo; of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
&textldquo;Major Component&textrdquo;, in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.
</para>
<para>The &textldquo;Corresponding Source&textrdquo; for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work&textrsquo;s
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.
</para>
<para>The Corresponding Source need not include anything that users can
regenerate automatically from other parts of the Corresponding Source.
</para>
<para>The Corresponding Source for a work in source code form is that same
work.
</para>
</listitem><listitem spaces=" "><para>Basic Permissions.
</para>
<para>All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.
</para>
<para>You may make, run and propagate covered works that you do not convey,
without conditions so long as your license otherwise remains in force.
You may convey covered works to others for the sole purpose of having
them make modifications exclusively for you, or provide you with
facilities for running those works, provided that you comply with the
terms of this License in conveying all material for which you do not
control copyright.  Those thus making or running the covered works for
you must do so exclusively on your behalf, under your direction and
control, on terms that prohibit them from making any copies of your
copyrighted material outside their relationship with you.
</para>
<para>Conveying under any other circumstances is permitted solely under the
conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.
</para>
</listitem><listitem spaces=" "><para>Protecting Users&textrsquo; Legal Rights From Anti-Circumvention Law.
</para>
<para>No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.
</para>
<para>When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such
circumvention is effected by exercising rights under this License with
respect to the covered work, and you disclaim any intention to limit
operation or modification of the work as a means of enforcing, against
the work&textrsquo;s users, your or third parties&textrsquo; legal rights to forbid
circumvention of technological measures.
</para>
</listitem><listitem spaces=" "><para>Conveying Verbatim Copies.
</para>
<para>You may convey verbatim copies of the Program&textrsquo;s source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.
</para>
<para>You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.
</para>
</listitem><listitem spaces=" "><para>Conveying Modified Source Versions.
</para>
<para>You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these
conditions:
</para>
<enumerate first="a" spaces=" " endspaces=" "><enumeratefirst>a</enumeratefirst>
<listitem> 
<para>The work must carry prominent notices stating that you modified it,
and giving a relevant date.
</para>
</listitem><listitem>
<para>The work must carry prominent notices stating that it is released
under this License and any conditions added under section 7.  This
requirement modifies the requirement in section 4 to &textldquo;keep intact all
notices&textrdquo;.
</para>
</listitem><listitem>
<para>You must license the entire work, as a whole, under this License to
anyone who comes into possession of a copy.  This License will
therefore apply, along with any applicable section 7 additional terms,
to the whole of the work, and all its parts, regardless of how they
are packaged.  This License gives no permission to license the work in
any other way, but it does not invalidate such permission if you have
separately received it.
</para>
</listitem><listitem>
<para>If the work has interactive user interfaces, each must display
Appropriate Legal Notices; however, if the Program has interactive
interfaces that do not display Appropriate Legal Notices, your work
need not make them do so.
</para></listitem></enumerate>

<para>A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
&textldquo;aggregate&textrdquo; if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation&textrsquo;s users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.
</para>
</listitem><listitem spaces="  "><para>Conveying Non-Source Forms.
</para>
<para>You may convey a covered work in object code form under the terms of
sections 4 and 5, provided that you also convey the machine-readable
Corresponding Source under the terms of this License, in one of these
ways:
</para>
<enumerate first="a" spaces=" " endspaces=" "><enumeratefirst>a</enumeratefirst>
<listitem>
<para>Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by the
Corresponding Source fixed on a durable physical medium customarily
used for software interchange.
</para>
</listitem><listitem>
<para>Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by a written
offer, valid for at least three years and valid for as long as you
offer spare parts or customer support for that product model, to give
anyone who possesses the object code either (1) a copy of the
Corresponding Source for all the software in the product that is
covered by this License, on a durable physical medium customarily used
for software interchange, for a price no more than your reasonable
cost of physically performing this conveying of source, or (2) access
to copy the Corresponding Source from a network server at no charge.
</para>
</listitem><listitem>
<para>Convey individual copies of the object code with a copy of the written
offer to provide the Corresponding Source.  This alternative is
allowed only occasionally and noncommercially, and only if you
received the object code with such an offer, in accord with subsection
6b.
</para>
</listitem><listitem>
<para>Convey the object code by offering access from a designated place
(gratis or for a charge), and offer equivalent access to the
Corresponding Source in the same way through the same place at no
further charge.  You need not require recipients to copy the
Corresponding Source along with the object code.  If the place to copy
the object code is a network server, the Corresponding Source may be
on a different server (operated by you or a third party) that supports
equivalent copying facilities, provided you maintain clear directions
next to the object code saying where to find the Corresponding Source.
Regardless of what server hosts the Corresponding Source, you remain
obligated to ensure that it is available for as long as needed to
satisfy these requirements.
</para>
</listitem><listitem>
<para>Convey the object code using peer-to-peer transmission, provided you
inform other peers where the object code and Corresponding Source of
the work are being offered to the general public at no charge under
subsection 6d.
</para>
</listitem></enumerate>

<para>A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.
</para>
<para>A &textldquo;User Product&textrdquo; is either (1) a &textldquo;consumer product&textrdquo;, which means any
tangible personal property which is normally used for personal,
family, or household purposes, or (2) anything designed or sold for
incorporation into a dwelling.  In determining whether a product is a
consumer product, doubtful cases shall be resolved in favor of
coverage.  For a particular product received by a particular user,
&textldquo;normally used&textrdquo; refers to a typical or common use of that class of
product, regardless of the status of the particular user or of the way
in which the particular user actually uses, or expects or is expected
to use, the product.  A product is a consumer product regardless of
whether the product has substantial commercial, industrial or
non-consumer uses, unless such uses represent the only significant
mode of use of the product.
</para>
<para>&textldquo;Installation Information&textrdquo; for a User Product means any methods,
procedures, authorization keys, or other information required to
install and execute modified versions of a covered work in that User
Product from a modified version of its Corresponding Source.  The
information must suffice to ensure that the continued functioning of
the modified object code is in no case prevented or interfered with
solely because modification has been made.
</para>
<para>If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).
</para>
<para>The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or
updates for a work that has been modified or installed by the
recipient, or for the User Product in which it has been modified or
installed.  Access to a network may be denied when the modification
itself materially and adversely affects the operation of the network
or violates the rules and protocols for communication across the
network.
</para>
<para>Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.
</para>
</listitem><listitem spaces=" "><para>Additional Terms.
</para>
<para>&textldquo;Additional permissions&textrdquo; are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.
</para>
<para>When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.
</para>
<para>Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders
of that material) supplement the terms of this License with terms:
</para>
<enumerate first="a" spaces=" " endspaces=" "><enumeratefirst>a</enumeratefirst>
<listitem>
<para>Disclaiming warranty or limiting liability differently from the terms
of sections 15 and 16 of this License; or
</para>
</listitem><listitem>
<para>Requiring preservation of specified reasonable legal notices or author
attributions in that material or in the Appropriate Legal Notices
displayed by works containing it; or
</para>
</listitem><listitem>
<para>Prohibiting misrepresentation of the origin of that material, or
requiring that modified versions of such material be marked in
reasonable ways as different from the original version; or
</para>
</listitem><listitem>
<para>Limiting the use for publicity purposes of names of licensors or
authors of the material; or
</para>
</listitem><listitem>
<para>Declining to grant rights under trademark law for use of some trade
names, trademarks, or service marks; or
</para>
</listitem><listitem>
<para>Requiring indemnification of licensors and authors of that material by
anyone who conveys the material (or modified versions of it) with
contractual assumptions of liability to the recipient, for any
liability that these contractual assumptions directly impose on those
licensors and authors.
</para></listitem></enumerate>

<para>All other non-permissive additional terms are considered &textldquo;further
restrictions&textrdquo; within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.
</para>
<para>If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.
</para>
<para>Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions; the
above requirements apply either way.
</para>
</listitem><listitem spaces=" "><para>Termination.
</para>
<para>You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).
</para>
<para>However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.
</para>
<para>Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.
</para>
<para>Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.
</para>
</listitem><listitem spaces=" "><para>Acceptance Not Required for Having Copies.
</para>
<para>You are not required to accept this License in order to receive or run
a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.
</para>
</listitem><listitem spaces=" "><para>Automatic Licensing of Downstream Recipients.
</para>
<para>Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.
</para>
<para>An &textldquo;entity transaction&textrdquo; is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party&textrsquo;s predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.
</para>
<para>You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.
</para>
</listitem><listitem spaces=" "><para>Patents.
</para>
<para>A &textldquo;contributor&textrdquo; is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor&textrsquo;s &textldquo;contributor version&textrdquo;.
</para>
<para>A contributor&textrsquo;s &textldquo;essential patent claims&textrdquo; are all patent claims owned
or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, &textldquo;control&textrdquo; includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.
</para>
<para>Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor&textrsquo;s essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.
</para>
<para>In the following three paragraphs, a &textldquo;patent license&textrdquo; is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To &textldquo;grant&textrdquo; such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.
</para>
<para>If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  &textldquo;Knowingly relying&textrdquo; means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient&textrsquo;s use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.
</para>
<para>If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.
</para>
<para>A patent license is &textldquo;discriminatory&textrdquo; if it does not include within the
scope of its coverage, prohibits the exercise of, or is conditioned on
the non-exercise of one or more of the rights that are specifically
granted under this License.  You may not convey a covered work if you
are a party to an arrangement with a third party that is in the
business of distributing software, under which you make payment to the
third party based on the extent of your activity of conveying the
work, and under which the third party grants, to any of the parties
who would receive the covered work from you, a discriminatory patent
license (a) in connection with copies of the covered work conveyed by
you (or copies made from those copies), or (b) primarily for and in
connection with specific products or compilations that contain the
covered work, unless you entered into that arrangement, or that patent
license was granted, prior to 28 March 2007.
</para>
<para>Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.
</para>
</listitem><listitem spaces=" "><para>No Surrender of Others&textrsquo; Freedom.
</para>
<para>If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey
a covered work so as to satisfy simultaneously your obligations under
this License and any other pertinent obligations, then as a
consequence you may not convey it at all.  For example, if you agree
to terms that obligate you to collect a royalty for further conveying
from those to whom you convey the Program, the only way you could
satisfy both those terms and this License would be to refrain entirely
from conveying the Program.
</para>
</listitem><listitem spaces=" "><para>Use with the GNU Affero General Public License.
</para>
<para>Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.
</para>
</listitem><listitem spaces=" "><para>Revised Versions of this License.
</para>
<para>The Free Software Foundation may publish revised and/or new versions
of the GNU General Public License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.
</para>
<para>Each version is given a distinguishing version number.  If the Program
specifies that a certain numbered version of the GNU General Public
License &textldquo;or any later version&textrdquo; applies to it, you have the option of
following the terms and conditions either of that numbered version or
of any later version published by the Free Software Foundation.  If
the Program does not specify a version number of the GNU General
Public License, you may choose any version ever published by the Free
Software Foundation.
</para>
<para>If the Program specifies that a proxy can decide which future versions
of the GNU General Public License can be used, that proxy&textrsquo;s public
statement of acceptance of a version permanently authorizes you to
choose that version for the Program.
</para>
<para>Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.
</para>
</listitem><listitem spaces=" "><para>Disclaimer of Warranty.
</para>
<para>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM &textldquo;AS IS&textrdquo; WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
CORRECTION.
</para>
</listitem><listitem spaces=" "><para>Limitation of Liability.
</para>
<para>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM
TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
</para>
</listitem><listitem spaces=" "><para>Interpretation of Sections 15 and 16.
</para>
<para>If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.
</para>
</listitem></enumerate>

<heading spaces=" ">END OF TERMS AND CONDITIONS</heading>

<heading spaces=" ">How to Apply These Terms to Your New Programs</heading>

<para>If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.
</para>
<para>To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the &textldquo;copyright&textrdquo; line and a pointer to where the full notice is found.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"><var>one line to give the program's name and a brief idea of what it does.</var>  
Copyright (C) <var>year</var> <var>name of author</var>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <url><urefurl>http://www.gnu.org/licenses/</urefurl></url>.
</pre></smallexample>

<para>Also add information on how to contact you by electronic and paper mail.
</para>
<para>If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"><var>program</var> Copyright (C) <var>year</var> <var>name of author</var> 
This program comes with ABSOLUTELY NO WARRANTY; for details type <samp>show w</samp>.
This is free software, and you are welcome to redistribute it
under certain conditions; type <samp>show c</samp> for details.
</pre></smallexample>

<para>The hypothetical commands <samp>show w</samp> and <samp>show c</samp> should show
the appropriate parts of the General Public License.  Of course, your
program&textrsquo;s commands might be different; for a GUI interface, you would
use an &textldquo;about box&textrdquo;.
</para>
<para>You should also get your employer (if you work as a programmer) or school,
if any, to sign a &textldquo;copyright disclaimer&textrdquo; for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<url><urefurl>http://www.gnu.org/licenses/</urefurl></url>.
</para>
<para>The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use
the GNU Lesser General Public License instead of this License.  But
first, please read <url><urefurl>http://www.gnu.org/philosophy/why-not-lgpl.html</urefurl></url>.
<!-- c man end -->
</para>
<!-- c - -->
<!-- c GFDL -->
<!-- c - -->

<ignore>
@c Set file name and title for man page.
@setfilename gfdl
@settitle GNU Free Documentation License
@c man begin SEEALSO
gpl(7), fsf-funding(7).
@c man end
@c man begin COPYRIGHT
Copyright @copyright{} 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
@uref{http://fsf.org/}

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@c This file is intended to be included within another document,
@c hence no sectioning command or @node.
@c man end
</ignore>
<!-- c Special handling for inclusion in the install manual. -->
<!-- c man begin DESCRIPTION -->
</unnumbered>
<node name="GNU-Free-Documentation-License" spaces=" "><nodename>GNU Free Documentation License</nodename><nodenext automatic="on">Contributors</nodenext><nodeprev automatic="on">Copying</nodeprev><nodeup automatic="on">Top</nodeup></node>
<unnumbered spaces=" "><sectiontitle>GNU Free Documentation License</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp" number="1003">FDL, GNU Free Documentation License</indexterm></cindex>
<center spaces=" ">Version 1.3, 3 November 2008</center>

<display endspaces=" ">
<pre xml:space="preserve">Copyright &copyright; 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
<uref><urefurl>http://fsf.org/</urefurl></uref>

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
</pre></display>

<enumerate spaces=" " endspaces=" "><enumeratefirst>0</enumeratefirst>
<listitem>
<para>PREAMBLE
</para>
<para>The purpose of this License is to make a manual, textbook, or other
functional and useful document <dfn>free</dfn> in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.
</para>
<para>This License is a kind of &textldquo;copyleft&textrdquo;, which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.
</para>
<para>We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.
</para>
</listitem><listitem>
<para>APPLICABILITY AND DEFINITIONS
</para>
<para>This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The &textldquo;Document&textrdquo;, below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as &textldquo;you&textrdquo;.  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.
</para>
<para>A &textldquo;Modified Version&textrdquo; of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.
</para>
<para>A &textldquo;Secondary Section&textrdquo; is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document&textrsquo;s overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.
</para>
<para>The &textldquo;Invariant Sections&textrdquo; are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.
</para>
<para>The &textldquo;Cover Texts&textrdquo; are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.
</para>
<para>A &textldquo;Transparent&textrdquo; copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not &textldquo;Transparent&textrdquo; is called &textldquo;Opaque&textrdquo;.
</para>
<para>Examples of suitable formats for Transparent copies include plain
<sc>ascii</sc> without markup, Texinfo input format, La&tex; input
format, <acronym><acronymword>SGML</acronymword></acronym> or <acronym><acronymword>XML</acronymword></acronym> using a publicly available
<acronym><acronymword>DTD</acronymword></acronym>, and standard-conforming simple <acronym><acronymword>HTML</acronymword></acronym>,
PostScript or <acronym><acronymword>PDF</acronymword></acronym> designed for human modification.  Examples
of transparent image formats include <acronym><acronymword>PNG</acronymword></acronym>, <acronym><acronymword>XCF</acronymword></acronym> and
<acronym><acronymword>JPG</acronymword></acronym>.  Opaque formats include proprietary formats that can be
read and edited only by proprietary word processors, <acronym><acronymword>SGML</acronymword></acronym> or
<acronym><acronymword>XML</acronymword></acronym> for which the <acronym><acronymword>DTD</acronymword></acronym> and/or processing tools are
not generally available, and the machine-generated <acronym><acronymword>HTML</acronymword></acronym>,
PostScript or <acronym><acronymword>PDF</acronymword></acronym> produced by some word processors for
output purposes only.
</para>
<para>The &textldquo;Title Page&textrdquo; means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, &textldquo;Title Page&textrdquo; means
the text near the most prominent appearance of the work&textrsquo;s title,
preceding the beginning of the body of the text.
</para>
<para>The &textldquo;publisher&textrdquo; means any person or entity that distributes copies
of the Document to the public.
</para>
<para>A section &textldquo;Entitled XYZ&textrdquo; means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as &textldquo;Acknowledgements&textrdquo;,
&textldquo;Dedications&textrdquo;, &textldquo;Endorsements&textrdquo;, or &textldquo;History&textrdquo;.)  To &textldquo;Preserve the Title&textrdquo;
of such a section when you modify the Document means that it remains a
section &textldquo;Entitled XYZ&textrdquo; according to this definition.
</para>
<para>The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.
</para>
</listitem><listitem>
<para>VERBATIM COPYING
</para>
<para>You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.
</para>
<para>You may also lend copies, under the same conditions stated above, and
you may publicly display copies.
</para>
</listitem><listitem>
<para>COPYING IN QUANTITY
</para>
<para>If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document&textrsquo;s license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.
</para>
<para>If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.
</para>
<para>If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.
</para>
<para>It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.
</para>
</listitem><listitem>
<para>MODIFICATIONS
</para>
<para>You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:
</para>
<enumerate first="A" spaces=" " endspaces=" "><enumeratefirst>A</enumeratefirst>
<listitem>
<para>Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.
</para>
</listitem><listitem>
<para>List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has fewer than five),
unless they release you from this requirement.
</para>
</listitem><listitem>
<para>State on the Title page the name of the publisher of the
Modified Version, as the publisher.
</para>
</listitem><listitem>
<para>Preserve all the copyright notices of the Document.
</para>
</listitem><listitem>
<para>Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.
</para>
</listitem><listitem>
<para>Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.
</para>
</listitem><listitem>
<para>Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document&textrsquo;s license notice.
</para>
</listitem><listitem>
<para>Include an unaltered copy of this License.
</para>
</listitem><listitem>
<para>Preserve the section Entitled &textldquo;History&textrdquo;, Preserve its Title, and add
to it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section Entitled &textldquo;History&textrdquo; in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.
</para>
</listitem><listitem>
<para>Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the &textldquo;History&textrdquo; section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.
</para>
</listitem><listitem>
<para>For any section Entitled &textldquo;Acknowledgements&textrdquo; or &textldquo;Dedications&textrdquo;, Preserve
the Title of the section, and preserve in the section all the
substance and tone of each of the contributor acknowledgements and/or
dedications given therein.
</para>
</listitem><listitem>
<para>Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.
</para>
</listitem><listitem>
<para>Delete any section Entitled &textldquo;Endorsements&textrdquo;.  Such a section
may not be included in the Modified Version.
</para>
</listitem><listitem>
<para>Do not retitle any existing section to be Entitled &textldquo;Endorsements&textrdquo; or
to conflict in title with any Invariant Section.
</para>
</listitem><listitem>
<para>Preserve any Warranty Disclaimers.
</para></listitem></enumerate>

<para>If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version&textrsquo;s license notice.
These titles must be distinct from any other section titles.
</para>
<para>You may add a section Entitled &textldquo;Endorsements&textrdquo;, provided it contains
nothing but endorsements of your Modified Version by various
parties&textmdash;for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.
</para>
<para>You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.
</para>
<para>The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.
</para>
</listitem><listitem>
<para>COMBINING DOCUMENTS
</para>
<para>You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.
</para>
<para>The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.
</para>
<para>In the combination, you must combine any sections Entitled &textldquo;History&textrdquo;
in the various original documents, forming one section Entitled
&textldquo;History&textrdquo;; likewise combine any sections Entitled &textldquo;Acknowledgements&textrdquo;,
and any sections Entitled &textldquo;Dedications&textrdquo;.  You must delete all
sections Entitled &textldquo;Endorsements.&textrdquo;
</para>
</listitem><listitem>
<para>COLLECTIONS OF DOCUMENTS
</para>
<para>You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.
</para>
<para>You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.
</para>
</listitem><listitem>
<para>AGGREGATION WITH INDEPENDENT WORKS
</para>
<para>A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an &textldquo;aggregate&textrdquo; if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation&textrsquo;s users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.
</para>
<para>If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document&textrsquo;s Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.
</para>
</listitem><listitem>
<para>TRANSLATION
</para>
<para>Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.
</para>
<para>If a section in the Document is Entitled &textldquo;Acknowledgements&textrdquo;,
&textldquo;Dedications&textrdquo;, or &textldquo;History&textrdquo;, the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.
</para>
</listitem><listitem>
<para>TERMINATION
</para>
<para>You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.
</para>
<para>However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.
</para>
<para>Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.
</para>
<para>Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.
</para>
</listitem><listitem>
<para>FUTURE REVISIONS OF THIS LICENSE
</para>
<para>The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
<uref><urefurl>http://www.gnu.org/copyleft/</urefurl></uref>.
</para>
<para>Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License &textldquo;or any later version&textrdquo; applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy&textrsquo;s public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.
</para>
</listitem><listitem>
<para>RELICENSING
</para>
<para>&textldquo;Massive Multiauthor Collaboration Site&textrdquo; (or &textldquo;MMC Site&textrdquo;) means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
&textldquo;Massive Multiauthor Collaboration&textrdquo; (or &textldquo;MMC&textrdquo;) contained in the
site means any set of copyrightable works thus published on the MMC
site.
</para>
<para>&textldquo;CC-BY-SA&textrdquo; means the Creative Commons Attribution-Share Alike 3.0
license published by Creative Commons Corporation, a not-for-profit
corporation with a principal place of business in San Francisco,
California, as well as future copyleft versions of that license
published by that same organization.
</para>
<para>&textldquo;Incorporate&textrdquo; means to publish or republish a Document, in whole or
in part, as part of another Document.
</para>
<para>An MMC is &textldquo;eligible for relicensing&textrdquo; if it is licensed under this
License, and if all works that were first published under this License
somewhere other than this MMC, and subsequently incorporated in whole
or in part into the MMC, (1) had no cover texts or invariant sections,
and (2) were thus incorporated prior to November 1, 2008.
</para>
<para>The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.
</para>
</listitem></enumerate>

<page></page>
<unnumberedsec spaces=" "><sectiontitle>ADDENDUM: How to use this License for your documents</sectiontitle>

<para>To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:
</para>
<smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">  Copyright (C)  <var>year</var>  <var>your name</var>.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
  Texts.  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
</pre></group>
</smallexample>

<para>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the &textldquo;with...Texts.&textrdquo; line with this:
</para>
<smallexample endspaces=" ">
<group endspaces=" ">
<pre xml:space="preserve">    with the Invariant Sections being <var>list their titles</var>, with
    the Front-Cover Texts being <var>list</var>, and with the Back-Cover Texts
    being <var>list</var>.
</pre></group>
</smallexample>

<para>If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.
</para>
<para>If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
</para>
<!-- c Local Variables: -->
<!-- c ispell-local-pdict: "ispell-dict" -->
<!-- c End: -->

<!-- c man end -->

<!-- c Copyright (C) 1988-2015 Free Software Foundation, Inc. -->
<!-- c This is part of the GCC manual. -->
<!-- c For copying conditions, see the file gcc.texi. -->

</unnumberedsec>
</unnumbered>
<node name="Contributors" spaces=" "><nodename>Contributors</nodename><nodenext automatic="on">Option Index</nodenext><nodeprev automatic="on">GNU Free Documentation License</nodeprev><nodeup automatic="on">Top</nodeup></node>
<unnumbered spaces=" "><sectiontitle>Contributors to GCC</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp" number="1004">contributors</indexterm></cindex>

<para>The GCC project would like to thank its many contributors.  Without them the
project would not have been nearly as successful as it has been.  Any omissions
in this list are accidental.  Feel free to contact
<email><emailaddress>law&arobase;redhat.com</emailaddress></email> or <email><emailaddress>gerald&arobase;pfeifer.com</emailaddress></email> if you have been left
out or some of your contributions are not listed.  Please keep this list in
alphabetical order.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>Analog Devices helped implement the support for complex data types
and iterators.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>John David Anglin for threading-related fixes and improvements to
libstdc++-v3, and the HP-UX port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>James van Artsdalen wrote the code that makes efficient use of
the Intel 80387 register stack.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Abramo and Roberto Bagnara for the SysV68 Motorola 3300 Delta Series
port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Alasdair Baird for various bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Giovanni Bajo for analyzing lots of complicated C++ problem reports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Peter Barada for his work to improve code generation for new
ColdFire cores.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Gerald Baumgartner added the signature extension to the C++ front end.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Godmar Back for his Java improvements and encouragement.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Scott Bambrough for help porting the Java compiler.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Wolfgang Bangerth for processing tons of bug reports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jon Beniston for his Microsoft Windows port of Java and port to Lattice Mico32.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Daniel Berlin for better DWARF2 support, faster/better optimizations,
improved alias analysis, plus migrating GCC to Bugzilla.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Geoff Berry for his Java object serialization work and various patches.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Binderman tests weekly snapshots of GCC trunk against Fedora Rawhide
for several architectures.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Laurynas Biveinis for memory management work and DJGPP port fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Uros Bizjak for the implementation of x87 math built-in functions and
for various middle end and i386 back end improvements and bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Eric Blake for helping to make GCJ and libgcj conform to the
specifications.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Janne Blomqvist for contributions to GNU Fortran.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Segher Boessenkool for various fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Hans-J. Boehm for his <uref><urefurl>http://www.hpl.hp.com/&slashbreak;personal/&slashbreak;Hans_Boehm/&slashbreak;gc/</urefurl><urefreplacement spaces="\n">garbage collector</urefreplacement></uref>, IA-64 libffi port, and other Java work.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Neil Booth for work on cpplib, lang hooks, debug hooks and other
miscellaneous clean-ups.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Steven Bosscher for integrating the GNU Fortran front end into GCC and for
contributing to the tree-ssa branch.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Eric Botcazou for fixing middle- and backend bugs left and right.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Per Bothner for his direction via the steering committee and various
improvements to the infrastructure for supporting new languages.  Chill
front end implementation.  Initial implementations of
cpplib, fix-header, config.guess, libio, and past C++ library (libg++)
maintainer.  Dreaming up, designing and implementing much of GCJ&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Devon Bowen helped port GCC to the Tahoe.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Don Bowman for mips-vxworks contributions.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Dave Brolley for work on cpplib and Chill.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Paul Brook for work on the ARM architecture and maintaining GNU Fortran.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Robert Brown implemented the support for Encore 32000 systems.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Christian Bruel for improvements to local store elimination.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Herman A.J. ten Brugge for various fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Joerg Brunsmann for Java compiler hacking and help with the GCJ FAQ&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Joe Buck for his direction via the steering committee from its creation
to 2013.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Craig Burley for leadership of the G77 Fortran effort.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Stephan Buys for contributing Doxygen notes for libstdc++.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Paolo Carlini for libstdc++ work: lots of efficiency improvements to
the C++ strings, streambufs and formatted I/O, hard detective work on
the frustrating localization issues, and keeping up with the problem reports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>John Carr for his alias work, SPARC hacking, infrastructure improvements,
previous contributions to the steering committee, loop optimizations, etc.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Stephane Carrez for 68HC11 and 68HC12 ports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Steve Chamberlain for support for the Renesas SH and H8 processors
and the PicoJava processor, and for GCJ config fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Glenn Chambers for help with the GCJ FAQ&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>John-Marc Chandonia for various libgcj patches.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Denis Chertykov for contributing and maintaining the AVR port, the first GCC port
for an 8-bit architecture.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Scott Christley for his Objective-C contributions.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Eric Christopher for his Java porting help and clean-ups.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Branko Cibej for more warning contributions.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The <uref><urefurl>http://www.gnu.org/software/classpath/</urefurl><urefreplacement>GNU Classpath project</urefreplacement></uref>
for all of their merged runtime code.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Nick Clifton for arm, mcore, fr30, v850, m32r, msp430 rx work,
<option>--help</option>, and other random hacking.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Michael Cook for libstdc++ cleanup patches to reduce warnings.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>R. Kelley Cook for making GCC buildable from a read-only directory as
well as other miscellaneous build process and documentation clean-ups.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ralf Corsepius for SH testing and minor bug fixing.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Stan Cox for care and feeding of the x86 port and lots of behind
the scenes hacking.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Alex Crain provided changes for the 3b1.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ian Dall for major improvements to the NS32k port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Paul Dale for his work to add uClinux platform support to the
m68k backend.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Dario Dariol contributed the four varieties of sample programs
that print a copy of their source.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Russell Davidson for fstream and stringstream fixes in libstdc++.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bud Davis for work on the G77 and GNU Fortran compilers.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mo DeJong for GCJ and libgcj bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>DJ Delorie for the DJGPP port, build and libiberty maintenance,
various bug fixes, and the M32C, MeP, MSP430, and RL78 ports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Arnaud Desitter for helping to debug GNU Fortran.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Gabriel Dos Reis for contributions to G++, contributions and
maintenance of GCC diagnostics infrastructure, libstdc++-v3,
including <code>valarray&lt;&gt;</code>, <code>complex&lt;&gt;</code>, maintaining the numerics library
(including that pesky <code>&lt;limits&gt;</code> :-) and keeping up-to-date anything
to do with numbers.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ulrich Drepper for his work on glibc, testing of GCC using glibc, ISO C99
support, CFG dumping support, etc., plus support of the C++ runtime
libraries including for all kinds of C interface issues, contributing and
maintaining <code>complex&lt;&gt;</code>, sanity checking and disbursement, configuration
architecture, libio maintenance, and early math work.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Fran<accent type="cedil">c</accent>ois Dumont for his work on libstdc++-v3, especially maintaining and
improving <code>debug-mode</code> and associative and unordered containers.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Zdenek Dvorak for a new loop unroller and various fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Michael Eager for his work on the Xilinx MicroBlaze port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Richard Earnshaw for his ongoing work with the ARM&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Edelsohn for his direction via the steering committee, ongoing work
with the RS6000/PowerPC port, help cleaning up Haifa loop changes,
doing the entire AIX port of libstdc++ with his bare hands, and for
ensuring GCC properly keeps working on AIX&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kevin Ediger for the floating point formatting of num_put::do_put in
libstdc++.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Phil Edwards for libstdc++ work including configuration hackery,
documentation maintainer, chief breaker of the web pages, the occasional
iostream bug fix, and work on shared library symbol versioning.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Paul Eggert for random hacking all over GCC&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mark Elbrecht for various DJGPP improvements, and for libstdc++
configuration support for locales and fstream-related fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Vadim Egorov for libstdc++ fixes in strings, streambufs, and iostreams.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Christian Ehrhardt for dealing with bug reports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ben Elliston for his work to move the Objective-C runtime into its
own subdirectory and for his work on autoconf.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Revital Eres for work on the PowerPC 750CL port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Marc Espie for OpenBSD support.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Doug Evans for much of the global optimization framework, arc, m32r,
and SPARC work.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Christopher Faylor for his work on the Cygwin port and for caring and
feeding the gcc.gnu.org box and saving its users tons of spam.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Fred Fish for BeOS support and Ada fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ivan Fontes Garcia for the Portuguese translation of the GCJ FAQ&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Peter Gerwinski for various bug fixes and the Pascal front end.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kaveh R.&noeos; Ghazi for his direction via the steering committee, amazing
work to make <samp>-W -Wall -W* -Werror</samp> useful, and 
testing GCC on a plethora of platforms.  Kaveh extends his gratitude to
the CAIP Center at Rutgers University for providing him with computing
resources to work on Free Software from the late 1980s to 2010.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>John Gilmore for a donation to the FSF earmarked improving GNU Java.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Judy Goldberg for c++ contributions.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Torbjorn Granlund for various fixes and the c-torture testsuite,
multiply- and divide-by-constant optimization, improved long long
support, improved leaf function register allocation, and his direction
via the steering committee.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jonny Grant for improvements to <code>collect2's</code> <option>--help</option> documentation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Anthony Green for his <option>-Os</option> contributions, the moxie port, and
Java front end work.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Stu Grossman for gdb hacking, allowing GCJ developers to debug Java code.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Michael K. Gschwind contributed the port to the PDP-11.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Richard Biener for his ongoing middle-end contributions and bug fixes
and for release management.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ron Guilmette implemented the <command>protoize</command> and <command>unprotoize</command>
tools, the support for Dwarf symbolic debugging information, and much of
the support for System V Release 4.  He has also worked heavily on the
Intel 386 and 860 support.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Sumanth Gundapaneni for contributing the CR16 port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mostafa Hagog for Swing Modulo Scheduling (SMS) and post reload GCSE&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bruno Haible for improvements in the runtime overhead for EH, new
warnings and assorted bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andrew Haley for his amazing Java compiler and library efforts.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Chris Hanson assisted in making GCC work on HP-UX for the 9000 series 300.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Michael Hayes for various thankless work he&textrsquo;s done trying to get
the c30/c40 ports functional.  Lots of loop and unroll improvements and
fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Dara Hazeghi for wading through myriads of target-specific bug reports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kate Hedstrom for staking the G77 folks with an initial testsuite.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Richard Henderson for his ongoing SPARC, alpha, ia32, and ia64 work, loop
opts, and generally fixing lots of old problems we&textrsquo;ve ignored for
years, flow rewrite and lots of further stuff, including reviewing
tons of patches.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Aldy Hernandez for working on the PowerPC port, SIMD support, and
various fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Nobuyuki Hikichi of Software Research Associates, Tokyo, contributed
the support for the Sony NEWS machine.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kazu Hirata for caring and feeding the Renesas H8/300 port and various fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Katherine Holcomb for work on GNU Fortran.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Manfred Hollstein for his ongoing work to keep the m88k alive, lots
of testing and bug fixing, particularly of GCC configury code.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Steve Holmgren for MachTen patches.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mat Hostetter for work on the TILE-Gx and TILEPro ports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jan Hubicka for his x86 port improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Falk Hueffner for working on C and optimization bug reports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bernardo Innocenti for his m68k work, including merging of
ColdFire improvements and uClinux support.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Christian Iseli for various bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kamil Iskra for general m68k hacking.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Lee Iverson for random fixes and MIPS testing.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Balaji V. Iyer for Cilk+ development and merging.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andreas Jaeger for testing and benchmarking of GCC and various bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Martin Jambor for his work on inter-procedural optimizations, the
switch conversion pass, and scalar replacement of aggregates.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jakub Jelinek for his SPARC work and sibling call optimizations as well
as lots of bug fixes and test cases, and for improving the Java build
system.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Janis Johnson for ia64 testing and fixes, her quality improvement
sidetracks, and web page maintenance.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kean Johnston for SCO OpenServer support and various fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Tim Josling for the sample language treelang based originally on Richard
Kenner&textrsquo;s &textldquo;toy&textrdquo; language.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Nicolai Josuttis for additional libstdc++ documentation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Klaus Kaempf for his ongoing work to make alpha-vms a viable target.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Steven G. Kargl for work on GNU Fortran.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Kashtan of SRI adapted GCC to VMS&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ryszard Kabatek for many, many libstdc++ bug fixes and optimizations of
strings, especially member functions, and for auto_ptr fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Geoffrey Keating for his ongoing work to make the PPC work for GNU/Linux
and his automatic regression tester.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Brendan Kehoe for his ongoing work with G++ and for a lot of early work
in just about every part of libstdc++.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Oliver M. Kellogg of Deutsche Aerospace contributed the port to the
MIL-STD-1750A&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Richard Kenner of the New York University Ultracomputer Research
Laboratory wrote the machine descriptions for the AMD 29000, the DEC
Alpha, the IBM RT PC, and the IBM RS/6000 as well as the support for
instruction attributes.  He also made changes to better support RISC
processors including changes to common subexpression elimination,
strength reduction, function calling sequence handling, and condition
code support, in addition to generalizing the code for frame pointer
elimination and delay slot scheduling.  Richard Kenner was also the
head maintainer of GCC for several years.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mumit Khan for various contributions to the Cygwin and Mingw32 ports and
maintaining binary releases for Microsoft Windows hosts, and for massive libstdc++
porting work to Cygwin/Mingw32.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Robin Kirkham for cpu32 support.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mark Klein for PA improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Thomas Koenig for various bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bruce Korb for the new and improved fixincludes code.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Benjamin Kosnik for his G++ work and for leading the libstdc++-v3 effort.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Maxim Kuvyrkov for contributions to the instruction scheduler, the Android 
and m68k/Coldfire ports, and optimizations.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Charles LaBrec contributed the support for the Integrated Solutions
68020 system.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Asher Langton and Mike Kumbera for contributing Cray pointer support
to GNU Fortran, and for other GNU Fortran improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jeff Law for his direction via the steering committee, coordinating the
entire egcs project and GCC 2.95, rolling out snapshots and releases,
handling merges from GCC2, reviewing tons of patches that might have
fallen through the cracks else, and random but extensive hacking.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Walter Lee for work on the TILE-Gx and TILEPro ports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Marc Lehmann for his direction via the steering committee and helping
with analysis and improvements of x86 performance.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Victor Leikehman for work on GNU Fortran.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ted Lemon wrote parts of the RTL reader and printer.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kriang Lerdsuwanakij for C++ improvements including template as template
parameter support, and many C++ fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Warren Levy for tremendous work on libgcj (Java Runtime Library) and
random work on the Java front end.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Alain Lichnewsky ported GCC to the MIPS CPU&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Oskar Liljeblad for hacking on AWT and his many Java bug reports and
patches.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Robert Lipe for OpenServer support, new testsuites, testing, etc.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Chen Liqin for various S+core related fixes/improvement, and for
maintaining the S+core port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Weiwen Liu for testing and various bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Manuel L<accent type="acute" bracketed="off">o</accent>pez-Ib<accent type="acute" bracketed="off">a</accent><accent type="tilde" bracketed="off">n</accent>ez for improving <option>-Wconversion</option> and
many other diagnostics fixes and improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Dave Love for his ongoing work with the Fortran front end and
runtime libraries.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Martin von L<accent type="uml" bracketed="off">o</accent>wis for internal consistency checking infrastructure,
various C++ improvements including namespace support, and tons of
assistance with libstdc++/compiler merges.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>H.J. Lu for his previous contributions to the steering committee, many x86
bug reports, prototype patches, and keeping the GNU/Linux ports working.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Greg McGary for random fixes and (someday) bounded pointers.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andrew MacLeod for his ongoing work in building a real EH system,
various code generation improvements, work on the global optimizer, etc.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Vladimir Makarov for hacking some ugly i960 problems, PowerPC hacking
improvements to compile-time performance, overall knowledge and
direction in the area of instruction scheduling, and design and
implementation of the automaton based instruction scheduler.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bob Manson for his behind the scenes work on dejagnu.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>John Marino for contributing the DragonFly BSD port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Philip Martin for lots of libstdc++ string and vector iterator fixes and
improvements, and string clean up and testsuites.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Michael Matz for his work on dominance tree discovery, the x86-64 port,
link-time optimization framework and general optimization improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>All of the Mauve project
<uref><urefurl>http://sourceware.org/cgi-bin/cvsweb.cgi/~checkout~/mauve/THANKS?rev=1.2&amp;cvsroot=mauve&amp;only_with_tag=HEAD</urefurl><urefreplacement>contributors</urefreplacement></uref>,
for Java test code.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bryce McKinlay for numerous GCJ and libgcj fixes and improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Adam Megacz for his work on the Microsoft Windows port of GCJ&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Michael Meissner for LRS framework, ia32, m32r, v850, m88k, MIPS,
powerpc, haifa, ECOFF debug support, and other assorted hacking.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jason Merrill for his direction via the steering committee and leading
the G++ effort.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Martin Michlmayr for testing GCC on several architectures using the
entire Debian archive.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Miller for his direction via the steering committee, lots of
SPARC work, improvements in jump.c and interfacing with the Linux kernel
developers.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Gary Miller ported GCC to Charles River Data Systems machines.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Alfred Minarik for libstdc++ string and ios bug fixes, and turning the
entire libstdc++ testsuite namespace-compatible.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mark Mitchell for his direction via the steering committee, mountains of
C++ work, load/store hoisting out of loops, alias analysis improvements,
ISO C <code>restrict</code> support, and serving as release manager from 2000
to 2011.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Alan Modra for various GNU/Linux bits and testing.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Toon Moene for his direction via the steering committee, Fortran
maintenance, and his ongoing work to make us make Fortran run fast.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jason Molenda for major help in the care and feeding of all the services
on the gcc.gnu.org (formerly egcs.cygnus.com) machine&textmdash;mail, web
services, ftp services, etc etc.  Doing all this work on scrap paper and
the backs of envelopes would have been&dots; difficult.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Catherine Moore for fixing various ugly problems we have sent her
way, including the haifa bug which was killing the Alpha &amp; PowerPC
Linux kernels.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mike Moreton for his various Java patches.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Mosberger-Tang for various Alpha improvements, and for the initial
IA-64 port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Stephen Moshier contributed the floating point emulator that assists in
cross-compilation and permits support for floating point numbers wider
than 64 bits and for ISO C99 support.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bill Moyer for his behind the scenes work on various issues.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Philippe De Muyter for his work on the m68k port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Joseph S. Myers for his work on the PDP-11 port, format checking and ISO
C99 support, and continuous emphasis on (and contributions to) documentation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Nathan Myers for his work on libstdc++-v3: architecture and authorship
through the first three snapshots, including implementation of locale
infrastructure, string, shadow C headers, and the initial project
documentation (DESIGN, CHECKLIST, and so forth).  Later, more work on
MT-safe string and shadow headers.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Felix Natter for documentation on porting libstdc++.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Nathanael Nerode for cleaning up the configuration/build process.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>NeXT, Inc.&noeos; donated the front end that supports the Objective-C
language.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Hans-Peter Nilsson for the CRIS and MMIX ports, improvements to the search
engine setup, various documentation fixes and other small fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Geoff Noer for his work on getting cygwin native builds working.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Diego Novillo for his work on Tree SSA, OpenMP, SPEC performance
tracking web pages, GIMPLE tuples, and assorted fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David O&textrsquo;Brien for the FreeBSD/alpha, FreeBSD/AMD x86-64, FreeBSD/ARM,
FreeBSD/PowerPC, and FreeBSD/SPARC64 ports and related infrastructure
improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Alexandre Oliva for various build infrastructure improvements, scripts and
amazing testing work, including keeping libtool issues sane and happy.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Stefan Olsson for work on mt_alloc.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Melissa O&textrsquo;Neill for various NeXT fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Rainer Orth for random MIPS work, including improvements to GCC&textrsquo;s o32
ABI support, improvements to dejagnu&textrsquo;s MIPS support, Java configuration
clean-ups and porting work, and maintaining the IRIX, Solaris 2, and
Tru64 UNIX ports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Hartmut Penner for work on the s390 port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Paul Petersen wrote the machine description for the Alliant FX/8.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Alexandre Petit-Bianco for implementing much of the Java compiler and
continued Java maintainership.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Matthias Pfaller for major improvements to the NS32k port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Gerald Pfeifer for his direction via the steering committee, pointing
out lots of problems we need to solve, maintenance of the web pages, and
taking care of documentation maintenance in general.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andrew Pinski for processing bug reports by the dozen.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ovidiu Predescu for his work on the Objective-C front end and runtime
libraries.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jerry Quinn for major performance improvements in C++ formatted I/O&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ken Raeburn for various improvements to checker, MIPS ports and various
cleanups in the compiler.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Rolf W. Rasmussen for hacking on AWT&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Reese of Sun Microsystems contributed to the Solaris on PowerPC
port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Volker Reichelt for keeping up with the problem reports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Joern Rennecke for maintaining the sh port, loop, regmove &amp; reload
hacking and developing and maintaining the Epiphany port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Loren J. Rittle for improvements to libstdc++-v3 including the FreeBSD
port, threading fixes, thread-related configury changes, critical
threading documentation, and solutions to really tricky I/O problems,
as well as keeping GCC properly working on FreeBSD and continuous testing.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Craig Rodrigues for processing tons of bug reports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ola R<accent type="uml" bracketed="off">o</accent>nnerup for work on mt_alloc.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Gavin Romig-Koch for lots of behind the scenes MIPS work.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Ronis inspired and encouraged Craig to rewrite the G77
documentation in texinfo format by contributing a first pass at a
translation of the old <file>g77-0.5.16/f/DOC</file> file.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ken Rose for fixes to GCC&textrsquo;s delay slot filling code.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ira Rosen for her contributions to the auto-vectorizer.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Paul Rubin wrote most of the preprocessor.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>P<accent type="acute" bracketed="off">e</accent>tur Run<accent type="acute" bracketed="off">o</accent>lfsson for major performance improvements in C++ formatted I/O and
large file support in C++ filebuf.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Chip Salzenberg for libstdc++ patches and improvements to locales, traits,
Makefiles, libio, libtool hackery, and &textldquo;long long&textrdquo; support.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Juha Sarlin for improvements to the H8 code generator.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Greg Satz assisted in making GCC work on HP-UX for the 9000 series 300.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Roger Sayle for improvements to constant folding and GCC&textrsquo;s RTL optimizers
as well as for fixing numerous bugs.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bradley Schatz for his work on the GCJ FAQ&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Peter Schauer wrote the code to allow debugging to work on the Alpha.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>William Schelter did most of the work on the Intel 80386 support.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Tobias Schl<accent type="uml" bracketed="off">u</accent>ter for work on GNU Fortran.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bernd Schmidt for various code generation improvements and major
work in the reload pass, serving as release manager for
GCC 2.95.3, and work on the Blackfin and C6X ports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Peter Schmid for constant testing of libstdc++&textmdash;especially application
testing, going above and beyond what was requested for the release
criteria&textmdash;and libstdc++ header file tweaks.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jason Schroeder for jcf-dump patches.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andreas Schwab for his work on the m68k port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Lars Segerlund for work on GNU Fortran.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Dodji Seketeli for numerous C++ bug fixes and debug info improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Tim Shen for major work on <code>&lt;regex&gt;</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Joel Sherrill for his direction via the steering committee, RTEMS
contributions and RTEMS testing.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Nathan Sidwell for many C++ fixes/improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jeffrey Siegal for helping RMS with the original design of GCC, some
code which handles the parse tree and RTL data structures, constant
folding and help with the original VAX &amp; m68k ports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kenny Simpson for prompting libstdc++ fixes due to defect reports from
the LWG (thereby keeping GCC in line with updates from the ISO)&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Franz Sirl for his ongoing work with making the PPC port stable
for GNU/Linux.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andrey Slepuhin for assorted AIX hacking.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Trevor Smigiel for contributing the SPU port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Christopher Smith did the port for Convex machines.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Danny Smith for his major efforts on the Mingw (and Cygwin) ports.
Retired from GCC maintainership August 2010, having mentored two 
new maintainers into the role.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Randy Smith finished the Sun FPA support.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ed Smith-Rowland for his continuous work on libstdc++-v3, special functions,
<code>&lt;random&gt;</code>, and various improvements to C++11 features.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Scott Snyder for queue, iterator, istream, and string fixes and libstdc++
testsuite entries.  Also for providing the patch to G77 to add
rudimentary support for <code>INTEGER*1</code>, <code>INTEGER*2</code>, and
<code>LOGICAL*1</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Zdenek Sojka for running automated regression testing of GCC and reporting
numerous bugs.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jayant Sonar for contributing the CR16 port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Brad Spencer for contributions to the GLIBCPP_FORCE_NEW technique.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Richard Stallman, for writing the original GCC and launching the GNU project.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jan Stein of the Chalmers Computer Society provided support for
Genix, as well as part of the 32000 machine description.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Nigel Stephens for various mips16 related fixes/improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jonathan Stone wrote the machine description for the Pyramid computer.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Graham Stott for various infrastructure improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>John Stracke for his Java HTTP protocol fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mike Stump for his Elxsi port, G++ contributions over the years and more
recently his vxworks contributions
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jeff Sturm for Java porting help, bug fixes, and encouragement.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Shigeya Suzuki for this fixes for the bsdi platforms.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ian Lance Taylor for the Go frontend, the initial mips16 and mips64
support, general configury hacking, fixincludes, etc.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Holger Teutsch provided the support for the Clipper CPU&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Gary Thomas for his ongoing work to make the PPC work for GNU/Linux.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Philipp Thomas for random bug fixes throughout the compiler
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jason Thorpe for thread support in libstdc++ on NetBSD&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kresten Krab Thorup wrote the run time support for the Objective-C
language and the fantastic Java bytecode interpreter.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Michael Tiemann for random bug fixes, the first instruction scheduler,
initial C++ support, function integration, NS32k, SPARC and M88k
machine description work, delay slot scheduling.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andreas Tobler for his work porting libgcj to Darwin.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Teemu Torma for thread safe exception handling support.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Leonard Tower wrote parts of the parser, RTL generator, and RTL
definitions, and of the VAX machine description.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Daniel Towner and Hariharan Sandanagobalane contributed and
maintain the picoChip port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Tom Tromey for internationalization support and for his many Java
contributions and libgcj maintainership.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Lassi Tuura for improvements to config.guess to determine HP processor
types.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Petter Urkedal for libstdc++ CXXFLAGS, math, and algorithms fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andy Vaught for the design and initial implementation of the GNU Fortran
front end.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Brent Verner for work with the libstdc++ cshadow files and their
associated configure steps.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Todd Vierling for contributions for NetBSD ports.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jonathan Wakely for contributing libstdc++ Doxygen notes and XHTML
guidance.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Dean Wakerley for converting the install documentation from HTML to texinfo
in time for GCC 3.0.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Krister Walfridsson for random bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Feng Wang for contributions to GNU Fortran.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Stephen M. Webb for time and effort on making libstdc++ shadow files
work with the tricky Solaris 8+ headers, and for pushing the build-time
header tree. Also, for starting and driving the <code>&lt;regex&gt;</code> effort.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>John Wehle for various improvements for the x86 code generator,
related infrastructure improvements to help x86 code generation,
value range propagation and other work, WE32k port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ulrich Weigand for work on the s390 port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Zack Weinberg for major work on cpplib and various other bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Matt Welsh for help with Linux Threads support in GCJ&eosperiod;
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Urban Widmark for help fixing java.io.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mark Wielaard for new Java library code and his work integrating with
Classpath.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Dale Wiles helped port GCC to the Tahoe.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bob Wilson from Tensilica, Inc.&noeos; for the Xtensa port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jim Wilson for his direction via the steering committee, tackling hard
problems in various places that nobody else wanted to work on, strength
reduction and other loop optimizations.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Paul Woegerer and Tal Agmon for the CRX port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Carlo Wood for various fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Tom Wood for work on the m88k port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Chung-Ju Wu for his work on the Andes NDS32 port.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Canqun Yang for work on GNU Fortran.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Masanobu Yuhara of Fujitsu Laboratories implemented the machine
description for the Tron architecture (specifically, the Gmicro).
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kevin Zachmann helped port GCC to the Tahoe.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ayal Zaks for Swing Modulo Scheduling (SMS).
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Xiaoqiang Zhang for work on GNU Fortran.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Gilles Zunino for help porting Java to Irix.
</para>
</listitem></itemize>

<para>The following people are recognized for their contributions to GNAT,
the Ada front end of GCC:
</para><itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Bernard Banner
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Romain Berrendonner
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Geert Bosch
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Emmanuel Briot
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Joel Brobecker
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ben Brosgol
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Vincent Celier
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Arnaud Charlet
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Chien Chieng
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Cyrille Comar
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Cyrille Crozes
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Robert Dewar
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Gary Dismukes
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Robert Duff
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ed Falis
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ramon Fernandez
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Sam Figueroa
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Vasiliy Fofanov
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Michael Friess
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Franco Gasperoni
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ted Giering
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Matthew Gingell
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Laurent Guerby
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jerome Guitton
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Olivier Hainque
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jerome Hugues
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Hristian Kirtchev
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jerome Lambourg
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bruno Leclerc
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Albert Lee
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Sean McNeil
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Javier Miranda
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Laurent Nana
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Pascal Obry
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Dong-Ik Oh
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Laurent Pautet
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Brett Porter
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Thomas Quinot
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Nicolas Roche
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Pat Rogers
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jose Ruiz
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Douglas Rupp
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Sergey Rybin
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Gail Schenker
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ed Schonberg
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Nicolas Setton
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Samuel Tardieu
</para>
</listitem></itemize>


<para>The following people are recognized for their contributions of new
features, bug reports, testing and integration of classpath/libgcj for
GCC version 4.1:
</para><itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Lillian Angel for <code>JTree</code> implementation and lots Free Swing
additions and bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Wolfgang Baer for <code>GapContent</code> bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Anthony Balkissoon for <code>JList</code>, Free Swing 1.5 updates and mouse event
fixes, lots of Free Swing work including <code>JTable</code> editing.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Stuart Ballard for RMI constant fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Goffredo Baroncelli for <code>HTTPURLConnection</code> fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Gary Benson for <code>MessageFormat</code> fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Daniel Bonniot for <code>Serialization</code> fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Chris Burdess for lots of gnu.xml and http protocol fixes, <code>StAX</code>
and <code>DOM xml:id</code> support.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ka-Hing Cheung for <code>TreePath</code> and <code>TreeSelection</code> fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Archie Cobbs for build fixes, VM interface updates,
<code>URLClassLoader</code> updates.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kelley Cook for build fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Martin Cordova for Suggestions for better <code>SocketTimeoutException</code>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Daney for <code>BitSet</code> bug fixes, <code>HttpURLConnection</code>
rewrite and improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Thomas Fitzsimmons for lots of upgrades to the gtk+ AWT and Cairo 2D
support. Lots of imageio framework additions, lots of AWT and Free
Swing bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jeroen Frijters for <code>ClassLoader</code> and nio cleanups, serialization fixes,
better <code>Proxy</code> support, bug fixes and IKVM integration.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Santiago Gala for <code>AccessControlContext</code> fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Nicolas Geoffray for <code>VMClassLoader</code> and <code>AccessController</code>
improvements.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Gilbert for <code>basic</code> and <code>metal</code> icon and plaf support
and lots of documenting, Lots of Free Swing and metal theme
additions. <code>MetalIconFactory</code> implementation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Anthony Green for <code>MIDI</code> framework, <code>ALSA</code> and <code>DSSI</code>
providers.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andrew Haley for <code>Serialization</code> and <code>URLClassLoader</code> fixes,
gcj build speedups.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kim Ho for <code>JFileChooser</code> implementation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andrew John Hughes for <code>Locale</code> and net fixes, URI RFC2986
updates, <code>Serialization</code> fixes, <code>Properties</code> XML support and
generic branch work, VMIntegration guide update.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bastiaan Huisman for <code>TimeZone</code> bug fixing.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andreas Jaeger for mprec updates.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Paul Jenner for better <option>-Werror</option> support.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ito Kazumitsu for <code>NetworkInterface</code> implementation and updates.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Roman Kennke for <code>BoxLayout</code>, <code>GrayFilter</code> and
<code>SplitPane</code>, plus bug fixes all over. Lots of Free Swing work
including styled text.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Simon Kitching for <code>String</code> cleanups and optimization suggestions.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Michael Koch for configuration fixes, <code>Locale</code> updates, bug and
build fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Guilhem Lavaux for configuration, thread and channel fixes and Kaffe
integration. JCL native <code>Pointer</code> updates. Logger bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Lichteblau for JCL support library global/local reference
cleanups.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Aaron Luchko for JDWP updates and documentation fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ziga Mahkovec for <code>Graphics2D</code> upgraded to Cairo 0.5 and new regex
features.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Sven de Marothy for BMP imageio support, CSS and <code>TextLayout</code>
fixes. <code>GtkImage</code> rewrite, 2D, awt, free swing and date/time fixes and
implementing the Qt4 peers.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Casey Marshall for crypto algorithm fixes, <code>FileChannel</code> lock,
<code>SystemLogger</code> and <code>FileHandler</code> rotate implementations, NIO
<code>FileChannel.map</code> support, security and policy updates.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bryce McKinlay for RMI work.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Audrius Meskauskas for lots of Free Corba, RMI and HTML work plus
testing and documenting.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kalle Olavi Niemitalo for build fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Rainer Orth for build fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andrew Overholt for <code>File</code> locking fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ingo Proetel for <code>Image</code>, <code>Logger</code> and <code>URLClassLoader</code>
updates.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Olga Rodimina for <code>MenuSelectionManager</code> implementation.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jan Roehrich for <code>BasicTreeUI</code> and <code>JTree</code> fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Julian Scheid for documentation updates and gjdoc support.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Christian Schlichtherle for zip fixes and cleanups.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Robert Schuster for documentation updates and beans fixes,
<code>TreeNode</code> enumerations and <code>ActionCommand</code> and various
fixes, XML and URL, AWT and Free Swing bug fixes.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Keith Seitz for lots of JDWP work.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Christian Thalinger for 64-bit cleanups, Configuration and VM
interface fixes and <code>CACAO</code> integration, <code>fdlibm</code> updates.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Gael Thomas for <code>VMClassLoader</code> boot packages support suggestions.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Andreas Tobler for Darwin and Solaris testing and fixing, <code>Qt4</code>
support for Darwin/OS X, <code>Graphics2D</code> support, <code>gtk+</code>
updates.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Dalibor Topic for better <code>DEBUG</code> support, build cleanups and
Kaffe integration. <code>Qt4</code> build infrastructure, <code>SHA1PRNG</code>
and <code>GdkPixbugDecoder</code> updates.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Tom Tromey for Eclipse integration, generics work, lots of bug fixes
and gcj integration including coordinating The Big Merge.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mark Wielaard for bug fixes, packaging and release management,
<code>Clipboard</code> implementation, system call interrupts and network
timeouts and <code>GdkPixpufDecoder</code> fixes.
</para>
</listitem></itemize>


<para>In addition to the above, all of which also contributed time and energy in
testing GCC, we would like to thank the following for their contributions
to testing:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet"/></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Michael Abd-El-Malek
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Thomas Arend
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bonzo Armstrong
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Steven Ashe
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Chris Baldwin
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Billinghurst
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jim Blandy
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Stephane Bortzmeyer
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Horst von Brand
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Frank Braun
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Rodney Brown
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Sidney Cadot
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bradford Castalia
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Robert Clark
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jonathan Corbet
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ralph Doncaster
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Richard Emberson
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Levente Farkas
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Graham Fawcett
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mark Fernyhough
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Robert A. French
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>J<accent type="uml" bracketed="off">o</accent>rgen Freyh
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Mark K. Gardner
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Charles-Antoine Gauthier
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Yung Shing Gene
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Gilbert
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Simon Gornall
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Fred Gray
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>John Griffin
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Patrik Hagglund
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Phil Hargett
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Amancio Hasty
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Takafumi Hayashi
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bryan W. Headley
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Kevin B. Hendricks
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Joep Jansen
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Christian Joensson
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Michel Kern
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Kidd
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Tobias Kuipers
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Anand Krishnaswamy
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>A. O. V. Le Blanc
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>llewelly
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Damon Love
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Brad Lucier
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Matthias Klose
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Martin Knoblauch
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Rick Lutowski
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jesse Macnish
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Stefan Morrell
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Anon A. Mous
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Matthias Mueller
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Pekka Nikander
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Rick Niles
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Jon Olson
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Magnus Persson
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Chris Pollard
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Richard Polton
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Derk Reefman
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Rees
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Paul Reilly
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Tom Reilly
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Torsten Rueger
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Danny Sadinoff
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Marc Schifer
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Erik Schnetter
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Wayne K. Schroll
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David Schuler
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Vin Shelton
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Tim Souder
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Adam Sulmicki
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Bill Thorson
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>George Talbot
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Pedro A. M. Vazquez
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Gregory Warnes
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Ian Watson
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>David E. Young
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>And many others
</para></listitem></itemize>

<para>And finally we&textrsquo;d like to thank everyone who uses the compiler, provides
feedback and generally reminds us why we&textrsquo;re doing this work in the first
place.
</para>
<!-- c - -->
<!-- c Indexes -->
<!-- c - -->

</unnumbered>
<node name="Option-Index" spaces=" "><nodename>Option Index</nodename><nodenext automatic="on">Keyword Index</nodenext><nodeprev automatic="on">Contributors</nodeprev><nodeup automatic="on">Top</nodeup></node>
<unnumbered spaces=" "><sectiontitle>Option Index</sectiontitle>

<para>GCC&textrsquo;s command line options are indexed here without any initial <samp>-</samp>
or <samp>--</samp>.  Where an option has both positive and negative forms
(such as <option>-f<var>option</var></option> and <option>-fno-<var>option</var></option>),
relevant entries in the manual are indexed under the most appropriate
form; it may sometimes be useful to look up both forms.
</para>
<printindex value="op" line=" op"></printindex>

</unnumbered>
<node name="Keyword-Index" spaces=" "><nodename>Keyword Index</nodename><nodeprev automatic="on">Option Index</nodeprev><nodeup automatic="on">Top</nodeup></node>
<unnumbered spaces=" "><sectiontitle>Keyword Index</sectiontitle>

<printindex value="cp" line=" cp"></printindex>

<!-- c - -->
<!-- c Epilogue -->
<!-- c - -->

</unnumbered>
<bye></bye>
</texinfo>
