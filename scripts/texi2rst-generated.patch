diff --git a/sphinx/gccint/machine-descriptions/operand-constraints.rst b/sphinx/gccint/machine-descriptions/operand-constraints.rst
index 6a1a3f7..06f581b 100644
--- a/sphinx/gccint/machine-descriptions/operand-constraints.rst
+++ b/sphinx/gccint/machine-descriptions/operand-constraints.rst
@@ -36,7 +36,7 @@ the addressing register.
 .. include:: ../share/md.rst
 
 
-    .. _disable-insn-alternatives:
+.. _disable-insn-alternatives:
 
 Disable insn alternatives using the enabled attribute
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
diff --git a/sphinx/gfc-internals/gfc-internals.rst b/sphinx/gfc-internals/gfc-internals.rst
index 2cc1a13..d76077a 100644
--- a/sphinx/gfc-internals/gfc-internals.rst
+++ b/sphinx/gfc-internals/gfc-internals.rst
@@ -30,9 +30,12 @@ Introduction
 This manual documents the internals of :command:`gfortran`, 
 the GNU Fortran compiler.
 
-*Warning:* This document, and the compiler it describes, are still
-under development.  While efforts are made to keep it up-to-date, it might
-not accurately reflect the status of the most recent GNU Fortran compiler.
+.. only:: development
+
+  .. warning::
+    This document, and the compiler it describes, are still
+    under development.  While efforts are made to keep it up-to-date, it might
+    not accurately reflect the status of the most recent GNU Fortran compiler.
 
 .. toctree::
 
diff --git a/sphinx/gfortran/gfortran.rst b/sphinx/gfortran/gfortran.rst
index 9a72dd4..356c9fe 100644
--- a/sphinx/gfortran/gfortran.rst
+++ b/sphinx/gfortran/gfortran.rst
@@ -42,9 +42,13 @@ This manual documents the use of :command:`gfortran`,
 the GNU Fortran compiler.  You can find in this manual how to invoke
 :command:`gfortran`, as well as its features and incompatibilities.
 
-*Warning:* This document, and the compiler it describes, are still
-under development.  While efforts are made to keep it up-to-date, it might
-not accurately reflect the status of the most recent GNU Fortran compiler.
+.. only:: development
+
+  .. warning::
+
+    This document, and the compiler it describes, are still
+    under development.  While efforts are made to keep it up-to-date, it might
+    not accurately reflect the status of the most recent GNU Fortran compiler.
 
 .. toctree::
 
diff --git a/sphinx/share/cppdiropts.rst b/sphinx/share/cppdiropts.rst
index ca0618a..e9ad351 100644
--- a/sphinx/share/cppdiropts.rst
+++ b/sphinx/share/cppdiropts.rst
@@ -2,7 +2,11 @@
 
   Add the directory :samp:`{dir}` to the list of directories to be searched
   for header files during preprocessing.
-  See :ref:`search-path`.
+
+  .. only:: cpp
+
+    See :ref:`search-path`.
+
   If :samp:`{dir}` begins with :samp:`=` or ``$SYSROOT``, then the :samp:`=`
   or ``$SYSROOT`` is replaced by the sysroot prefix; see
   :option:`--sysroot` and :option:`-isysroot`.
@@ -46,7 +50,11 @@
   The :option:`-isystem` and :option:`-idirafter` options also mark the directory
   as a system directory, so that it gets the same special treatment that
   is applied to the standard system directories.
-  See :ref:`system-headers`.
+
+  .. only:: cpp
+
+    See :ref:`system-headers`.
+
 
   If a standard system include directory, or a directory specified with
   :option:`-isystem`, is also specified with :option:`-I`, the :option:`-I`
@@ -57,7 +65,11 @@
   changed.
   If you really need to change the search order for system directories,
   use the :option:`-nostdinc` and/or :option:`-isystem` options.
-  See :ref:`system-headers`.
+
+  .. only:: cpp
+
+    See :ref:`system-headers`.
+
 
 .. option:: -I-
 
@@ -76,7 +88,11 @@
   In addition, :option:`-I-` inhibits the use of the directory of the current
   file directory as the first search directory for ``#include
   "file"``.  There is no way to override this effect of :option:`-I-`.
-  See :ref:`search-path`.
+
+  .. only:: cpp
+
+    See :ref:`search-path`.
+
 
 .. option:: -iprefix prefix, -iprefix
 
diff --git a/sphinx/share/cppenv.rst b/sphinx/share/cppenv.rst
index 28ac2d5..22ee100 100644
--- a/sphinx/share/cppenv.rst
+++ b/sphinx/share/cppenv.rst
@@ -25,7 +25,9 @@
   :envvar:`CPATH` is ``:/special/include``, that has the same
   effect as :samp:`-I. -I/special/include`.
 
-  See also Search Path.
+  .. only:: cpp
+
+    See also Search Path.
 
 .. envvar:: DEPENDENCIES_OUTPUTDEPENDENCIES_OUTPUT
 
@@ -44,7 +46,15 @@
 
   In other words, this environment variable is equivalent to combining
   the options :option:`-MM` and :option:`-MF`
-  (see :ref:`invocation`),
+
+  .. only:: cpp
+
+    (see :ref:`invocation`),
+
+  .. only:: not cpp
+
+    (see :ref:`preprocessor-options`),
+
   with an optional :option:`-MT` switch too.
 
 .. envvar:: SUNPRO_DEPENDENCIESSUNPRO_DEPENDENCIES
@@ -55,7 +65,14 @@
   except that system header files are not ignored, so it implies
   :option:`-M` rather than :option:`-MM`.  However, the dependence on the
   main input file is omitted.
-  See :ref:`invocation`.
+
+  .. only:: cpp
+
+    See :ref:`invocation`.
+
+  .. only:: not cpp
+
+    See :ref:`preprocessor-options`.
 
 .. envvar:: SOURCE_DATE_EPOCHSOURCE_DATE_EPOCH
 
diff --git a/sphinx/share/cppopts.rst b/sphinx/share/cppopts.rst
index 67885c8..0ed71d2 100644
--- a/sphinx/share/cppopts.rst
+++ b/sphinx/share/cppopts.rst
@@ -54,7 +54,10 @@
 
   Do not predefine any system-specific or GCC-specific macros.  The
   standard predefined macros remain defined.
-  See :ref:`standard-predefined-macros`.
+
+  .. only:: cpp
+
+    See :ref:`standard-predefined-macros`.
 
 .. option:: -pthread
 
@@ -238,7 +241,10 @@
 
   .. _fdollars-in-identifiers:
   Accept :samp:`$` in identifiers.
-  See :ref:`identifier-characters`.
+
+  .. only:: cpp
+
+    See :ref:`identifier-characters`.
 
 .. option:: -fextended-identifiers
 
@@ -322,6 +328,34 @@
   precedence if there's a conflict.  :samp:`{charset}` can be any encoding
   supported by the system's ``iconv`` library routine.
 
+.. only:: not cpp
+
+  .. option:: -fpch-deps
+
+    When using precompiled headers (see :ref:`precompiled-headers`), this flag
+    causes the dependency-output flags to also list the files from the
+    precompiled header's dependencies.  If not specified, only the
+    precompiled header are listed and not the files that were used to
+    create it, because those files are not consulted when a precompiled
+    header is used.
+
+  .. option:: -fpch-preprocess
+
+    This option allows use of a precompiled header (see :ref:`precompiled-headers`) together with :option:`-E`.  It inserts a special ``#pragma``,
+    ``#pragma GCC pch_preprocess "filename"`` in the output to mark
+    the place where the precompiled header was found, and its :samp:`{filename}`.
+    When :option:`-fpreprocessed` is in use, GCC recognizes this ``#pragma``
+    and loads the PCH.
+
+    This option is off by default, because the resulting preprocessed output
+    is only really suitable as input to GCC.  It is switched on by
+    :option:`-save-temps`.
+
+    You should not write this ``#pragma`` in your own code, but it is
+    safe to edit the filename if the PCH file is available in a different
+    location.  The filename may be absolute or it may be relative to GCC's
+    current directory.
+
 .. option:: -fworking-directory, -fno-working-directory
 
   Enable generation of linemarkers in the preprocessor output that
@@ -343,7 +377,10 @@
   :samp:`{answer}`.  This form is preferred to the older form :option:`-A
   `:samp:`{predicate}` ( :samp:`{answer}` ), which is still supported, because
   it does not use shell special characters.
-  See :ref:`obsolete-features`.
+
+  .. only:: cpp
+
+    See :ref:`obsolete-features`.
 
 :samp:`-A -{predicate}={answer}`
   Cancel an assertion with the predicate :samp:`{predicate}` and answer
@@ -381,7 +418,10 @@
   This might be useful when running the preprocessor on something that is
   not C code, and will be sent to a program which might be confused by the
   linemarkers.
-  See :ref:`preprocessor-output`.
+
+  .. only:: cpp
+
+    See :ref:`preprocessor-output`.
 
   .. index:: traditional C language
 
@@ -391,7 +431,14 @@
 
   Try to imitate the behavior of pre-standard C preprocessors, as
   opposed to ISO C preprocessors.
-  See :ref:`traditional-mode`.
+
+  .. only:: cpp
+
+    See :ref:`traditional-mode`.
+
+  .. only:: not cpp
+
+    See the GNU CPP manual for details.
 
   Note that GCC does not otherwise attempt to emulate a pre-standard 
   C compiler, and these options are only supported with the :option:`-E` 
@@ -404,7 +451,19 @@
   are defined by ISO C to stand for single characters.  For example,
   :samp:`??/` stands for :samp:`\`, so :samp:`'??/n'` is a character
   constant for a newline.
-  See :ref:`initial-processing`.
+
+  .. only:: cpp
+
+    See :ref:`initial-processing`.
+
+  .. only:: not cpp
+
+    The nine trigraphs and their replacements are
+
+    .. code-block:: c++
+
+      Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-
+      Replacement:      [    ]    {    }    #    \    ^    |    ~
 
   By default, GCC ignores trigraphs, but in
   standard-conforming modes it converts them.  See the :option:`-std` and
@@ -432,6 +491,10 @@
   are silently ignored.  If you specify :samp:`{letters}` whose behavior
   conflicts, the result is undefined.
 
+  .. only:: not cpp
+
+    See :ref:`developer-options`, for more information.
+
   .. option:: -dM
 
     Instead of the normal output, generate a list of :samp:`#define`
@@ -446,6 +509,12 @@
 
     shows all the predefined macros.
 
+    .. only:: cpp
+
+      If you use :option:`-dM` without the :option:`-E` option, :option:`-dM` is
+      interpreted as a synonym for :option:`-fdump-rtl-mach`.
+      See :ref:`developer-options`.
+
   .. option:: -dD
 
     Like :option:`-dM` except in two respects: it does *not* include the
diff --git a/sphinx/share/md.rst b/sphinx/share/md.rst
index 089a995..3f2c94e 100644
--- a/sphinx/share/md.rst
+++ b/sphinx/share/md.rst
@@ -163,10 +163,17 @@ g
   .. index:: X in constraint
 
 X
-  Any operand whatsoever is allowed, even if it does not satisfy
-  ``general_operand``.  This is normally used in the constraint of
-  a ``match_scratch`` when certain alternatives will not actually
-  require a scratch register.
+
+  .. only:: gccint
+
+    Any operand whatsoever is allowed, even if it does not satisfy
+    ``general_operand``.  This is normally used in the constraint of
+    a ``match_scratch`` when certain alternatives will not actually
+    require a scratch register.
+
+  .. only:: not gccint
+
+    Any operand whatsoever is allowed.
 
   .. index:: 0 in constraint
 
@@ -190,8 +197,17 @@ X
 
   This is called a :dfn:`matching constraint` and what it really means is
   that the assembler has only a single operand that fills two roles
-  considered separate in the RTL insn.  For example, an add insn has two
-  input operands and one output operand in the RTL, but on most CISC
+
+  .. only:: gccint
+
+    considered separate in the RTL insn.  For example, an add insn has two
+    input operands and one output operand in the RTL, but on most CISC
+
+  .. only:: not gccint
+
+    which ``asm`` distinguishes.  For example, an add instruction uses
+    two input operands and an output operand, but on most CISC
+
   machines an add instruction really has only two operands, one of them an
   input-output operand:
 
@@ -205,12 +221,14 @@ X
   smaller number than the number of the operand that uses it in the
   constraint.
 
-  For operands to match in a particular case usually means that they
-  are identical-looking RTL expressions.  But in a few special cases
-  specific kinds of dissimilarity are allowed.  For example, ``*x``
-  as an input operand will match ``*x++`` as an output operand.
-  For proper results in such cases, the output template should always
-  use the output-operand's number when printing the operand.
+  .. only:: gccint
+
+    For operands to match in a particular case usually means that they
+    are identical-looking RTL expressions.  But in a few special cases
+    specific kinds of dissimilarity are allowed.  For example, ``*x``
+    as an input operand will match ``*x++`` as an output operand.
+    For proper results in such cases, the output template should always
+    use the output-operand's number when printing the operand.
 
   .. index:: load address instruction
 
@@ -241,123 +259,140 @@ other-letters
   :samp:`d`, :samp:`a` and :samp:`f` are defined on the 68000/68020 to stand
   for data, address and floating point registers.
 
+.. only:: gccint
+
   In order to have valid assembler code, each operand must satisfy
-its constraint.  But a failure to do so does not prevent the pattern
-from applying to an insn.  Instead, it directs the compiler to modify
-the code so that the constraint will be satisfied.  Usually this is
-done by copying an operand into a register.
-
-Contrast, therefore, the two instruction patterns that follow:
-
-.. code-block:: c++
-
-  (define_insn ""
-    [(set (match_operand:SI 0 "general_operand" "=r")
-          (plus:SI (match_dup 0)
-                   (match_operand:SI 1 "general_operand" "r")))]
-    ""
-    "...")
-
-which has two operands, one of which must appear in two places, and
-
-.. code-block:: c++
-
-  (define_insn ""
-    [(set (match_operand:SI 0 "general_operand" "=r")
-          (plus:SI (match_operand:SI 1 "general_operand" "0")
-                   (match_operand:SI 2 "general_operand" "r")))]
-    ""
-    "...")
-
-which has three operands, two of which are required by a constraint to be
-identical.  If we are considering an insn of the form
-
-.. code-block:: c++
-
-  (insn n prev next
-    (set (reg:SI 3)
-         (plus:SI (reg:SI 6) (reg:SI 109)))
-    ...)
-
-the first pattern would not apply at all, because this insn does not
-contain two identical subexpressions in the right place.  The pattern would
-say, 'That does not look like an add instruction; try other patterns'.
-The second pattern would say, 'Yes, that's an add instruction, but there
-is something wrong with it'.  It would direct the reload pass of the
-compiler to generate additional insns to make the constraint true.  The
-results might look like this:
-
-.. code-block:: c++
-
-  (insn n2 prev n
-    (set (reg:SI 3) (reg:SI 6))
-    ...)
-
-  (insn n n2 next
-    (set (reg:SI 3)
-         (plus:SI (reg:SI 3) (reg:SI 109)))
-    ...)
-
-It is up to you to make sure that each operand, in each pattern, has
-constraints that can handle any RTL expression that could be present for
-that operand.  (When multiple alternatives are in use, each pattern must,
-for each possible combination of operand expressions, have at least one
-alternative which can handle that combination of operands.)  The
-constraints don't need to *allow* any possible operand-when this is
-the case, they do not constrain-but they must at least point the way to
-reloading any possible operand so that it will fit.
-
-* If the constraint accepts whatever operands the predicate permits,
-  there is no problem: reloading is never necessary for this operand.
-
-  For example, an operand whose constraints permit everything except
-  registers is safe provided its predicate rejects registers.
-
-  An operand whose predicate accepts only constant values is safe
-  provided its constraints include the letter :samp:`i`.  If any possible
-  constant value is accepted, then nothing less than :samp:`i` will do;
-  if the predicate is more selective, then the constraints may also be
-  more selective.
-
-* Any operand expression can be reloaded by copying it into a register.
-  So if an operand's constraints allow some kind of register, it is
-  certain to be safe.  It need not permit all classes of registers; the
-  compiler knows how to copy a register into another register of the
-  proper class in order to make an instruction valid.
-
-  .. index:: nonoffsettable memory reference
-
-  .. index:: memory reference, nonoffsettable
-
-* A nonoffsettable memory reference can be reloaded by copying the
-  address into a register.  So if the constraint uses the letter
-  :samp:`o`, all memory references are taken care of.
-
-* A constant operand can be reloaded by allocating space in memory to
-  hold it as preinitialized data.  Then the memory reference can be used
-  in place of the constant.  So if the constraint uses the letters
-  :samp:`o` or :samp:`m`, constant operands are not a problem.
-
-* If the constraint permits a constant and a pseudo register used in an insn
-  was not allocated to a hard register and is equivalent to a constant,
-  the register will be replaced with the constant.  If the predicate does
-  not permit a constant and the insn is re-recognized for some reason, the
-  compiler will crash.  Thus the predicate must always recognize any
-  objects allowed by the constraint.
-
-If the operand's predicate can recognize registers, but the constraint does
-not permit them, it can make the compiler crash.  When this operand happens
-to be a register, the reload pass will be stymied, because it does not know
-how to copy a register temporarily into memory.
-
-If the predicate accepts a unary operator, the constraint applies to the
-operand.  For example, the MIPS processor at ISA level 3 supports an
-instruction which adds two registers in ``SImode`` to produce a
-``DImode`` result, but only if the registers are correctly sign
-extended.  This predicate for the input operands accepts a
-``sign_extend`` of an ``SImode`` register.  Write the constraint
-to indicate the type of register that is required for the operand of the
-``sign_extend``.
+  its constraint.  But a failure to do so does not prevent the pattern
+  from applying to an insn.  Instead, it directs the compiler to modify
+  the code so that the constraint will be satisfied.  Usually this is
+  done by copying an operand into a register.
+
+  Contrast, therefore, the two instruction patterns that follow:
+
+  .. code-block:: c++
+
+    (define_insn ""
+      [(set (match_operand:SI 0 "general_operand" "=r")
+            (plus:SI (match_dup 0)
+                     (match_operand:SI 1 "general_operand" "r")))]
+      ""
+      "...")
+
+  which has two operands, one of which must appear in two places, and
+
+  .. code-block:: c++
+
+    (define_insn ""
+      [(set (match_operand:SI 0 "general_operand" "=r")
+            (plus:SI (match_operand:SI 1 "general_operand" "0")
+                     (match_operand:SI 2 "general_operand" "r")))]
+      ""
+      "...")
+
+  which has three operands, two of which are required by a constraint to be
+  identical.  If we are considering an insn of the form
+
+  .. code-block:: c++
+
+    (insn n prev next
+      (set (reg:SI 3)
+           (plus:SI (reg:SI 6) (reg:SI 109)))
+      ...)
+
+  the first pattern would not apply at all, because this insn does not
+  contain two identical subexpressions in the right place.  The pattern would
+  say, 'That does not look like an add instruction; try other patterns'.
+  The second pattern would say, 'Yes, that's an add instruction, but there
+  is something wrong with it'.  It would direct the reload pass of the
+  compiler to generate additional insns to make the constraint true.  The
+  results might look like this:
+
+  .. code-block:: c++
+
+    (insn n2 prev n
+      (set (reg:SI 3) (reg:SI 6))
+      ...)
+
+    (insn n n2 next
+      (set (reg:SI 3)
+           (plus:SI (reg:SI 3) (reg:SI 109)))
+      ...)
+
+  It is up to you to make sure that each operand, in each pattern, has
+  constraints that can handle any RTL expression that could be present for
+  that operand.  (When multiple alternatives are in use, each pattern must,
+  for each possible combination of operand expressions, have at least one
+  alternative which can handle that combination of operands.)  The
+  constraints don't need to *allow* any possible operand-when this is
+  the case, they do not constrain-but they must at least point the way to
+  reloading any possible operand so that it will fit.
+
+  * If the constraint accepts whatever operands the predicate permits,
+    there is no problem: reloading is never necessary for this operand.
+
+    For example, an operand whose constraints permit everything except
+    registers is safe provided its predicate rejects registers.
+
+    An operand whose predicate accepts only constant values is safe
+    provided its constraints include the letter :samp:`i`.  If any possible
+    constant value is accepted, then nothing less than :samp:`i` will do;
+    if the predicate is more selective, then the constraints may also be
+    more selective.
+
+  * Any operand expression can be reloaded by copying it into a register.
+    So if an operand's constraints allow some kind of register, it is
+    certain to be safe.  It need not permit all classes of registers; the
+    compiler knows how to copy a register into another register of the
+    proper class in order to make an instruction valid.
+
+    .. index:: nonoffsettable memory reference
+
+    .. index:: memory reference, nonoffsettable
+
+  * A nonoffsettable memory reference can be reloaded by copying the
+    address into a register.  So if the constraint uses the letter
+    :samp:`o`, all memory references are taken care of.
+
+  * A constant operand can be reloaded by allocating space in memory to
+    hold it as preinitialized data.  Then the memory reference can be used
+    in place of the constant.  So if the constraint uses the letters
+    :samp:`o` or :samp:`m`, constant operands are not a problem.
+
+  * If the constraint permits a constant and a pseudo register used in an insn
+    was not allocated to a hard register and is equivalent to a constant,
+    the register will be replaced with the constant.  If the predicate does
+    not permit a constant and the insn is re-recognized for some reason, the
+    compiler will crash.  Thus the predicate must always recognize any
+    objects allowed by the constraint.
+
+  If the operand's predicate can recognize registers, but the constraint does
+  not permit them, it can make the compiler crash.  When this operand happens
+  to be a register, the reload pass will be stymied, because it does not know
+  how to copy a register temporarily into memory.
+
+  If the predicate accepts a unary operator, the constraint applies to the
+  operand.  For example, the MIPS processor at ISA level 3 supports an
+  instruction which adds two registers in ``SImode`` to produce a
+  ``DImode`` result, but only if the registers are correctly sign
+  extended.  This predicate for the input operands accepts a
+  ``sign_extend`` of an ``SImode`` register.  Write the constraint
+  to indicate the type of register that is required for the operand of the
+  ``sign_extend``.
+
+.. only:: not gccint
+
+  So the first alternative for the 68000's logical-or could be written as 
+  ``"+m" (output) : "ir" (input)``.  The second could be ``"+r" 
+  (output): "irm" (input)``.  However, the fact that two memory locations 
+  cannot be used in a single instruction prevents simply using ``"+rm" 
+  (output) : "irm" (input)``.  Using multi-alternatives, this might be 
+  written as ``"+m,r" (output) : "ir,irm" (input)``.  This describes
+  all the available alternatives to the compiler, allowing it to choose 
+  the most efficient one for the current conditions.
+
+  There is no way within the template to determine which alternative was 
+  chosen.  However you may be able to wrap your ``asm`` statements with 
+  builtins such as ``__builtin_constant_p`` to achieve the desired results.
 
 .. _multi-alternative:
 
@@ -379,95 +414,100 @@ from the first alternative, a comma, the letters for this operand from
 the second alternative, a comma, and so on until the last alternative.
 All operands for a single instruction must have the same number of 
 alternatives.
-Here is how it is done for fullword logical-or on the 68000:
 
-.. code-block:: c++
+.. only:: gccint
+
+  Here is how it is done for fullword logical-or on the 68000:
 
-  (define_insn "iorsi3"
-    [(set (match_operand:SI 0 "general_operand" "=m,d")
-          (ior:SI (match_operand:SI 1 "general_operand" "%0,0")
-                  (match_operand:SI 2 "general_operand" "dKs,dmKs")))]
-    ...)
+  .. code-block:: c++
+
+    (define_insn "iorsi3"
+      [(set (match_operand:SI 0 "general_operand" "=m,d")
+            (ior:SI (match_operand:SI 1 "general_operand" "%0,0")
+                    (match_operand:SI 2 "general_operand" "dKs,dmKs")))]
+      ...)
 
-The first alternative has :samp:`m` (memory) for operand 0, :samp:`0` for
-operand 1 (meaning it must match operand 0), and :samp:`dKs` for operand
-2.  The second alternative has :samp:`d` (data register) for operand 0,
-:samp:`0` for operand 1, and :samp:`dmKs` for operand 2.  The :samp:`=` and
-:samp:`%` in the constraints apply to all the alternatives; their
-meaning is explained in the next section (see :ref:`class-preferences`).
+  The first alternative has :samp:`m` (memory) for operand 0, :samp:`0` for
+  operand 1 (meaning it must match operand 0), and :samp:`dKs` for operand
+  2.  The second alternative has :samp:`d` (data register) for operand 0,
+  :samp:`0` for operand 1, and :samp:`dmKs` for operand 2.  The :samp:`=` and
+  :samp:`%` in the constraints apply to all the alternatives; their
+  meaning is explained in the next section (see :ref:`class-preferences`).
 
-If all the operands fit any one alternative, the instruction is valid.
-Otherwise, for each alternative, the compiler counts how many instructions
-must be added to copy the operands so that that alternative applies.
-The alternative requiring the least copying is chosen.  If two alternatives
-need the same amount of copying, the one that comes first is chosen.
-These choices can be altered with the :samp:`?` and :samp:`!` characters:
+  If all the operands fit any one alternative, the instruction is valid.
+  Otherwise, for each alternative, the compiler counts how many instructions
+  must be added to copy the operands so that that alternative applies.
+  The alternative requiring the least copying is chosen.  If two alternatives
+  need the same amount of copying, the one that comes first is chosen.
+  These choices can be altered with the :samp:`?` and :samp:`!` characters:
 
-.. index:: ? in constraint
+  .. index:: ? in constraint
 
-.. index:: question mark
+  .. index:: question mark
 
-``?``
-  Disparage slightly the alternative that the :samp:`?` appears in,
-  as a choice when no alternative applies exactly.  The compiler regards
-  this alternative as one unit more costly for each :samp:`?` that appears
-  in it.
+  ``?``
+    Disparage slightly the alternative that the :samp:`?` appears in,
+    as a choice when no alternative applies exactly.  The compiler regards
+    this alternative as one unit more costly for each :samp:`?` that appears
+    in it.
 
-  .. index:: ! in constraint
+    .. index:: ! in constraint
 
-  .. index:: exclamation point
+    .. index:: exclamation point
 
-``!``
-  Disparage severely the alternative that the :samp:`!` appears in.
-  This alternative can still be used if it fits without reloading,
-  but if reloading is needed, some other alternative will be used.
+  ``!``
+    Disparage severely the alternative that the :samp:`!` appears in.
+    This alternative can still be used if it fits without reloading,
+    but if reloading is needed, some other alternative will be used.
 
-  .. index:: ^ in constraint
+    .. index:: ^ in constraint
 
-  .. index:: caret
+    .. index:: caret
 
-``^``
-  This constraint is analogous to :samp:`?` but it disparages slightly
-  the alternative only if the operand with the :samp:`^` needs a reload.
+  ``^``
+    This constraint is analogous to :samp:`?` but it disparages slightly
+    the alternative only if the operand with the :samp:`^` needs a reload.
 
-  .. index:: $ in constraint
+    .. index:: $ in constraint
 
-  .. index:: dollar sign
+    .. index:: dollar sign
 
-``$``
-  This constraint is analogous to :samp:`!` but it disparages severely
-  the alternative only if the operand with the :samp:`$` needs a reload.
+  ``$``
+    This constraint is analogous to :samp:`!` but it disparages severely
+    the alternative only if the operand with the :samp:`$` needs a reload.
 
-  When an insn pattern has multiple alternatives in its constraints, often
-the appearance of the assembler code is determined mostly by which
-alternative was matched.  When this is so, the C code for writing the
-assembler code can use the variable ``which_alternative``, which is
-the ordinal number of the alternative that was actually satisfied (0 for
-the first, 1 for the second alternative, etc.).  See :ref:`output-statement`.
+    When an insn pattern has multiple alternatives in its constraints, often
+  the appearance of the assembler code is determined mostly by which
+  alternative was matched.  When this is so, the C code for writing the
+  assembler code can use the variable ``which_alternative``, which is
+  the ordinal number of the alternative that was actually satisfied (0 for
+  the first, 1 for the second alternative, etc.).  See :ref:`output-statement`.
 
 .. _class-preferences:
 
 Register Class Preferences
 ^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-.. index:: class preference constraints
+.. only:: gccint
 
-.. index:: register class preference constraints
+  .. index:: class preference constraints
 
-.. index:: voting between constraint alternatives
+  .. index:: register class preference constraints
 
-The operand constraints have another function: they enable the compiler
-to decide which kind of hardware register a pseudo register is best
-allocated to.  The compiler examines the constraints that apply to the
-insns that use the pseudo register, looking for the machine-dependent
-letters such as :samp:`d` and :samp:`a` that specify classes of registers.
-The pseudo register is put in whichever class gets the most 'votes'.
-The constraint letters :samp:`g` and :samp:`r` also vote: they vote in
-favor of a general register.  The machine description says which registers
-are considered general.
+  .. index:: voting between constraint alternatives
 
-Of course, on some machines all registers are equivalent, and no register
-classes are defined.  Then none of this complexity is relevant.
+  The operand constraints have another function: they enable the compiler
+  to decide which kind of hardware register a pseudo register is best
+  allocated to.  The compiler examines the constraints that apply to the
+  insns that use the pseudo register, looking for the machine-dependent
+  letters such as :samp:`d` and :samp:`a` that specify classes of registers.
+  The pseudo register is put in whichever class gets the most 'votes'.
+  The constraint letters :samp:`g` and :samp:`r` also vote: they vote in
+  favor of a general register.  The machine description says which registers
+  are considered general.
+
+  Of course, on some machines all registers are equivalent, and no register
+  classes are defined.  Then none of this complexity is relevant.
 
 .. _modifiers:
 
@@ -542,60 +582,65 @@ Here are constraint modifier characters.
   the first character in the constraint.  Only read-only operands can use
   :samp:`%`.
 
-  This is often used in patterns for addition instructions
-  that really have only two operands: the result must go in one of the
-  arguments.  Here for example, is how the 68000 halfword-add
-  instruction is defined:
+  .. only:: gccint
 
-  .. code-block:: c++
+    This is often used in patterns for addition instructions
+    that really have only two operands: the result must go in one of the
+    arguments.  Here for example, is how the 68000 halfword-add
+    instruction is defined:
 
-    (define_insn "addhi3"
-      [(set (match_operand:HI 0 "general_operand" "=m,r")
-         (plus:HI (match_operand:HI 1 "general_operand" "%0,0")
-                  (match_operand:HI 2 "general_operand" "di,g")))]
-      ...)
+    .. code-block:: c++
+
+      (define_insn "addhi3"
+        [(set (match_operand:HI 0 "general_operand" "=m,r")
+           (plus:HI (match_operand:HI 1 "general_operand" "%0,0")
+                    (match_operand:HI 2 "general_operand" "di,g")))]
+        ...)
 
   GCC can only handle one commutative pair in an asm; if you use more,
   the compiler may fail.  Note that you need not use the modifier if
   the two alternatives are strictly identical; this would only waste
   time in the reload pass.
-  The modifier is not operational after
-  register allocation, so the result of ``define_peephole2``
-  and ``define_split`` s performed after reload cannot rely on
-  :samp:`%` to make the intended insn match.
-
-  .. index:: # in constraint
-
-:samp:`#`
-  Says that all following characters, up to the next comma, are to be
-  ignored as a constraint.  They are significant only for choosing
-  register preferences.
-
-  .. index:: * in constraint
-
-:samp:`*`
-  Says that the following character should be ignored when choosing
-  register preferences.  :samp:`*` has no effect on the meaning of the
-  constraint as a constraint, and no effect on reloading.  For LRA
-  :samp:`*` additionally disparages slightly the alternative if the
-  following character matches the operand.
-
-  Here is an example: the 68000 has an instruction to sign-extend a
-  halfword in a data register, and can also sign-extend a value by
-  copying it into an address register.  While either kind of register is
-  acceptable, the constraints on an address-register destination are
-  less strict, so it is best if register allocation makes an address
-  register its goal.  Therefore, :samp:`*` is used so that the :samp:`d`
-  constraint letter (for data register) is ignored when computing
-  register preferences.
 
-  .. code-block:: c++
+  .. only:: gccint
 
-    (define_insn "extendhisi2"
-      [(set (match_operand:SI 0 "general_operand" "=*d,a")
-            (sign_extend:SI
-             (match_operand:HI 1 "general_operand" "0,g")))]
-      ...)
+    The modifier is not operational after
+    register allocation, so the result of ``define_peephole2``
+    and ``define_split`` s performed after reload cannot rely on
+    :samp:`%` to make the intended insn match.
+
+    .. index:: # in constraint
+
+  :samp:`#`
+    Says that all following characters, up to the next comma, are to be
+    ignored as a constraint.  They are significant only for choosing
+    register preferences.
+
+    .. index:: * in constraint
+
+  :samp:`*`
+    Says that the following character should be ignored when choosing
+    register preferences.  :samp:`*` has no effect on the meaning of the
+    constraint as a constraint, and no effect on reloading.  For LRA
+    :samp:`*` additionally disparages slightly the alternative if the
+    following character matches the operand.
+
+    Here is an example: the 68000 has an instruction to sign-extend a
+    halfword in a data register, and can also sign-extend a value by
+    copying it into an address register.  While either kind of register is
+    acceptable, the constraints on an address-register destination are
+    less strict, so it is best if register allocation makes an address
+    register its goal.  Therefore, :samp:`*` is used so that the :samp:`d`
+    constraint letter (for data register) is ignored when computing
+    register preferences.
+
+    .. code-block:: c++
+
+      (define_insn "extendhisi2"
+        [(set (match_operand:SI 0 "general_operand" "=*d,a")
+              (sign_extend:SI
+               (match_operand:HI 1 "general_operand" "0,g")))]
+        ...)
 
   .. _machine-constraints:
 
@@ -1141,11 +1186,13 @@ the meanings of that architecture's constraints.
     A memory address which uses a base register with a index register
     with its scale.
 
+  .. only:: gccint
+
     The C-SKY back end supports a large set of additional constraints
-  that are only useful for instruction selection or splitting rather
-  than inline asm, such as constraints representing constant integer
-  ranges accepted by particular instruction encodings.
-  Refer to the source code for details.
+    that are only useful for instruction selection or splitting rather
+    than inline asm, such as constraints representing constant integer
+    ranges accepted by particular instruction encodings.
+    Refer to the source code for details.
 
 :samp:`Epiphany-{config/epiphany/constraints.md}`
 
@@ -1198,9 +1245,11 @@ the meanings of that architecture's constraints.
     This constraint does not use a register class, so that it only
     passively matches suitable registers, and doesn't drive register allocation.
 
-  ``Car``
-    Constant suitable for the addsi3_r pattern.  This is a valid offset
-    For byte, halfword, or word addressing.
+  .. only:: gccint
+
+    ``Car``
+      Constant suitable for the addsi3_r pattern.  This is a valid offset
+      For byte, halfword, or word addressing.
 
   ``Rra``
     Matches the return address if it can be replaced with the link register.
@@ -1984,9 +2033,11 @@ the meanings of that architecture's constraints.
     A memory operand suitable for load/store IO and cache
     instructions.
 
-  ``T``
-    A ``const`` wrapped ``UNSPEC`` expression,
-    representing a supported PIC or TLS relocation.
+  .. only:: gccint
+
+    ``T``
+      A ``const`` wrapped ``UNSPEC`` expression,
+      representing a supported PIC or TLS relocation.
 
 :samp:`OpenRISC-{config/or1k/constraints.md}`
 
@@ -2006,8 +2057,10 @@ the meanings of that architecture's constraints.
   ``O``
     Zero
 
-  ``c``
-    Register usable for sibcalls.
+  .. only:: gccint
+
+    ``c``
+      Register usable for sibcalls.
 
 :samp:`PDP-11-{config/pdp11/constraints.md}`
 
@@ -2106,8 +2159,11 @@ the meanings of that architecture's constraints.
            : "=v" (v1)
            : "v" (v2), "v" (v3));
 
-  ``h``
-    A special register ( ``vrsave``, ``ctr``, or ``lr`` ).
+
+  .. only:: gccint
+
+    ``h``
+      A special register ( ``vrsave``, ``ctr``, or ``lr`` ).
 
   ``c``
     The count register, ``ctr``.
@@ -2121,57 +2177,59 @@ the meanings of that architecture's constraints.
   ``y``
     Any condition register field, ``cr0``... ``cr7``.
 
-  ``z``
-    The carry bit, ``XER[CA]``.
+  .. only:: gccint
+
+    ``z``
+      The carry bit, ``XER[CA]``.
 
-  ``we``
-    Like ``wa``, if :option:`-mpower9-vector` and :option:`-m64` are used;
-    otherwise, ``NO_REGS``.
+    ``we``
+      Like ``wa``, if :option:`-mpower9-vector` and :option:`-m64` are used;
+      otherwise, ``NO_REGS``.
 
-  ``wn``
-    No register ( ``NO_REGS`` ).
+    ``wn``
+      No register ( ``NO_REGS`` ).
 
-  ``wr``
-    Like ``r``, if :option:`-mpowerpc64` is used; otherwise, ``NO_REGS``.
+    ``wr``
+      Like ``r``, if :option:`-mpowerpc64` is used; otherwise, ``NO_REGS``.
 
-  ``wx``
-    Like ``d``, if :option:`-mpowerpc-gfxopt` is used; otherwise, ``NO_REGS``.
+    ``wx``
+      Like ``d``, if :option:`-mpowerpc-gfxopt` is used; otherwise, ``NO_REGS``.
 
-  ``wA``
-    Like ``b``, if :option:`-mpowerpc64` is used; otherwise, ``NO_REGS``.
+    ``wA``
+      Like ``b``, if :option:`-mpowerpc64` is used; otherwise, ``NO_REGS``.
 
-  ``wB``
-    Signed 5-bit constant integer that can be loaded into an Altivec register.
+    ``wB``
+      Signed 5-bit constant integer that can be loaded into an Altivec register.
 
-  ``wD``
-    Int constant that is the element number of the 64-bit scalar in a vector.
+    ``wD``
+      Int constant that is the element number of the 64-bit scalar in a vector.
 
-  ``wE``
-    Vector constant that can be loaded with the XXSPLTIB instruction.
+    ``wE``
+      Vector constant that can be loaded with the XXSPLTIB instruction.
 
-  ``wF``
-    Memory operand suitable for power8 GPR load fusion.
+    ``wF``
+      Memory operand suitable for power8 GPR load fusion.
 
-  ``wL``
-    Int constant that is the element number mfvsrld accesses in a vector.
+    ``wL``
+      Int constant that is the element number mfvsrld accesses in a vector.
 
-  ``wM``
-    Match vector constant with all 1's if the XXLORC instruction is available.
+    ``wM``
+      Match vector constant with all 1's if the XXLORC instruction is available.
 
-  ``wO``
-    Memory operand suitable for the ISA 3.0 vector d-form instructions.
+    ``wO``
+      Memory operand suitable for the ISA 3.0 vector d-form instructions.
 
-  ``wQ``
-    Memory operand suitable for the load/store quad instructions.
+    ``wQ``
+      Memory operand suitable for the load/store quad instructions.
 
-  ``wS``
-    Vector constant that can be loaded with XXSPLTIB & sign extension.
+    ``wS``
+      Vector constant that can be loaded with XXSPLTIB & sign extension.
 
-  ``wY``
-    A memory operand for a DS-form instruction.
+    ``wY``
+      A memory operand for a DS-form instruction.
 
-  ``wZ``
-    An indexed or indirect memory operand, ignoring the bottom 4 bits.
+    ``wZ``
+      An indexed or indirect memory operand, ignoring the bottom 4 bits.
 
   ``I``
     A signed 16-bit constant.
@@ -2186,28 +2244,32 @@ the meanings of that architecture's constraints.
   ``L``
     A signed 16-bit constant shifted left 16 bits.
 
-  ``M``
-    An integer constant greater than 31.
+  .. only:: gccint
 
-  ``N``
-    An exact power of 2.
+    ``M``
+      An integer constant greater than 31.
 
-  ``O``
-    The integer constant zero.
+    ``N``
+      An exact power of 2.
 
-  ``P``
-    A constant whose negation is a signed 16-bit constant.
+    ``O``
+      The integer constant zero.
+
+    ``P``
+      A constant whose negation is a signed 16-bit constant.
 
   ``eI``
     A signed 34-bit integer constant if prefixed instructions are supported.
 
-  ``G``
-    A floating point constant that can be loaded into a register with one
-    instruction per word.
+  .. only:: gccint
 
-  ``H``
-    A floating point constant that can be loaded into a register using
-    three instructions.
+    ``G``
+      A floating point constant that can be loaded into a register with one
+      instruction per word.
+
+    ``H``
+      A floating point constant that can be loaded into a register using
+      three instructions.
 
   ``m``
     A memory operand.
@@ -2231,36 +2293,44 @@ the meanings of that architecture's constraints.
 
     is not.
 
-  ``es``
-    A 'stable' memory operand; that is, one which does not include any
-    automodification of the base register.  This used to be useful when
-    ``m`` allowed automodification of the base register, but as those
-    are now only allowed when ``<`` or ``>`` is used, ``es`` is
-    basically the same as ``m`` without ``<`` and ``>``.
+  .. only:: gccint
+
+    ``es``
+      A 'stable' memory operand; that is, one which does not include any
+      automodification of the base register.  This used to be useful when
+      ``m`` allowed automodification of the base register, but as those
+      are now only allowed when ``<`` or ``>`` is used, ``es`` is
+      basically the same as ``m`` without ``<`` and ``>``.
 
   ``Q``
     A memory operand addressed by just a base register.
 
-  ``Y``
-    A memory operand for a DQ-form instruction.
+  .. only:: gccint
+
+    ``Y``
+      A memory operand for a DQ-form instruction.
 
   ``Z``
     A memory operand accessed with indexed or indirect addressing.
 
-  ``R``
-    An AIX TOC entry.
+  .. only:: gccint
+
+    ``R``
+      An AIX TOC entry.
 
   ``a``
     An indexed or indirect address.
 
-  ``U``
-    A V.4 small data reference.
+  .. only:: gccint
 
-  ``W``
-    A vector constant that does not require memory.
+    ``U``
+      A V.4 small data reference.
+
+    ``W``
+      A vector constant that does not require memory.
 
-  ``j``
-    The zero vector constant.
+    ``j``
+      The zero vector constant.
 
 :samp:`PRU-{config/pru/constraints.md}`
 
@@ -2682,20 +2752,22 @@ the meanings of that architecture's constraints.
   ``R``
     Memory location with B base register.
 
-  ``S0``
-    On C64x+ targets, a GP-relative small data reference.
+  .. only:: gccint
 
-  ``S1``
-    Any kind of ``SYMBOL_REF``, for use in a call address.
+    ``S0``
+      On C64x+ targets, a GP-relative small data reference.
 
-  ``Si``
-    Any kind of immediate operand, unless it matches the S0 constraint.
+    ``S1``
+      Any kind of ``SYMBOL_REF``, for use in a call address.
 
-  ``T``
-    Memory location with B base register, but not using a long offset.
+    ``Si``
+      Any kind of immediate operand, unless it matches the S0 constraint.
 
-  ``W``
-    A memory operand with an address that cannot be used in an unaligned access.
+    ``T``
+      Memory location with B base register, but not using a long offset.
+
+    ``W``
+      A memory operand with an address that cannot be used in an unaligned access.
 
   ``Z``
     Register B14 (aka DP).
@@ -2835,8 +2907,10 @@ the meanings of that architecture's constraints.
   ``f``
     Floating point register
 
-  ``k``
-    Register for sibcall optimization
+  .. only:: gccint
+
+    ``k``
+      Register for sibcall optimization
 
   ``l``
     General register, but not ``r29``, ``r30`` and ``r31``
@@ -2886,9 +2960,11 @@ the meanings of that architecture's constraints.
     Any register accessible as ``rh`` : ``a``, ``b``,
     ``c``, and ``d``.
 
-  ``l``
-    Any register that can be used as the index in a base+index memory
-    access: that is, any general register except the stack pointer.
+  .. only:: gccint
+
+    ``l``
+      Any register that can be used as the index in a base+index memory
+      access: that is, any general register except the stack pointer.
 
   ``a``
     The ``a`` register.
@@ -2947,11 +3023,13 @@ the meanings of that architecture's constraints.
   ``u``
     Second from top of 80387 floating-point stack ( ``%st(1)`` ).
 
-  ``Yk``
-    Any mask register that can be used as a predicate, i.e. ``k1-k7``.
+  .. only:: gccint
 
-  ``k``
-    Any mask register.
+    ``Yk``
+      Any mask register that can be used as a predicate, i.e. ``k1-k7``.
+
+    ``k``
+      Any mask register.
 
   ``y``
     Any MMX register.
@@ -2962,61 +3040,65 @@ the meanings of that architecture's constraints.
   ``v``
     Any EVEX encodable SSE register ( ``%xmm0-%xmm31`` ).
 
-  ``w``
-    Any bound register.
+  .. only:: gccint
+
+    ``w``
+      Any bound register.
 
   ``Yz``
     First SSE register ( ``%xmm0`` ).
 
-  ``Yi``
-    Any SSE register, when SSE2 and inter-unit moves are enabled.
+  .. only:: gccint
 
-  ``Yj``
-    Any SSE register, when SSE2 and inter-unit moves from vector registers are enabled.
+    ``Yi``
+      Any SSE register, when SSE2 and inter-unit moves are enabled.
 
-  ``Ym``
-    Any MMX register, when inter-unit moves are enabled.
+    ``Yj``
+      Any SSE register, when SSE2 and inter-unit moves from vector registers are enabled.
 
-  ``Yn``
-    Any MMX register, when inter-unit moves from vector registers are enabled.
+    ``Ym``
+      Any MMX register, when inter-unit moves are enabled.
 
-  ``Yp``
-    Any integer register when ``TARGET_PARTIAL_REG_STALL`` is disabled.
+    ``Yn``
+      Any MMX register, when inter-unit moves from vector registers are enabled.
 
-  ``Ya``
-    Any integer register when zero extensions with ``AND`` are disabled.
+    ``Yp``
+      Any integer register when ``TARGET_PARTIAL_REG_STALL`` is disabled.
+
+    ``Ya``
+      Any integer register when zero extensions with ``AND`` are disabled.
 
-  ``Yb``
-    Any register that can be used as the GOT base when calling
+    ``Yb``
+      Any register that can be used as the GOT base when calling
 
-    ``___tls_get_addr`` : that is, any general register except ``a``
-    and ``sp`` registers, for :option:`-fno-plt` if linker supports it.
-    Otherwise, ``b`` register.
+      ``___tls_get_addr`` : that is, any general register except ``a``
+      and ``sp`` registers, for :option:`-fno-plt` if linker supports it.
+      Otherwise, ``b`` register.
 
-  ``Yf``
-    Any x87 register when 80387 floating-point arithmetic is enabled.
+    ``Yf``
+      Any x87 register when 80387 floating-point arithmetic is enabled.
 
-  ``Yr``
-    Lower SSE register when avoiding REX prefix and all SSE registers otherwise.
+    ``Yr``
+      Lower SSE register when avoiding REX prefix and all SSE registers otherwise.
 
-  ``Yv``
-    For AVX512VL, any EVEX-encodable SSE register ( ``%xmm0-%xmm31`` ),
-    otherwise any SSE register.
+    ``Yv``
+      For AVX512VL, any EVEX-encodable SSE register ( ``%xmm0-%xmm31`` ),
+      otherwise any SSE register.
 
-  ``Yh``
-    Any EVEX-encodable SSE register, that has number factor of four.
+    ``Yh``
+      Any EVEX-encodable SSE register, that has number factor of four.
 
-  ``Bf``
-    Flags register operand.
+    ``Bf``
+      Flags register operand.
 
-  ``Bg``
-    GOT memory operand.
+    ``Bg``
+      GOT memory operand.
 
-  ``Bm``
-    Vector memory operand.
+    ``Bm``
+      Vector memory operand.
 
-  ``Bc``
-    Constant memory operand.
+    ``Bc``
+      Constant memory operand.
 
   ``Bn``
     Memory operand without REX prefix.
@@ -3052,8 +3134,10 @@ the meanings of that architecture's constraints.
     Unsigned 8-bit integer constant (for ``in`` and ``out``
     instructions).
 
-  ``O``
-    Integer constant in the range 0 ... 127, for 128-bit shifts.
+  .. only:: gccint
+
+    ``O``
+      Integer constant in the range 0 ... 127, for 128-bit shifts.
 
   ``G``
     Standard 80387 floating point constant.
